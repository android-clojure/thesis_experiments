digraph deps {"clojure.core/short" -> "clojure.lang.RT/shortCast";
"clojure.core/bit-shift-right" -> "clojure.core/seq";
"clojure.core/with-out-str" -> "clojure.core/binding";
"clojure.core/doseq" -> "clojure.core/when";
"clojure.core/inc" -> "clojure.core/seq";
"clojure.core/->Vec" -> "clojure.lang.Util/equiv";
"clojure.core/destructure" -> "clojure.core/concat";
"clojure.core/float" -> "clojure.lang.RT/floatCast";
"clojure.core/pvalues" -> "clojure.core/concat";
"clojure.core/definline" -> "clojure.core/seq";
"clojure.core/nth" -> "clojure.core/list";
"clojure.core/with-precision" -> "clojure.core/list";
"clojure.core/double" -> "clojure.core/seq";
"clojure.core/long" -> "clojure.lang.RT/longCast";
"clojure.core/time" -> "clojure.core/list";
"clojure.core/with-out-str" -> "clojure.core/seq";
"clojure.core/doseq" -> "clojure.core/count";
"clojure.core/for" -> "clojure.core/fn";
"clojure.core/aget" -> "clojure.core/aget";
"clojure.core/import" -> "clojure.core/import*";
"clojure.core/chars" -> "clojure.core/chars";
"clojure.core/alength" -> "clojure.core/alength";
"clojure.core/num" -> "clojure.core/num";
"clojure.core/dotimes" -> "clojure.core/apply";
"clojure.core/cond" -> "clojure.core/cond";
"clojure.core/deftype" -> "clojure.core/import";
"clojure.core/shorts" -> "clojure.core/shorts";
"clojure.core/longs" -> "clojure.core/longs";
"clojure.core/future" -> "clojure.core/vector";
"clojure.core/proxy" -> "clojure.core/apply";
"clojure.core/if-not" -> "clojure.core/if-not";
"clojure.core/sync" -> "clojure.core/concat";
"clojure.core/count" -> "clojure.core/count";
"clojure.core/pos?" -> "clojure.core/list";
"clojure.core/with-open" -> "clojure.core/with-open";
"clojure.core/doubles" -> "clojure.core/doubles";
"clojure.core/doseq" -> "clojure.core/chunked-seq?";
"clojure.core/floats" -> "clojure.core/floats";
"clojure.core/sync" -> "clojure.core/apply";
"clojure.core/identical?" -> "clojure.core/seq";
"clojure.core/areduce" -> "clojure.core/alength";
"clojure.core/aclone" -> "clojure.core/aclone";
"clojure.core/delay" -> "clojure.core/with-meta";
"clojure.core/bytes" -> "clojure.core/bytes";
"clojure.core/if-let" -> "clojure.core/list";
"clojure.core/if-let" -> "clojure.core/if-let";
"clojure.core/let" -> "clojure.core/concat";
"clojure.core/dotimes" -> "clojure.core/let";
"clojure.core/nth" -> "clojure.core/nth";
"clojure.core/or" -> "clojure.core/or";
"clojure.core/set-agent-send-executor!" -> "clojure.lang.Agent/pooledExecutor";
"clojure.core/defrecord" -> "clojure.core/vector";
"clojure.core/aset" -> "clojure.core/aset";
"clojure.core/unchecked-negate" -> "clojure.core/concat";
"clojure.core/proxy" -> "clojure.core/let";
"clojure.core/dotimes" -> "clojure.core/concat";
"clojure.core/bytes" -> "clojure.core/list";
"clojure.core/compare" -> "clojure.core/compare";
"clojure.core/binding" -> "clojure.core/seq";
"clojure.core/->" -> "clojure.core/->";
"clojure.core/booleans" -> "clojure.core/booleans";
"clojure.core/ints" -> "clojure.core/ints";
"clojure.core/proxy" -> "clojure.core/concat";
"clojure.core/->>" -> "clojure.core/->>";
"clojure.core/and" -> "clojure.core/and";
"clojure.core/get" -> "clojure.core/get";
"clojure.core/reduced?" -> "clojure.core/concat";
"clojure.core/into-array" -> "clojure.lang.RT/seqToTypedArray";
"clojure.core/num" -> "clojure.core/seq";
"clojure.core/with-in-str" -> "clojure.core/with-open";
"clojure.core/with-loading-context" -> "clojure.core/vector";
"clojure.core/for" -> "clojure.core/unchecked-inc";
"clojure.core/for" -> "clojure.core/first";
"clojure.core/cond->>" -> "clojure.core/->>";
"clojure.core/doseq" -> "clojure.core/when-let";
"clojure.core/ns" -> "clojure.core/list";
"clojure.core/->Vec" -> "clojure.lang.Util/isInteger";
"clojure.core/get-thread-bindings" -> "clojure.lang.Var/getThreadBindings";
"clojure.core/float" -> "clojure.core/seq";
"clojure.core/unchecked-double" -> "clojure.core/list";
"clojure.core/unchecked-dec-int" -> "clojure.core/list";
"clojure.core/find-keyword" -> "clojure.lang.Keyword/find";
"clojure.core/cond->" -> "clojure.core/seq";
"clojure.core/neg?" -> "user/isNeg";
"clojure.core/int" -> "clojure.core/concat";
"clojure.core/unchecked-multiply-int" -> "clojure.core/list";
"clojure.core/proxy-super" -> "clojure.core/seq";
"clojure.core/bit-shift-right" -> "user/shiftRight";
"clojure.core/read-string" -> "clojure.lang.RT/readString";
"clojure.core/unchecked-int" -> "clojure.core/list";
"clojure.core/declare" -> "clojure.core/list";
"clojure.core/defstruct" -> "clojure.core/concat";
"clojure.core/defonce" -> "clojure.core/seq";
"clojure.core/case" -> "clojure.core/str";
"clojure.core/byte" -> "clojure.lang.RT/byteCast";
"clojure.core/gen-interface" -> "clojure.lang.Compiler/writeClassFile";
"clojure.core/.." -> "clojure.core/concat";
"clojure.core/rem" -> "clojure.core/concat";
"clojure.core/amap" -> "clojure.core/alength";
"clojure.core/<" -> "user/lt";
"clojure.core/defrecord" -> "clojure.core/let";
"clojure.core/unchecked-subtract" -> "clojure.core/list";
"clojure.core/double-array" -> "clojure.core/seq";
"clojure.core/memfn" -> "clojure.core/seq";
"clojure.core/chars" -> "clojure.core/seq";
"clojure.core/with-loading-context" -> "user/pushThreadBindings";
"clojure.core/defrecord" -> "clojure.core/concat";
"clojure.core/assert" -> "clojure.core/list";
"clojure.core/zero?" -> "user/isZero";
"clojure.core/for" -> "clojure.core/cons";
"clojure.core/doseq" -> "clojure.core/<";
"clojure.core/defrecord" -> "clojure.core/apply";
"clojure.core/areduce" -> "clojure.core/seq";
"clojure.core/boolean" -> "clojure.core/seq";
"clojure.core/reify" -> "clojure.core/list";
"clojure.core/with-redefs" -> "clojure.core/seq";
"clojure.core/float-array" -> "clojure.core/seq";
"clojure.core/future" -> "clojure.core/concat";
"clojure.core/when-first" -> "clojure.core/seq";
"clojure.core/with-bindings" -> "clojure.core/fn";
"clojure.core/doto" -> "clojure.core/list";
"clojure.core/unchecked-remainder-int" -> "clojure.core/seq";
"clojure.core/bit-not" -> "clojure.core/list";
"clojure.core/unchecked-byte" -> "clojure.core/seq";
"clojure.core/array-map" -> "clojure.lang.PersistentArrayMap/createAsIfByAssoc";
"clojure.core/future" -> "clojure.core/apply";
"clojure.core/doseq" -> "clojure.core/next";
"clojure.core/aclone" -> "clojure.core/list";
"clojure.core/unchecked-short" -> "clojure.core/seq";
"clojure.core/aget" -> "clojure.lang.Reflector/prepRet";
"clojure.core/unchecked-subtract-int" -> "user/unchecked_int_subtract";
"clojure.core/alength" -> "clojure.core/seq";
"clojure.core/unchecked-add" -> "clojure.core/concat";
"hello.core/-greet" -> "clojure.core/println";
"clojure.core/some->" -> "clojure.core/vector";
"clojure.core/with-in-str" -> "clojure.core/vector";
"clojure.core/future" -> "clojure.core/hash-map";
"clojure.core/definterface" -> "clojure.core/seq";
"clojure.core/<=" -> "clojure.core/seq";
"clojure.core/doubles" -> "clojure.core/concat";
"clojure.core/defstruct" -> "clojure.core/create-struct";
"clojure.core/unchecked-inc-int" -> "user/unchecked_int_inc";
"clojure.core/pop-thread-bindings" -> "clojure.lang.Var/popThreadBindings";
"clojure.core/create-ns" -> "clojure.lang.Namespace/findOrCreate";
"clojure.core/floats" -> "clojure.core/concat";
"clojure.core/with-loading-context" -> "clojure.core/concat";
"clojure.core/unchecked-multiply" -> "user/unchecked_multiply";
"clojure.core/destructure" -> "clojure.core/list";
"clojure.core/defmulti" -> "clojure.core/seq";
"clojure.core/float-array" -> "user/float_array";
"clojure.core/byte-array" -> "clojure.core/seq";
"clojure.core/zero?" -> "clojure.core/concat";
"clojure.core/<=" -> "user/lte";
"clojure.core/pvalues" -> "clojure.core/list";
"clojure.core/>" -> "user/gt";
"clojure.core/with-loading-context" -> "clojure.core/apply";
"clojure.core/deftype" -> "clojure.core/vector";
"clojure.core/amap" -> "clojure.core/seq";
"clojure.core/refer-clojure" -> "clojure.core/concat";
"clojure.core/let" -> "clojure.core/list";
"clojure.core/neg?" -> "clojure.core/seq";
"clojure.core/>" -> "clojure.core/concat";
"clojure.core/long" -> "user/longCast";
"clojure.core/with-loading-context" -> "clojure.core/hash-map";
"clojure.core/unchecked-negate" -> "clojure.core/list";
"clojure.core/dotimes" -> "clojure.core/list";
"clojure.core/unchecked-char" -> "clojure.core/seq";
"clojure.core/gen-interface" -> "clojure.lang.Compiler/LOADER";
"clojure.core/proxy" -> "clojure.core/list";
"clojure.core/reduced?" -> "clojure.core/list";
"clojure.core/unchecked-divide-int" -> "clojure.core/seq";
"clojure.core/with-redefs" -> "clojure.core/with-redefs-fn";
"clojure.core/chunk-cons" -> "clojure.lang.Numbers/isZero";
"clojure.core/binding" -> "clojure.core/pop-thread-bindings";
"clojure.core/aget" -> "clojure.core/seq";
"clojure.core/sync" -> "clojure.core/list";
"clojure.core/munge" -> "clojure.lang.Compiler/munge";
"clojure.core/doseq" -> "clojure.core/loop";
"clojure.core/loop" -> "clojure.core/let";
"clojure.core/chunk-cons" -> "clojure.lang.RT/count";
"clojure.core/destructure" -> "clojure.core/nth";
"clojure.core/with-open" -> "clojure.core/let";
"clojure.core/loop" -> "clojure.core/concat";
"clojure.core/even?" -> "clojure.lang.RT/uncheckedLongCast";
"clojure.core/promise" -> "java.util.concurrent.TimeUnit/MILLISECONDS";
"clojure.core/with-open" -> "clojure.core/concat";
"clojure.core/object-array" -> "user/object_array";
"clojure.core/>=" -> "user/gte";
"clojure.core/deftype" -> "clojure.core/let";
"clojure.core/get" -> "clojure.core/seq";
"clojure.core/defstruct" -> "clojure.core/list";
"clojure.core/deftype" -> "clojure.core/concat";
"clojure.core/.." -> "clojure.core/list";
"clojure.core/rem" -> "clojure.core/list";
"clojure.core/>=" -> "clojure.core/concat";
"clojure.core/defrecord" -> "clojure.core/declare";
"clojure.core/char" -> "clojure.core/seq";
"clojure.core/import" -> "clojure.core/concat";
"clojure.core/some->" -> "clojure.core/let";
"clojure.core/deftype" -> "clojure.core/apply";
"clojure.core/some->" -> "clojure.core/concat";
"clojure.core/pos?" -> "user/isPos";
"clojure.core/with-in-str" -> "clojure.core/concat";
"clojure.core/identical?" -> "clojure.lang.Util/identical";
"clojure.core/some->" -> "clojure.core/apply";
"clojure.core/int" -> "clojure.core/list";
"clojure.core/when-let" -> "clojure.core/vector";
"clojure.core/with-in-str" -> "clojure.core/apply";
"clojure.core/unchecked-add-int" -> "user/unchecked_int_add";
"clojure.core/delay" -> "clojure.core/seq";
"clojure.core/push-thread-bindings" -> "clojure.lang.Var/pushThreadBindings";
"clojure.core/<" -> "clojure.core/concat";
"clojure.core/dec" -> "clojure.core/seq";
"clojure.core/and" -> "clojure.core/seq";
"clojure.core/bean" -> "clojure.lang.Reflector/prepRet";
"clojure.core/condp" -> "clojure.core/vector";
"clojure.core/unchecked-float" -> "user/uncheckedFloatCast";
"clojure.core/->Vec" -> "clojure.lang.Util/compare";
"clojure.core/double" -> "clojure.lang.RT/doubleCast";
"clojure.core/defmethod" -> "clojure.core/concat";
"clojure.core/dosync" -> "clojure.core/concat";
"clojure.core/for" -> "clojure.core/rest";
"clojure.core/defrecord" -> "clojure.core/list";
"clojure.core/unchecked-short" -> "user/uncheckedShortCast";
"clojure.core/doseq" -> "clojure.core/vector";
"clojure.core/dosync" -> "clojure.core/sync";
"clojure.core/locking" -> "clojure.core/seq";
"clojure.core/quot" -> "clojure.core/concat";
"clojure.core/->>" -> "clojure.core/seq";
"clojure.core/unchecked-divide-int" -> "user/unchecked_int_divide";
"clojure.core/future" -> "clojure.core/list";
"clojure.core/definline" -> "clojure.core/defn";
"clojure.core/inc'" -> "clojure.core/concat";
"clojure.core/cond->>" -> "clojure.core/seq";
"clojure.core/zero?" -> "clojure.core/list";
"clojure.core/when-let" -> "clojure.core/let";
"clojure.core/doseq" -> "clojure.core/int";
"clojure.core/when-let" -> "clojure.core/concat";
"clojure.core/unchecked-dec-int" -> "user/unchecked_int_dec";
"clojure.core/with-loading-context" -> "user/popThreadBindings";
"clojure.core/refer-clojure" -> "clojure.core/list";
"clojure.core/ints" -> "clojure.core/seq";
"clojure.core/unchecked-add" -> "clojure.core/list";
"clojure.core/unchecked-float" -> "clojure.core/concat";
"clojure.core/time" -> "clojure.core/str";
"clojure.core/->" -> "clojure.core/seq";
"clojure.core/booleans" -> "clojure.core/seq";
"clojure.core/when-let" -> "clojure.core/apply";
"clojure.core/unchecked-long" -> "clojure.lang.RT/uncheckedLongCast";
"clojure.core/object-array" -> "clojure.core/seq";
"clojure.core/while" -> "clojure.core/seq";
"clojure.core/doubles" -> "clojure.core/list";
"clojure.core/for" -> "clojure.core/when-first";
"clojure.core/floats" -> "clojure.core/list";
"clojure.core/with-loading-context" -> "clojure.core/list";
"clojure.core/unchecked-add-int" -> "clojure.core/seq";
"clojure.core/byte" -> "clojure.core/concat";
"clojure.core/=" -> "clojure.core/concat";
"clojure.core/doseq" -> "clojure.core/concat";
"clojure.core/case" -> "clojure.core/seq";
"clojure.core/loop" -> "clojure.core/list";
"clojure.core/intern" -> "clojure.lang.Var/intern";
"clojure.core/unchecked-double" -> "clojure.lang.RT/uncheckedDoubleCast";
"clojure.core/unchecked-inc-int" -> "clojure.core/concat";
"clojure.core/send-off" -> "clojure.lang.Agent/soloExecutor";
"clojure.core/for" -> "clojure.core/lazy-seq";
"clojure.core/boolean-array" -> "clojure.core/concat";
"clojure.core/format" -> "String/format";
"clojure.core/with-open" -> "clojure.core/list";
"clojure.core/pvalues" -> "clojure.core/fn";
"clojure.core/doseq" -> "clojure.core/apply";
"clojure.core/>" -> "clojure.core/list";
"clojure.core/compare" -> "clojure.core/seq";
"clojure.core/condp" -> "clojure.core/let";
"clojure.core/when-first" -> "clojure.core/when-let";
"clojure.core/dec'" -> "clojure.core/seq";
"clojure.core/some->>" -> "clojure.core/vector";
"clojure.core/condp" -> "clojure.core/concat";
"clojure.core/time" -> "clojure.core/-";
"clojure.core/io!" -> "clojure.core/concat";
"clojure.core/assert" -> "clojure.core/pr-str";
"clojure.core/unchecked-inc" -> "clojure.core/seq";
"clojure.core/doseq" -> "clojure.core/let";
"clojure.core/condp" -> "clojure.core/apply";
"clojure.core/quot" -> "user/quotient";
"clojure.core/symbol" -> "clojure.lang.Symbol/intern";
"clojure.core/defmulti" -> "clojure.core/deref";
"clojure.core/sync" -> "clojure.core/fn";
"clojure.core/for" -> "clojure.core/seq";
"clojure.core/get-proxy-class" -> "clojure.lang.Compiler/LOADER";
"clojure.core/==" -> "clojure.core/concat";
"clojure.core/time" -> "clojure.core/prn";
"clojure.core/for" -> "clojure.core/chunk-first";
"clojure.core/count" -> "clojure.core/concat";
"clojure.core/short" -> "clojure.core/seq";
"clojure.core/binding" -> "clojure.core/push-thread-bindings";
"clojure.core/areduce" -> "clojure.core/<";
"clojure.core/deftype" -> "clojure.core/list";
"clojure.core/>=" -> "clojure.core/list";
"clojure.core/import" -> "clojure.core/list";
"clojure.core/lazy-cat" -> "clojure.core/lazy-seq";
"clojure.core/long" -> "clojure.core/seq";
"clojure.core/shuffle" -> "clojure.lang.RT/vector";
"clojure.core/some->" -> "clojure.core/list";
"clojure.core/proxy" -> "clojure.core/fn";
"clojure.core/with-in-str" -> "clojure.core/list";
"clojure.core/long-array" -> "clojure.core/seq";
"clojure.core/dotimes" -> "clojure.core/long";
"clojure.core/proxy-super" -> "clojure.core/proxy-call-with-super";
"clojure.core/pvalues" -> "clojure.core/pcalls";
"clojure.core/unchecked-dec" -> "clojure.core/concat";
"clojure.core/fn" -> "clojure.core/seq";
"clojure.core/seque" -> "clojure.core/deref";
"clojure.core/quot" -> "clojure.core/list";
"clojure.core/some->>" -> "clojure.core/apply";
"clojure.core/letfn" -> "clojure.core/concat";
"clojure.core/with-out-str" -> "clojure.core/vector";
"clojure.core/inc'" -> "clojure.core/list";
"clojure.core/bit-shift-left" -> "clojure.core/seq";
"clojure.core/short-array" -> "clojure.core/seq";
"clojure.core/<" -> "clojure.core/list";
"clojure.core/future-call" -> "clojure.lang.Agent/soloExecutor";
"clojure.core/memoize" -> "clojure.core/deref";
"clojure.core/if-not" -> "clojure.core/concat";
"clojure.core/lazy-cat" -> "clojure.core/seq";
"clojure.core/defmethod" -> "clojure.core/list";
"clojure.core/dosync" -> "clojure.core/list";
"clojure.core/assert" -> "clojure.core/str";
"clojure.core/some->>" -> "clojure.core/let";
"clojure.core/unchecked-multiply" -> "clojure.core/concat";
"clojure.core/time" -> "clojure.core//";
"clojure.core/amap" -> "clojure.core/<";
"clojure.core/some->>" -> "clojure.core/concat";
"clojure.core/definterface" -> "clojure.core/import";
"clojure.core/aset" -> "clojure.core/seq";
"clojure.core/bound-fn" -> "clojure.core/concat";
"clojure.core/set" -> "clojure.lang.PersistentHashSet/create";
"clojure.core/bit-shift-left" -> "user/shiftLeft";
"clojure.core/char-array" -> "clojure.core/concat";
"clojure.core/proxy" -> "clojure.lang.Compiler/writeClassFile";
"clojure.core/byte" -> "clojure.core/list";
"clojure.core/unchecked-long" -> "clojure.core/seq";
"clojure.core/=" -> "clojure.core/list";
"clojure.core/int-array" -> "clojure.core/seq";
"clojure.core/longs" -> "clojure.core/concat";
"clojure.core/binding" -> "clojure.core/vector";
"clojure.core/loaded-libs" -> "clojure.core/deref";
"clojure.core/io!" -> "clojure.lang.LockingTransaction/isRunning";
"clojure.core/while" -> "clojure.core/when";
"clojure.core/add-classpath" -> "clojure.lang.RT/addURL";
"clojure.core/dec'" -> "user/decP";
"clojure.core/when-let" -> "clojure.core/list";
"clojure.core/with-open" -> "user/close";
"clojure.core/shorts" -> "clojure.core/concat";
"clojure.core/unchecked-float" -> "clojure.core/list";
"clojure.core/definline" -> "clojure.core/assoc";
"clojure.core/areduce" -> "clojure.core/loop";
"clojure.core/dotimes" -> "clojure.core/unchecked-inc";
"clojure.core/proxy-super" -> "clojure.core/vector";
"clojure.core/inc" -> "clojure.core/concat";
"clojure.core/io!" -> "clojure.core/list";
"clojure.core/definline" -> "clojure.core/concat";
"clojure.core/defonce" -> "clojure.core/vector";
"clojure.core/amap" -> "clojure.core/loop";
"clojure.core/ns" -> "clojure.core/refer";
"clojure.core/defn" -> "clojure.lang.Symbol/intern";
"clojure.core/doseq" -> "clojure.core/list";
"clojure.core/unchecked-inc" -> "user/unchecked_inc";
"clojure.core/->Vec" -> "System/arraycopy";
"clojure.core/with-loading-context" -> "clojure.core/fn";
"clojure.core/unchecked-subtract-int" -> "clojure.core/seq";
"clojure.core/with-local-vars" -> "clojure.core/seq";
"clojure.core/double" -> "clojure.core/concat";
"clojure.core/case" -> "Integer/MAX_VALUE";
"clojure.core/unchecked-inc-int" -> "clojure.core/list";
"clojure.core/with-out-str" -> "clojure.core/let";
"clojure.core/boolean-array" -> "clojure.core/list";
"clojure.core/with-out-str" -> "clojure.core/concat";
"clojure.core/cond->" -> "clojure.core/vector";
"clojure.core/bit-shift-right" -> "clojure.core/concat";
"clojure.core/with-bindings" -> "clojure.core/seq";
"clojure.core/with-out-str" -> "clojure.core/apply";
"clojure.core/proxy-name" -> "Integer/toHexString";
"clojure.core/condp" -> "clojure.core/list";
"clojure.core/condp" -> "clojure.core/if-let";
"clojure.core/when-first" -> "clojure.core/vector";
"clojure.core/binding" -> "clojure.core/apply";
"clojure.core/unchecked-negate-int" -> "clojure.core/seq";
"clojure.core/as->" -> "clojure.core/seq";
"clojure.core/for" -> "clojure.core/when";
"clojure.core/destructure" -> "clojure.core/get";
"clojure.core/identical?" -> "clojure.core/concat";
"clojure.core/memfn" -> "clojure.core/vector";
"clojure.core/unchecked-remainder-int" -> "user/unchecked_int_remainder";
"clojure.core/some->" -> "clojure.core/nil?";
"clojure.core/binding" -> "clojure.core/let";
"clojure.core/==" -> "clojure.core/list";
"clojure.core/binding" -> "clojure.core/concat";
"clojure.core/iterator-seq" -> "clojure.lang.IteratorSeq/create";
"clojure.core/defonce" -> "clojure.core/when-not";
"clojure.core/for" -> "clojure.core/count";
"clojure.core/count" -> "clojure.core/list";
"clojure.core/bound-fn" -> "clojure.core/bound-fn*";
"clojure.core/areduce" -> "clojure.core/vector";
"clojure.core/keyword" -> "clojure.lang.Keyword/intern";
"clojure.core/for" -> "clojure.core/chunk-buffer";
"clojure.core/with-redefs" -> "clojure.core/vector";
"clojure.core/or" -> "clojure.core/seq";
"clojure.core/ns" -> "clojure.core/conj";
"clojure.core/defmulti" -> "clojure.core/vector";
"clojure.core/cond->" -> "clojure.core/let";
"clojure.core/float" -> "clojure.core/concat";
"clojure.core/cond->" -> "clojure.core/concat";
"clojure.core/false?" -> "clojure.lang.Util/identical";
"clojure.core/unchecked-multiply" -> "clojure.core/list";
"clojure.core/some->>" -> "clojure.core/list";
"clojure.core/amap" -> "clojure.core/vector";
"clojure.core/nth" -> "clojure.core/seq";
"clojure.core/binding" -> "clojure.core/hash-map";
"clojure.core/unchecked-int" -> "user/uncheckedIntCast";
"clojure.core/for" -> "clojure.core/chunked-seq?";
"clojure.core/with-precision" -> "clojure.core/seq";
"clojure.core/unchecked-dec" -> "clojure.core/list";
"clojure.core/proxy-super" -> "clojure.core/concat";
"clojure.core/cond->" -> "clojure.core/apply";
"clojure.core/defonce" -> "clojure.core/let";
"clojure.core/letfn" -> "clojure.core/list";
"clojure.core/with-precision" -> "clojure.core/binding";
"clojure.core/time" -> "clojure.core/seq";
"clojure.core/definterface" -> "clojure.core/vector";
"clojure.core/defonce" -> "clojure.core/concat";
"clojure.core/proxy-super" -> "clojure.core/apply";
"clojure.core/destructure" -> "clojure.core/nthnext";
"clojure.core/num" -> "clojure.core/concat";
"clojure.core/sync" -> "user/runInTransaction";
"clojure.core/with-out-str" -> "clojure.core/*out*";
"clojure.core/bigint" -> "clojure.lang.BigInt/valueOf";
"clojure.core/defonce" -> "clojure.core/apply";
"clojure.core/if-not" -> "clojure.core/list";
"clojure.core/sorted-set" -> "clojure.lang.PersistentTreeSet/create";
"clojure.core/shorts" -> "clojure.core/list";
"clojure.core/for" -> "clojure.core/when-let";
"clojure.core/memfn" -> "clojure.core/apply";
"clojure.core/time" -> "clojure.core/double";
"clojure.core/load" -> "clojure.lang.RT/load";
"clojure.core/areduce" -> "clojure.core/let";
"clojure.core/unchecked-subtract" -> "user/unchecked_minus";
"clojure.core/pos?" -> "clojure.core/seq";
"clojure.core/range" -> "Double/POSITIVE_INFINITY";
"clojure.core/areduce" -> "clojure.core/concat";
"clojure.core/when-first" -> "clojure.core/let";
"clojure.core/defmethod" -> "clojure.core/fn";
"clojure.core/boolean" -> "clojure.core/concat";
"clojure.core/with-redefs" -> "clojure.core/concat";
"clojure.core/float-array" -> "clojure.core/concat";
"clojure.core/when-first" -> "clojure.core/concat";
"clojure.core/if-let" -> "clojure.core/seq";
"clojure.core/defmulti" -> "clojure.core/when-not";
"clojure.core/areduce" -> "clojure.core/apply";
"clojure.core/bound-fn" -> "clojure.core/list";
"clojure.core/defn" -> "clojure.core/fn";
"clojure.core/char-array" -> "clojure.core/list";
"clojure.core/with-redefs" -> "clojure.core/apply";
"clojure.core/unchecked-remainder-int" -> "clojure.core/concat";
"clojure.core/when-first" -> "clojure.core/apply";
"clojure.core/bytes" -> "clojure.core/seq";
"clojure.core/unchecked-byte" -> "clojure.core/concat";
"clojure.core/longs" -> "clojure.core/list";
"clojure.core/unchecked-short" -> "clojure.core/concat";
"clojure.core/alength" -> "clojure.core/concat";
"clojure.core/memfn" -> "clojure.core/concat";
"clojure.core/double-array" -> "clojure.core/concat";
"clojure.core/chars" -> "clojure.core/concat";
"clojure.core/definline" -> "clojure.core/alter-meta!";
"clojure.core/definterface" -> "clojure.core/concat";
"clojure.core/unchecked-byte" -> "user/uncheckedByteCast";
"clojure.core/ns" -> "clojure.core/seq";
"clojure.core/doseq" -> "clojure.core/chunk-rest";
"clojure.core/nil?" -> "clojure.lang.Util/identical";
"clojure.core/<=" -> "clojure.core/concat";
"clojure.core/unchecked-double" -> "clojure.core/seq";
"clojure.core/unchecked-dec-int" -> "clojure.core/seq";
"clojure.core/bit-shift-right" -> "clojure.core/list";
"clojure.core/for" -> "clojure.core/<";
"clojure.core/unchecked-multiply-int" -> "clojure.core/seq";
"clojure.core/bit-not" -> "clojure.core/not";
"clojure.core/definterface" -> "clojure.core/apply";
"clojure.core/defmulti" -> "clojure.core/let";
"clojure.core/future" -> "clojure.core/with-meta";
"clojure.core/defmulti" -> "clojure.core/concat";
"clojure.core/inc" -> "clojure.core/list";
"clojure.core/aget" -> "clojure.core/int";
"clojure.core/byte-array" -> "clojure.core/concat";
"clojure.core/amap" -> "clojure.core/let";
"clojure.core/unchecked-int" -> "clojure.core/seq";
"clojure.core/definline" -> "clojure.core/list";
"clojure.core/declare" -> "clojure.core/seq";
"clojure.core/amap" -> "clojure.core/concat";
"clojure.core/defmulti" -> "clojure.core/apply";
"clojure.core/double" -> "clojure.core/list";
"clojure.core/definterface" -> "clojure.core/let";
"clojure.core/amap" -> "clojure.core/apply";
"clojure.core/with-out-str" -> "clojure.core/list";
"clojure.core/while" -> "clojure.core/loop";
"clojure.core/unchecked-char" -> "clojure.core/concat";
"clojure.core/->Vec" -> "clojure.lang.Util/hash";
"clojure.core/binding" -> "clojure.core/list";
"clojure.core/some->" -> "clojure.core/->";
"clojure.core/with-loading-context" -> "clojure.lang.Compiler/LOADER";
"clojure.core/send" -> "clojure.lang.Agent/pooledExecutor";
"clojure.core/with-in-str" -> "clojure.core/->";
"clojure.core/unchecked-divide-int" -> "clojure.core/concat";
"clojure.core/locking" -> "clojure.core/vector";
"clojure.core/unchecked-negate" -> "user/unchecked_minus";
"clojure.core/reify" -> "clojure.core/seq";
"clojure.core/with-loading-context" -> "clojure.core/with-meta";
"clojure.core/aget" -> "clojure.core/concat";
"clojure.core/count" -> "clojure.lang.RT/count";
"clojure.core/destructure" -> "clojure.lang.PersistentHashMap/create";
"clojure.core/doto" -> "clojure.core/seq";
"clojure.core/boolean" -> "clojure.lang.RT/booleanCast";
"clojure.core/defmethod" -> "user/addMethod";
"clojure.core/bit-not" -> "clojure.core/seq";
"clojure.core/and" -> "clojure.core/vector";
"clojure.core/identical?" -> "clojure.core/list";
"clojure.core/aclone" -> "clojure.core/seq";
"clojure.core/unchecked-subtract" -> "clojure.core/seq";
"clojure.core/neg?" -> "clojure.core/concat";
"clojure.core/defmacro" -> "clojure.core/defn";
"clojure.core/double-array" -> "user/double_array";
"clojure.core/assert" -> "clojure.core/seq";
"clojure.core/defonce" -> "clojure.core/list";
"clojure.core/delay" -> "clojure.core/apply";
"clojure.core/char" -> "clojure.core/concat";
"clojure.core/num" -> "clojure.core/list";
"clojure.core/vec" -> "clojure.lang.LazilyPersistentVector/create";
"clojure.core/reduce" -> "clojure.core.protocols/coll-reduce";
"clojure.core/hash-combine" -> "clojure.lang.Util/hashCombine";
"clojure.core/refer-clojure" -> "clojure.core/refer";
"clojure.core/destructure" -> "clojure.core/seq";
"clojure.core/float" -> "clojure.core/list";
"clojure.core/cond->>" -> "clojure.core/vector";
"clojure.core/cond->" -> "clojure.core/list";
"clojure.core/ns-resolve" -> "clojure.lang.Compiler/maybeResolveIn";
"clojure.core/pvalues" -> "clojure.core/seq";
"clojure.core/for" -> "clojure.core/loop";
"clojure.core/amap" -> "clojure.core/aclone";
"clojure.core/unchecked-multiply-int" -> "user/unchecked_int_multiply";
"clojure.core/proxy-super" -> "clojure.core/list";
"clojure.core/delay" -> "clojure.core/concat";
"clojure.core/spit" -> "clojure.java.io/writer";
"clojure.core/get" -> "clojure.core/concat";
"clojure.core/some->>" -> "clojure.core/nil?";
"clojure.core/while" -> "clojure.core/vector";
"clojure.core/dec" -> "clojure.core/concat";
"clojure.core/unchecked-byte" -> "clojure.core/list";
"clojure.core/and" -> "clojure.core/concat";
"clojure.core/unchecked-short" -> "clojure.core/list";
"clojure.core/proxy" -> "clojure.core/seq";
"clojure.core/alength" -> "clojure.core/list";
"clojure.core/reduced?" -> "clojure.core/seq";
"clojure.core/double-array" -> "clojure.core/list";
"clojure.core/doseq" -> "clojure.core/unchecked-inc";
"clojure.core/memfn" -> "clojure.core/list";
"clojure.core/doseq" -> "clojure.core/first";
"clojure.core/letfn" -> "clojure.core/fn";
"clojure.core/gen-class" -> "clojure.lang.Compiler/writeClassFile";
"clojure.core/chars" -> "clojure.core/list";
"clojure.core/and" -> "clojure.core/apply";
"clojure.core/delay" -> "clojure.core/hash-map";
"clojure.core/sync" -> "clojure.core/seq";
"clojure.core/locking" -> "clojure.core/let";
"clojure.core/case" -> "clojure.core/vector";
"clojure.core/future" -> "clojure.core/future-call";
"clojure.core/locking" -> "clojure.core/concat";
"clojure.core/areduce" -> "clojure.core/list";
"clojure.core/->>" -> "clojure.core/concat";
"clojure.core/boolean" -> "clojure.core/list";
"clojure.core/with-redefs" -> "clojure.core/list";
"clojure.core/float-array" -> "clojure.core/list";
"clojure.core/when-first" -> "clojure.core/list";
"clojure.core/let" -> "clojure.core/seq";
"clojure.core/for" -> "clojure.core/chunk";
"clojure.core/locking" -> "clojure.core/apply";
"clojure.core/and" -> "clojure.core/let";
"clojure.core/short-array" -> "user/short_array";
"clojure.core/long-array" -> "user/long_array";
"clojure.core/dotimes" -> "clojure.core/seq";
"clojure.core/unchecked-negate" -> "clojure.core/seq";
"clojure.core/unchecked-remainder-int" -> "clojure.core/list";
"clojure.core/amap" -> "clojure.core/list";
"clojure.core/rem" -> "clojure.core/seq";
"clojure.core/.." -> "clojure.core/seq";
"clojure.core/cond->>" -> "clojure.core/apply";
"clojure.core/bound-fn" -> "clojure.core/fn";
"clojure.core/ints" -> "clojure.core/concat";
"clojure.core/booleans" -> "clojure.core/concat";
"clojure.core/->" -> "clojure.core/concat";
"clojure.core/object-array" -> "clojure.core/concat";
"clojure.core/definterface" -> "clojure.core/list";
"clojure.core/while" -> "clojure.core/concat";
"clojure.core/<=" -> "clojure.core/list";
"clojure.core/int-array" -> "user/int_array";
"clojure.core/condp" -> "clojure.core/str";
"clojure.core/for" -> "clojure.core/vector";
"clojure.core/int" -> "clojure.core/seq";
"clojure.core/while" -> "clojure.core/apply";
"clojure.core/find-ns" -> "clojure.lang.Namespace/find";
"clojure.core/unchecked-add-int" -> "clojure.core/concat";
"clojure.core/cond->>" -> "clojure.core/let";
"clojure.core/defmulti" -> "clojure.core/list";
"clojure.core/byte-array" -> "clojure.core/list";
"clojure.core/cond->>" -> "clojure.core/concat";
"clojure.core/defstruct" -> "clojure.core/seq";
"clojure.core/for" -> "clojure.core/int";
"clojure.core/neg?" -> "clojure.core/list";
"clojure.core/case" -> "clojure.core/apply";
"clojure.core/definline" -> "clojure.core/fn";
"clojure.core/compare" -> "clojure.core/concat";
"clojure.core/ns" -> "clojure.core/gen-class";
"clojure.core/defrecord" -> "clojure.core/seq";
"clojure.core/dec'" -> "clojure.core/concat";
"clojure.core/unchecked-char" -> "clojure.core/list";
"clojure.core/time" -> "user/nanoTime";
"clojure.core/fn" -> "clojure.core/vector";
"clojure.core/unchecked-divide-int" -> "clojure.core/list";
"clojure.core/unchecked-short" -> "clojure.lang.RT/uncheckedShortCast";
"clojure.core/unchecked-float" -> "clojure.lang.RT/uncheckedFloatCast";
"clojure.core/future" -> "clojure.core/seq";
"clojure.core/aget" -> "clojure.core/list";
"clojure.core/unchecked-inc" -> "clojure.core/concat";
"clojure.core/unchecked-char" -> "user/uncheckedCharCast";
"clojure.core/case" -> "clojure.core/let";
"clojure.core/inc'" -> "user/incP";
"clojure.core/->VecSeq" -> "clojure.lang.PersistentList/EMPTY";
"clojure.core/case" -> "clojure.core/concat";
"clojure.core/refer-clojure" -> "clojure.core/seq";
"clojure.core/delay" -> "clojure.core/list";
"clojure.core/unchecked-add" -> "clojure.core/seq";
"clojure.core/defn-" -> "clojure.core/defn";
"clojure.core/for" -> "clojure.core/apply";
"clojure.core/short" -> "clojure.core/concat";
"clojure.core/get" -> "clojure.core/list";
"clojure.core/doubles" -> "clojure.core/seq";
"clojure.core/char" -> "clojure.core/list";
"clojure.core/ns" -> "clojure.core/deref";
"clojure.core/long" -> "clojure.core/concat";
"clojure.core/floats" -> "clojure.core/seq";
"clojure.core/with-loading-context" -> "clojure.core/seq";
"clojure.core/rem" -> "user/remainder";
"clojure.core/zero?" -> "clojure.core/seq";
"clojure.core/for" -> "clojure.core/let";
"clojure.core/for" -> "clojure.core/concat";
"clojure.core/aset" -> "clojure.core/int";
"clojure.core/with-open" -> "clojure.core/seq";
"clojure.core/reduced?" -> "clojure.lang.RT/isReduced";
"clojure.core/>" -> "clojure.core/seq";
"clojure.core/fn" -> "clojure.core/apply";
"clojure.core/bit-shift-left" -> "clojure.core/concat";
"clojure.core/short-array" -> "clojure.core/concat";
"clojure.core/some->>" -> "clojure.core/->>";
"clojure.core/ns" -> "user/*loaded-libs*";
"clojure.core/proxy-super" -> "clojure.core/fn";
"clojure.core/with-bindings" -> "clojure.core/vector";
"clojure.core/dec" -> "clojure.core/list";
"clojure.core/and" -> "clojure.core/list";
"clojure.core/lazy-cat" -> "clojure.core/concat";
"clojure.core/set-agent-send-off-executor!" -> "clojure.lang.Agent/soloExecutor";
"clojure.core/sorted-set-by" -> "clojure.lang.PersistentTreeSet/create";
"clojure.core/fn" -> "clojure.core/let";
"clojure.core/unchecked-double" -> "user/uncheckedDoubleCast";
"clojure.core/ns" -> "clojure.core/dosync";
"clojure.core/long-array" -> "clojure.core/concat";
"clojure.core/dotimes" -> "clojure.core/when";
"clojure.core/fn" -> "clojure.core/concat";
"clojure.core/unchecked-byte" -> "clojure.lang.RT/uncheckedByteCast";
"clojure.core/with-local-vars" -> "clojure.core/vector";
"clojure.core/locking" -> "clojure.core/list";
"clojure.core/loop" -> "clojure.core/seq";
"clojure.core/->>" -> "clojure.core/list";
"clojure.core/slurp" -> "clojure.java.io/reader";
"clojure.core/unchecked-add-int" -> "clojure.core/list";
"clojure.core/unchecked-long" -> "clojure.core/concat";
"clojure.core/int-array" -> "clojure.core/concat";
"clojure.core/cond->>" -> "clojure.core/list";
"clojure.core/remove-ns" -> "clojure.lang.Namespace/remove";
"clojure.core/with-redefs" -> "clojure.core/fn";
"clojure.core/all-ns" -> "clojure.lang.Namespace/all";
"clojure.core/deftype" -> "clojure.core/seq";
"clojure.core/or" -> "clojure.core/vector";
"clojure.core/hash-combine" -> "clojure.lang.Util/hash";
"clojure.core/>=" -> "clojure.core/seq";
"clojure.core/unchecked-add" -> "user/unchecked_add";
"clojure.core/amap" -> "clojure.core/aset";
"clojure.core/as->" -> "clojure.core/vector";
"clojure.core/ints" -> "clojure.core/list";
"clojure.core/import" -> "clojure.core/seq";
"clojure.core/with-bindings" -> "clojure.core/with-bindings*";
"clojure.core/->" -> "clojure.core/list";
"clojure.core/booleans" -> "clojure.core/list";
"clojure.core/with-out-str" -> "clojure.core/str";
"clojure.core/char-array" -> "user/char_array";
"clojure.core/object-array" -> "clojure.core/list";
"clojure.core/some->" -> "clojure.core/seq";
"clojure.core/unchecked-dec" -> "user/unchecked_dec";
"clojure.core/with-in-str" -> "clojure.core/seq";
"clojure.core/while" -> "clojure.core/list";
"clojure.core/memfn" -> "clojure.core/fn";
"clojure.core/with-local-vars" -> "user/pushThreadBindings";
"clojure.core/with-in-str" -> "clojure.core/binding";
"clojure.core/aset" -> "clojure.core/concat";
"clojure.core/with-bindings" -> "clojure.core/apply";
"clojure.core/unchecked-inc" -> "clojure.core/list";
"clojure.core/time" -> "clojure.core/vector";
"clojure.core/ns" -> "clojure.core/name";
"clojure.core/with-precision" -> "clojure.core/*math-context*";
"clojure.core/double" -> "user/doubleCast";
"clojure.core/inc'" -> "clojure.core/seq";
"clojure.core/with-local-vars" -> "clojure.core/let";
"clojure.core/<" -> "clojure.core/seq";
"clojure.core/case" -> "clojure.core/list";
"clojure.core/unchecked-subtract-int" -> "clojure.core/concat";
"clojure.core/with-local-vars" -> "clojure.core/concat";
"clojure.core/defmethod" -> "clojure.core/seq";
"clojure.core/with-local-vars" -> "clojure.core/apply";
"clojure.core/dosync" -> "clojure.core/seq";
"clojure.core/compare" -> "clojure.core/list";
"clojure.core/get-proxy-class" -> "RT/loadClassForName";
"clojure.core/promise" -> "clojure.core/deref";
"clojure.core/dec'" -> "clojure.core/list";
"clojure.core/fn" -> "clojure.core/assert";
"clojure.core/with-bindings" -> "clojure.core/concat";
"clojure.core/with-precision" -> "clojure.core/vector";
"clojure.core/enumeration-seq" -> "clojure.lang.EnumerationSeq/create";
"clojure.core/quot" -> "clojure.core/seq";
"clojure.core/or" -> "clojure.core/apply";
"clojure.core/dotimes" -> "clojure.core/<";
"clojure.core/byte" -> "clojure.core/seq";
"clojure.core/=" -> "clojure.core/seq";
"clojure.core/as->" -> "clojure.core/apply";
"clojure.core/definterface" -> "clojure.core/gen-interface";
"clojure.core/for" -> "clojure.core/list";
"clojure.core/when-let" -> "clojure.core/seq";
"clojure.core/areduce" -> "clojure.core/unchecked-inc";
"clojure.core/when-first" -> "clojure.core/first";
"clojure.core/unchecked-float" -> "clojure.core/seq";
"clojure.core/hash-set" -> "clojure.lang.PersistentHashSet/create";
"clojure.core/short" -> "clojure.core/list";
"clojure.core/or" -> "clojure.core/let";
"clojure.core/ns" -> "clojure.core/in-ns";
"clojure.core/biginteger" -> "BigInteger/valueOf";
"clojure.core/as->" -> "clojure.core/let";
"clojure.core/or" -> "clojure.core/concat";
"clojure.core/ns" -> "clojure.core/with-loading-context";
"clojure.core/cond->" -> "clojure.core/->";
"clojure.core/unchecked-negate-int" -> "clojure.core/concat";
"clojure.core/as->" -> "clojure.core/concat";
"clojure.core/for" -> "clojure.core/chunk-cons";
"clojure.core/if-let" -> "clojure.core/vector";
"clojure.core/with-local-vars" -> "clojure.core/hash-map";
"clojure.core/long" -> "clojure.core/list";
"clojure.core/release-pending-sends" -> "clojure.lang.Agent/releasePendingSends";
"clojure.core/defmulti" -> "clojure.core/instance?";
"clojure.core/io!" -> "clojure.core/seq";
"clojure.core/byte-array" -> "user/byte_array";
"clojure.core/nth" -> "clojure.core/concat";
"clojure.core/long-array" -> "clojure.core/list";
"clojure.core/doseq" -> "clojure.core/seq";
"clojure.core/with-precision" -> "clojure.core/concat";
"clojure.core/fn" -> "clojure.core/list";
"clojure.core/=" -> "user/equiv";
"clojure.core/time" -> "clojure.core/let";
"clojure.core/unchecked-inc-int" -> "clojure.core/seq";
"clojure.core/boolean-array" -> "clojure.core/seq";
"clojure.core/defn" -> "clojure.lang.Util/equiv";
"clojure.core/time" -> "clojure.core/concat";
"clojure.core/doseq" -> "clojure.core/chunk-first";
"clojure.core/with-precision" -> "clojure.core/apply";
"clojure.core/bit-shift-left" -> "clojure.core/list";
"clojure.core/short-array" -> "clojure.core/list";
"clojure.core/boolean-array" -> "user/boolean_array";
"clojure.core/unchecked-int" -> "clojure.lang.RT/uncheckedIntCast";
"clojure.core/->VecSeq" -> "clojure.lang.Util/equiv";
"clojure.core/time" -> "clojure.core/apply";
"clojure.core/amap" -> "clojure.core/unchecked-inc";
"clojure.core/condp" -> "clojure.core/seq";
"clojure.core/lazy-cat" -> "clojure.core/list";
"clojure.core/if-let" -> "clojure.core/let";
"clojure.core/if-let" -> "clojure.core/concat";
"clojure.core/aset" -> "clojure.core/list";
"clojure.core/shuffle" -> "java.util.Collections/shuffle";
"clojure.core/true?" -> "clojure.lang.Util/identical";
"clojure.core/dotimes" -> "clojure.core/loop";
"clojure.core/unchecked-long" -> "clojure.core/list";
"clojure.core/if-not" -> "clojure.core/not";
"clojure.core/==" -> "clojure.core/seq";
"clojure.core/bytes" -> "clojure.core/concat";
"clojure.core/int-array" -> "clojure.core/list";
"clojure.core/bigdec" -> "BigDecimal/valueOf";
"clojure.core/if-let" -> "clojure.core/apply";
"clojure.core/count" -> "clojure.core/seq";
"clojure.core/=" -> "clojure.lang.Util/equiv";
"clojure.core/proxy" -> "clojure.core/init-proxy";
"clojure.core/defrecord" -> "clojure.core/defn";
"clojure.core/sorted-map" -> "clojure.lang.PersistentTreeMap/create";
"clojure.core/unchecked-long" -> "user/uncheckedLongCast";
"clojure.core/ns" -> "clojure.core/commute";
"clojure.core/doto" -> "clojure.core/vector";
"clojure.core/pos?" -> "clojure.core/concat";
"clojure.core/unchecked-multiply" -> "clojure.core/seq";
"clojure.core/with-local-vars" -> "user/popThreadBindings";
"clojure.core/reduce-kv" -> "clojure.core.protocols/kv-reduce";
"clojure.core/with-bindings" -> "clojure.core/list";
"clojure.core/some->>" -> "clojure.core/seq";
"clojure.core/unchecked-multiply-int" -> "clojure.core/concat";
"clojure.core/defrecord" -> "clojure.core/import";
"clojure.core/unchecked-dec" -> "clojure.core/seq";
"clojure.core/defmulti" -> "clojure.core/and";
"clojure.core/unchecked-int" -> "clojure.core/concat";
"clojure.core/with-in-str" -> "clojure.core/*in*";
"clojure.core/letfn" -> "clojure.core/seq";
"clojure.core/declare" -> "clojure.core/concat";
"clojure.core/==" -> "user/equiv";
"clojure.core/unchecked-subtract-int" -> "clojure.core/list";
"clojure.core/with-local-vars" -> "clojure.core/list";
"clojure.core/for" -> "clojure.core/chunk-append";
"clojure.core/if-not" -> "clojure.core/seq";
"clojure.core/ns" -> "clojure.core/concat";
"clojure.core/assert" -> "clojure.core/when-not";
"clojure.core/sorted-map-by" -> "clojure.lang.PersistentTreeMap/create";
"clojure.core/unchecked-double" -> "clojure.core/concat";
"clojure.core/unchecked-dec-int" -> "clojure.core/concat";
"clojure.core/or" -> "clojure.core/list";
"clojure.core/reify" -> "clojure.core/concat";
"clojure.core/unchecked-negate-int" -> "clojure.core/list";
"clojure.core/identical?" -> "user/identical";
"clojure.core/as->" -> "clojure.core/list";
"clojure.core/doto" -> "clojure.core/let";
"clojure.core/when-let" -> "clojure.core/when";
"clojure.core/doto" -> "clojure.core/concat";
"clojure.core/char-array" -> "clojure.core/seq";
"clojure.core/bound-fn" -> "clojure.core/seq";
"clojure.core/dotimes" -> "clojure.core/vector";
"clojure.core/bit-not" -> "clojure.core/concat";
"clojure.core/longs" -> "clojure.core/seq";
"clojure.core/aclone" -> "clojure.core/concat";
"clojure.core/proxy" -> "clojure.core/vector";
"clojure.core/doto" -> "clojure.core/apply";
"clojure.core/unchecked-subtract" -> "clojure.core/concat";
"clojure.core/case" -> "Integer/MIN_VALUE";
"clojure.core/destructure" -> "clojure.core/seq?";
"clojure.core/assert" -> "clojure.core/concat";
"clojure.core/sync" -> "clojure.core/vector";
"clojure.core/shorts" -> "clojure.core/seq";
"clojure.core/bigint" -> "clojure.lang.BigInt/fromBigInteger";
"clojure.core/unchecked-negate-int" -> "user/unchecked_int_negate";
"clojure.core/boolean" -> "user/booleanCast";
"clojure.core/for" -> "clojure.core/chunk-rest";
"clojure.core/pr"[label="clojure.core/pr"];
"clojure.lang.BigInt/valueOf"[label="clojure.lang.BigInt/valueOf"];
"clojure.core/supers"[label="clojure.core/supers"];
"clojure.core/print"[label="clojure.core/print"];
"clojure.core/->>"[label="clojure.core/->>"];
"clojure.core/-"[label="clojure.core/-"];
"clojure.core/locking"[label="clojure.core/locking"];
"user/char_array"[label="user/char_array"];
"user/doubleCast"[label="user/doubleCast"];
"clojure.core/future-cancelled?"[label="clojure.core/future-cancelled?"];
"clojure.core/load-string"[label="clojure.core/load-string"];
"clojure.core/nfirst"[label="clojure.core/nfirst"];
"clojure.core/mod"[label="clojure.core/mod"];
"clojure.core/bigdec"[label="clojure.core/bigdec"];
"clojure.core/and"[label="clojure.core/and"];
"clojure.core/bit-flip"[label="clojure.core/bit-flip"];
"clojure.core/rseq"[label="clojure.core/rseq"];
"clojure.core/dec"[label="clojure.core/dec"];
"clojure.core/get"[label="clojure.core/get"];
"clojure.core/assoc!"[label="clojure.core/assoc!"];
"clojure.core/find-ns"[label="clojure.core/find-ns"];
"clojure.core/await"[label="clojure.core/await"];
"clojure.core/delay"[label="clojure.core/delay"];
"clojure.lang.RT/uncheckedFloatCast"[label="clojure.lang.RT/uncheckedFloatCast"];
"clojure.core/loaded-libs"[label="clojure.core/loaded-libs"];
"clojure.core/aset-int"[label="clojure.core/aset-int"];
"user/longCast"[label="user/longCast"];
"clojure.core/comparator"[label="clojure.core/comparator"];
"clojure.core/fnext"[label="clojure.core/fnext"];
"user/runInTransaction"[label="user/runInTransaction"];
"clojure.core/printf"[label="clojure.core/printf"];
"user/unchecked_dec"[label="user/unchecked_dec"];
"clojure.lang.Compiler/LOADER"[label="clojure.lang.Compiler/LOADER"];
"clojure.core/into-array"[label="clojure.core/into-array"];
"clojure.core/char"[label="clojure.core/char"];
"clojure.core/prn"[label="clojure.core/prn"];
"clojure.core/with-meta"[label="clojure.core/with-meta"];
"clojure.core/enumeration-seq"[label="clojure.core/enumeration-seq"];
"clojure.core/iterator-seq"[label="clojure.core/iterator-seq"];
"clojure.core/hash-combine"[label="clojure.core/hash-combine"];
"clojure.core/neg?"[label="clojure.core/neg?"];
"clojure.core/memoize"[label="clojure.core/memoize"];
"clojure.core/underive"[label="clojure.core/underive"];
"clojure.lang.RT/vector"[label="clojure.lang.RT/vector"];
"clojure.lang.RT/uncheckedLongCast"[label="clojure.lang.RT/uncheckedLongCast"];
"clojure.core/struct"[label="clojure.core/struct"];
"clojure.core//"[label="clojure.core//"];
"clojure.core/refer"[label="clojure.core/refer"];
"clojure.core/nthnext"[label="clojure.core/nthnext"];
"clojure.core/map-indexed"[label="clojure.core/map-indexed"];
"clojure.core/aget"[label="clojure.core/aget"];
"clojure.core/seque"[label="clojure.core/seque"];
"user/booleanCast"[label="user/booleanCast"];
"clojure.core/set-validator!"[label="clojure.core/set-validator!"];
"clojure.lang.PersistentList/EMPTY"[label="clojure.lang.PersistentList/EMPTY"];
"clojure.lang.RT/seqToTypedArray"[label="clojure.lang.RT/seqToTypedArray"];
"clojure.core/find-keyword"[label="clojure.core/find-keyword"];
"clojure.core/unchecked-divide-int"[label="clojure.core/unchecked-divide-int"];
"user/incP"[label="user/incP"];
"clojure.core/ancestors"[label="clojure.core/ancestors"];
"clojure.lang.Keyword/intern"[label="clojure.lang.Keyword/intern"];
"clojure.core/contains?"[label="clojure.core/contains?"];
"clojure.core/unchecked-char"[label="clojure.core/unchecked-char"];
"clojure.core/definterface"[label="clojure.core/definterface"];
"clojure.lang.PersistentHashSet/create"[label="clojure.lang.PersistentHashSet/create"];
"clojure.lang.Keyword/find"[label="clojure.lang.Keyword/find"];
"clojure.core/peek"[label="clojure.core/peek"];
"clojure.core/partial"[label="clojure.core/partial"];
"clojure.core/amap"[label="clojure.core/amap"];
"clojure.core/rest"[label="clojure.core/rest"];
"clojure.core/re-groups"[label="clojure.core/re-groups"];
"user/isNeg"[label="user/isNeg"];
"clojure.core/remove-ns"[label="clojure.core/remove-ns"];
"clojure.core/subvec"[label="clojure.core/subvec"];
"clojure.core/byte-array"[label="clojure.core/byte-array"];
"user/object_array"[label="user/object_array"];
"clojure.core/defmulti"[label="clojure.core/defmulti"];
"clojure.core/bound?"[label="clojure.core/bound?"];
"clojure.core/interleave"[label="clojure.core/interleave"];
"clojure.core/ns-map"[label="clojure.core/ns-map"];
"clojure.core/namespace"[label="clojure.core/namespace"];
"clojure.core/<="[label="clojure.core/<="];
"clojure.core/future-call"[label="clojure.core/future-call"];
"user/unchecked_int_add"[label="user/unchecked_int_add"];
"clojure.core/chars"[label="clojure.core/chars"];
"clojure.core/sorted-set"[label="clojure.core/sorted-set"];
"clojure.core/juxt"[label="clojure.core/juxt"];
"clojure.core/use"[label="clojure.core/use"];
"clojure.core/conj"[label="clojure.core/conj"];
"clojure.core/memfn"[label="clojure.core/memfn"];
"clojure.core/double-array"[label="clojure.core/double-array"];
"clojure.core/print-simple"[label="clojure.core/print-simple"];
"clojure.core/alength"[label="clojure.core/alength"];
"clojure.lang.RT/floatCast"[label="clojure.lang.RT/floatCast"];
"clojure.core/await-for"[label="clojure.core/await-for"];
"clojure.core/unchecked-short"[label="clojure.core/unchecked-short"];
"clojure.core/unchecked-byte"[label="clojure.core/unchecked-byte"];
"clojure.core/take"[label="clojure.core/take"];
"clojure.core/unchecked-remainder-int"[label="clojure.core/unchecked-remainder-int"];
"clojure.core/bit-test"[label="clojure.core/bit-test"];
"user/unchecked_minus"[label="user/unchecked_minus"];
"clojure.core/ref-set"[label="clojure.core/ref-set"];
"clojure.lang.Reflector/prepRet"[label="clojure.lang.Reflector/prepRet"];
"clojure.core/set-error-handler!"[label="clojure.core/set-error-handler!"];
"clojure.core/min"[label="clojure.core/min"];
"clojure.core/when-first"[label="clojure.core/when-first"];
"clojure.core/float-array"[label="clojure.core/float-array"];
"clojure.core/with-redefs"[label="clojure.core/with-redefs"];
"clojure.core/repeatedly"[label="clojure.core/repeatedly"];
"clojure.core/read-string"[label="clojure.core/read-string"];
"clojure.core/assoc-in"[label="clojure.core/assoc-in"];
"clojure.core/boolean"[label="clojure.core/boolean"];
"clojure.core/areduce"[label="clojure.core/areduce"];
"user/identical"[label="user/identical"];
"clojure.core/isa?"[label="clojure.core/isa?"];
"clojure.core/to-array"[label="clojure.core/to-array"];
"user/uncheckedIntCast"[label="user/uncheckedIntCast"];
"clojure.core/ref-history-count"[label="clojure.core/ref-history-count"];
"clojure.core/drop-while"[label="clojure.core/drop-while"];
"clojure.core/coll?"[label="clojure.core/coll?"];
"clojure.core/not-empty"[label="clojure.core/not-empty"];
"clojure.core/lazy-seq"[label="clojure.core/lazy-seq"];
"clojure.lang.PersistentHashMap/create"[label="clojure.lang.PersistentHashMap/create"];
"clojure.core/num"[label="clojure.core/num"];
"clojure.core/future?"[label="clojure.core/future?"];
"clojure.lang.LazilyPersistentVector/create"[label="clojure.lang.LazilyPersistentVector/create"];
"clojure.lang.RT/readString"[label="clojure.lang.RT/readString"];
"clojure.core/replicate"[label="clojure.core/replicate"];
"clojure.core/defonce"[label="clojure.core/defonce"];
"clojure.core/println-str"[label="clojure.core/println-str"];
"clojure.core/vector?"[label="clojure.core/vector?"];
"clojure.core/char?"[label="clojure.core/char?"];
"clojure.core/chunk-next"[label="clojure.core/chunk-next"];
"clojure.core/xml-seq"[label="clojure.core/xml-seq"];
"clojure.core/line-seq"[label="clojure.core/line-seq"];
"clojure.core/proxy-super"[label="clojure.core/proxy-super"];
"clojure.core/update-in"[label="clojure.core/update-in"];
"clojure.core/+'"[label="clojure.core/+'"];
"clojure.core/map"[label="clojure.core/map"];
"clojure.core/not"[label="clojure.core/not"];
"clojure.core/keep-indexed"[label="clojure.core/keep-indexed"];
"clojure.core/cond->"[label="clojure.core/cond->"];
"clojure.core/float"[label="clojure.core/float"];
"clojure.core/error-handler"[label="clojure.core/error-handler"];
"clojure.core/*"[label="clojure.core/*"];
"clojure.core/seq"[label="clojure.core/seq"];
"user/boolean_array"[label="user/boolean_array"];
"clojure.core/binding"[label="clojure.core/binding"];
"clojure.core/send-off"[label="clojure.core/send-off"];
"clojure.core/chunk-first"[label="clojure.core/chunk-first"];
"clojure.core/keep"[label="clojure.core/keep"];
"clojure.core/alias"[label="clojure.core/alias"];
"clojure.core/reversible?"[label="clojure.core/reversible?"];
"user/lte"[label="user/lte"];
"clojure.core/disj!"[label="clojure.core/disj!"];
"clojure.core/meta"[label="clojure.core/meta"];
"clojure.core/identical?"[label="clojure.core/identical?"];
"clojure.core/key"[label="clojure.core/key"];
"clojure.core/comment"[label="clojure.core/comment"];
"clojure.core/agent"[label="clojure.core/agent"];
"clojure.core/ref-min-history"[label="clojure.core/ref-min-history"];
"user/shiftLeft"[label="user/shiftLeft"];
"clojure.core/inc"[label="clojure.core/inc"];
"clojure.lang.Namespace/all"[label="clojure.lang.Namespace/all"];
"clojure.core/pop"[label="clojure.core/pop"];
"clojure.core/+"[label="clojure.core/+"];
"user/float_array"[label="user/float_array"];
"clojure.core/realized?"[label="clojure.core/realized?"];
"clojure.core/bit-shift-right"[label="clojure.core/bit-shift-right"];
"user/equiv"[label="user/equiv"];
"clojure.core/rational?"[label="clojure.core/rational?"];
"clojure.core/flatten"[label="clojure.core/flatten"];
"clojure.core/remove"[label="clojure.core/remove"];
"clojure.core/atom"[label="clojure.core/atom"];
"clojure.core/with-out-str"[label="clojure.core/with-out-str"];
"clojure.core/double"[label="clojure.core/double"];
"clojure.core/ex-data"[label="clojure.core/ex-data"];
"clojure.core/flush"[label="clojure.core/flush"];
"clojure.core/definline"[label="clojure.core/definline"];
"clojure.core/every?"[label="clojure.core/every?"];
"clojure.core/with-redefs-fn"[label="clojure.core/with-redefs-fn"];
"clojure.core/get-method"[label="clojure.core/get-method"];
"clojure.core/merge"[label="clojure.core/merge"];
"clojure.core/bit-set"[label="clojure.core/bit-set"];
"clojure.core/cond"[label="clojure.core/cond"];
"clojure.core/not-any?"[label="clojure.core/not-any?"];
"user/unchecked_add"[label="user/unchecked_add"];
"clojure.core/find-protocol-method"[label="clojure.core/find-protocol-method"];
"clojure.core/shorts"[label="clojure.core/shorts"];
"clojure.core/format"[label="clojure.core/format"];
"clojure.core/gensym"[label="clojure.core/gensym"];
"clojure.core/bit-clear"[label="clojure.core/bit-clear"];
"user/unchecked_int_multiply"[label="user/unchecked_int_multiply"];
"clojure.core/fn?"[label="clojure.core/fn?"];
"user/unchecked_int_divide"[label="user/unchecked_int_divide"];
"clojure.core/sorted?"[label="clojure.core/sorted?"];
"clojure.lang.Util/equiv"[label="clojure.lang.Util/equiv"];
"user/shiftRight"[label="user/shiftRight"];
"clojure.core/ns-publics"[label="clojure.core/ns-publics"];
"clojure.core/longs"[label="clojure.core/longs"];
"user/remainder"[label="user/remainder"];
"clojure.core/bound-fn"[label="clojure.core/bound-fn"];
"clojure.core/char-array"[label="clojure.core/char-array"];
"clojure.core/extend-type"[label="clojure.core/extend-type"];
"clojure.core/keyword?"[label="clojure.core/keyword?"];
"clojure.core/extenders"[label="clojure.core/extenders"];
"clojure.core/find"[label="clojure.core/find"];
"clojure.core/unchecked-dec"[label="clojure.core/unchecked-dec"];
"clojure.core/ns-aliases"[label="clojure.core/ns-aliases"];
"user/decP"[label="user/decP"];
"clojure.core/add-watch"[label="clojure.core/add-watch"];
"clojure.core/some->>"[label="clojure.core/some->>"];
"clojure.core/bit-or"[label="clojure.core/bit-or"];
"clojure.core/unchecked-multiply"[label="clojure.core/unchecked-multiply"];
"clojure.core/if-not"[label="clojure.core/if-not"];
"clojure.core/hash-set"[label="clojure.core/hash-set"];
"clojure.core/->Vec"[label="clojure.core/->Vec"];
"clojure.core/max-key"[label="clojure.core/max-key"];
"clojure.core/letfn"[label="clojure.core/letfn"];
"clojure.core/dissoc"[label="clojure.core/dissoc"];
"BigInteger/valueOf"[label="BigInteger/valueOf"];
"clojure.core/re-pattern"[label="clojure.core/re-pattern"];
"clojure.core/when"[label="clojure.core/when"];
"clojure.lang.RT/isReduced"[label="clojure.lang.RT/isReduced"];
"clojure.core/rand-nth"[label="clojure.core/rand-nth"];
"clojure.core/make-array"[label="clojure.core/make-array"];
"Integer/MAX_VALUE"[label="Integer/MAX_VALUE"];
"user/unchecked_inc"[label="user/unchecked_inc"];
"clojure.core/comp"[label="clojure.core/comp"];
"clojure.core/sequential?"[label="clojure.core/sequential?"];
"clojure.lang.Util/isInteger"[label="clojure.lang.Util/isInteger"];
"user/uncheckedShortCast"[label="user/uncheckedShortCast"];
"clojure.core/count"[label="clojure.core/count"];
"clojure.core/pop-thread-bindings"[label="clojure.core/pop-thread-bindings"];
"clojure.core/type"[label="clojure.core/type"];
"clojure.core/dorun"[label="clojure.core/dorun"];
"clojure.core/=="[label="clojure.core/=="];
"clojure.core/chunk-buffer"[label="clojure.core/chunk-buffer"];
"clojure.core/find-protocol-impl"[label="clojure.core/find-protocol-impl"];
"clojure.core/merge-with"[label="clojure.core/merge-with"];
"clojure.core/second"[label="clojure.core/second"];
"clojure.core/boolean-array"[label="clojure.core/boolean-array"];
"clojure.core/unchecked-inc-int"[label="clojure.core/unchecked-inc-int"];
"clojure.core/decimal?"[label="clojure.core/decimal?"];
"clojure.core/some"[label="clojure.core/some"];
"clojure.core/doseq"[label="clojure.core/doseq"];
"clojure.core/hash"[label="clojure.core/hash"];
"clojure.lang.Util/identical"[label="clojure.lang.Util/identical"];
"clojure.core/aset-byte"[label="clojure.core/aset-byte"];
"clojure.core/io!"[label="clojure.core/io!"];
"clojure.core/chunked-seq?"[label="clojure.core/chunked-seq?"];
"clojure.core/gen-class"[label="clojure.core/gen-class"];
"clojure.core/associative?"[label="clojure.core/associative?"];
"clojure.core/condp"[label="clojure.core/condp"];
"clojure.core/val"[label="clojure.core/val"];
"clojure.core/the-ns"[label="clojure.core/the-ns"];
"clojure.core/file-seq"[label="clojure.core/file-seq"];
"clojure.core/keys"[label="clojure.core/keys"];
"clojure.core/*in*"[label="clojure.core/*in*"];
"clojure.core/vector-of"[label="clojure.core/vector-of"];
"clojure.core/when-let"[label="clojure.core/when-let"];
"clojure.core/vals"[label="clojure.core/vals"];
"clojure.core/derive"[label="clojure.core/derive"];
"clojure.core/aset-double"[label="clojure.core/aset-double"];
"clojure.core/ex-info"[label="clojure.core/ex-info"];
"clojure.core/-reset-methods"[label="clojure.core/-reset-methods"];
"clojure.core/="[label="clojure.core/="];
"clojure.lang.RT/load"[label="clojure.lang.RT/load"];
"clojure.core/dissoc!"[label="clojure.core/dissoc!"];
"clojure.core/byte"[label="clojure.core/byte"];
"clojure.core/range"[label="clojure.core/range"];
"user/unchecked_multiply"[label="user/unchecked_multiply"];
"clojure.core/deref"[label="clojure.core/deref"];
"clojure.core/symbol?"[label="clojure.core/symbol?"];
"clojure.core/send"[label="clojure.core/send"];
"clojure.core/*'"[label="clojure.core/*'"];
"clojure.core/unchecked-float"[label="clojure.core/unchecked-float"];
"clojure.core/remove-all-methods"[label="clojure.core/remove-all-methods"];
"user/nanoTime"[label="user/nanoTime"];
"clojure.core/numerator"[label="clojure.core/numerator"];
"clojure.core/var-set"[label="clojure.core/var-set"];
"clojure.core/<"[label="clojure.core/<"];
"clojure.core/->VecSeq"[label="clojure.core/->VecSeq"];
"clojure.core/inc'"[label="clojure.core/inc'"];
"user/*loaded-libs*"[label="user/*loaded-libs*"];
"clojure.core/quot"[label="clojure.core/quot"];
"clojure.core/future-done?"[label="clojure.core/future-done?"];
"clojure.lang.Agent/releasePendingSends"[label="clojure.lang.Agent/releasePendingSends"];
"clojure.core/defn"[label="clojure.core/defn"];
"clojure.core/parents"[label="clojure.core/parents"];
"clojure.core/complement"[label="clojure.core/complement"];
"clojure.lang.RT/doubleCast"[label="clojure.lang.RT/doubleCast"];
"user/uncheckedDoubleCast"[label="user/uncheckedDoubleCast"];
"clojure.core/next"[label="clojure.core/next"];
"clojure.core/aset-boolean"[label="clojure.core/aset-boolean"];
"clojure.core/dosync"[label="clojure.core/dosync"];
"clojure.lang.RT/byteCast"[label="clojure.lang.RT/byteCast"];
"clojure.lang.Var/popThreadBindings"[label="clojure.lang.Var/popThreadBindings"];
"clojure.core/defmethod"[label="clojure.core/defmethod"];
"clojure.core/aset-float"[label="clojure.core/aset-float"];
"clojure.core/>="[label="clojure.core/>="];
"clojure.core/deliver"[label="clojure.core/deliver"];
"clojure.core/odd?"[label="clojure.core/odd?"];
"user/unchecked_int_inc"[label="user/unchecked_int_inc"];
"clojure.core/deftype"[label="clojure.core/deftype"];
"clojure.core/proxy-name"[label="clojure.core/proxy-name"];
"clojure.core/select-keys"[label="clojure.core/select-keys"];
"clojure.core/->ArrayChunk"[label="clojure.core/->ArrayChunk"];
"clojure.lang.Agent/soloExecutor"[label="clojure.lang.Agent/soloExecutor"];
"clojure.core/rand"[label="clojure.core/rand"];
"clojure.core/import*"[label="clojure.core/import*"];
"clojure.java.io/writer"[label="clojure.java.io/writer"];
"clojure.core/load-reader"[label="clojure.core/load-reader"];
"clojure.core/ffirst"[label="clojure.core/ffirst"];
"clojure.core/with-in-str"[label="clojure.core/with-in-str"];
"clojure.core/some->"[label="clojure.core/some->"];
"user/lt"[label="user/lt"];
"clojure.core/macroexpand-1"[label="clojure.core/macroexpand-1"];
"clojure.core/cast"[label="clojure.core/cast"];
"clojure.core/transient"[label="clojure.core/transient"];
"clojure.core/import"[label="clojure.core/import"];
"clojure.core/pop!"[label="clojure.core/pop!"];
"clojure.core/reduced"[label="clojure.core/reduced"];
"clojure.core/prefer-method"[label="clojure.core/prefer-method"];
"user/long_array"[label="user/long_array"];
"clojure.core/not-every?"[label="clojure.core/not-every?"];
"clojure.core/ensure"[label="clojure.core/ensure"];
"clojure.core/partition-all"[label="clojure.core/partition-all"];
"clojure.core/all-ns"[label="clojure.core/all-ns"];
"clojure.core/ref-max-history"[label="clojure.core/ref-max-history"];
"clojure.core/name"[label="clojure.core/name"];
"clojure.core/true?"[label="clojure.core/true?"];
"user/int_array"[label="user/int_array"];
"clojure.core/identity"[label="clojure.core/identity"];
"clojure.core/>"[label="clojure.core/>"];
"clojure.core/with-open"[label="clojure.core/with-open"];
"hello.core/-greet"[label="hello.core/-greet"];
"clojure.core/proxy-call-with-super"[label="clojure.core/proxy-call-with-super"];
"clojure.core/reset-meta!"[label="clojure.core/reset-meta!"];
"clojure.core/loop"[label="clojure.core/loop"];
"clojure.core/biginteger"[label="clojure.core/biginteger"];
"clojure.core/munge"[label="clojure.core/munge"];
"user/short_array"[label="user/short_array"];
"clojure.core/push-thread-bindings"[label="clojure.core/push-thread-bindings"];
"clojure.lang.Util/compare"[label="clojure.lang.Util/compare"];
"clojure.core/add-classpath"[label="clojure.core/add-classpath"];
"clojure.lang.IteratorSeq/create"[label="clojure.lang.IteratorSeq/create"];
"clojure.core/init-proxy"[label="clojure.core/init-proxy"];
"clojure.core.protocols/coll-reduce"[label="clojure.core.protocols/coll-reduce"];
"clojure.core/thread-bound?"[label="clojure.core/thread-bound?"];
"clojure.core/symbol"[label="clojure.core/symbol"];
"clojure.lang.BigInt/fromBigInteger"[label="clojure.lang.BigInt/fromBigInteger"];
"clojure.core/bases"[label="clojure.core/bases"];
"clojure.core/doubles"[label="clojure.core/doubles"];
"clojure.core/re-matcher"[label="clojure.core/re-matcher"];
"clojure.core/unchecked-add"[label="clojure.core/unchecked-add"];
"clojure.core/refer-clojure"[label="clojure.core/refer-clojure"];
"clojure.core/bit-and"[label="clojure.core/bit-and"];
"clojure.core/interpose"[label="clojure.core/interpose"];
"String/format"[label="String/format"];
"clojure.core/butlast"[label="clojure.core/butlast"];
"clojure.core/aset-char"[label="clojure.core/aset-char"];
"clojure.core/zero?"[label="clojure.core/zero?"];
"clojure.core/in-ns"[label="clojure.core/in-ns"];
"clojure.core/chunk"[label="clojure.core/chunk"];
"clojure.core/with-loading-context"[label="clojure.core/with-loading-context"];
"clojure.core/floats"[label="clojure.core/floats"];
"clojure.core/resolve"[label="clojure.core/resolve"];
"RT/loadClassForName"[label="RT/loadClassForName"];
"clojure.core/make-hierarchy"[label="clojure.core/make-hierarchy"];
"clojure.lang.RT/uncheckedIntCast"[label="clojure.lang.RT/uncheckedIntCast"];
"clojure.core/number?"[label="clojure.core/number?"];
"clojure.core/defrecord"[label="clojure.core/defrecord"];
"clojure.core/ns-interns"[label="clojure.core/ns-interns"];
"clojure.core/re-matches"[label="clojure.core/re-matches"];
"clojure.core/split-with"[label="clojure.core/split-with"];
"clojure.lang.Compiler/maybeResolveIn"[label="clojure.lang.Compiler/maybeResolveIn"];
"clojure.core/pmap"[label="clojure.core/pmap"];
"clojure.core/vector"[label="clojure.core/vector"];
"clojure.core/last"[label="clojure.core/last"];
"user/unchecked_int_remainder"[label="user/unchecked_int_remainder"];
"clojure.core/descendants"[label="clojure.core/descendants"];
"clojure.core/read"[label="clojure.core/read"];
"clojure.core/*math-context*"[label="clojure.core/*math-context*"];
"clojure.core/future"[label="clojure.core/future"];
"clojure.core/alter"[label="clojure.core/alter"];
"clojure.core/distinct?"[label="clojure.core/distinct?"];
"clojure.core/int"[label="clojure.core/int"];
"clojure.core/when-not"[label="clojure.core/when-not"];
"clojure.core/release-pending-sends"[label="clojure.core/release-pending-sends"];
"clojure.core/commute"[label="clojure.core/commute"];
"clojure.core/vary-meta"[label="clojure.core/vary-meta"];
"clojure.core/mapv"[label="clojure.core/mapv"];
"clojure.java.io/reader"[label="clojure.java.io/reader"];
"clojure.core/println"[label="clojure.core/println"];
"clojure.core/seq?"[label="clojure.core/seq?"];
"user/isZero"[label="user/isZero"];
"clojure.core/rem"[label="clojure.core/rem"];
"clojure.core/.."[label="clojure.core/.."];
"user/pushThreadBindings"[label="user/pushThreadBindings"];
"clojure.core/assoc"[label="clojure.core/assoc"];
"clojure.core/bigint"[label="clojure.core/bigint"];
"clojure.core/defstruct"[label="clojure.core/defstruct"];
"user/gte"[label="user/gte"];
"user/gt"[label="user/gt"];
"clojure.core/partition-by"[label="clojure.core/partition-by"];
"clojure.core/agent-error"[label="clojure.core/agent-error"];
"clojure.core/with-bindings*"[label="clojure.core/with-bindings*"];
"clojure.core/drop"[label="clojure.core/drop"];
"clojure.core/extend"[label="clojure.core/extend"];
"clojure.core/clojure-version"[label="clojure.core/clojure-version"];
"clojure.core/-'"[label="clojure.core/-'"];
"user/uncheckedFloatCast"[label="user/uncheckedFloatCast"];
"clojure.core/ifn?"[label="clojure.core/ifn?"];
"clojure.core/newline"[label="clojure.core/newline"];
"clojure.lang.PersistentTreeSet/create"[label="clojure.lang.PersistentTreeSet/create"];
"clojure.core/await1"[label="clojure.core/await1"];
"clojure.core/sync"[label="clojure.core/sync"];
"clojure.core/apply"[label="clojure.core/apply"];
"clojure.core/swap!"[label="clojure.core/swap!"];
"clojure.core/some-fn"[label="clojure.core/some-fn"];
"clojure.core/repeat"[label="clojure.core/repeat"];
"clojure.core/zipmap"[label="clojure.core/zipmap"];
"clojure.core/ratio?"[label="clojure.core/ratio?"];
"clojure.core/reduced?"[label="clojure.core/reduced?"];
"clojure.core/promise"[label="clojure.core/promise"];
"clojure.core/bit-xor"[label="clojure.core/bit-xor"];
"clojure.core/proxy"[label="clojure.core/proxy"];
"clojure.core/ns-unmap"[label="clojure.core/ns-unmap"];
"clojure.core/vec"[label="clojure.core/vec"];
"clojure.core/unchecked-negate"[label="clojure.core/unchecked-negate"];
"clojure.core/get-validator"[label="clojure.core/get-validator"];
"clojure.core/dotimes"[label="clojure.core/dotimes"];
"clojure.core/integer?"[label="clojure.core/integer?"];
"clojure.core/set-error-mode!"[label="clojure.core/set-error-mode!"];
"clojure.core/let"[label="clojure.core/let"];
"clojure.lang.Compiler/munge"[label="clojure.lang.Compiler/munge"];
"clojure.core/sequence"[label="clojure.core/sequence"];
"clojure.core/concat"[label="clojure.core/concat"];
"clojure.core/accessor"[label="clojure.core/accessor"];
"clojure.core/pvalues"[label="clojure.core/pvalues"];
"clojure.core/class?"[label="clojure.core/class?"];
"clojure.core/rand-int"[label="clojure.core/rand-int"];
"clojure.core/destructure"[label="clojure.core/destructure"];
"clojure.lang.Var/pushThreadBindings"[label="clojure.lang.Var/pushThreadBindings"];
"clojure.core/defprotocol"[label="clojure.core/defprotocol"];
"user/uncheckedByteCast"[label="user/uncheckedByteCast"];
"clojure.core/set?"[label="clojure.core/set?"];
"clojure.lang.Util/hashCombine"[label="clojure.lang.Util/hashCombine"];
"clojure.core/array-map"[label="clojure.core/array-map"];
"clojure.core/aset-long"[label="clojure.core/aset-long"];
"clojure.core/hash-map"[label="clojure.core/hash-map"];
"clojure.core/restart-agent"[label="clojure.core/restart-agent"];
"clojure.core/bit-and-not"[label="clojure.core/bit-and-not"];
"clojure.core/compare-and-set!"[label="clojure.core/compare-and-set!"];
"clojure.core/test"[label="clojure.core/test"];
"clojure.core/empty?"[label="clojure.core/empty?"];
"clojure.core/intern"[label="clojure.core/intern"];
"clojure.core/trampoline"[label="clojure.core/trampoline"];
"clojure.core/aclone"[label="clojure.core/aclone"];
"clojure.core/take-last"[label="clojure.core/take-last"];
"user/double_array"[label="user/double_array"];
"clojure.core/bit-not"[label="clojure.core/bit-not"];
"user/quotient"[label="user/quotient"];
"clojure.core/*out*"[label="clojure.core/*out*"];
"clojure.core/every-pred"[label="clojure.core/every-pred"];
"clojure.core/doto"[label="clojure.core/doto"];
"clojure.lang.RT/booleanCast"[label="clojure.lang.RT/booleanCast"];
"clojure.core/disj"[label="clojure.core/disj"];
"clojure.core/split-at"[label="clojure.core/split-at"];
"clojure.core/remove-watch"[label="clojure.core/remove-watch"];
"clojure.core/ref"[label="clojure.core/ref"];
"clojure.lang.PersistentTreeMap/create"[label="clojure.lang.PersistentTreeMap/create"];
"clojure.core/special-symbol?"[label="clojure.core/special-symbol?"];
"clojure.core/extends?"[label="clojure.core/extends?"];
"clojure.core/reify"[label="clojure.core/reify"];
"clojure.core/eval"[label="clojure.core/eval"];
"clojure.core/create-struct"[label="clojure.core/create-struct"];
"clojure.core/delay?"[label="clojure.core/delay?"];
"clojure.core/re-find"[label="clojure.core/re-find"];
"clojure.core/keyword"[label="clojure.core/keyword"];
"clojure.core/bound-fn*"[label="clojure.core/bound-fn*"];
"clojure.core/take-nth"[label="clojure.core/take-nth"];
"clojure.core/ns-name"[label="clojure.core/ns-name"];
"clojure.core/find-var"[label="clojure.core/find-var"];
"clojure.core/assert"[label="clojure.core/assert"];
"clojure.lang.Namespace/find"[label="clojure.lang.Namespace/find"];
"java.util.Collections/shuffle"[label="java.util.Collections/shuffle"];
"System/arraycopy"[label="System/arraycopy"];
"clojure.core/unchecked-subtract"[label="clojure.core/unchecked-subtract"];
"clojure.core/alter-var-root"[label="clojure.core/alter-var-root"];
"clojure.core/declare"[label="clojure.core/declare"];
"clojure.core/unchecked-int"[label="clojure.core/unchecked-int"];
"clojure.core/->VecNode"[label="clojure.core/->VecNode"];
"clojure.core/subseq"[label="clojure.core/subseq"];
"clojure.core/prn-str"[label="clojure.core/prn-str"];
"clojure.lang.LockingTransaction/isRunning"[label="clojure.lang.LockingTransaction/isRunning"];
"clojure.core/persistent!"[label="clojure.core/persistent!"];
"clojure.core/unchecked-multiply-int"[label="clojure.core/unchecked-multiply-int"];
"clojure.core/aset-short"[label="clojure.core/aset-short"];
"clojure.core/unchecked-dec-int"[label="clojure.core/unchecked-dec-int"];
"clojure.core/unchecked-double"[label="clojure.core/unchecked-double"];
"clojure.core/alter-meta!"[label="clojure.core/alter-meta!"];
"clojure.core/-cache-protocol-fn"[label="clojure.core/-cache-protocol-fn"];
"clojure.core/ns"[label="clojure.core/ns"];
"clojure.lang.PersistentArrayMap/createAsIfByAssoc"[label="clojure.lang.PersistentArrayMap/createAsIfByAssoc"];
"clojure.core/re-seq"[label="clojure.core/re-seq"];
"clojure.core/partition"[label="clojure.core/partition"];
"clojure.core/update-proxy"[label="clojure.core/update-proxy"];
"user/unchecked_int_negate"[label="user/unchecked_int_negate"];
"clojure.core/future-cancel"[label="clojure.core/future-cancel"];
"clojure.core/counted?"[label="clojure.core/counted?"];
"clojure.core/defn-"[label="clojure.core/defn-"];
"clojure.core/bytes"[label="clojure.core/bytes"];
"clojure.core/fnil"[label="clojure.core/fnil"];
"clojure.core/list"[label="clojure.core/list"];
"clojure.core/if-let"[label="clojure.core/if-let"];
"clojure.core/force"[label="clojure.core/force"];
"clojure.core/set-agent-send-off-executor!"[label="clojure.core/set-agent-send-off-executor!"];
"clojure.core/rsubseq"[label="clojure.core/rsubseq"];
"clojure.core/pos?"[label="clojure.core/pos?"];
"clojure.core/sort"[label="clojure.core/sort"];
"clojure.core/satisfies?"[label="clojure.core/satisfies?"];
"user/uncheckedCharCast"[label="user/uncheckedCharCast"];
"user/popThreadBindings"[label="user/popThreadBindings"];
"clojure.core/take-while"[label="clojure.core/take-while"];
"user/uncheckedLongCast"[label="user/uncheckedLongCast"];
"clojure.core/extend-protocol"[label="clojure.core/extend-protocol"];
"clojure.core/print-str"[label="clojure.core/print-str"];
"java.util.concurrent.TimeUnit/MILLISECONDS"[label="java.util.concurrent.TimeUnit/MILLISECONDS"];
"clojure.core/chunk-cons"[label="clojure.core/chunk-cons"];
"clojure.core/sorted-map-by"[label="clojure.core/sorted-map-by"];
"clojure.core/filter"[label="clojure.core/filter"];
"clojure.core/get-proxy-class"[label="clojure.core/get-proxy-class"];
"clojure.core/time"[label="clojure.core/time"];
"clojure.core/construct-proxy"[label="clojure.core/construct-proxy"];
"clojure.core/reverse"[label="clojure.core/reverse"];
"clojure.core/set"[label="clojure.core/set"];
"clojure.core/with-precision"[label="clojure.core/with-precision"];
"clojure.core/to-array-2d"[label="clojure.core/to-array-2d"];
"clojure.core/nth"[label="clojure.core/nth"];
"clojure.core/var?"[label="clojure.core/var?"];
"clojure.core/empty"[label="clojure.core/empty"];
"clojure.core/resultset-seq"[label="clojure.core/resultset-seq"];
"clojure.core/class"[label="clojure.core/class"];
"clojure.core/conj!"[label="clojure.core/conj!"];
"clojure.core/float?"[label="clojure.core/float?"];
"clojure.core/create-ns"[label="clojure.core/create-ns"];
"clojure.core/shuffle"[label="clojure.core/shuffle"];
"clojure.core/sorted-map"[label="clojure.core/sorted-map"];
"clojure.core/map?"[label="clojure.core/map?"];
"clojure.core.protocols/kv-reduce"[label="clojure.core.protocols/kv-reduce"];
"clojure.core/prefers"[label="clojure.core/prefers"];
"clojure.core/list*"[label="clojure.core/list*"];
"clojure.lang.Symbol/intern"[label="clojure.lang.Symbol/intern"];
"clojure.core/nthrest"[label="clojure.core/nthrest"];
"clojure.lang.RT/uncheckedShortCast"[label="clojure.lang.RT/uncheckedShortCast"];
"clojure.core/as->"[label="clojure.core/as->"];
"clojure.core/unchecked-negate-int"[label="clojure.core/unchecked-negate-int"];
"clojure.core/or"[label="clojure.core/or"];
"clojure.core/doall"[label="clojure.core/doall"];
"clojure.core/get-thread-bindings"[label="clojure.core/get-thread-bindings"];
"clojure.core/reductions"[label="clojure.core/reductions"];
"clojure.core/with-local-vars"[label="clojure.core/with-local-vars"];
"clojure.core/unchecked-subtract-int"[label="clojure.core/unchecked-subtract-int"];
"clojure.core/into"[label="clojure.core/into"];
"clojure.lang.Util/hash"[label="clojure.lang.Util/hash"];
"clojure.core/frequencies"[label="clojure.core/frequencies"];
"clojure.core/iterate"[label="clojure.core/iterate"];
"user/close"[label="user/close"];
"Integer/toHexString"[label="Integer/toHexString"];
"clojure.core/mapcat"[label="clojure.core/mapcat"];
"clojure.core/chunk-append"[label="clojure.core/chunk-append"];
"clojure.lang.EnumerationSeq/create"[label="clojure.lang.EnumerationSeq/create"];
"clojure.lang.RT/addURL"[label="clojure.lang.RT/addURL"];
"clojure.core/slurp"[label="clojure.core/slurp"];
"clojure.core/ns-unalias"[label="clojure.core/ns-unalias"];
"clojure.core/with-bindings"[label="clojure.core/with-bindings"];
"clojure.core/list?"[label="clojure.core/list?"];
"clojure.core/string?"[label="clojure.core/string?"];
"clojure.lang.RT/uncheckedByteCast"[label="clojure.lang.RT/uncheckedByteCast"];
"clojure.core/print-ctor"[label="clojure.core/print-ctor"];
"clojure.core/replace"[label="clojure.core/replace"];
"clojure.core/drop-last"[label="clojure.core/drop-last"];
"Double/POSITIVE_INFINITY"[label="Double/POSITIVE_INFINITY"];
"clojure.lang.Var/getThreadBindings"[label="clojure.lang.Var/getThreadBindings"];
"clojure.core/int-array"[label="clojure.core/int-array"];
"clojure.core/unchecked-long"[label="clojure.core/unchecked-long"];
"clojure.lang.Namespace/remove"[label="clojure.lang.Namespace/remove"];
"clojure.core/nnext"[label="clojure.core/nnext"];
"clojure.lang.Numbers/isZero"[label="clojure.lang.Numbers/isZero"];
"clojure.core/aset"[label="clojure.core/aset"];
"clojure.core/chunk-rest"[label="clojure.core/chunk-rest"];
"clojure.core/ns-refers"[label="clojure.core/ns-refers"];
"clojure.core/nil?"[label="clojure.core/nil?"];
"clojure.lang.RT/count"[label="clojure.lang.RT/count"];
"clojure.lang.RT/longCast"[label="clojure.lang.RT/longCast"];
"clojure.core/sorted-set-by"[label="clojure.core/sorted-set-by"];
"clojure.core/lazy-cat"[label="clojure.core/lazy-cat"];
"clojure.core/reduce-kv"[label="clojure.core/reduce-kv"];
"clojure.core/reset!"[label="clojure.core/reset!"];
"clojure.lang.Var/intern"[label="clojure.lang.Var/intern"];
"BigDecimal/valueOf"[label="BigDecimal/valueOf"];
"user/isPos"[label="user/isPos"];
"clojure.core/error-mode"[label="clojure.core/error-mode"];
"clojure.core/methods"[label="clojure.core/methods"];
"clojure.core/short-array"[label="clojure.core/short-array"];
"clojure.core/bit-shift-left"[label="clojure.core/bit-shift-left"];
"clojure.core/spit"[label="clojure.core/spit"];
"clojure.core/defmacro"[label="clojure.core/defmacro"];
"user/unchecked_int_subtract"[label="user/unchecked_int_subtract"];
"clojure.lang.RT/shortCast"[label="clojure.lang.RT/shortCast"];
"Integer/MIN_VALUE"[label="Integer/MIN_VALUE"];
"clojure.lang.Namespace/findOrCreate"[label="clojure.lang.Namespace/findOrCreate"];
"clojure.core/namespace-munge"[label="clojure.core/namespace-munge"];
"clojure.core/fn"[label="clojure.core/fn"];
"clojure.core/long-array"[label="clojure.core/long-array"];
"clojure.core/load"[label="clojure.core/load"];
"clojure.core/pr-str"[label="clojure.core/pr-str"];
"clojure.core/rationalize"[label="clojure.core/rationalize"];
"clojure.core/long"[label="clojure.core/long"];
"user/unchecked_int_dec"[label="user/unchecked_int_dec"];
"clojure.core/gen-interface"[label="clojure.core/gen-interface"];
"clojure.core/cycle"[label="clojure.core/cycle"];
"clojure.core/reduce"[label="clojure.core/reduce"];
"clojure.core/distinct"[label="clojure.core/distinct"];
"clojure.core/get-in"[label="clojure.core/get-in"];
"clojure.core/short"[label="clojure.core/short"];
"clojure.core/send-via"[label="clojure.core/send-via"];
"clojure.core/denominator"[label="clojure.core/denominator"];
"clojure.core/macroexpand"[label="clojure.core/macroexpand"];
"clojure.core/sort-by"[label="clojure.core/sort-by"];
"clojure.lang.Agent/pooledExecutor"[label="clojure.lang.Agent/pooledExecutor"];
"clojure.core/clear-agent-errors"[label="clojure.core/clear-agent-errors"];
"clojure.core/subs"[label="clojure.core/subs"];
"clojure.core/for"[label="clojure.core/for"];
"clojure.core/set-agent-send-executor!"[label="clojure.core/set-agent-send-executor!"];
"clojure.core/compile"[label="clojure.core/compile"];
"clojure.core/false?"[label="clojure.core/false?"];
"clojure.core/agent-errors"[label="clojure.core/agent-errors"];
"clojure.core/ns-imports"[label="clojure.core/ns-imports"];
"clojure.core/method-sig"[label="clojure.core/method-sig"];
"clojure.core/unchecked-inc"[label="clojure.core/unchecked-inc"];
"clojure.core/first"[label="clojure.core/first"];
"clojure.core/remove-method"[label="clojure.core/remove-method"];
"clojure.lang.RT/uncheckedDoubleCast"[label="clojure.lang.RT/uncheckedDoubleCast"];
"clojure.core/bean"[label="clojure.core/bean"];
"user/addMethod"[label="user/addMethod"];
"clojure.lang.Compiler/writeClassFile"[label="clojure.lang.Compiler/writeClassFile"];
"clojure.core/even?"[label="clojure.core/even?"];
"clojure.core/var-get"[label="clojure.core/var-get"];
"clojure.core/shutdown-agents"[label="clojure.core/shutdown-agents"];
"clojure.core/dec'"[label="clojure.core/dec'"];
"clojure.core/tree-seq"[label="clojure.core/tree-seq"];
"clojure.core/pcalls"[label="clojure.core/pcalls"];
"clojure.core/compare"[label="clojure.core/compare"];
"user/byte_array"[label="user/byte_array"];
"clojure.core/instance?"[label="clojure.core/instance?"];
"clojure.core/require"[label="clojure.core/require"];
"clojure.core/not="[label="clojure.core/not="];
"clojure.core/group-by"[label="clojure.core/group-by"];
"clojure.core/case"[label="clojure.core/case"];
"clojure.core/cond->>"[label="clojure.core/cond->>"];
"clojure.core/constantly"[label="clojure.core/constantly"];
"clojure.core/struct-map"[label="clojure.core/struct-map"];
"clojure.core/unchecked-add-int"[label="clojure.core/unchecked-add-int"];
"clojure.core/cons"[label="clojure.core/cons"];
"clojure.core/max"[label="clojure.core/max"];
"clojure.core/filterv"[label="clojure.core/filterv"];
"clojure.core/proxy-mappings"[label="clojure.core/proxy-mappings"];
"clojure.core/while"[label="clojure.core/while"];
"clojure.core/object-array"[label="clojure.core/object-array"];
"clojure.core/->"[label="clojure.core/->"];
"clojure.core/booleans"[label="clojure.core/booleans"];
"clojure.core/ints"[label="clojure.core/ints"];
"clojure.core/min-key"[label="clojure.core/min-key"];
"clojure.core/ns-resolve"[label="clojure.core/ns-resolve"];
"clojure.core/read-line"[label="clojure.core/read-line"];
"clojure.core/str"[label="clojure.core/str"];
}