package clojure;

import clojure.lang.AFn;
import clojure.lang.Compiler;
import clojure.lang.IFn;
import clojure.lang.IObj;
import clojure.lang.IPersistentMap;
import clojure.lang.Keyword;
import clojure.lang.PersistentHashSet;
import clojure.lang.PersistentList;
import clojure.lang.RT;
import clojure.lang.Symbol;
import clojure.lang.Var;
import java.util.Arrays;

public class core__init
{
  public static final Var const__0;
  public static final AFn const__1;
  public static final Var const__10;
  public static final AFn const__100;
  public static final Object const__1000;
  public static final AFn const__1001;
  public static final Var const__1002;
  public static final Object const__1003;
  public static final Object const__1004;
  public static final AFn const__1005;
  public static final Var const__1006;
  public static final Object const__1007;
  public static final Object const__1008;
  public static final AFn const__1009;
  public static final Var const__101;
  public static final Var const__1010;
  public static final Object const__1011;
  public static final Object const__1012;
  public static final AFn const__1013;
  public static final Var const__1014;
  public static final Object const__1015;
  public static final Object const__1016;
  public static final AFn const__1017;
  public static final Var const__1018;
  public static final Object const__1019;
  public static final Object const__102;
  public static final Object const__1020;
  public static final AFn const__1021;
  public static final Var const__1022;
  public static final Object const__1023;
  public static final Object const__1024;
  public static final AFn const__1025;
  public static final Var const__1026;
  public static final Object const__1027;
  public static final Object const__1028;
  public static final AFn const__1029;
  public static final Object const__103;
  public static final Var const__1030;
  public static final Object const__1031;
  public static final Object const__1032;
  public static final AFn const__1033;
  public static final Var const__1034;
  public static final Object const__1035;
  public static final Object const__1036;
  public static final AFn const__1037;
  public static final Var const__1038;
  public static final Object const__1039;
  public static final AFn const__104;
  public static final Object const__1040;
  public static final AFn const__1041;
  public static final Var const__1042;
  public static final Object const__1043;
  public static final Object const__1044;
  public static final AFn const__1045;
  public static final Var const__1046;
  public static final Object const__1047;
  public static final Object const__1048;
  public static final AFn const__1049;
  public static final Var const__105;
  public static final Var const__1050;
  public static final Object const__1051;
  public static final Object const__1052;
  public static final AFn const__1053;
  public static final Var const__1054;
  public static final Object const__1055;
  public static final Object const__1056;
  public static final AFn const__1057;
  public static final Var const__1058;
  public static final Object const__1059;
  public static final Object const__106;
  public static final Object const__1060;
  public static final AFn const__1061;
  public static final Var const__1062;
  public static final Object const__1063;
  public static final Object const__1064;
  public static final AFn const__1065;
  public static final Object const__1066;
  public static final Object const__1067;
  public static final AFn const__1068;
  public static final Var const__1069;
  public static final Object const__107;
  public static final Object const__1070;
  public static final Object const__1071;
  public static final AFn const__1072;
  public static final Var const__1073;
  public static final Object const__1074;
  public static final Object const__1075;
  public static final AFn const__1076;
  public static final Var const__1077;
  public static final Object const__1078;
  public static final Object const__1079;
  public static final AFn const__108;
  public static final AFn const__1080;
  public static final Var const__1081;
  public static final Object const__1082;
  public static final Object const__1083;
  public static final AFn const__1084;
  public static final Var const__1085;
  public static final Object const__1086;
  public static final Object const__1087;
  public static final AFn const__1088;
  public static final Var const__1089;
  public static final Var const__109;
  public static final Object const__1090;
  public static final Object const__1091;
  public static final AFn const__1092;
  public static final Var const__1093;
  public static final Object const__1094;
  public static final Object const__1095;
  public static final AFn const__1096;
  public static final Var const__1097;
  public static final Object const__1098;
  public static final Object const__1099;
  public static final Object const__11;
  public static final Object const__110;
  public static final AFn const__1100;
  public static final Var const__1101;
  public static final Object const__1102;
  public static final Object const__1103;
  public static final AFn const__1104;
  public static final Var const__1105;
  public static final Object const__1106;
  public static final Object const__1107;
  public static final AFn const__1108;
  public static final Var const__1109;
  public static final Object const__111;
  public static final Object const__1110;
  public static final Object const__1111;
  public static final AFn const__1112;
  public static final Var const__1113;
  public static final Object const__1114;
  public static final Object const__1115;
  public static final AFn const__1116;
  public static final Var const__1117;
  public static final Object const__1118;
  public static final Object const__1119;
  public static final AFn const__112;
  public static final AFn const__1120;
  public static final Var const__1121;
  public static final Object const__1122;
  public static final Object const__1123;
  public static final Object const__1124;
  public static final Var const__1125;
  public static final Object const__1126;
  public static final Object const__1127;
  public static final Var const__1128;
  public static final Object const__1129;
  public static final Var const__113;
  public static final Object const__1130;
  public static final Var const__1131;
  public static final Object const__1132;
  public static final Object const__1133;
  public static final Var const__1134;
  public static final Object const__1135;
  public static final Object const__1136;
  public static final Var const__1137;
  public static final Object const__1138;
  public static final Object const__1139;
  public static final Object const__114;
  public static final Var const__1140;
  public static final Object const__1141;
  public static final Object const__1142;
  public static final Var const__1143;
  public static final Object const__1144;
  public static final Object const__1145;
  public static final Var const__1146;
  public static final Object const__1147;
  public static final Object const__1148;
  public static final Var const__1149;
  public static final Keyword const__115;
  public static final Object const__1150;
  public static final Object const__1151;
  public static final Var const__1152;
  public static final Object const__1153;
  public static final Object const__1154;
  public static final Var const__1155;
  public static final Object const__1156;
  public static final Object const__1157;
  public static final Var const__1158;
  public static final Object const__1159;
  public static final Keyword const__116;
  public static final Object const__1160;
  public static final Var const__1161;
  public static final Object const__1162;
  public static final Object const__1163;
  public static final Var const__1164;
  public static final Object const__1165;
  public static final Object const__1166;
  public static final Var const__1167;
  public static final Object const__1168;
  public static final Object const__1169;
  public static final AFn const__117;
  public static final AFn const__1170;
  public static final Var const__1171;
  public static final Object const__1172;
  public static final Object const__1173;
  public static final AFn const__1174;
  public static final Var const__1175;
  public static final Object const__1176;
  public static final Object const__1177;
  public static final AFn const__1178;
  public static final Var const__1179;
  public static final Var const__118;
  public static final Object const__1180;
  public static final Object const__1181;
  public static final Object const__1182;
  public static final AFn const__1183;
  public static final Var const__1184;
  public static final Object const__1185;
  public static final Object const__1186;
  public static final AFn const__1187;
  public static final Var const__1188;
  public static final Object const__1189;
  public static final Object const__119;
  public static final Object const__1190;
  public static final AFn const__1191;
  public static final Var const__1192;
  public static final Object const__1193;
  public static final Object const__1194;
  public static final AFn const__1195;
  public static final Var const__1196;
  public static final Object const__1197;
  public static final Object const__1198;
  public static final AFn const__1199;
  public static final AFn const__12;
  public static final AFn const__120;
  public static final Var const__1200;
  public static final Object const__1201;
  public static final Object const__1202;
  public static final Object const__1203;
  public static final AFn const__1204;
  public static final Var const__1205;
  public static final Object const__1206;
  public static final Object const__1207;
  public static final AFn const__1208;
  public static final Var const__1209;
  public static final Var const__121;
  public static final Object const__1210;
  public static final Object const__1211;
  public static final Object const__1212;
  public static final AFn const__1213;
  public static final Var const__1214;
  public static final Object const__1215;
  public static final AFn const__1216;
  public static final Var const__1217;
  public static final Object const__1218;
  public static final Object const__1219;
  public static final Object const__122;
  public static final AFn const__1220;
  public static final Var const__1221;
  public static final Object const__1222;
  public static final Object const__1223;
  public static final AFn const__1224;
  public static final Var const__1225;
  public static final Object const__1226;
  public static final AFn const__1227;
  public static final Var const__1228;
  public static final Object const__1229;
  public static final Object const__123;
  public static final Object const__1230;
  public static final AFn const__1231;
  public static final Var const__1232;
  public static final Object const__1233;
  public static final Object const__1234;
  public static final AFn const__1235;
  public static final Var const__1236;
  public static final Object const__1237;
  public static final Object const__1238;
  public static final AFn const__1239;
  public static final AFn const__124;
  public static final Var const__1240;
  public static final Object const__1241;
  public static final Object const__1242;
  public static final AFn const__1243;
  public static final Var const__1244;
  public static final Object const__1245;
  public static final Object const__1246;
  public static final AFn const__1247;
  public static final Var const__1248;
  public static final Object const__1249;
  public static final Var const__125;
  public static final Object const__1250;
  public static final AFn const__1251;
  public static final Var const__1252;
  public static final Object const__1253;
  public static final Object const__1254;
  public static final AFn const__1255;
  public static final Var const__1256;
  public static final Object const__1257;
  public static final Object const__1258;
  public static final AFn const__1259;
  public static final Object const__126;
  public static final Var const__1260;
  public static final Object const__1261;
  public static final Object const__1262;
  public static final AFn const__1263;
  public static final Var const__1264;
  public static final Object const__1265;
  public static final Object const__1266;
  public static final AFn const__1267;
  public static final Var const__1268;
  public static final Object const__1269;
  public static final Object const__127;
  public static final Object const__1270;
  public static final AFn const__1271;
  public static final Var const__1272;
  public static final Object const__1273;
  public static final Object const__1274;
  public static final AFn const__1275;
  public static final Var const__1276;
  public static final Object const__1277;
  public static final Object const__1278;
  public static final AFn const__1279;
  public static final AFn const__128;
  public static final Var const__1280;
  public static final Object const__1281;
  public static final Object const__1282;
  public static final Var const__1283;
  public static final Object const__1284;
  public static final Object const__1285;
  public static final Var const__1286;
  public static final Object const__1287;
  public static final Object const__1288;
  public static final AFn const__1289;
  public static final Var const__129;
  public static final Var const__1290;
  public static final Object const__1291;
  public static final Object const__1292;
  public static final AFn const__1293;
  public static final Var const__1294;
  public static final Object const__1295;
  public static final Object const__1296;
  public static final AFn const__1297;
  public static final Var const__1298;
  public static final Object const__1299;
  public static final Var const__13;
  public static final Object const__130;
  public static final Object const__1300;
  public static final AFn const__1301;
  public static final Var const__1302;
  public static final Object const__1303;
  public static final Object const__1304;
  public static final AFn const__1305;
  public static final Var const__1306;
  public static final Object const__1307;
  public static final Object const__1308;
  public static final AFn const__1309;
  public static final Object const__131;
  public static final Var const__1310;
  public static final Object const__1311;
  public static final Object const__1312;
  public static final AFn const__1313;
  public static final Var const__1314;
  public static final Object const__1315;
  public static final Object const__1316;
  public static final AFn const__1317;
  public static final Var const__1318;
  public static final Object const__1319;
  public static final AFn const__132;
  public static final Object const__1320;
  public static final AFn const__1321;
  public static final Var const__1322;
  public static final Object const__1323;
  public static final Object const__1324;
  public static final AFn const__1325;
  public static final Var const__1326;
  public static final Object const__1327;
  public static final Object const__1328;
  public static final AFn const__1329;
  public static final Var const__133;
  public static final Var const__1330;
  public static final Object const__1331;
  public static final Object const__1332;
  public static final AFn const__1333;
  public static final Var const__1334;
  public static final Object const__1335;
  public static final Object const__1336;
  public static final AFn const__1337;
  public static final Var const__1338;
  public static final Object const__1339;
  public static final Object const__134;
  public static final Object const__1340;
  public static final AFn const__1341;
  public static final Var const__1342;
  public static final Object const__1343;
  public static final Object const__1344;
  public static final AFn const__1345;
  public static final Var const__1346;
  public static final Object const__1347;
  public static final Object const__1348;
  public static final AFn const__1349;
  public static final Object const__135;
  public static final Var const__1350;
  public static final Object const__1351;
  public static final Object const__1352;
  public static final AFn const__1353;
  public static final Var const__1354;
  public static final Object const__1355;
  public static final Object const__1356;
  public static final AFn const__1357;
  public static final Var const__1358;
  public static final Object const__1359;
  public static final AFn const__136;
  public static final Object const__1360;
  public static final AFn const__1361;
  public static final Var const__1362;
  public static final Object const__1363;
  public static final Object const__1364;
  public static final AFn const__1365;
  public static final Var const__1366;
  public static final Object const__1367;
  public static final Object const__1368;
  public static final AFn const__1369;
  public static final Var const__137;
  public static final Var const__1370;
  public static final Object const__1371;
  public static final Object const__1372;
  public static final AFn const__1373;
  public static final Var const__1374;
  public static final Object const__1375;
  public static final Object const__1376;
  public static final AFn const__1377;
  public static final Var const__1378;
  public static final Object const__1379;
  public static final Object const__138;
  public static final Object const__1380;
  public static final AFn const__1381;
  public static final Var const__1382;
  public static final Object const__1383;
  public static final Object const__1384;
  public static final AFn const__1385;
  public static final Var const__1386;
  public static final Object const__1387;
  public static final Object const__1388;
  public static final AFn const__1389;
  public static final Object const__139;
  public static final Var const__1390;
  public static final Object const__1391;
  public static final Object const__1392;
  public static final AFn const__1393;
  public static final Var const__1394;
  public static final Object const__1395;
  public static final Object const__1396;
  public static final AFn const__1397;
  public static final Var const__1398;
  public static final Object const__1399;
  public static final Object const__14;
  public static final AFn const__140;
  public static final Object const__1400;
  public static final AFn const__1401;
  public static final Var const__1402;
  public static final Object const__1403;
  public static final Object const__1404;
  public static final AFn const__1405;
  public static final Var const__1406;
  public static final Object const__1407;
  public static final Object const__1408;
  public static final AFn const__1409;
  public static final Var const__141;
  public static final Var const__1410;
  public static final Object const__1411;
  public static final Object const__1412;
  public static final AFn const__1413;
  public static final Var const__1414;
  public static final Object const__1415;
  public static final Object const__1416;
  public static final AFn const__1417;
  public static final Var const__1418;
  public static final Object const__1419;
  public static final Object const__142;
  public static final Object const__1420;
  public static final AFn const__1421;
  public static final Var const__1422;
  public static final Object const__1423;
  public static final Object const__1424;
  public static final AFn const__1425;
  public static final Var const__1426;
  public static final Object const__1427;
  public static final Object const__1428;
  public static final AFn const__1429;
  public static final Object const__143;
  public static final Var const__1430;
  public static final Object const__1431;
  public static final Object const__1432;
  public static final AFn const__1433;
  public static final Var const__1434;
  public static final Object const__1435;
  public static final Object const__1436;
  public static final AFn const__1437;
  public static final Var const__1438;
  public static final Object const__1439;
  public static final AFn const__144;
  public static final Object const__1440;
  public static final AFn const__1441;
  public static final Var const__1442;
  public static final Object const__1443;
  public static final Object const__1444;
  public static final AFn const__1445;
  public static final Var const__1446;
  public static final Object const__1447;
  public static final Object const__1448;
  public static final AFn const__1449;
  public static final Var const__145;
  public static final Var const__1450;
  public static final Object const__1451;
  public static final Object const__1452;
  public static final AFn const__1453;
  public static final Var const__1454;
  public static final Object const__1455;
  public static final Object const__1456;
  public static final AFn const__1457;
  public static final Var const__1458;
  public static final Object const__1459;
  public static final Object const__146;
  public static final Object const__1460;
  public static final AFn const__1461;
  public static final Var const__1462;
  public static final Object const__1463;
  public static final Object const__1464;
  public static final AFn const__1465;
  public static final Var const__1466;
  public static final Object const__1467;
  public static final Object const__1468;
  public static final AFn const__1469;
  public static final Object const__147;
  public static final Var const__1470;
  public static final Object const__1471;
  public static final Object const__1472;
  public static final AFn const__1473;
  public static final Var const__1474;
  public static final Object const__1475;
  public static final Object const__1476;
  public static final AFn const__1477;
  public static final Var const__1478;
  public static final Object const__1479;
  public static final AFn const__148;
  public static final Object const__1480;
  public static final AFn const__1481;
  public static final Object const__1482;
  public static final Object const__1483;
  public static final Keyword const__1484;
  public static final AFn const__1485;
  public static final Keyword const__1486;
  public static final AFn const__1487;
  public static final Var const__1488;
  public static final Object const__1489;
  public static final Var const__149;
  public static final Object const__1490;
  public static final AFn const__1491;
  public static final Object const__1492;
  public static final Object const__1493;
  public static final AFn const__1494;
  public static final AFn const__1495;
  public static final Object const__1496;
  public static final Object const__1497;
  public static final AFn const__1498;
  public static final AFn const__1499;
  public static final Keyword const__15;
  public static final Object const__150;
  public static final Var const__1500;
  public static final Object const__1501;
  public static final Object const__1502;
  public static final AFn const__1503;
  public static final Var const__1504;
  public static final Object const__1505;
  public static final Object const__1506;
  public static final AFn const__1507;
  public static final Var const__1508;
  public static final Object const__1509;
  public static final Object const__151;
  public static final Object const__1510;
  public static final AFn const__1511;
  public static final Var const__1512;
  public static final Object const__1513;
  public static final Object const__1514;
  public static final AFn const__1515;
  public static final Var const__1516;
  public static final Object const__1517;
  public static final Object const__1518;
  public static final AFn const__1519;
  public static final AFn const__152;
  public static final Var const__1520;
  public static final Object const__1521;
  public static final Object const__1522;
  public static final AFn const__1523;
  public static final Var const__1524;
  public static final Object const__1525;
  public static final Object const__1526;
  public static final AFn const__1527;
  public static final Var const__1528;
  public static final Object const__1529;
  public static final Var const__153;
  public static final Object const__1530;
  public static final AFn const__1531;
  public static final Var const__1532;
  public static final Object const__1533;
  public static final Object const__1534;
  public static final AFn const__1535;
  public static final Var const__1536;
  public static final Object const__1537;
  public static final Object const__1538;
  public static final AFn const__1539;
  public static final Object const__154;
  public static final Var const__1540;
  public static final Object const__1541;
  public static final Object const__1542;
  public static final AFn const__1543;
  public static final Var const__1544;
  public static final Object const__1545;
  public static final Object const__1546;
  public static final AFn const__1547;
  public static final Var const__1548;
  public static final Object const__1549;
  public static final Object const__155;
  public static final Object const__1550;
  public static final AFn const__1551;
  public static final Var const__1552;
  public static final Object const__1553;
  public static final Object const__1554;
  public static final AFn const__1555;
  public static final Var const__1556;
  public static final Object const__1557;
  public static final Object const__1558;
  public static final Object const__1559;
  public static final AFn const__156;
  public static final AFn const__1560;
  public static final Var const__1561;
  public static final Object const__1562;
  public static final Object const__1563;
  public static final Object const__1564;
  public static final AFn const__1565;
  public static final Var const__1566;
  public static final Object const__1567;
  public static final Object const__1568;
  public static final AFn const__1569;
  public static final Var const__157;
  public static final Var const__1570;
  public static final Object const__1571;
  public static final Object const__1572;
  public static final AFn const__1573;
  public static final Var const__1574;
  public static final Object const__1575;
  public static final Object const__1576;
  public static final AFn const__1577;
  public static final Var const__1578;
  public static final Object const__1579;
  public static final Object const__158;
  public static final Object const__1580;
  public static final AFn const__1581;
  public static final Var const__1582;
  public static final Object const__1583;
  public static final Object const__1584;
  public static final AFn const__1585;
  public static final Var const__1586;
  public static final Object const__1587;
  public static final Object const__1588;
  public static final AFn const__1589;
  public static final Object const__159;
  public static final Var const__1590;
  public static final Object const__1591;
  public static final Object const__1592;
  public static final AFn const__1593;
  public static final Var const__1594;
  public static final Object const__1595;
  public static final Object const__1596;
  public static final AFn const__1597;
  public static final Var const__1598;
  public static final Object const__1599;
  public static final Keyword const__16;
  public static final AFn const__160;
  public static final Object const__1600;
  public static final AFn const__1601;
  public static final Var const__1602;
  public static final Object const__1603;
  public static final Object const__1604;
  public static final AFn const__1605;
  public static final Var const__1606;
  public static final Object const__1607;
  public static final Object const__1608;
  public static final AFn const__1609;
  public static final Var const__161;
  public static final Var const__1610;
  public static final Object const__1611;
  public static final Object const__1612;
  public static final AFn const__1613;
  public static final Var const__1614;
  public static final Object const__1615;
  public static final Object const__1616;
  public static final AFn const__1617;
  public static final Var const__1618;
  public static final Object const__1619;
  public static final Object const__162;
  public static final Object const__1620;
  public static final AFn const__1621;
  public static final Var const__1622;
  public static final Object const__1623;
  public static final Object const__1624;
  public static final AFn const__1625;
  public static final Var const__1626;
  public static final Object const__1627;
  public static final Object const__1628;
  public static final AFn const__1629;
  public static final Object const__163;
  public static final Var const__1630;
  public static final Object const__1631;
  public static final Object const__1632;
  public static final AFn const__1633;
  public static final Var const__1634;
  public static final Object const__1635;
  public static final Object const__1636;
  public static final AFn const__1637;
  public static final Var const__1638;
  public static final Object const__1639;
  public static final AFn const__164;
  public static final Object const__1640;
  public static final AFn const__1641;
  public static final Var const__1642;
  public static final Object const__1643;
  public static final Object const__1644;
  public static final AFn const__1645;
  public static final Var const__1646;
  public static final Object const__1647;
  public static final Object const__1648;
  public static final AFn const__1649;
  public static final Var const__165;
  public static final Var const__1650;
  public static final Object const__1651;
  public static final Object const__1652;
  public static final AFn const__1653;
  public static final Var const__1654;
  public static final Object const__1655;
  public static final Object const__1656;
  public static final AFn const__1657;
  public static final Var const__1658;
  public static final Object const__1659;
  public static final Object const__166;
  public static final Object const__1660;
  public static final AFn const__1661;
  public static final Var const__1662;
  public static final Object const__1663;
  public static final Object const__1664;
  public static final AFn const__1665;
  public static final Var const__1666;
  public static final Object const__1667;
  public static final Object const__1668;
  public static final AFn const__1669;
  public static final Object const__167;
  public static final Var const__1670;
  public static final Object const__1671;
  public static final Object const__1672;
  public static final AFn const__1673;
  public static final Var const__1674;
  public static final Object const__1675;
  public static final Object const__1676;
  public static final AFn const__1677;
  public static final Var const__1678;
  public static final Object const__1679;
  public static final AFn const__168;
  public static final Object const__1680;
  public static final AFn const__1681;
  public static final Var const__1682;
  public static final Object const__1683;
  public static final Object const__1684;
  public static final AFn const__1685;
  public static final Var const__1686;
  public static final Object const__1687;
  public static final Object const__1688;
  public static final Object const__1689;
  public static final Var const__169;
  public static final AFn const__1690;
  public static final Var const__1691;
  public static final Object const__1692;
  public static final Object const__1693;
  public static final AFn const__1694;
  public static final Var const__1695;
  public static final Object const__1696;
  public static final Object const__1697;
  public static final AFn const__1698;
  public static final Var const__1699;
  public static final Keyword const__17;
  public static final Object const__170;
  public static final Object const__1700;
  public static final Object const__1701;
  public static final AFn const__1702;
  public static final Var const__1703;
  public static final Object const__1704;
  public static final Object const__1705;
  public static final AFn const__1706;
  public static final Var const__1707;
  public static final Object const__1708;
  public static final Object const__1709;
  public static final Object const__171;
  public static final AFn const__1710;
  public static final Var const__1711;
  public static final Object const__1712;
  public static final Object const__1713;
  public static final AFn const__1714;
  public static final Var const__1715;
  public static final Object const__1716;
  public static final Object const__1717;
  public static final AFn const__1718;
  public static final Var const__1719;
  public static final AFn const__172;
  public static final Object const__1720;
  public static final Object const__1721;
  public static final AFn const__1722;
  public static final Var const__1723;
  public static final Object const__1724;
  public static final Object const__1725;
  public static final AFn const__1726;
  public static final Var const__1727;
  public static final Object const__1728;
  public static final Object const__1729;
  public static final Var const__173;
  public static final AFn const__1730;
  public static final Var const__1731;
  public static final Object const__1732;
  public static final Object const__1733;
  public static final AFn const__1734;
  public static final Var const__1735;
  public static final Object const__1736;
  public static final Object const__1737;
  public static final AFn const__1738;
  public static final Var const__1739;
  public static final Object const__174;
  public static final Object const__1740;
  public static final Object const__1741;
  public static final AFn const__1742;
  public static final Var const__1743;
  public static final Object const__1744;
  public static final Object const__1745;
  public static final AFn const__1746;
  public static final Var const__1747;
  public static final Object const__1748;
  public static final Object const__1749;
  public static final Object const__175;
  public static final AFn const__1750;
  public static final Var const__1751;
  public static final Object const__1752;
  public static final Object const__1753;
  public static final AFn const__1754;
  public static final Var const__1755;
  public static final Object const__1756;
  public static final Object const__1757;
  public static final AFn const__1758;
  public static final Var const__1759;
  public static final Keyword const__176;
  public static final Object const__1760;
  public static final Object const__1761;
  public static final AFn const__1762;
  public static final Var const__1763;
  public static final Object const__1764;
  public static final Object const__1765;
  public static final AFn const__1766;
  public static final Var const__1767;
  public static final Object const__1768;
  public static final Object const__1769;
  public static final Object const__177;
  public static final AFn const__1770;
  public static final Var const__1771;
  public static final Object const__1772;
  public static final Object const__1773;
  public static final AFn const__1774;
  public static final Var const__1775;
  public static final Object const__1776;
  public static final Keyword const__1777;
  public static final AFn const__1778;
  public static final Var const__1779;
  public static final Var const__178;
  public static final Object const__1780;
  public static final Object const__1781;
  public static final AFn const__1782;
  public static final Object const__1783;
  public static final Object const__1784;
  public static final AFn const__1785;
  public static final Var const__1786;
  public static final Object const__1787;
  public static final Object const__1788;
  public static final AFn const__1789;
  public static final Object const__179;
  public static final Var const__1790;
  public static final Object const__1791;
  public static final Object const__1792;
  public static final AFn const__1793;
  public static final Var const__1794;
  public static final Object const__1795;
  public static final Object const__1796;
  public static final AFn const__1797;
  public static final Var const__1798;
  public static final Object const__1799;
  public static final Object const__18;
  public static final Object const__180;
  public static final Object const__1800;
  public static final AFn const__1801;
  public static final Var const__1802;
  public static final Object const__1803;
  public static final Object const__1804;
  public static final AFn const__1805;
  public static final Object const__1806;
  public static final AFn const__1807;
  public static final Var const__1808;
  public static final Object const__1809;
  public static final AFn const__181;
  public static final Object const__1810;
  public static final AFn const__1811;
  public static final Var const__1812;
  public static final Object const__1813;
  public static final Object const__1814;
  public static final AFn const__1815;
  public static final Var const__1816;
  public static final Object const__1817;
  public static final Object const__1818;
  public static final AFn const__1819;
  public static final Var const__182;
  public static final Var const__1820;
  public static final Object const__1821;
  public static final Object const__1822;
  public static final AFn const__1823;
  public static final Var const__1824;
  public static final Object const__1825;
  public static final Object const__1826;
  public static final AFn const__1827;
  public static final Var const__1828;
  public static final Object const__1829;
  public static final Object const__183;
  public static final Object const__1830;
  public static final AFn const__1831;
  public static final Var const__1832;
  public static final Object const__1833;
  public static final Object const__1834;
  public static final AFn const__1835;
  public static final Var const__1836;
  public static final Object const__1837;
  public static final Object const__1838;
  public static final AFn const__1839;
  public static final Object const__184;
  public static final Var const__1840;
  public static final Object const__1841;
  public static final AFn const__1842;
  public static final Var const__1843;
  public static final Object const__1844;
  public static final Object const__1845;
  public static final AFn const__1846;
  public static final Var const__1847;
  public static final Object const__1848;
  public static final Object const__1849;
  public static final AFn const__185;
  public static final AFn const__1850;
  public static final Var const__1851;
  public static final Object const__1852;
  public static final Object const__1853;
  public static final AFn const__1854;
  public static final Var const__1855;
  public static final Object const__1856;
  public static final Object const__1857;
  public static final AFn const__1858;
  public static final Var const__1859;
  public static final Var const__186;
  public static final Object const__1860;
  public static final Object const__1861;
  public static final AFn const__1862;
  public static final Var const__1863;
  public static final Object const__1864;
  public static final Object const__1865;
  public static final AFn const__1866;
  public static final Var const__1867;
  public static final Object const__1868;
  public static final Object const__1869;
  public static final Object const__187;
  public static final AFn const__1870;
  public static final Var const__1871;
  public static final Object const__1872;
  public static final AFn const__1873;
  public static final Var const__1874;
  public static final Object const__1875;
  public static final Object const__1876;
  public static final AFn const__1877;
  public static final Var const__1878;
  public static final Object const__1879;
  public static final Object const__188;
  public static final Object const__1880;
  public static final AFn const__1881;
  public static final Var const__1882;
  public static final Object const__1883;
  public static final Object const__1884;
  public static final AFn const__1885;
  public static final Var const__1886;
  public static final Object const__1887;
  public static final Object const__1888;
  public static final AFn const__1889;
  public static final AFn const__189;
  public static final Var const__1890;
  public static final Object const__1891;
  public static final Object const__1892;
  public static final AFn const__1893;
  public static final Var const__1894;
  public static final Object const__1895;
  public static final Object const__1896;
  public static final AFn const__1897;
  public static final Var const__1898;
  public static final Object const__1899;
  public static final AFn const__19;
  public static final Var const__190;
  public static final Object const__1900;
  public static final AFn const__1901;
  public static final Var const__1902;
  public static final Object const__1903;
  public static final Object const__1904;
  public static final AFn const__1905;
  public static final Var const__1906;
  public static final Object const__1907;
  public static final Object const__1908;
  public static final AFn const__1909;
  public static final Object const__191;
  public static final Var const__1910;
  public static final Object const__1911;
  public static final AFn const__1912;
  public static final Var const__1913;
  public static final Object const__1914;
  public static final Object const__1915;
  public static final AFn const__1916;
  public static final Var const__1917;
  public static final Object const__1918;
  public static final Object const__1919;
  public static final Object const__192;
  public static final AFn const__1920;
  public static final Var const__1921;
  public static final Object const__1922;
  public static final Object const__1923;
  public static final AFn const__1924;
  public static final Var const__1925;
  public static final Object const__1926;
  public static final Object const__1927;
  public static final AFn const__1928;
  public static final Var const__1929;
  public static final AFn const__193;
  public static final Object const__1930;
  public static final Object const__1931;
  public static final AFn const__1932;
  public static final Var const__1933;
  public static final Object const__1934;
  public static final Object const__1935;
  public static final AFn const__1936;
  public static final Var const__1937;
  public static final Object const__1938;
  public static final Object const__1939;
  public static final Var const__194;
  public static final AFn const__1940;
  public static final Var const__1941;
  public static final Object const__1942;
  public static final Object const__1943;
  public static final AFn const__1944;
  public static final Object const__1945;
  public static final Object const__1946;
  public static final AFn const__1947;
  public static final Var const__1948;
  public static final Object const__1949;
  public static final Object const__195;
  public static final Object const__1950;
  public static final AFn const__1951;
  public static final Var const__1952;
  public static final Object const__1953;
  public static final Object const__1954;
  public static final AFn const__1955;
  public static final Var const__1956;
  public static final Object const__1957;
  public static final Object const__1958;
  public static final AFn const__1959;
  public static final Object const__196;
  public static final Var const__1960;
  public static final Object const__1961;
  public static final Object const__1962;
  public static final AFn const__1963;
  public static final Var const__1964;
  public static final Object const__1965;
  public static final Object const__1966;
  public static final AFn const__1967;
  public static final Var const__1968;
  public static final Object const__1969;
  public static final AFn const__197;
  public static final Object const__1970;
  public static final AFn const__1971;
  public static final Var const__1972;
  public static final Object const__1973;
  public static final Object const__1974;
  public static final AFn const__1975;
  public static final Var const__1976;
  public static final Object const__1977;
  public static final Object const__1978;
  public static final AFn const__1979;
  public static final Var const__198;
  public static final Var const__1980;
  public static final Object const__1981;
  public static final Object const__1982;
  public static final AFn const__1983;
  public static final Var const__1984;
  public static final Object const__1985;
  public static final Object const__1986;
  public static final AFn const__1987;
  public static final Var const__1988;
  public static final Object const__1989;
  public static final Object const__199;
  public static final Object const__1990;
  public static final AFn const__1991;
  public static final Var const__1992;
  public static final Object const__1993;
  public static final Object const__1994;
  public static final AFn const__1995;
  public static final Var const__1996;
  public static final Object const__1997;
  public static final Object const__1998;
  public static final AFn const__1999;
  public static final AFn const__2;
  public static final Var const__20;
  public static final Object const__200;
  public static final Var const__2000;
  public static final Object const__2001;
  public static final Object const__2002;
  public static final AFn const__2003;
  public static final Var const__2004;
  public static final Object const__2005;
  public static final Object const__2006;
  public static final AFn const__2007;
  public static final Var const__2008;
  public static final Object const__2009;
  public static final AFn const__201;
  public static final AFn const__2010;
  public static final Var const__2011;
  public static final Object const__2012;
  public static final AFn const__2013;
  public static final Var const__2014;
  public static final Object const__2015;
  public static final AFn const__2016;
  public static final Var const__2017;
  public static final Object const__2018;
  public static final AFn const__2019;
  public static final Var const__202;
  public static final Var const__2020;
  public static final Object const__2021;
  public static final Object const__2022;
  public static final AFn const__2023;
  public static final Var const__2024;
  public static final Object const__2025;
  public static final Object const__2026;
  public static final AFn const__2027;
  public static final Var const__2028;
  public static final Object const__2029;
  public static final Object const__203;
  public static final Object const__2030;
  public static final AFn const__2031;
  public static final Var const__2032;
  public static final Object const__2033;
  public static final Object const__2034;
  public static final AFn const__2035;
  public static final Var const__2036;
  public static final Object const__2037;
  public static final Object const__2038;
  public static final AFn const__2039;
  public static final Object const__204;
  public static final Var const__2040;
  public static final Var const__2041;
  public static final Var const__2042;
  public static final Object const__2043;
  public static final Object const__2044;
  public static final AFn const__2045;
  public static final Var const__2046;
  public static final AFn const__2047;
  public static final Var const__2048;
  public static final AFn const__2049;
  public static final Object const__205;
  public static final Var const__2050;
  public static final AFn const__2051;
  public static final Var const__2052;
  public static final AFn const__2053;
  public static final Var const__2054;
  public static final AFn const__2055;
  public static final Var const__2056;
  public static final AFn const__2057;
  public static final Var const__2058;
  public static final AFn const__2059;
  public static final AFn const__206;
  public static final Var const__2060;
  public static final AFn const__2061;
  public static final Var const__2062;
  public static final AFn const__2063;
  public static final Var const__2064;
  public static final AFn const__2065;
  public static final Var const__2066;
  public static final AFn const__2067;
  public static final Var const__2068;
  public static final AFn const__2069;
  public static final Var const__207;
  public static final Var const__2070;
  public static final AFn const__2071;
  public static final Var const__2072;
  public static final AFn const__2073;
  public static final Var const__2074;
  public static final AFn const__2075;
  public static final Var const__2076;
  public static final AFn const__2077;
  public static final Var const__2078;
  public static final Object const__2079;
  public static final Object const__208;
  public static final Object const__2080;
  public static final AFn const__2081;
  public static final Var const__2082;
  public static final Object const__2083;
  public static final Object const__2084;
  public static final AFn const__2085;
  public static final Var const__2086;
  public static final Object const__2087;
  public static final Object const__2088;
  public static final Keyword const__2089;
  public static final Object const__209;
  public static final AFn const__2090;
  public static final AFn const__2091;
  public static final Var const__2092;
  public static final Object const__2093;
  public static final Object const__2094;
  public static final AFn const__2095;
  public static final Var const__2096;
  public static final Object const__2097;
  public static final Object const__2098;
  public static final AFn const__2099;
  public static final Object const__21;
  public static final AFn const__210;
  public static final Var const__2100;
  public static final Object const__2101;
  public static final AFn const__2102;
  public static final Object const__2103;
  public static final Var const__2104;
  public static final Object const__2105;
  public static final AFn const__2106;
  public static final Var const__2107;
  public static final Object const__2108;
  public static final Object const__2109;
  public static final Var const__211;
  public static final AFn const__2110;
  public static final Var const__2111;
  public static final Object const__2112;
  public static final Object const__2113;
  public static final AFn const__2114;
  public static final Var const__2115;
  public static final Object const__2116;
  public static final Object const__2117;
  public static final AFn const__2118;
  public static final Var const__2119;
  public static final Object const__212;
  public static final Object const__2120;
  public static final Object const__2121;
  public static final AFn const__2122;
  public static final Var const__2123;
  public static final Object const__2124;
  public static final Object const__2125;
  public static final AFn const__2126;
  public static final Var const__2127;
  public static final Object const__2128;
  public static final Object const__2129;
  public static final Object const__213;
  public static final AFn const__2130;
  public static final Var const__2131;
  public static final Object const__2132;
  public static final Object const__2133;
  public static final AFn const__2134;
  public static final Var const__2135;
  public static final Object const__2136;
  public static final Object const__2137;
  public static final AFn const__2138;
  public static final Var const__2139;
  public static final AFn const__214;
  public static final Object const__2140;
  public static final Object const__2141;
  public static final AFn const__2142;
  public static final AFn const__2143;
  public static final Var const__2144;
  public static final Object const__2145;
  public static final Object const__2146;
  public static final AFn const__2147;
  public static final Var const__2148;
  public static final Object const__2149;
  public static final Var const__215;
  public static final Var const__2150;
  public static final Keyword const__2151;
  public static final Object const__2152;
  public static final Object const__2153;
  public static final Object const__2154;
  public static final Object const__2155;
  public static final Var const__2156;
  public static final Object const__2157;
  public static final Object const__2158;
  public static final AFn const__2159;
  public static final Object const__216;
  public static final Var const__2160;
  public static final Object const__2161;
  public static final Object const__2162;
  public static final AFn const__2163;
  public static final Var const__2164;
  public static final Object const__2165;
  public static final Object const__2166;
  public static final AFn const__2167;
  public static final Var const__2168;
  public static final Object const__2169;
  public static final Object const__217;
  public static final Object const__2170;
  public static final AFn const__2171;
  public static final AFn const__2172;
  public static final Var const__2173;
  public static final Object const__2174;
  public static final Object const__2175;
  public static final AFn const__2176;
  public static final Var const__2177;
  public static final Object const__2178;
  public static final Object const__2179;
  public static final Object const__218;
  public static final AFn const__2180;
  public static final Var const__2181;
  public static final Object const__2182;
  public static final Object const__2183;
  public static final AFn const__2184;
  public static final Var const__2185;
  public static final Object const__2186;
  public static final Object const__2187;
  public static final AFn const__2188;
  public static final Var const__2189;
  public static final AFn const__219;
  public static final Object const__2190;
  public static final Object const__2191;
  public static final AFn const__2192;
  public static final Var const__2193;
  public static final Object const__2194;
  public static final Object const__2195;
  public static final AFn const__2196;
  public static final Var const__2197;
  public static final Object const__2198;
  public static final Object const__2199;
  public static final Keyword const__22;
  public static final Var const__220;
  public static final AFn const__2200;
  public static final Var const__2201;
  public static final Object const__2202;
  public static final Object const__2203;
  public static final AFn const__2204;
  public static final Var const__2205;
  public static final Object const__2206;
  public static final Object const__2207;
  public static final AFn const__2208;
  public static final Var const__2209;
  public static final Object const__221;
  public static final Object const__2210;
  public static final Object const__2211;
  public static final AFn const__2212;
  public static final Var const__2213;
  public static final AFn const__2214;
  public static final Var const__2215;
  public static final Object const__2216;
  public static final Object const__2217;
  public static final AFn const__2218;
  public static final Var const__2219;
  public static final Object const__222;
  public static final Object const__2220;
  public static final Object const__2221;
  public static final AFn const__2222;
  public static final Var const__2223;
  public static final Object const__2224;
  public static final Object const__2225;
  public static final AFn const__2226;
  public static final Object const__2227;
  public static final Object const__2228;
  public static final AFn const__2229;
  public static final AFn const__223;
  public static final Var const__2230;
  public static final Object const__2231;
  public static final Object const__2232;
  public static final AFn const__2233;
  public static final Var const__2234;
  public static final Object const__2235;
  public static final Object const__2236;
  public static final AFn const__2237;
  public static final Var const__2238;
  public static final Object const__2239;
  public static final Var const__224;
  public static final Object const__2240;
  public static final AFn const__2241;
  public static final Var const__2242;
  public static final Object const__2243;
  public static final Object const__2244;
  public static final AFn const__2245;
  public static final Var const__2246;
  public static final Object const__2247;
  public static final Object const__2248;
  public static final AFn const__2249;
  public static final Object const__225;
  public static final Var const__2250;
  public static final Object const__2251;
  public static final Object const__2252;
  public static final AFn const__2253;
  public static final Var const__2254;
  public static final Object const__2255;
  public static final Object const__2256;
  public static final AFn const__2257;
  public static final Var const__2258;
  public static final Object const__2259;
  public static final Object const__226;
  public static final Object const__2260;
  public static final AFn const__2261;
  public static final Var const__2262;
  public static final Object const__2263;
  public static final Object const__2264;
  public static final AFn const__2265;
  public static final Var const__2266;
  public static final Object const__2267;
  public static final Object const__2268;
  public static final AFn const__2269;
  public static final AFn const__227;
  public static final Var const__2270;
  public static final Object const__2271;
  public static final Object const__2272;
  public static final AFn const__2273;
  public static final Var const__2274;
  public static final Object const__2275;
  public static final Object const__2276;
  public static final AFn const__2277;
  public static final Object const__2278;
  public static final Object const__2279;
  public static final Var const__228;
  public static final AFn const__2280;
  public static final Var const__2281;
  public static final Object const__2282;
  public static final Object const__2283;
  public static final AFn const__2284;
  public static final Var const__2285;
  public static final Object const__2286;
  public static final Object const__2287;
  public static final AFn const__2288;
  public static final Var const__2289;
  public static final Object const__229;
  public static final Object const__2290;
  public static final Object const__2291;
  public static final AFn const__2292;
  public static final Var const__2293;
  public static final Object const__2294;
  public static final Object const__2295;
  public static final AFn const__2296;
  public static final Var const__2297;
  public static final Object const__2298;
  public static final Object const__2299;
  public static final Object const__23;
  public static final Object const__230;
  public static final AFn const__2300;
  public static final Var const__2301;
  public static final Object const__2302;
  public static final Object const__2303;
  public static final AFn const__2304;
  public static final Var const__2305;
  public static final Object const__2306;
  public static final Object const__2307;
  public static final AFn const__2308;
  public static final Var const__2309;
  public static final Object const__231;
  public static final Object const__2310;
  public static final Object const__2311;
  public static final AFn const__2312;
  public static final Var const__2313;
  public static final Object const__2314;
  public static final AFn const__2315;
  public static final AFn const__2316;
  public static final Var const__2317;
  public static final AFn const__2318;
  public static final Var const__2319;
  public static final AFn const__232;
  public static final Var const__2320;
  public static final Object const__2321;
  public static final AFn const__2322;
  public static final Var const__2323;
  public static final Object const__2324;
  public static final AFn const__2325;
  public static final Var const__2326;
  public static final Object const__2327;
  public static final Object const__2328;
  public static final AFn const__2329;
  public static final Var const__233;
  public static final Var const__2330;
  public static final Object const__2331;
  public static final Object const__2332;
  public static final AFn const__2333;
  public static final Var const__2334;
  public static final Object const__2335;
  public static final Object const__2336;
  public static final AFn const__2337;
  public static final Var const__2338;
  public static final Object const__2339;
  public static final Object const__234;
  public static final Object const__2340;
  public static final AFn const__2341;
  public static final Object const__235;
  public static final AFn const__236;
  public static final Var const__237;
  public static final Object const__238;
  public static final Object const__239;
  public static final AFn const__24;
  public static final AFn const__240;
  public static final Var const__241;
  public static final Object const__242;
  public static final Object const__243;
  public static final AFn const__244;
  public static final Var const__245;
  public static final Object const__246;
  public static final Object const__247;
  public static final AFn const__248;
  public static final Var const__249;
  public static final Var const__25;
  public static final Object const__250;
  public static final Object const__251;
  public static final AFn const__252;
  public static final Var const__253;
  public static final Object const__254;
  public static final Object const__255;
  public static final AFn const__256;
  public static final Var const__257;
  public static final Object const__258;
  public static final Object const__259;
  public static final Object const__26;
  public static final Object const__260;
  public static final AFn const__261;
  public static final Var const__262;
  public static final Object const__263;
  public static final Object const__264;
  public static final AFn const__265;
  public static final Var const__266;
  public static final Object const__267;
  public static final Object const__268;
  public static final Object const__269;
  public static final Keyword const__27;
  public static final AFn const__270;
  public static final Var const__271;
  public static final Object const__272;
  public static final Object const__273;
  public static final AFn const__274;
  public static final Var const__275;
  public static final Object const__276;
  public static final Object const__277;
  public static final AFn const__278;
  public static final Var const__279;
  public static final AFn const__28;
  public static final Object const__280;
  public static final Object const__281;
  public static final AFn const__282;
  public static final Var const__283;
  public static final Object const__284;
  public static final Object const__285;
  public static final AFn const__286;
  public static final Var const__287;
  public static final Object const__288;
  public static final Object const__289;
  public static final Var const__29;
  public static final AFn const__290;
  public static final Var const__291;
  public static final Object const__292;
  public static final Object const__293;
  public static final AFn const__294;
  public static final Var const__295;
  public static final Object const__296;
  public static final Object const__297;
  public static final AFn const__298;
  public static final Var const__299;
  public static final Var const__3;
  public static final Object const__30;
  public static final Object const__300;
  public static final Object const__301;
  public static final AFn const__302;
  public static final Var const__303;
  public static final Object const__304;
  public static final Object const__305;
  public static final AFn const__306;
  public static final Var const__307;
  public static final Object const__308;
  public static final Object const__309;
  public static final AFn const__31;
  public static final AFn const__310;
  public static final Var const__311;
  public static final Object const__312;
  public static final Object const__313;
  public static final Keyword const__314;
  public static final Object const__315;
  public static final AFn const__316;
  public static final Var const__317;
  public static final Object const__318;
  public static final Object const__319;
  public static final Var const__32;
  public static final AFn const__320;
  public static final Var const__321;
  public static final Object const__322;
  public static final Object const__323;
  public static final AFn const__324;
  public static final Var const__325;
  public static final Object const__326;
  public static final Object const__327;
  public static final Var const__328;
  public static final Object const__329;
  public static final Object const__33;
  public static final Object const__330;
  public static final AFn const__331;
  public static final Var const__332;
  public static final Object const__333;
  public static final Object const__334;
  public static final AFn const__335;
  public static final Var const__336;
  public static final Object const__337;
  public static final Object const__338;
  public static final Var const__339;
  public static final AFn const__34;
  public static final Object const__340;
  public static final Object const__341;
  public static final Var const__342;
  public static final Object const__343;
  public static final Object const__344;
  public static final Var const__345;
  public static final Object const__346;
  public static final Object const__347;
  public static final Object const__348;
  public static final AFn const__349;
  public static final Var const__35;
  public static final Var const__350;
  public static final Object const__351;
  public static final Object const__352;
  public static final AFn const__353;
  public static final Var const__354;
  public static final Object const__355;
  public static final Object const__356;
  public static final Var const__357;
  public static final Object const__358;
  public static final Object const__359;
  public static final Object const__36;
  public static final Var const__360;
  public static final Object const__361;
  public static final Object const__362;
  public static final AFn const__363;
  public static final Var const__364;
  public static final Object const__365;
  public static final Object const__366;
  public static final AFn const__367;
  public static final Var const__368;
  public static final Object const__369;
  public static final Object const__37;
  public static final Object const__370;
  public static final AFn const__371;
  public static final Var const__372;
  public static final Object const__373;
  public static final Object const__374;
  public static final AFn const__375;
  public static final Var const__376;
  public static final Object const__377;
  public static final Object const__378;
  public static final AFn const__379;
  public static final AFn const__38;
  public static final Var const__380;
  public static final Object const__381;
  public static final Object const__382;
  public static final AFn const__383;
  public static final Var const__384;
  public static final Object const__385;
  public static final Object const__386;
  public static final AFn const__387;
  public static final AFn const__388;
  public static final Var const__389;
  public static final Var const__39;
  public static final Object const__390;
  public static final Object const__391;
  public static final AFn const__392;
  public static final Var const__393;
  public static final Object const__394;
  public static final Object const__395;
  public static final AFn const__396;
  public static final AFn const__397;
  public static final Var const__398;
  public static final Object const__399;
  public static final Keyword const__4;
  public static final Object const__40;
  public static final Object const__400;
  public static final AFn const__401;
  public static final Var const__402;
  public static final Object const__403;
  public static final Object const__404;
  public static final AFn const__405;
  public static final Var const__406;
  public static final Object const__407;
  public static final Object const__408;
  public static final AFn const__409;
  public static final Keyword const__41;
  public static final AFn const__410;
  public static final Var const__411;
  public static final Object const__412;
  public static final Object const__413;
  public static final AFn const__414;
  public static final Var const__415;
  public static final Object const__416;
  public static final Object const__417;
  public static final AFn const__418;
  public static final Var const__419;
  public static final Object const__42;
  public static final Object const__420;
  public static final Object const__421;
  public static final AFn const__422;
  public static final Var const__423;
  public static final Object const__424;
  public static final Object const__425;
  public static final AFn const__426;
  public static final Var const__427;
  public static final Object const__428;
  public static final Object const__429;
  public static final Object const__43;
  public static final AFn const__430;
  public static final Var const__431;
  public static final Object const__432;
  public static final Object const__433;
  public static final AFn const__434;
  public static final Var const__435;
  public static final Object const__436;
  public static final Object const__437;
  public static final Var const__438;
  public static final Object const__439;
  public static final AFn const__44;
  public static final Object const__440;
  public static final Var const__441;
  public static final Object const__442;
  public static final Object const__443;
  public static final Var const__444;
  public static final Object const__445;
  public static final Object const__446;
  public static final Var const__447;
  public static final Object const__448;
  public static final Object const__449;
  public static final Var const__45;
  public static final Var const__450;
  public static final Object const__451;
  public static final Object const__452;
  public static final Var const__453;
  public static final Object const__454;
  public static final Object const__455;
  public static final Var const__456;
  public static final Object const__457;
  public static final Object const__458;
  public static final Var const__459;
  public static final Object const__46;
  public static final Object const__460;
  public static final Object const__461;
  public static final Var const__462;
  public static final Object const__463;
  public static final Object const__464;
  public static final Var const__465;
  public static final Object const__466;
  public static final Object const__467;
  public static final Var const__468;
  public static final Object const__469;
  public static final Object const__47;
  public static final Object const__470;
  public static final Var const__471;
  public static final Object const__472;
  public static final Object const__473;
  public static final Var const__474;
  public static final Object const__475;
  public static final Object const__476;
  public static final Var const__477;
  public static final Object const__478;
  public static final Object const__479;
  public static final AFn const__48;
  public static final Var const__480;
  public static final Object const__481;
  public static final Object const__482;
  public static final Var const__483;
  public static final Object const__484;
  public static final Object const__485;
  public static final Var const__486;
  public static final Object const__487;
  public static final Object const__488;
  public static final Var const__489;
  public static final Var const__49;
  public static final Object const__490;
  public static final Object const__491;
  public static final Var const__492;
  public static final Object const__493;
  public static final Object const__494;
  public static final Var const__495;
  public static final Object const__496;
  public static final Object const__497;
  public static final AFn const__498;
  public static final Var const__499;
  public static final Keyword const__5;
  public static final Object const__50;
  public static final Object const__500;
  public static final Object const__501;
  public static final Var const__502;
  public static final Object const__503;
  public static final Object const__504;
  public static final AFn const__505;
  public static final Var const__506;
  public static final Object const__507;
  public static final Object const__508;
  public static final AFn const__509;
  public static final Object const__51;
  public static final Var const__510;
  public static final Object const__511;
  public static final Object const__512;
  public static final AFn const__513;
  public static final Var const__514;
  public static final Object const__515;
  public static final Object const__516;
  public static final AFn const__517;
  public static final Var const__518;
  public static final Object const__519;
  public static final AFn const__52;
  public static final Object const__520;
  public static final AFn const__521;
  public static final Var const__522;
  public static final Object const__523;
  public static final Object const__524;
  public static final AFn const__525;
  public static final Var const__526;
  public static final Object const__527;
  public static final Object const__528;
  public static final AFn const__529;
  public static final Var const__53;
  public static final Var const__530;
  public static final Object const__531;
  public static final Object const__532;
  public static final AFn const__533;
  public static final Var const__534;
  public static final Object const__535;
  public static final Object const__536;
  public static final Var const__537;
  public static final Object const__538;
  public static final Object const__539;
  public static final Object const__54;
  public static final Var const__540;
  public static final Object const__541;
  public static final Object const__542;
  public static final AFn const__543;
  public static final Var const__544;
  public static final Object const__545;
  public static final Object const__546;
  public static final AFn const__547;
  public static final Var const__548;
  public static final Object const__549;
  public static final Object const__55;
  public static final Object const__550;
  public static final AFn const__551;
  public static final Var const__552;
  public static final Object const__553;
  public static final Object const__554;
  public static final AFn const__555;
  public static final Var const__556;
  public static final Object const__557;
  public static final Object const__558;
  public static final AFn const__559;
  public static final AFn const__56;
  public static final Var const__560;
  public static final Object const__561;
  public static final Object const__562;
  public static final AFn const__563;
  public static final Var const__564;
  public static final Object const__565;
  public static final Object const__566;
  public static final AFn const__567;
  public static final Var const__568;
  public static final Object const__569;
  public static final Var const__57;
  public static final Object const__570;
  public static final AFn const__571;
  public static final Var const__572;
  public static final Object const__573;
  public static final Object const__574;
  public static final AFn const__575;
  public static final Var const__576;
  public static final Object const__577;
  public static final Object const__578;
  public static final AFn const__579;
  public static final Object const__58;
  public static final Var const__580;
  public static final Object const__581;
  public static final Object const__582;
  public static final AFn const__583;
  public static final Var const__584;
  public static final Object const__585;
  public static final Object const__586;
  public static final AFn const__587;
  public static final Var const__588;
  public static final Object const__589;
  public static final Object const__59;
  public static final Object const__590;
  public static final AFn const__591;
  public static final Var const__592;
  public static final Object const__593;
  public static final Object const__594;
  public static final AFn const__595;
  public static final Var const__596;
  public static final Object const__597;
  public static final Object const__598;
  public static final AFn const__599;
  public static final Object const__6;
  public static final AFn const__60;
  public static final Var const__600;
  public static final Object const__601;
  public static final Object const__602;
  public static final AFn const__603;
  public static final Var const__604;
  public static final Object const__605;
  public static final Object const__606;
  public static final AFn const__607;
  public static final Var const__608;
  public static final Object const__609;
  public static final Var const__61;
  public static final Object const__610;
  public static final AFn const__611;
  public static final Var const__612;
  public static final Object const__613;
  public static final Object const__614;
  public static final AFn const__615;
  public static final Var const__616;
  public static final Object const__617;
  public static final Object const__618;
  public static final AFn const__619;
  public static final Object const__62;
  public static final Var const__620;
  public static final Object const__621;
  public static final Object const__622;
  public static final AFn const__623;
  public static final Var const__624;
  public static final Object const__625;
  public static final Object const__626;
  public static final AFn const__627;
  public static final Var const__628;
  public static final Object const__629;
  public static final Object const__63;
  public static final Object const__630;
  public static final AFn const__631;
  public static final Var const__632;
  public static final Object const__633;
  public static final Object const__634;
  public static final AFn const__635;
  public static final Var const__636;
  public static final Object const__637;
  public static final Object const__638;
  public static final AFn const__639;
  public static final AFn const__64;
  public static final Var const__640;
  public static final Object const__641;
  public static final AFn const__642;
  public static final Var const__643;
  public static final Object const__644;
  public static final Object const__645;
  public static final AFn const__646;
  public static final Var const__647;
  public static final Object const__648;
  public static final AFn const__649;
  public static final Var const__65;
  public static final Var const__650;
  public static final Object const__651;
  public static final Object const__652;
  public static final AFn const__653;
  public static final Var const__654;
  public static final Object const__655;
  public static final Object const__656;
  public static final AFn const__657;
  public static final Var const__658;
  public static final Object const__659;
  public static final Object const__66;
  public static final Object const__660;
  public static final AFn const__661;
  public static final Var const__662;
  public static final Object const__663;
  public static final Object const__664;
  public static final AFn const__665;
  public static final Var const__666;
  public static final Object const__667;
  public static final Object const__668;
  public static final AFn const__669;
  public static final Object const__67;
  public static final Var const__670;
  public static final Object const__671;
  public static final Object const__672;
  public static final AFn const__673;
  public static final Var const__674;
  public static final Object const__675;
  public static final Object const__676;
  public static final AFn const__677;
  public static final Var const__678;
  public static final Object const__679;
  public static final AFn const__68;
  public static final Object const__680;
  public static final AFn const__681;
  public static final Var const__682;
  public static final Object const__683;
  public static final Object const__684;
  public static final AFn const__685;
  public static final Var const__686;
  public static final Object const__687;
  public static final Object const__688;
  public static final AFn const__689;
  public static final Var const__69;
  public static final Var const__690;
  public static final Object const__691;
  public static final Object const__692;
  public static final AFn const__693;
  public static final Var const__694;
  public static final Object const__695;
  public static final Object const__696;
  public static final AFn const__697;
  public static final Var const__698;
  public static final Object const__699;
  public static final Keyword const__7;
  public static final Object const__70;
  public static final Object const__700;
  public static final AFn const__701;
  public static final Var const__702;
  public static final Object const__703;
  public static final Object const__704;
  public static final AFn const__705;
  public static final Var const__706;
  public static final Object const__707;
  public static final Object const__708;
  public static final AFn const__709;
  public static final Object const__71;
  public static final Var const__710;
  public static final Object const__711;
  public static final Object const__712;
  public static final AFn const__713;
  public static final Var const__714;
  public static final Object const__715;
  public static final Object const__716;
  public static final AFn const__717;
  public static final Var const__718;
  public static final Object const__719;
  public static final AFn const__72;
  public static final Object const__720;
  public static final AFn const__721;
  public static final Var const__722;
  public static final Object const__723;
  public static final Object const__724;
  public static final AFn const__725;
  public static final Var const__726;
  public static final Object const__727;
  public static final Object const__728;
  public static final AFn const__729;
  public static final Var const__73;
  public static final Var const__730;
  public static final Object const__731;
  public static final Object const__732;
  public static final AFn const__733;
  public static final Var const__734;
  public static final Object const__735;
  public static final Object const__736;
  public static final AFn const__737;
  public static final Var const__738;
  public static final Object const__739;
  public static final Object const__74;
  public static final Object const__740;
  public static final AFn const__741;
  public static final Var const__742;
  public static final Object const__743;
  public static final Object const__744;
  public static final AFn const__745;
  public static final Var const__746;
  public static final Object const__747;
  public static final Object const__748;
  public static final AFn const__749;
  public static final Object const__75;
  public static final Var const__750;
  public static final Object const__751;
  public static final Object const__752;
  public static final AFn const__753;
  public static final Var const__754;
  public static final Object const__755;
  public static final Object const__756;
  public static final AFn const__757;
  public static final Var const__758;
  public static final Object const__759;
  public static final AFn const__76;
  public static final Object const__760;
  public static final AFn const__761;
  public static final Var const__762;
  public static final Object const__763;
  public static final Object const__764;
  public static final AFn const__765;
  public static final Var const__766;
  public static final Object const__767;
  public static final Object const__768;
  public static final AFn const__769;
  public static final Var const__77;
  public static final Var const__770;
  public static final Object const__771;
  public static final Object const__772;
  public static final AFn const__773;
  public static final Var const__774;
  public static final Object const__775;
  public static final Object const__776;
  public static final AFn const__777;
  public static final Var const__778;
  public static final Object const__779;
  public static final Object const__78;
  public static final Object const__780;
  public static final AFn const__781;
  public static final Var const__782;
  public static final Object const__783;
  public static final Object const__784;
  public static final AFn const__785;
  public static final Var const__786;
  public static final Object const__787;
  public static final Object const__788;
  public static final AFn const__789;
  public static final Object const__79;
  public static final Var const__790;
  public static final Object const__791;
  public static final Object const__792;
  public static final AFn const__793;
  public static final Var const__794;
  public static final Object const__795;
  public static final Object const__796;
  public static final AFn const__797;
  public static final Var const__798;
  public static final Object const__799;
  public static final Object const__8;
  public static final AFn const__80;
  public static final Object const__800;
  public static final Keyword const__801;
  public static final AFn const__802;
  public static final Var const__803;
  public static final Object const__804;
  public static final Object const__805;
  public static final AFn const__806;
  public static final Var const__807;
  public static final Object const__808;
  public static final Object const__809;
  public static final Var const__81;
  public static final AFn const__810;
  public static final Var const__811;
  public static final Object const__812;
  public static final Object const__813;
  public static final AFn const__814;
  public static final Var const__815;
  public static final Object const__816;
  public static final Object const__817;
  public static final AFn const__818;
  public static final Var const__819;
  public static final Object const__82;
  public static final Object const__820;
  public static final Object const__821;
  public static final AFn const__822;
  public static final Var const__823;
  public static final Object const__824;
  public static final Object const__825;
  public static final AFn const__826;
  public static final Var const__827;
  public static final Object const__828;
  public static final Object const__829;
  public static final Object const__83;
  public static final AFn const__830;
  public static final Var const__831;
  public static final Object const__832;
  public static final Object const__833;
  public static final AFn const__834;
  public static final Var const__835;
  public static final Object const__836;
  public static final Object const__837;
  public static final AFn const__838;
  public static final Var const__839;
  public static final AFn const__84;
  public static final Object const__840;
  public static final Object const__841;
  public static final AFn const__842;
  public static final Var const__843;
  public static final Object const__844;
  public static final Object const__845;
  public static final AFn const__846;
  public static final Var const__847;
  public static final Object const__848;
  public static final Object const__849;
  public static final Var const__85;
  public static final AFn const__850;
  public static final Var const__851;
  public static final Object const__852;
  public static final Object const__853;
  public static final AFn const__854;
  public static final Var const__855;
  public static final Object const__856;
  public static final Object const__857;
  public static final AFn const__858;
  public static final Var const__859;
  public static final Object const__86;
  public static final Object const__860;
  public static final Object const__861;
  public static final AFn const__862;
  public static final Var const__863;
  public static final Object const__864;
  public static final Object const__865;
  public static final AFn const__866;
  public static final Var const__867;
  public static final Object const__868;
  public static final Object const__869;
  public static final Object const__87;
  public static final AFn const__870;
  public static final Var const__871;
  public static final Object const__872;
  public static final Object const__873;
  public static final AFn const__874;
  public static final Var const__875;
  public static final Object const__876;
  public static final Object const__877;
  public static final AFn const__878;
  public static final Var const__879;
  public static final AFn const__88;
  public static final Object const__880;
  public static final Object const__881;
  public static final AFn const__882;
  public static final Var const__883;
  public static final Object const__884;
  public static final Object const__885;
  public static final AFn const__886;
  public static final Var const__887;
  public static final Object const__888;
  public static final Object const__889;
  public static final Var const__89;
  public static final AFn const__890;
  public static final Var const__891;
  public static final Object const__892;
  public static final Object const__893;
  public static final AFn const__894;
  public static final Var const__895;
  public static final Object const__896;
  public static final Object const__897;
  public static final AFn const__898;
  public static final Var const__899;
  public static final AFn const__9;
  public static final Object const__90;
  public static final Object const__900;
  public static final Object const__901;
  public static final AFn const__902;
  public static final Var const__903;
  public static final Object const__904;
  public static final Object const__905;
  public static final AFn const__906;
  public static final Var const__907;
  public static final Object const__908;
  public static final Object const__909;
  public static final Object const__91;
  public static final AFn const__910;
  public static final Var const__911;
  public static final Object const__912;
  public static final Object const__913;
  public static final AFn const__914;
  public static final Var const__915;
  public static final Object const__916;
  public static final Object const__917;
  public static final AFn const__918;
  public static final Var const__919;
  public static final AFn const__92;
  public static final Object const__920;
  public static final Object const__921;
  public static final AFn const__922;
  public static final Var const__923;
  public static final Object const__924;
  public static final Object const__925;
  public static final AFn const__926;
  public static final Object const__927;
  public static final Object const__928;
  public static final AFn const__929;
  public static final Var const__93;
  public static final Var const__930;
  public static final Object const__931;
  public static final Object const__932;
  public static final AFn const__933;
  public static final Var const__934;
  public static final Object const__935;
  public static final Object const__936;
  public static final AFn const__937;
  public static final Var const__938;
  public static final Object const__939;
  public static final Object const__94;
  public static final Object const__940;
  public static final AFn const__941;
  public static final Var const__942;
  public static final Object const__943;
  public static final Object const__944;
  public static final AFn const__945;
  public static final Var const__946;
  public static final Object const__947;
  public static final Object const__948;
  public static final AFn const__949;
  public static final Object const__95;
  public static final Var const__950;
  public static final Object const__951;
  public static final Object const__952;
  public static final AFn const__953;
  public static final Var const__954;
  public static final Object const__955;
  public static final Object const__956;
  public static final AFn const__957;
  public static final Var const__958;
  public static final Object const__959;
  public static final AFn const__96;
  public static final Object const__960;
  public static final AFn const__961;
  public static final Var const__962;
  public static final Object const__963;
  public static final Object const__964;
  public static final AFn const__965;
  public static final Var const__966;
  public static final Object const__967;
  public static final Object const__968;
  public static final AFn const__969;
  public static final Var const__97;
  public static final Var const__970;
  public static final Object const__971;
  public static final Object const__972;
  public static final AFn const__973;
  public static final Var const__974;
  public static final Object const__975;
  public static final Object const__976;
  public static final AFn const__977;
  public static final Var const__978;
  public static final Object const__979;
  public static final Object const__98;
  public static final Object const__980;
  public static final AFn const__981;
  public static final Var const__982;
  public static final Object const__983;
  public static final Object const__984;
  public static final AFn const__985;
  public static final Var const__986;
  public static final Object const__987;
  public static final Object const__988;
  public static final AFn const__989;
  public static final Object const__99;
  public static final Var const__990;
  public static final Object const__991;
  public static final Object const__992;
  public static final AFn const__993;
  public static final Var const__994;
  public static final Object const__995;
  public static final Object const__996;
  public static final AFn const__997;
  public static final Var const__998;
  public static final Object const__999;

  static
  {
    __init0();
    __init1();
    __init2();
    __init3();
    __init4();
    __init5();
    __init6();
    __init7();
    __init8();
    __init9();
    __init10();
    __init11();
    __init12();
    __init13();
    __init14();
    __init15();
    __init16();
    __init17();
    __init18();
    __init19();
    __init20();
    __init21();
    __init22();
    __init23();
    Compiler.pushNSandLoader(Class.forName("clojure.core__init").getClassLoader());
    try
    {
      load();
      return;
    }
    finally
    {
      Var.popThreadBindings();
    }
  }

  public static void __init0()
  {
    const__0 = (Var)RT.var("clojure.core", "in-ns");
    IObj localIObj1 = (IObj)Symbol.intern(null, "clojure.core");
    Object[] arrayOfObject1 = new Object[4];
    arrayOfObject1[0] = RT.keyword(null, "author");
    arrayOfObject1[1] = "Rich Hickey";
    arrayOfObject1[2] = RT.keyword(null, "doc");
    arrayOfObject1[3] = "The core Clojure language.";
    const__1 = (AFn)localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject1));
    const__2 = (AFn)Symbol.intern(null, "clojure.core");
    const__3 = (Var)RT.var("clojure.core", "unquote");
    const__4 = (Keyword)RT.keyword(null, "file");
    const__5 = (Keyword)RT.keyword(null, "column");
    const__6 = Integer.valueOf(1);
    const__7 = (Keyword)RT.keyword(null, "line");
    const__8 = Integer.valueOf(13);
    Object[] arrayOfObject2 = new Object[6];
    arrayOfObject2[0] = RT.keyword(null, "column");
    arrayOfObject2[1] = Integer.valueOf(1);
    arrayOfObject2[2] = RT.keyword(null, "line");
    arrayOfObject2[3] = Integer.valueOf(13);
    arrayOfObject2[4] = RT.keyword(null, "file");
    arrayOfObject2[5] = "clojure/core.clj";
    const__9 = (AFn)RT.map(arrayOfObject2);
    const__10 = (Var)RT.var("clojure.core", "unquote-splicing");
    const__11 = Integer.valueOf(14);
    Object[] arrayOfObject3 = new Object[6];
    arrayOfObject3[0] = RT.keyword(null, "column");
    arrayOfObject3[1] = Integer.valueOf(1);
    arrayOfObject3[2] = RT.keyword(null, "line");
    arrayOfObject3[3] = Integer.valueOf(14);
    arrayOfObject3[4] = RT.keyword(null, "file");
    arrayOfObject3[5] = "clojure/core.clj";
    const__12 = (AFn)RT.map(arrayOfObject3);
    const__13 = (Var)RT.var("clojure.core", "list");
    const__14 = Integer.valueOf(16);
    const__15 = (Keyword)RT.keyword(null, "added");
    const__16 = (Keyword)RT.keyword(null, "doc");
    const__17 = (Keyword)RT.keyword(null, "arglists");
    Object[] arrayOfObject4 = new Object[1];
    Object[] arrayOfObject5 = new Object[2];
    arrayOfObject5[0] = Symbol.intern(null, "&");
    arrayOfObject5[1] = Symbol.intern(null, "items");
    arrayOfObject4[0] = RT.vector(arrayOfObject5);
    IObj localIObj2 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject4));
    Object[] arrayOfObject6 = new Object[4];
    arrayOfObject6[0] = RT.keyword(null, "line");
    arrayOfObject6[1] = Integer.valueOf(17);
    arrayOfObject6[2] = RT.keyword(null, "column");
    arrayOfObject6[3] = Integer.valueOf(15);
    const__18 = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject6));
    Object[] arrayOfObject7 = new Object[12];
    arrayOfObject7[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject8 = new Object[1];
    Object[] arrayOfObject9 = new Object[2];
    arrayOfObject9[0] = Symbol.intern(null, "&");
    arrayOfObject9[1] = Symbol.intern(null, "items");
    arrayOfObject8[0] = RT.vector(arrayOfObject9);
    IObj localIObj3 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject8));
    Object[] arrayOfObject10 = new Object[4];
    arrayOfObject10[0] = RT.keyword(null, "line");
    arrayOfObject10[1] = Integer.valueOf(17);
    arrayOfObject10[2] = RT.keyword(null, "column");
    arrayOfObject10[3] = Integer.valueOf(15);
    arrayOfObject7[1] = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject10));
    arrayOfObject7[2] = RT.keyword(null, "column");
    arrayOfObject7[3] = Integer.valueOf(1);
    arrayOfObject7[4] = RT.keyword(null, "added");
    arrayOfObject7[5] = "1.0";
    arrayOfObject7[6] = RT.keyword(null, "doc");
    arrayOfObject7[7] = "Creates a new list containing the items.";
    arrayOfObject7[8] = RT.keyword(null, "line");
    arrayOfObject7[9] = Integer.valueOf(16);
    arrayOfObject7[10] = RT.keyword(null, "file");
    arrayOfObject7[11] = "clojure/core.clj";
    const__19 = (AFn)RT.map(arrayOfObject7);
    const__20 = (Var)RT.var("clojure.core", "cons");
    const__21 = Integer.valueOf(22);
    const__22 = (Keyword)RT.keyword(null, "static");
    Object[] arrayOfObject11 = new Object[1];
    Object[] arrayOfObject12 = new Object[2];
    arrayOfObject12[0] = Symbol.intern(null, "x");
    arrayOfObject12[1] = Symbol.intern(null, "seq");
    arrayOfObject11[0] = RT.vector(arrayOfObject12);
    IObj localIObj4 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject11));
    Object[] arrayOfObject13 = new Object[4];
    arrayOfObject13[0] = RT.keyword(null, "line");
    arrayOfObject13[1] = Integer.valueOf(23);
    arrayOfObject13[2] = RT.keyword(null, "column");
    arrayOfObject13[3] = Integer.valueOf(15);
    const__23 = localIObj4.withMeta((IPersistentMap)RT.map(arrayOfObject13));
    Object[] arrayOfObject14 = new Object[14];
    arrayOfObject14[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject15 = new Object[1];
    Object[] arrayOfObject16 = new Object[2];
    arrayOfObject16[0] = Symbol.intern(null, "x");
    arrayOfObject16[1] = Symbol.intern(null, "seq");
    arrayOfObject15[0] = RT.vector(arrayOfObject16);
    IObj localIObj5 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject15));
    Object[] arrayOfObject17 = new Object[4];
    arrayOfObject17[0] = RT.keyword(null, "line");
    arrayOfObject17[1] = Integer.valueOf(23);
    arrayOfObject17[2] = RT.keyword(null, "column");
    arrayOfObject17[3] = Integer.valueOf(15);
    arrayOfObject14[1] = localIObj5.withMeta((IPersistentMap)RT.map(arrayOfObject17));
    arrayOfObject14[2] = RT.keyword(null, "column");
    arrayOfObject14[3] = Integer.valueOf(1);
    arrayOfObject14[4] = RT.keyword(null, "added");
    arrayOfObject14[5] = "1.0";
    arrayOfObject14[6] = RT.keyword(null, "static");
    arrayOfObject14[7] = Boolean.TRUE;
    arrayOfObject14[8] = RT.keyword(null, "doc");
    arrayOfObject14[9] = "Returns a new seq where x is the first element and seq is\n    the rest.";
    arrayOfObject14[10] = RT.keyword(null, "line");
    arrayOfObject14[11] = Integer.valueOf(22);
    arrayOfObject14[12] = RT.keyword(null, "file");
    arrayOfObject14[13] = "clojure/core.clj";
    const__24 = (AFn)RT.map(arrayOfObject14);
    const__25 = (Var)RT.var("clojure.core", "let");
    const__26 = Integer.valueOf(32);
    const__27 = (Keyword)RT.keyword(null, "macro");
    Object[] arrayOfObject18 = new Object[10];
    arrayOfObject18[0] = RT.keyword(null, "column");
    arrayOfObject18[1] = Integer.valueOf(1);
    arrayOfObject18[2] = RT.keyword(null, "added");
    arrayOfObject18[3] = "1.0";
    arrayOfObject18[4] = RT.keyword(null, "macro");
    arrayOfObject18[5] = Boolean.TRUE;
    arrayOfObject18[6] = RT.keyword(null, "line");
    arrayOfObject18[7] = Integer.valueOf(32);
    arrayOfObject18[8] = RT.keyword(null, "file");
    arrayOfObject18[9] = "clojure/core.clj";
    const__28 = (AFn)RT.map(arrayOfObject18);
    const__29 = (Var)RT.var("clojure.core", "loop");
    const__30 = Integer.valueOf(37);
    Object[] arrayOfObject19 = new Object[10];
    arrayOfObject19[0] = RT.keyword(null, "column");
    arrayOfObject19[1] = Integer.valueOf(1);
    arrayOfObject19[2] = RT.keyword(null, "added");
    arrayOfObject19[3] = "1.0";
    arrayOfObject19[4] = RT.keyword(null, "macro");
    arrayOfObject19[5] = Boolean.TRUE;
    arrayOfObject19[6] = RT.keyword(null, "line");
    arrayOfObject19[7] = Integer.valueOf(37);
    arrayOfObject19[8] = RT.keyword(null, "file");
    arrayOfObject19[9] = "clojure/core.clj";
    const__31 = (AFn)RT.map(arrayOfObject19);
    const__32 = (Var)RT.var("clojure.core", "fn");
    const__33 = Integer.valueOf(42);
    Object[] arrayOfObject20 = new Object[10];
    arrayOfObject20[0] = RT.keyword(null, "column");
    arrayOfObject20[1] = Integer.valueOf(1);
    arrayOfObject20[2] = RT.keyword(null, "added");
    arrayOfObject20[3] = "1.0";
    arrayOfObject20[4] = RT.keyword(null, "macro");
    arrayOfObject20[5] = Boolean.TRUE;
    arrayOfObject20[6] = RT.keyword(null, "line");
    arrayOfObject20[7] = Integer.valueOf(42);
    arrayOfObject20[8] = RT.keyword(null, "file");
    arrayOfObject20[9] = "clojure/core.clj";
    const__34 = (AFn)RT.map(arrayOfObject20);
    const__35 = (Var)RT.var("clojure.core", "first");
    const__36 = Integer.valueOf(49);
    Object[] arrayOfObject21 = new Object[1];
    Object[] arrayOfObject22 = new Object[1];
    arrayOfObject22[0] = Symbol.intern(null, "coll");
    arrayOfObject21[0] = RT.vector(arrayOfObject22);
    IObj localIObj6 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject21));
    Object[] arrayOfObject23 = new Object[4];
    arrayOfObject23[0] = RT.keyword(null, "line");
    arrayOfObject23[1] = Integer.valueOf(50);
    arrayOfObject23[2] = RT.keyword(null, "column");
    arrayOfObject23[3] = Integer.valueOf(15);
    const__37 = localIObj6.withMeta((IPersistentMap)RT.map(arrayOfObject23));
    Object[] arrayOfObject24 = new Object[14];
    arrayOfObject24[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject25 = new Object[1];
    Object[] arrayOfObject26 = new Object[1];
    arrayOfObject26[0] = Symbol.intern(null, "coll");
    arrayOfObject25[0] = RT.vector(arrayOfObject26);
    IObj localIObj7 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject25));
    Object[] arrayOfObject27 = new Object[4];
    arrayOfObject27[0] = RT.keyword(null, "line");
    arrayOfObject27[1] = Integer.valueOf(50);
    arrayOfObject27[2] = RT.keyword(null, "column");
    arrayOfObject27[3] = Integer.valueOf(15);
    arrayOfObject24[1] = localIObj7.withMeta((IPersistentMap)RT.map(arrayOfObject27));
    arrayOfObject24[2] = RT.keyword(null, "column");
    arrayOfObject24[3] = Integer.valueOf(1);
    arrayOfObject24[4] = RT.keyword(null, "added");
    arrayOfObject24[5] = "1.0";
    arrayOfObject24[6] = RT.keyword(null, "static");
    arrayOfObject24[7] = Boolean.TRUE;
    arrayOfObject24[8] = RT.keyword(null, "doc");
    arrayOfObject24[9] = "Returns the first item in the collection. Calls seq on its\n    argument. If coll is nil, returns nil.";
    arrayOfObject24[10] = RT.keyword(null, "line");
    arrayOfObject24[11] = Integer.valueOf(49);
    arrayOfObject24[12] = RT.keyword(null, "file");
    arrayOfObject24[13] = "clojure/core.clj";
    const__38 = (AFn)RT.map(arrayOfObject24);
    const__39 = (Var)RT.var("clojure.core", "next");
    const__40 = Integer.valueOf(57);
    const__41 = (Keyword)RT.keyword(null, "tag");
    const__42 = Class.forName("clojure.lang.ISeq");
    Object[] arrayOfObject28 = new Object[1];
    Object[] arrayOfObject29 = new Object[1];
    arrayOfObject29[0] = Symbol.intern(null, "coll");
    arrayOfObject28[0] = RT.vector(arrayOfObject29);
    IObj localIObj8 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject28));
    Object[] arrayOfObject30 = new Object[4];
    arrayOfObject30[0] = RT.keyword(null, "line");
    arrayOfObject30[1] = Integer.valueOf(58);
    arrayOfObject30[2] = RT.keyword(null, "column");
    arrayOfObject30[3] = Integer.valueOf(15);
    const__43 = localIObj8.withMeta((IPersistentMap)RT.map(arrayOfObject30));
    Object[] arrayOfObject31 = new Object[16];
    arrayOfObject31[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject32 = new Object[1];
    Object[] arrayOfObject33 = new Object[1];
    arrayOfObject33[0] = Symbol.intern(null, "coll");
    arrayOfObject32[0] = RT.vector(arrayOfObject33);
    IObj localIObj9 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject32));
    Object[] arrayOfObject34 = new Object[4];
    arrayOfObject34[0] = RT.keyword(null, "line");
    arrayOfObject34[1] = Integer.valueOf(58);
    arrayOfObject34[2] = RT.keyword(null, "column");
    arrayOfObject34[3] = Integer.valueOf(15);
    arrayOfObject31[1] = localIObj9.withMeta((IPersistentMap)RT.map(arrayOfObject34));
    arrayOfObject31[2] = RT.keyword(null, "column");
    arrayOfObject31[3] = Integer.valueOf(1);
    arrayOfObject31[4] = RT.keyword(null, "added");
    arrayOfObject31[5] = "1.0";
    arrayOfObject31[6] = RT.keyword(null, "static");
    arrayOfObject31[7] = Boolean.TRUE;
    arrayOfObject31[8] = RT.keyword(null, "doc");
    arrayOfObject31[9] = "Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil.";
    arrayOfObject31[10] = RT.keyword(null, "line");
    arrayOfObject31[11] = Integer.valueOf(57);
    arrayOfObject31[12] = RT.keyword(null, "file");
    arrayOfObject31[13] = "clojure/core.clj";
    arrayOfObject31[14] = RT.keyword(null, "tag");
    arrayOfObject31[15] = Class.forName("clojure.lang.ISeq");
    const__44 = (AFn)RT.map(arrayOfObject31);
    const__45 = (Var)RT.var("clojure.core", "rest");
    const__46 = Integer.valueOf(66);
    Object[] arrayOfObject35 = new Object[1];
    Object[] arrayOfObject36 = new Object[1];
    arrayOfObject36[0] = Symbol.intern(null, "coll");
    arrayOfObject35[0] = RT.vector(arrayOfObject36);
    IObj localIObj10 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject35));
    Object[] arrayOfObject37 = new Object[4];
    arrayOfObject37[0] = RT.keyword(null, "line");
    arrayOfObject37[1] = Integer.valueOf(67);
    arrayOfObject37[2] = RT.keyword(null, "column");
    arrayOfObject37[3] = Integer.valueOf(15);
    const__47 = localIObj10.withMeta((IPersistentMap)RT.map(arrayOfObject37));
    Object[] arrayOfObject38 = new Object[16];
    arrayOfObject38[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject39 = new Object[1];
    Object[] arrayOfObject40 = new Object[1];
    arrayOfObject40[0] = Symbol.intern(null, "coll");
    arrayOfObject39[0] = RT.vector(arrayOfObject40);
    IObj localIObj11 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject39));
    Object[] arrayOfObject41 = new Object[4];
    arrayOfObject41[0] = RT.keyword(null, "line");
    arrayOfObject41[1] = Integer.valueOf(67);
    arrayOfObject41[2] = RT.keyword(null, "column");
    arrayOfObject41[3] = Integer.valueOf(15);
    arrayOfObject38[1] = localIObj11.withMeta((IPersistentMap)RT.map(arrayOfObject41));
    arrayOfObject38[2] = RT.keyword(null, "column");
    arrayOfObject38[3] = Integer.valueOf(1);
    arrayOfObject38[4] = RT.keyword(null, "added");
    arrayOfObject38[5] = "1.0";
    arrayOfObject38[6] = RT.keyword(null, "static");
    arrayOfObject38[7] = Boolean.TRUE;
    arrayOfObject38[8] = RT.keyword(null, "doc");
    arrayOfObject38[9] = "Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.";
    arrayOfObject38[10] = RT.keyword(null, "line");
    arrayOfObject38[11] = Integer.valueOf(66);
    arrayOfObject38[12] = RT.keyword(null, "file");
    arrayOfObject38[13] = "clojure/core.clj";
    arrayOfObject38[14] = RT.keyword(null, "tag");
    arrayOfObject38[15] = Class.forName("clojure.lang.ISeq");
    const__48 = (AFn)RT.map(arrayOfObject38);
    const__49 = (Var)RT.var("clojure.core", "conj");
    const__50 = Integer.valueOf(75);
    Object[] arrayOfObject42 = new Object[2];
    Object[] arrayOfObject43 = new Object[2];
    arrayOfObject43[0] = Symbol.intern(null, "coll");
    arrayOfObject43[1] = Symbol.intern(null, "x");
    arrayOfObject42[0] = RT.vector(arrayOfObject43);
    Object[] arrayOfObject44 = new Object[4];
    arrayOfObject44[0] = Symbol.intern(null, "coll");
    arrayOfObject44[1] = Symbol.intern(null, "x");
    arrayOfObject44[2] = Symbol.intern(null, "&");
    arrayOfObject44[3] = Symbol.intern(null, "xs");
    arrayOfObject42[1] = RT.vector(arrayOfObject44);
    IObj localIObj12 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject42));
    Object[] arrayOfObject45 = new Object[4];
    arrayOfObject45[0] = RT.keyword(null, "line");
    arrayOfObject45[1] = Integer.valueOf(76);
    arrayOfObject45[2] = RT.keyword(null, "column");
    arrayOfObject45[3] = Integer.valueOf(15);
    const__51 = localIObj12.withMeta((IPersistentMap)RT.map(arrayOfObject45));
    Object[] arrayOfObject46 = new Object[14];
    arrayOfObject46[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject47 = new Object[2];
    Object[] arrayOfObject48 = new Object[2];
    arrayOfObject48[0] = Symbol.intern(null, "coll");
    arrayOfObject48[1] = Symbol.intern(null, "x");
    arrayOfObject47[0] = RT.vector(arrayOfObject48);
    Object[] arrayOfObject49 = new Object[4];
    arrayOfObject49[0] = Symbol.intern(null, "coll");
    arrayOfObject49[1] = Symbol.intern(null, "x");
    arrayOfObject49[2] = Symbol.intern(null, "&");
    arrayOfObject49[3] = Symbol.intern(null, "xs");
    arrayOfObject47[1] = RT.vector(arrayOfObject49);
    IObj localIObj13 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject47));
    Object[] arrayOfObject50 = new Object[4];
    arrayOfObject50[0] = RT.keyword(null, "line");
    arrayOfObject50[1] = Integer.valueOf(76);
    arrayOfObject50[2] = RT.keyword(null, "column");
    arrayOfObject50[3] = Integer.valueOf(15);
    arrayOfObject46[1] = localIObj13.withMeta((IPersistentMap)RT.map(arrayOfObject50));
    arrayOfObject46[2] = RT.keyword(null, "column");
    arrayOfObject46[3] = Integer.valueOf(1);
    arrayOfObject46[4] = RT.keyword(null, "added");
    arrayOfObject46[5] = "1.0";
    arrayOfObject46[6] = RT.keyword(null, "static");
    arrayOfObject46[7] = Boolean.TRUE;
    arrayOfObject46[8] = RT.keyword(null, "doc");
    arrayOfObject46[9] = "conj[oin]. Returns a new collection with the xs\n    'added'. (conj nil item) returns (item).  The 'addition' may\n    happen at different 'places' depending on the concrete type.";
    arrayOfObject46[10] = RT.keyword(null, "line");
    arrayOfObject46[11] = Integer.valueOf(75);
    arrayOfObject46[12] = RT.keyword(null, "file");
    arrayOfObject46[13] = "clojure/core.clj";
    const__52 = (AFn)RT.map(arrayOfObject46);
    const__53 = (Var)RT.var("clojure.core", "second");
    const__54 = Integer.valueOf(89);
    Object[] arrayOfObject51 = new Object[1];
    Object[] arrayOfObject52 = new Object[1];
    arrayOfObject52[0] = Symbol.intern(null, "x");
    arrayOfObject51[0] = RT.vector(arrayOfObject52);
    IObj localIObj14 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject51));
    Object[] arrayOfObject53 = new Object[4];
    arrayOfObject53[0] = RT.keyword(null, "line");
    arrayOfObject53[1] = Integer.valueOf(91);
    arrayOfObject53[2] = RT.keyword(null, "column");
    arrayOfObject53[3] = Integer.valueOf(15);
    const__55 = localIObj14.withMeta((IPersistentMap)RT.map(arrayOfObject53));
    Object[] arrayOfObject54 = new Object[14];
    arrayOfObject54[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject55 = new Object[1];
    Object[] arrayOfObject56 = new Object[1];
    arrayOfObject56[0] = Symbol.intern(null, "x");
    arrayOfObject55[0] = RT.vector(arrayOfObject56);
    IObj localIObj15 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject55));
    Object[] arrayOfObject57 = new Object[4];
    arrayOfObject57[0] = RT.keyword(null, "line");
    arrayOfObject57[1] = Integer.valueOf(91);
    arrayOfObject57[2] = RT.keyword(null, "column");
    arrayOfObject57[3] = Integer.valueOf(15);
    arrayOfObject54[1] = localIObj15.withMeta((IPersistentMap)RT.map(arrayOfObject57));
    arrayOfObject54[2] = RT.keyword(null, "column");
    arrayOfObject54[3] = Integer.valueOf(1);
    arrayOfObject54[4] = RT.keyword(null, "added");
    arrayOfObject54[5] = "1.0";
    arrayOfObject54[6] = RT.keyword(null, "static");
    arrayOfObject54[7] = Boolean.TRUE;
    arrayOfObject54[8] = RT.keyword(null, "doc");
    arrayOfObject54[9] = "Same as (first (next x))";
    arrayOfObject54[10] = RT.keyword(null, "line");
    arrayOfObject54[11] = Integer.valueOf(89);
    arrayOfObject54[12] = RT.keyword(null, "file");
    arrayOfObject54[13] = "clojure/core.clj";
    const__56 = (AFn)RT.map(arrayOfObject54);
    const__57 = (Var)RT.var("clojure.core", "ffirst");
    const__58 = Integer.valueOf(96);
    Object[] arrayOfObject58 = new Object[1];
    Object[] arrayOfObject59 = new Object[1];
    arrayOfObject59[0] = Symbol.intern(null, "x");
    arrayOfObject58[0] = RT.vector(arrayOfObject59);
    IObj localIObj16 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject58));
    Object[] arrayOfObject60 = new Object[4];
    arrayOfObject60[0] = RT.keyword(null, "line");
    arrayOfObject60[1] = Integer.valueOf(98);
    arrayOfObject60[2] = RT.keyword(null, "column");
    arrayOfObject60[3] = Integer.valueOf(15);
    const__59 = localIObj16.withMeta((IPersistentMap)RT.map(arrayOfObject60));
    Object[] arrayOfObject61 = new Object[14];
    arrayOfObject61[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject62 = new Object[1];
    Object[] arrayOfObject63 = new Object[1];
    arrayOfObject63[0] = Symbol.intern(null, "x");
    arrayOfObject62[0] = RT.vector(arrayOfObject63);
    IObj localIObj17 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject62));
    Object[] arrayOfObject64 = new Object[4];
    arrayOfObject64[0] = RT.keyword(null, "line");
    arrayOfObject64[1] = Integer.valueOf(98);
    arrayOfObject64[2] = RT.keyword(null, "column");
    arrayOfObject64[3] = Integer.valueOf(15);
    arrayOfObject61[1] = localIObj17.withMeta((IPersistentMap)RT.map(arrayOfObject64));
    arrayOfObject61[2] = RT.keyword(null, "column");
    arrayOfObject61[3] = Integer.valueOf(1);
    arrayOfObject61[4] = RT.keyword(null, "added");
    arrayOfObject61[5] = "1.0";
    arrayOfObject61[6] = RT.keyword(null, "static");
    arrayOfObject61[7] = Boolean.TRUE;
    arrayOfObject61[8] = RT.keyword(null, "doc");
    arrayOfObject61[9] = "Same as (first (first x))";
    arrayOfObject61[10] = RT.keyword(null, "line");
    arrayOfObject61[11] = Integer.valueOf(96);
    arrayOfObject61[12] = RT.keyword(null, "file");
    arrayOfObject61[13] = "clojure/core.clj";
    const__60 = (AFn)RT.map(arrayOfObject61);
    const__61 = (Var)RT.var("clojure.core", "nfirst");
    const__62 = Integer.valueOf(103);
    Object[] arrayOfObject65 = new Object[1];
    Object[] arrayOfObject66 = new Object[1];
    arrayOfObject66[0] = Symbol.intern(null, "x");
    arrayOfObject65[0] = RT.vector(arrayOfObject66);
    IObj localIObj18 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject65));
    Object[] arrayOfObject67 = new Object[4];
    arrayOfObject67[0] = RT.keyword(null, "line");
    arrayOfObject67[1] = Integer.valueOf(105);
    arrayOfObject67[2] = RT.keyword(null, "column");
    arrayOfObject67[3] = Integer.valueOf(15);
    const__63 = localIObj18.withMeta((IPersistentMap)RT.map(arrayOfObject67));
    Object[] arrayOfObject68 = new Object[14];
    arrayOfObject68[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject69 = new Object[1];
    Object[] arrayOfObject70 = new Object[1];
    arrayOfObject70[0] = Symbol.intern(null, "x");
    arrayOfObject69[0] = RT.vector(arrayOfObject70);
    IObj localIObj19 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject69));
    Object[] arrayOfObject71 = new Object[4];
    arrayOfObject71[0] = RT.keyword(null, "line");
    arrayOfObject71[1] = Integer.valueOf(105);
    arrayOfObject71[2] = RT.keyword(null, "column");
    arrayOfObject71[3] = Integer.valueOf(15);
    arrayOfObject68[1] = localIObj19.withMeta((IPersistentMap)RT.map(arrayOfObject71));
    arrayOfObject68[2] = RT.keyword(null, "column");
    arrayOfObject68[3] = Integer.valueOf(1);
    arrayOfObject68[4] = RT.keyword(null, "added");
    arrayOfObject68[5] = "1.0";
    arrayOfObject68[6] = RT.keyword(null, "static");
    arrayOfObject68[7] = Boolean.TRUE;
    arrayOfObject68[8] = RT.keyword(null, "doc");
    arrayOfObject68[9] = "Same as (next (first x))";
    arrayOfObject68[10] = RT.keyword(null, "line");
    arrayOfObject68[11] = Integer.valueOf(103);
    arrayOfObject68[12] = RT.keyword(null, "file");
    arrayOfObject68[13] = "clojure/core.clj";
    const__64 = (AFn)RT.map(arrayOfObject68);
    const__65 = (Var)RT.var("clojure.core", "fnext");
    const__66 = Integer.valueOf(110);
    Object[] arrayOfObject72 = new Object[1];
    Object[] arrayOfObject73 = new Object[1];
    arrayOfObject73[0] = Symbol.intern(null, "x");
    arrayOfObject72[0] = RT.vector(arrayOfObject73);
    IObj localIObj20 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject72));
    Object[] arrayOfObject74 = new Object[4];
    arrayOfObject74[0] = RT.keyword(null, "line");
    arrayOfObject74[1] = Integer.valueOf(112);
    arrayOfObject74[2] = RT.keyword(null, "column");
    arrayOfObject74[3] = Integer.valueOf(15);
    const__67 = localIObj20.withMeta((IPersistentMap)RT.map(arrayOfObject74));
    Object[] arrayOfObject75 = new Object[14];
    arrayOfObject75[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject76 = new Object[1];
    Object[] arrayOfObject77 = new Object[1];
    arrayOfObject77[0] = Symbol.intern(null, "x");
    arrayOfObject76[0] = RT.vector(arrayOfObject77);
    IObj localIObj21 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject76));
    Object[] arrayOfObject78 = new Object[4];
    arrayOfObject78[0] = RT.keyword(null, "line");
    arrayOfObject78[1] = Integer.valueOf(112);
    arrayOfObject78[2] = RT.keyword(null, "column");
    arrayOfObject78[3] = Integer.valueOf(15);
    arrayOfObject75[1] = localIObj21.withMeta((IPersistentMap)RT.map(arrayOfObject78));
    arrayOfObject75[2] = RT.keyword(null, "column");
    arrayOfObject75[3] = Integer.valueOf(1);
    arrayOfObject75[4] = RT.keyword(null, "added");
    arrayOfObject75[5] = "1.0";
    arrayOfObject75[6] = RT.keyword(null, "static");
    arrayOfObject75[7] = Boolean.TRUE;
    arrayOfObject75[8] = RT.keyword(null, "doc");
    arrayOfObject75[9] = "Same as (first (next x))";
    arrayOfObject75[10] = RT.keyword(null, "line");
    arrayOfObject75[11] = Integer.valueOf(110);
    arrayOfObject75[12] = RT.keyword(null, "file");
    arrayOfObject75[13] = "clojure/core.clj";
    const__68 = (AFn)RT.map(arrayOfObject75);
    const__69 = (Var)RT.var("clojure.core", "nnext");
    const__70 = Integer.valueOf(117);
    Object[] arrayOfObject79 = new Object[1];
    Object[] arrayOfObject80 = new Object[1];
    arrayOfObject80[0] = Symbol.intern(null, "x");
    arrayOfObject79[0] = RT.vector(arrayOfObject80);
    IObj localIObj22 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject79));
    Object[] arrayOfObject81 = new Object[4];
    arrayOfObject81[0] = RT.keyword(null, "line");
    arrayOfObject81[1] = Integer.valueOf(119);
    arrayOfObject81[2] = RT.keyword(null, "column");
    arrayOfObject81[3] = Integer.valueOf(15);
    const__71 = localIObj22.withMeta((IPersistentMap)RT.map(arrayOfObject81));
    Object[] arrayOfObject82 = new Object[14];
    arrayOfObject82[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject83 = new Object[1];
    Object[] arrayOfObject84 = new Object[1];
    arrayOfObject84[0] = Symbol.intern(null, "x");
    arrayOfObject83[0] = RT.vector(arrayOfObject84);
    IObj localIObj23 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject83));
    Object[] arrayOfObject85 = new Object[4];
    arrayOfObject85[0] = RT.keyword(null, "line");
    arrayOfObject85[1] = Integer.valueOf(119);
    arrayOfObject85[2] = RT.keyword(null, "column");
    arrayOfObject85[3] = Integer.valueOf(15);
    arrayOfObject82[1] = localIObj23.withMeta((IPersistentMap)RT.map(arrayOfObject85));
    arrayOfObject82[2] = RT.keyword(null, "column");
    arrayOfObject82[3] = Integer.valueOf(1);
    arrayOfObject82[4] = RT.keyword(null, "added");
    arrayOfObject82[5] = "1.0";
    arrayOfObject82[6] = RT.keyword(null, "static");
    arrayOfObject82[7] = Boolean.TRUE;
    arrayOfObject82[8] = RT.keyword(null, "doc");
    arrayOfObject82[9] = "Same as (next (next x))";
    arrayOfObject82[10] = RT.keyword(null, "line");
    arrayOfObject82[11] = Integer.valueOf(117);
    arrayOfObject82[12] = RT.keyword(null, "file");
    arrayOfObject82[13] = "clojure/core.clj";
    const__72 = (AFn)RT.map(arrayOfObject82);
    const__73 = (Var)RT.var("clojure.core", "seq");
    const__74 = Integer.valueOf(124);
    Object[] arrayOfObject86 = new Object[1];
    Object[] arrayOfObject87 = new Object[1];
    arrayOfObject87[0] = Symbol.intern(null, "coll");
    IObj localIObj24 = (IObj)RT.vector(arrayOfObject87);
    Object[] arrayOfObject88 = new Object[2];
    arrayOfObject88[0] = RT.keyword(null, "tag");
    arrayOfObject88[1] = Symbol.intern(null, "clojure.lang.ISeq");
    arrayOfObject86[0] = localIObj24.withMeta((IPersistentMap)RT.map(arrayOfObject88));
    IObj localIObj25 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject86));
    Object[] arrayOfObject89 = new Object[4];
    arrayOfObject89[0] = RT.keyword(null, "line");
    arrayOfObject89[1] = Integer.valueOf(125);
    arrayOfObject89[2] = RT.keyword(null, "column");
    arrayOfObject89[3] = Integer.valueOf(15);
    const__75 = localIObj25.withMeta((IPersistentMap)RT.map(arrayOfObject89));
    Object[] arrayOfObject90 = new Object[16];
    arrayOfObject90[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject91 = new Object[1];
    Object[] arrayOfObject92 = new Object[1];
    arrayOfObject92[0] = Symbol.intern(null, "coll");
    IObj localIObj26 = (IObj)RT.vector(arrayOfObject92);
    Object[] arrayOfObject93 = new Object[2];
    arrayOfObject93[0] = RT.keyword(null, "tag");
    arrayOfObject93[1] = Symbol.intern(null, "clojure.lang.ISeq");
    arrayOfObject91[0] = localIObj26.withMeta((IPersistentMap)RT.map(arrayOfObject93));
    IObj localIObj27 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject91));
    Object[] arrayOfObject94 = new Object[4];
    arrayOfObject94[0] = RT.keyword(null, "line");
    arrayOfObject94[1] = Integer.valueOf(125);
    arrayOfObject94[2] = RT.keyword(null, "column");
    arrayOfObject94[3] = Integer.valueOf(15);
    arrayOfObject90[1] = localIObj27.withMeta((IPersistentMap)RT.map(arrayOfObject94));
    arrayOfObject90[2] = RT.keyword(null, "column");
    arrayOfObject90[3] = Integer.valueOf(1);
    arrayOfObject90[4] = RT.keyword(null, "added");
    arrayOfObject90[5] = "1.0";
    arrayOfObject90[6] = RT.keyword(null, "static");
    arrayOfObject90[7] = Boolean.TRUE;
    arrayOfObject90[8] = RT.keyword(null, "doc");
    arrayOfObject90[9] = "Returns a seq on the collection. If the collection is\n    empty, returns nil.  (seq nil) returns nil. seq also works on\n    Strings, native Java arrays (of reference types) and any objects\n    that implement Iterable.";
    arrayOfObject90[10] = RT.keyword(null, "line");
    arrayOfObject90[11] = Integer.valueOf(124);
    arrayOfObject90[12] = RT.keyword(null, "file");
    arrayOfObject90[13] = "clojure/core.clj";
    arrayOfObject90[14] = RT.keyword(null, "tag");
    arrayOfObject90[15] = Class.forName("clojure.lang.ISeq");
    const__76 = (AFn)RT.map(arrayOfObject90);
    const__77 = (Var)RT.var("clojure.core", "instance?");
    const__78 = Integer.valueOf(135);
    Object[] arrayOfObject95 = new Object[1];
    Object[] arrayOfObject96 = new Object[2];
    IObj localIObj28 = (IObj)Symbol.intern(null, "c");
    Object[] arrayOfObject97 = new Object[2];
    arrayOfObject97[0] = RT.keyword(null, "tag");
    arrayOfObject97[1] = Symbol.intern(null, "Class");
    arrayOfObject96[0] = localIObj28.withMeta((IPersistentMap)RT.map(arrayOfObject97));
    arrayOfObject96[1] = Symbol.intern(null, "x");
    arrayOfObject95[0] = RT.vector(arrayOfObject96);
    IObj localIObj29 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject95));
    Object[] arrayOfObject98 = new Object[4];
    arrayOfObject98[0] = RT.keyword(null, "line");
    arrayOfObject98[1] = Integer.valueOf(136);
    arrayOfObject98[2] = RT.keyword(null, "column");
    arrayOfObject98[3] = Integer.valueOf(15);
    const__79 = localIObj29.withMeta((IPersistentMap)RT.map(arrayOfObject98));
    Object[] arrayOfObject99 = new Object[12];
    arrayOfObject99[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject100 = new Object[1];
    Object[] arrayOfObject101 = new Object[2];
    IObj localIObj30 = (IObj)Symbol.intern(null, "c");
    Object[] arrayOfObject102 = new Object[2];
    arrayOfObject102[0] = RT.keyword(null, "tag");
    arrayOfObject102[1] = Symbol.intern(null, "Class");
    arrayOfObject101[0] = localIObj30.withMeta((IPersistentMap)RT.map(arrayOfObject102));
    arrayOfObject101[1] = Symbol.intern(null, "x");
    arrayOfObject100[0] = RT.vector(arrayOfObject101);
    IObj localIObj31 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject100));
    Object[] arrayOfObject103 = new Object[4];
    arrayOfObject103[0] = RT.keyword(null, "line");
    arrayOfObject103[1] = Integer.valueOf(136);
    arrayOfObject103[2] = RT.keyword(null, "column");
    arrayOfObject103[3] = Integer.valueOf(15);
    arrayOfObject99[1] = localIObj31.withMeta((IPersistentMap)RT.map(arrayOfObject103));
    arrayOfObject99[2] = RT.keyword(null, "column");
    arrayOfObject99[3] = Integer.valueOf(1);
    arrayOfObject99[4] = RT.keyword(null, "added");
    arrayOfObject99[5] = "1.0";
    arrayOfObject99[6] = RT.keyword(null, "doc");
    arrayOfObject99[7] = "Evaluates x and tests if it is an instance of the class\n    c. Returns true or false";
    arrayOfObject99[8] = RT.keyword(null, "line");
    arrayOfObject99[9] = Integer.valueOf(135);
    arrayOfObject99[10] = RT.keyword(null, "file");
    arrayOfObject99[11] = "clojure/core.clj";
    const__80 = (AFn)RT.map(arrayOfObject99);
    const__81 = (Var)RT.var("clojure.core", "seq?");
    const__82 = Integer.valueOf(142);
    Object[] arrayOfObject104 = new Object[1];
    Object[] arrayOfObject105 = new Object[1];
    arrayOfObject105[0] = Symbol.intern(null, "x");
    arrayOfObject104[0] = RT.vector(arrayOfObject105);
    IObj localIObj32 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject104));
    Object[] arrayOfObject106 = new Object[4];
    arrayOfObject106[0] = RT.keyword(null, "line");
    arrayOfObject106[1] = Integer.valueOf(143);
    arrayOfObject106[2] = RT.keyword(null, "column");
    arrayOfObject106[3] = Integer.valueOf(15);
    const__83 = localIObj32.withMeta((IPersistentMap)RT.map(arrayOfObject106));
    Object[] arrayOfObject107 = new Object[14];
    arrayOfObject107[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject108 = new Object[1];
    Object[] arrayOfObject109 = new Object[1];
    arrayOfObject109[0] = Symbol.intern(null, "x");
    arrayOfObject108[0] = RT.vector(arrayOfObject109);
    IObj localIObj33 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject108));
    Object[] arrayOfObject110 = new Object[4];
    arrayOfObject110[0] = RT.keyword(null, "line");
    arrayOfObject110[1] = Integer.valueOf(143);
    arrayOfObject110[2] = RT.keyword(null, "column");
    arrayOfObject110[3] = Integer.valueOf(15);
    arrayOfObject107[1] = localIObj33.withMeta((IPersistentMap)RT.map(arrayOfObject110));
    arrayOfObject107[2] = RT.keyword(null, "column");
    arrayOfObject107[3] = Integer.valueOf(1);
    arrayOfObject107[4] = RT.keyword(null, "added");
    arrayOfObject107[5] = "1.0";
    arrayOfObject107[6] = RT.keyword(null, "static");
    arrayOfObject107[7] = Boolean.TRUE;
    arrayOfObject107[8] = RT.keyword(null, "doc");
    arrayOfObject107[9] = "Return true if x implements ISeq";
    arrayOfObject107[10] = RT.keyword(null, "line");
    arrayOfObject107[11] = Integer.valueOf(142);
    arrayOfObject107[12] = RT.keyword(null, "file");
    arrayOfObject107[13] = "clojure/core.clj";
    const__84 = (AFn)RT.map(arrayOfObject107);
    const__85 = (Var)RT.var("clojure.core", "char?");
    const__86 = Integer.valueOf(149);
    Object[] arrayOfObject111 = new Object[1];
    Object[] arrayOfObject112 = new Object[1];
    arrayOfObject112[0] = Symbol.intern(null, "x");
    arrayOfObject111[0] = RT.vector(arrayOfObject112);
    IObj localIObj34 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject111));
    Object[] arrayOfObject113 = new Object[4];
    arrayOfObject113[0] = RT.keyword(null, "line");
    arrayOfObject113[1] = Integer.valueOf(150);
    arrayOfObject113[2] = RT.keyword(null, "column");
    arrayOfObject113[3] = Integer.valueOf(15);
    const__87 = localIObj34.withMeta((IPersistentMap)RT.map(arrayOfObject113));
    Object[] arrayOfObject114 = new Object[14];
    arrayOfObject114[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject115 = new Object[1];
    Object[] arrayOfObject116 = new Object[1];
    arrayOfObject116[0] = Symbol.intern(null, "x");
    arrayOfObject115[0] = RT.vector(arrayOfObject116);
    IObj localIObj35 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject115));
    Object[] arrayOfObject117 = new Object[4];
    arrayOfObject117[0] = RT.keyword(null, "line");
    arrayOfObject117[1] = Integer.valueOf(150);
    arrayOfObject117[2] = RT.keyword(null, "column");
    arrayOfObject117[3] = Integer.valueOf(15);
    arrayOfObject114[1] = localIObj35.withMeta((IPersistentMap)RT.map(arrayOfObject117));
    arrayOfObject114[2] = RT.keyword(null, "column");
    arrayOfObject114[3] = Integer.valueOf(1);
    arrayOfObject114[4] = RT.keyword(null, "added");
    arrayOfObject114[5] = "1.0";
    arrayOfObject114[6] = RT.keyword(null, "static");
    arrayOfObject114[7] = Boolean.TRUE;
    arrayOfObject114[8] = RT.keyword(null, "doc");
    arrayOfObject114[9] = "Return true if x is a Character";
    arrayOfObject114[10] = RT.keyword(null, "line");
    arrayOfObject114[11] = Integer.valueOf(149);
    arrayOfObject114[12] = RT.keyword(null, "file");
    arrayOfObject114[13] = "clojure/core.clj";
    const__88 = (AFn)RT.map(arrayOfObject114);
    const__89 = (Var)RT.var("clojure.core", "string?");
    const__90 = Integer.valueOf(156);
    Object[] arrayOfObject118 = new Object[1];
    Object[] arrayOfObject119 = new Object[1];
    arrayOfObject119[0] = Symbol.intern(null, "x");
    arrayOfObject118[0] = RT.vector(arrayOfObject119);
    IObj localIObj36 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject118));
    Object[] arrayOfObject120 = new Object[4];
    arrayOfObject120[0] = RT.keyword(null, "line");
    arrayOfObject120[1] = Integer.valueOf(157);
    arrayOfObject120[2] = RT.keyword(null, "column");
    arrayOfObject120[3] = Integer.valueOf(15);
    const__91 = localIObj36.withMeta((IPersistentMap)RT.map(arrayOfObject120));
    Object[] arrayOfObject121 = new Object[14];
    arrayOfObject121[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject122 = new Object[1];
    Object[] arrayOfObject123 = new Object[1];
    arrayOfObject123[0] = Symbol.intern(null, "x");
    arrayOfObject122[0] = RT.vector(arrayOfObject123);
    IObj localIObj37 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject122));
    Object[] arrayOfObject124 = new Object[4];
    arrayOfObject124[0] = RT.keyword(null, "line");
    arrayOfObject124[1] = Integer.valueOf(157);
    arrayOfObject124[2] = RT.keyword(null, "column");
    arrayOfObject124[3] = Integer.valueOf(15);
    arrayOfObject121[1] = localIObj37.withMeta((IPersistentMap)RT.map(arrayOfObject124));
    arrayOfObject121[2] = RT.keyword(null, "column");
    arrayOfObject121[3] = Integer.valueOf(1);
    arrayOfObject121[4] = RT.keyword(null, "added");
    arrayOfObject121[5] = "1.0";
    arrayOfObject121[6] = RT.keyword(null, "static");
    arrayOfObject121[7] = Boolean.TRUE;
    arrayOfObject121[8] = RT.keyword(null, "doc");
    arrayOfObject121[9] = "Return true if x is a String";
    arrayOfObject121[10] = RT.keyword(null, "line");
    arrayOfObject121[11] = Integer.valueOf(156);
    arrayOfObject121[12] = RT.keyword(null, "file");
    arrayOfObject121[13] = "clojure/core.clj";
    const__92 = (AFn)RT.map(arrayOfObject121);
    const__93 = (Var)RT.var("clojure.core", "map?");
    const__94 = Integer.valueOf(163);
    Object[] arrayOfObject125 = new Object[1];
    Object[] arrayOfObject126 = new Object[1];
    arrayOfObject126[0] = Symbol.intern(null, "x");
    arrayOfObject125[0] = RT.vector(arrayOfObject126);
    IObj localIObj38 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject125));
    Object[] arrayOfObject127 = new Object[4];
    arrayOfObject127[0] = RT.keyword(null, "line");
    arrayOfObject127[1] = Integer.valueOf(164);
    arrayOfObject127[2] = RT.keyword(null, "column");
    arrayOfObject127[3] = Integer.valueOf(15);
    const__95 = localIObj38.withMeta((IPersistentMap)RT.map(arrayOfObject127));
    Object[] arrayOfObject128 = new Object[14];
    arrayOfObject128[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject129 = new Object[1];
    Object[] arrayOfObject130 = new Object[1];
    arrayOfObject130[0] = Symbol.intern(null, "x");
    arrayOfObject129[0] = RT.vector(arrayOfObject130);
    IObj localIObj39 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject129));
    Object[] arrayOfObject131 = new Object[4];
    arrayOfObject131[0] = RT.keyword(null, "line");
    arrayOfObject131[1] = Integer.valueOf(164);
    arrayOfObject131[2] = RT.keyword(null, "column");
    arrayOfObject131[3] = Integer.valueOf(15);
    arrayOfObject128[1] = localIObj39.withMeta((IPersistentMap)RT.map(arrayOfObject131));
    arrayOfObject128[2] = RT.keyword(null, "column");
    arrayOfObject128[3] = Integer.valueOf(1);
    arrayOfObject128[4] = RT.keyword(null, "added");
    arrayOfObject128[5] = "1.0";
    arrayOfObject128[6] = RT.keyword(null, "static");
    arrayOfObject128[7] = Boolean.TRUE;
    arrayOfObject128[8] = RT.keyword(null, "doc");
    arrayOfObject128[9] = "Return true if x implements IPersistentMap";
    arrayOfObject128[10] = RT.keyword(null, "line");
    arrayOfObject128[11] = Integer.valueOf(163);
    arrayOfObject128[12] = RT.keyword(null, "file");
    arrayOfObject128[13] = "clojure/core.clj";
    const__96 = (AFn)RT.map(arrayOfObject128);
    const__97 = (Var)RT.var("clojure.core", "vector?");
    const__98 = Integer.valueOf(170);
    Object[] arrayOfObject132 = new Object[1];
    Object[] arrayOfObject133 = new Object[1];
    arrayOfObject133[0] = Symbol.intern(null, "x");
    arrayOfObject132[0] = RT.vector(arrayOfObject133);
    IObj localIObj40 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject132));
    Object[] arrayOfObject134 = new Object[4];
    arrayOfObject134[0] = RT.keyword(null, "line");
    arrayOfObject134[1] = Integer.valueOf(171);
    arrayOfObject134[2] = RT.keyword(null, "column");
    arrayOfObject134[3] = Integer.valueOf(15);
    const__99 = localIObj40.withMeta((IPersistentMap)RT.map(arrayOfObject134));
  }

  public static void __init1()
  {
    Object[] arrayOfObject1 = new Object[14];
    arrayOfObject1[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject2 = new Object[1];
    Object[] arrayOfObject3 = new Object[1];
    arrayOfObject3[0] = Symbol.intern(null, "x");
    arrayOfObject2[0] = RT.vector(arrayOfObject3);
    IObj localIObj1 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject2));
    Object[] arrayOfObject4 = new Object[4];
    arrayOfObject4[0] = RT.keyword(null, "line");
    arrayOfObject4[1] = Integer.valueOf(171);
    arrayOfObject4[2] = RT.keyword(null, "column");
    arrayOfObject4[3] = Integer.valueOf(15);
    arrayOfObject1[1] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject4));
    arrayOfObject1[2] = RT.keyword(null, "column");
    arrayOfObject1[3] = Integer.valueOf(1);
    arrayOfObject1[4] = RT.keyword(null, "added");
    arrayOfObject1[5] = "1.0";
    arrayOfObject1[6] = RT.keyword(null, "static");
    arrayOfObject1[7] = Boolean.TRUE;
    arrayOfObject1[8] = RT.keyword(null, "doc");
    arrayOfObject1[9] = "Return true if x implements IPersistentVector";
    arrayOfObject1[10] = RT.keyword(null, "line");
    arrayOfObject1[11] = Integer.valueOf(170);
    arrayOfObject1[12] = RT.keyword(null, "file");
    arrayOfObject1[13] = "clojure/core.clj";
    const__100 = (AFn)RT.map(arrayOfObject1);
    const__101 = (Var)RT.var("clojure.core", "assoc");
    const__102 = Integer.valueOf(177);
    Object[] arrayOfObject5 = new Object[2];
    Object[] arrayOfObject6 = new Object[3];
    arrayOfObject6[0] = Symbol.intern(null, "map");
    arrayOfObject6[1] = Symbol.intern(null, "key");
    arrayOfObject6[2] = Symbol.intern(null, "val");
    arrayOfObject5[0] = RT.vector(arrayOfObject6);
    Object[] arrayOfObject7 = new Object[5];
    arrayOfObject7[0] = Symbol.intern(null, "map");
    arrayOfObject7[1] = Symbol.intern(null, "key");
    arrayOfObject7[2] = Symbol.intern(null, "val");
    arrayOfObject7[3] = Symbol.intern(null, "&");
    arrayOfObject7[4] = Symbol.intern(null, "kvs");
    arrayOfObject5[1] = RT.vector(arrayOfObject7);
    IObj localIObj2 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject5));
    Object[] arrayOfObject8 = new Object[4];
    arrayOfObject8[0] = RT.keyword(null, "line");
    arrayOfObject8[1] = Integer.valueOf(178);
    arrayOfObject8[2] = RT.keyword(null, "column");
    arrayOfObject8[3] = Integer.valueOf(15);
    const__103 = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject8));
    Object[] arrayOfObject9 = new Object[14];
    arrayOfObject9[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject10 = new Object[2];
    Object[] arrayOfObject11 = new Object[3];
    arrayOfObject11[0] = Symbol.intern(null, "map");
    arrayOfObject11[1] = Symbol.intern(null, "key");
    arrayOfObject11[2] = Symbol.intern(null, "val");
    arrayOfObject10[0] = RT.vector(arrayOfObject11);
    Object[] arrayOfObject12 = new Object[5];
    arrayOfObject12[0] = Symbol.intern(null, "map");
    arrayOfObject12[1] = Symbol.intern(null, "key");
    arrayOfObject12[2] = Symbol.intern(null, "val");
    arrayOfObject12[3] = Symbol.intern(null, "&");
    arrayOfObject12[4] = Symbol.intern(null, "kvs");
    arrayOfObject10[1] = RT.vector(arrayOfObject12);
    IObj localIObj3 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject10));
    Object[] arrayOfObject13 = new Object[4];
    arrayOfObject13[0] = RT.keyword(null, "line");
    arrayOfObject13[1] = Integer.valueOf(178);
    arrayOfObject13[2] = RT.keyword(null, "column");
    arrayOfObject13[3] = Integer.valueOf(15);
    arrayOfObject9[1] = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject13));
    arrayOfObject9[2] = RT.keyword(null, "column");
    arrayOfObject9[3] = Integer.valueOf(1);
    arrayOfObject9[4] = RT.keyword(null, "added");
    arrayOfObject9[5] = "1.0";
    arrayOfObject9[6] = RT.keyword(null, "static");
    arrayOfObject9[7] = Boolean.TRUE;
    arrayOfObject9[8] = RT.keyword(null, "doc");
    arrayOfObject9[9] = "assoc[iate]. When applied to a map, returns a new map of the\n    same (hashed/sorted) type, that contains the mapping of key(s) to\n    val(s). When applied to a vector, returns a new vector that\n    contains val at index. Note - index must be <= (count vector).";
    arrayOfObject9[10] = RT.keyword(null, "line");
    arrayOfObject9[11] = Integer.valueOf(177);
    arrayOfObject9[12] = RT.keyword(null, "file");
    arrayOfObject9[13] = "clojure/core.clj";
    const__104 = (AFn)RT.map(arrayOfObject9);
    const__105 = (Var)RT.var("clojure.core", "meta");
    const__106 = Integer.valueOf(198);
    Object[] arrayOfObject14 = new Object[1];
    Object[] arrayOfObject15 = new Object[1];
    arrayOfObject15[0] = Symbol.intern(null, "obj");
    arrayOfObject14[0] = RT.vector(arrayOfObject15);
    IObj localIObj4 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject14));
    Object[] arrayOfObject16 = new Object[4];
    arrayOfObject16[0] = RT.keyword(null, "line");
    arrayOfObject16[1] = Integer.valueOf(199);
    arrayOfObject16[2] = RT.keyword(null, "column");
    arrayOfObject16[3] = Integer.valueOf(15);
    const__107 = localIObj4.withMeta((IPersistentMap)RT.map(arrayOfObject16));
    Object[] arrayOfObject17 = new Object[14];
    arrayOfObject17[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject18 = new Object[1];
    Object[] arrayOfObject19 = new Object[1];
    arrayOfObject19[0] = Symbol.intern(null, "obj");
    arrayOfObject18[0] = RT.vector(arrayOfObject19);
    IObj localIObj5 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject18));
    Object[] arrayOfObject20 = new Object[4];
    arrayOfObject20[0] = RT.keyword(null, "line");
    arrayOfObject20[1] = Integer.valueOf(199);
    arrayOfObject20[2] = RT.keyword(null, "column");
    arrayOfObject20[3] = Integer.valueOf(15);
    arrayOfObject17[1] = localIObj5.withMeta((IPersistentMap)RT.map(arrayOfObject20));
    arrayOfObject17[2] = RT.keyword(null, "column");
    arrayOfObject17[3] = Integer.valueOf(1);
    arrayOfObject17[4] = RT.keyword(null, "added");
    arrayOfObject17[5] = "1.0";
    arrayOfObject17[6] = RT.keyword(null, "static");
    arrayOfObject17[7] = Boolean.TRUE;
    arrayOfObject17[8] = RT.keyword(null, "doc");
    arrayOfObject17[9] = "Returns the metadata of obj, returns nil if there is no metadata.";
    arrayOfObject17[10] = RT.keyword(null, "line");
    arrayOfObject17[11] = Integer.valueOf(198);
    arrayOfObject17[12] = RT.keyword(null, "file");
    arrayOfObject17[13] = "clojure/core.clj";
    const__108 = (AFn)RT.map(arrayOfObject17);
    const__109 = (Var)RT.var("clojure.core", "with-meta");
    const__110 = Integer.valueOf(207);
    Object[] arrayOfObject21 = new Object[1];
    Object[] arrayOfObject22 = new Object[2];
    IObj localIObj6 = (IObj)Symbol.intern(null, "obj");
    Object[] arrayOfObject23 = new Object[2];
    arrayOfObject23[0] = RT.keyword(null, "tag");
    arrayOfObject23[1] = Symbol.intern(null, "clojure.lang.IObj");
    arrayOfObject22[0] = localIObj6.withMeta((IPersistentMap)RT.map(arrayOfObject23));
    arrayOfObject22[1] = Symbol.intern(null, "m");
    arrayOfObject21[0] = RT.vector(arrayOfObject22);
    IObj localIObj7 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject21));
    Object[] arrayOfObject24 = new Object[4];
    arrayOfObject24[0] = RT.keyword(null, "line");
    arrayOfObject24[1] = Integer.valueOf(208);
    arrayOfObject24[2] = RT.keyword(null, "column");
    arrayOfObject24[3] = Integer.valueOf(15);
    const__111 = localIObj7.withMeta((IPersistentMap)RT.map(arrayOfObject24));
    Object[] arrayOfObject25 = new Object[14];
    arrayOfObject25[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject26 = new Object[1];
    Object[] arrayOfObject27 = new Object[2];
    IObj localIObj8 = (IObj)Symbol.intern(null, "obj");
    Object[] arrayOfObject28 = new Object[2];
    arrayOfObject28[0] = RT.keyword(null, "tag");
    arrayOfObject28[1] = Symbol.intern(null, "clojure.lang.IObj");
    arrayOfObject27[0] = localIObj8.withMeta((IPersistentMap)RT.map(arrayOfObject28));
    arrayOfObject27[1] = Symbol.intern(null, "m");
    arrayOfObject26[0] = RT.vector(arrayOfObject27);
    IObj localIObj9 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject26));
    Object[] arrayOfObject29 = new Object[4];
    arrayOfObject29[0] = RT.keyword(null, "line");
    arrayOfObject29[1] = Integer.valueOf(208);
    arrayOfObject29[2] = RT.keyword(null, "column");
    arrayOfObject29[3] = Integer.valueOf(15);
    arrayOfObject25[1] = localIObj9.withMeta((IPersistentMap)RT.map(arrayOfObject29));
    arrayOfObject25[2] = RT.keyword(null, "column");
    arrayOfObject25[3] = Integer.valueOf(1);
    arrayOfObject25[4] = RT.keyword(null, "added");
    arrayOfObject25[5] = "1.0";
    arrayOfObject25[6] = RT.keyword(null, "static");
    arrayOfObject25[7] = Boolean.TRUE;
    arrayOfObject25[8] = RT.keyword(null, "doc");
    arrayOfObject25[9] = "Returns an object of the same type and value as obj, with\n    map m as its metadata.";
    arrayOfObject25[10] = RT.keyword(null, "line");
    arrayOfObject25[11] = Integer.valueOf(207);
    arrayOfObject25[12] = RT.keyword(null, "file");
    arrayOfObject25[13] = "clojure/core.clj";
    const__112 = (AFn)RT.map(arrayOfObject25);
    const__113 = (Var)RT.var("clojure.core", "assert-valid-fdecl");
    const__114 = Integer.valueOf(216);
    const__115 = (Keyword)RT.keyword(null, "dynamic");
    const__116 = (Keyword)RT.keyword(null, "private");
    Object[] arrayOfObject30 = new Object[10];
    arrayOfObject30[0] = RT.keyword(null, "dynamic");
    arrayOfObject30[1] = Boolean.TRUE;
    arrayOfObject30[2] = RT.keyword(null, "column");
    arrayOfObject30[3] = Integer.valueOf(1);
    arrayOfObject30[4] = RT.keyword(null, "private");
    arrayOfObject30[5] = Boolean.TRUE;
    arrayOfObject30[6] = RT.keyword(null, "line");
    arrayOfObject30[7] = Integer.valueOf(216);
    arrayOfObject30[8] = RT.keyword(null, "file");
    arrayOfObject30[9] = "clojure/core.clj";
    const__117 = (AFn)RT.map(arrayOfObject30);
    const__118 = (Var)RT.var("clojure.core", "sigs");
    const__119 = Integer.valueOf(219);
    Object[] arrayOfObject31 = new Object[8];
    arrayOfObject31[0] = RT.keyword(null, "column");
    arrayOfObject31[1] = Integer.valueOf(1);
    arrayOfObject31[2] = RT.keyword(null, "private");
    arrayOfObject31[3] = Boolean.TRUE;
    arrayOfObject31[4] = RT.keyword(null, "line");
    arrayOfObject31[5] = Integer.valueOf(219);
    arrayOfObject31[6] = RT.keyword(null, "file");
    arrayOfObject31[7] = "clojure/core.clj";
    const__120 = (AFn)RT.map(arrayOfObject31);
    const__121 = (Var)RT.var("clojure.core", "last");
    const__122 = Integer.valueOf(245);
    Object[] arrayOfObject32 = new Object[1];
    Object[] arrayOfObject33 = new Object[1];
    arrayOfObject33[0] = Symbol.intern(null, "coll");
    arrayOfObject32[0] = RT.vector(arrayOfObject33);
    IObj localIObj10 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject32));
    Object[] arrayOfObject34 = new Object[4];
    arrayOfObject34[0] = RT.keyword(null, "line");
    arrayOfObject34[1] = Integer.valueOf(246);
    arrayOfObject34[2] = RT.keyword(null, "column");
    arrayOfObject34[3] = Integer.valueOf(15);
    const__123 = localIObj10.withMeta((IPersistentMap)RT.map(arrayOfObject34));
    Object[] arrayOfObject35 = new Object[14];
    arrayOfObject35[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject36 = new Object[1];
    Object[] arrayOfObject37 = new Object[1];
    arrayOfObject37[0] = Symbol.intern(null, "coll");
    arrayOfObject36[0] = RT.vector(arrayOfObject37);
    IObj localIObj11 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject36));
    Object[] arrayOfObject38 = new Object[4];
    arrayOfObject38[0] = RT.keyword(null, "line");
    arrayOfObject38[1] = Integer.valueOf(246);
    arrayOfObject38[2] = RT.keyword(null, "column");
    arrayOfObject38[3] = Integer.valueOf(15);
    arrayOfObject35[1] = localIObj11.withMeta((IPersistentMap)RT.map(arrayOfObject38));
    arrayOfObject35[2] = RT.keyword(null, "column");
    arrayOfObject35[3] = Integer.valueOf(1);
    arrayOfObject35[4] = RT.keyword(null, "added");
    arrayOfObject35[5] = "1.0";
    arrayOfObject35[6] = RT.keyword(null, "static");
    arrayOfObject35[7] = Boolean.TRUE;
    arrayOfObject35[8] = RT.keyword(null, "doc");
    arrayOfObject35[9] = "Return the last item in coll, in linear time";
    arrayOfObject35[10] = RT.keyword(null, "line");
    arrayOfObject35[11] = Integer.valueOf(245);
    arrayOfObject35[12] = RT.keyword(null, "file");
    arrayOfObject35[13] = "clojure/core.clj";
    const__124 = (AFn)RT.map(arrayOfObject35);
    const__125 = (Var)RT.var("clojure.core", "butlast");
    const__126 = Integer.valueOf(255);
    Object[] arrayOfObject39 = new Object[1];
    Object[] arrayOfObject40 = new Object[1];
    arrayOfObject40[0] = Symbol.intern(null, "coll");
    arrayOfObject39[0] = RT.vector(arrayOfObject40);
    IObj localIObj12 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject39));
    Object[] arrayOfObject41 = new Object[4];
    arrayOfObject41[0] = RT.keyword(null, "line");
    arrayOfObject41[1] = Integer.valueOf(256);
    arrayOfObject41[2] = RT.keyword(null, "column");
    arrayOfObject41[3] = Integer.valueOf(15);
    const__127 = localIObj12.withMeta((IPersistentMap)RT.map(arrayOfObject41));
    Object[] arrayOfObject42 = new Object[14];
    arrayOfObject42[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject43 = new Object[1];
    Object[] arrayOfObject44 = new Object[1];
    arrayOfObject44[0] = Symbol.intern(null, "coll");
    arrayOfObject43[0] = RT.vector(arrayOfObject44);
    IObj localIObj13 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject43));
    Object[] arrayOfObject45 = new Object[4];
    arrayOfObject45[0] = RT.keyword(null, "line");
    arrayOfObject45[1] = Integer.valueOf(256);
    arrayOfObject45[2] = RT.keyword(null, "column");
    arrayOfObject45[3] = Integer.valueOf(15);
    arrayOfObject42[1] = localIObj13.withMeta((IPersistentMap)RT.map(arrayOfObject45));
    arrayOfObject42[2] = RT.keyword(null, "column");
    arrayOfObject42[3] = Integer.valueOf(1);
    arrayOfObject42[4] = RT.keyword(null, "added");
    arrayOfObject42[5] = "1.0";
    arrayOfObject42[6] = RT.keyword(null, "static");
    arrayOfObject42[7] = Boolean.TRUE;
    arrayOfObject42[8] = RT.keyword(null, "doc");
    arrayOfObject42[9] = "Return a seq of all but the last item in coll, in linear time";
    arrayOfObject42[10] = RT.keyword(null, "line");
    arrayOfObject42[11] = Integer.valueOf(255);
    arrayOfObject42[12] = RT.keyword(null, "file");
    arrayOfObject42[13] = "clojure/core.clj";
    const__128 = (AFn)RT.map(arrayOfObject42);
    const__129 = (Var)RT.var("clojure.core", "defn");
    const__130 = Integer.valueOf(266);
    Object[] arrayOfObject46 = new Object[2];
    Object[] arrayOfObject47 = new Object[6];
    arrayOfObject47[0] = Symbol.intern(null, "name");
    arrayOfObject47[1] = Symbol.intern(null, "doc-string?");
    arrayOfObject47[2] = Symbol.intern(null, "attr-map?");
    Object[] arrayOfObject48 = new Object[1];
    arrayOfObject48[0] = Symbol.intern(null, "params*");
    arrayOfObject47[3] = RT.vector(arrayOfObject48);
    arrayOfObject47[4] = Symbol.intern(null, "prepost-map?");
    arrayOfObject47[5] = Symbol.intern(null, "body");
    arrayOfObject46[0] = RT.vector(arrayOfObject47);
    Object[] arrayOfObject49 = new Object[6];
    arrayOfObject49[0] = Symbol.intern(null, "name");
    arrayOfObject49[1] = Symbol.intern(null, "doc-string?");
    arrayOfObject49[2] = Symbol.intern(null, "attr-map?");
    Object[] arrayOfObject50 = new Object[3];
    Object[] arrayOfObject51 = new Object[1];
    arrayOfObject51[0] = Symbol.intern(null, "params*");
    arrayOfObject50[0] = RT.vector(arrayOfObject51);
    arrayOfObject50[1] = Symbol.intern(null, "prepost-map?");
    arrayOfObject50[2] = Symbol.intern(null, "body");
    IObj localIObj14 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject50));
    Object[] arrayOfObject52 = new Object[4];
    arrayOfObject52[0] = RT.keyword(null, "line");
    arrayOfObject52[1] = Integer.valueOf(273);
    arrayOfObject52[2] = RT.keyword(null, "column");
    arrayOfObject52[3] = Integer.valueOf(45);
    arrayOfObject49[3] = localIObj14.withMeta((IPersistentMap)RT.map(arrayOfObject52));
    arrayOfObject49[4] = Symbol.intern(null, "+");
    arrayOfObject49[5] = Symbol.intern(null, "attr-map?");
    arrayOfObject46[1] = RT.vector(arrayOfObject49);
    IObj localIObj15 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject46));
    Object[] arrayOfObject53 = new Object[4];
    arrayOfObject53[0] = RT.keyword(null, "line");
    arrayOfObject53[1] = Integer.valueOf(272);
    arrayOfObject53[2] = RT.keyword(null, "column");
    arrayOfObject53[3] = Integer.valueOf(15);
    const__131 = localIObj15.withMeta((IPersistentMap)RT.map(arrayOfObject53));
    Object[] arrayOfObject54 = new Object[12];
    arrayOfObject54[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject55 = new Object[2];
    Object[] arrayOfObject56 = new Object[6];
    arrayOfObject56[0] = Symbol.intern(null, "name");
    arrayOfObject56[1] = Symbol.intern(null, "doc-string?");
    arrayOfObject56[2] = Symbol.intern(null, "attr-map?");
    Object[] arrayOfObject57 = new Object[1];
    arrayOfObject57[0] = Symbol.intern(null, "params*");
    arrayOfObject56[3] = RT.vector(arrayOfObject57);
    arrayOfObject56[4] = Symbol.intern(null, "prepost-map?");
    arrayOfObject56[5] = Symbol.intern(null, "body");
    arrayOfObject55[0] = RT.vector(arrayOfObject56);
    Object[] arrayOfObject58 = new Object[6];
    arrayOfObject58[0] = Symbol.intern(null, "name");
    arrayOfObject58[1] = Symbol.intern(null, "doc-string?");
    arrayOfObject58[2] = Symbol.intern(null, "attr-map?");
    Object[] arrayOfObject59 = new Object[3];
    Object[] arrayOfObject60 = new Object[1];
    arrayOfObject60[0] = Symbol.intern(null, "params*");
    arrayOfObject59[0] = RT.vector(arrayOfObject60);
    arrayOfObject59[1] = Symbol.intern(null, "prepost-map?");
    arrayOfObject59[2] = Symbol.intern(null, "body");
    IObj localIObj16 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject59));
    Object[] arrayOfObject61 = new Object[4];
    arrayOfObject61[0] = RT.keyword(null, "line");
    arrayOfObject61[1] = Integer.valueOf(273);
    arrayOfObject61[2] = RT.keyword(null, "column");
    arrayOfObject61[3] = Integer.valueOf(45);
    arrayOfObject58[3] = localIObj16.withMeta((IPersistentMap)RT.map(arrayOfObject61));
    arrayOfObject58[4] = Symbol.intern(null, "+");
    arrayOfObject58[5] = Symbol.intern(null, "attr-map?");
    arrayOfObject55[1] = RT.vector(arrayOfObject58);
    IObj localIObj17 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject55));
    Object[] arrayOfObject62 = new Object[4];
    arrayOfObject62[0] = RT.keyword(null, "line");
    arrayOfObject62[1] = Integer.valueOf(272);
    arrayOfObject62[2] = RT.keyword(null, "column");
    arrayOfObject62[3] = Integer.valueOf(15);
    arrayOfObject54[1] = localIObj17.withMeta((IPersistentMap)RT.map(arrayOfObject62));
    arrayOfObject54[2] = RT.keyword(null, "column");
    arrayOfObject54[3] = Integer.valueOf(1);
    arrayOfObject54[4] = RT.keyword(null, "added");
    arrayOfObject54[5] = "1.0";
    arrayOfObject54[6] = RT.keyword(null, "doc");
    arrayOfObject54[7] = "Same as (def name (fn [params* ] exprs*)) or (def\n    name (fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions.";
    arrayOfObject54[8] = RT.keyword(null, "line");
    arrayOfObject54[9] = Integer.valueOf(266);
    arrayOfObject54[10] = RT.keyword(null, "file");
    arrayOfObject54[11] = "clojure/core.clj";
    const__132 = (AFn)RT.map(arrayOfObject54);
    const__133 = (Var)RT.var("clojure.core", "cast");
    const__134 = Integer.valueOf(320);
    Object[] arrayOfObject63 = new Object[1];
    Object[] arrayOfObject64 = new Object[2];
    IObj localIObj18 = (IObj)Symbol.intern(null, "c");
    Object[] arrayOfObject65 = new Object[2];
    arrayOfObject65[0] = RT.keyword(null, "tag");
    arrayOfObject65[1] = Symbol.intern(null, "Class");
    arrayOfObject64[0] = localIObj18.withMeta((IPersistentMap)RT.map(arrayOfObject65));
    arrayOfObject64[1] = Symbol.intern(null, "x");
    arrayOfObject63[0] = RT.vector(arrayOfObject64);
    const__135 = PersistentList.create(Arrays.asList(arrayOfObject63));
    Object[] arrayOfObject66 = new Object[14];
    arrayOfObject66[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject67 = new Object[1];
    Object[] arrayOfObject68 = new Object[2];
    IObj localIObj19 = (IObj)Symbol.intern(null, "c");
    Object[] arrayOfObject69 = new Object[2];
    arrayOfObject69[0] = RT.keyword(null, "tag");
    arrayOfObject69[1] = Symbol.intern(null, "Class");
    arrayOfObject68[0] = localIObj19.withMeta((IPersistentMap)RT.map(arrayOfObject69));
    arrayOfObject68[1] = Symbol.intern(null, "x");
    arrayOfObject67[0] = RT.vector(arrayOfObject68);
    arrayOfObject66[1] = PersistentList.create(Arrays.asList(arrayOfObject67));
    arrayOfObject66[2] = RT.keyword(null, "column");
    arrayOfObject66[3] = Integer.valueOf(1);
    arrayOfObject66[4] = RT.keyword(null, "added");
    arrayOfObject66[5] = "1.0";
    arrayOfObject66[6] = RT.keyword(null, "static");
    arrayOfObject66[7] = Boolean.TRUE;
    arrayOfObject66[8] = RT.keyword(null, "doc");
    arrayOfObject66[9] = "Throws a ClassCastException if x is not a c, else returns x.";
    arrayOfObject66[10] = RT.keyword(null, "line");
    arrayOfObject66[11] = Integer.valueOf(320);
    arrayOfObject66[12] = RT.keyword(null, "file");
    arrayOfObject66[13] = "clojure/core.clj";
    const__136 = (AFn)RT.map(arrayOfObject66);
    const__137 = (Var)RT.var("clojure.core", "to-array");
    const__138 = Integer.valueOf(327);
    Object[] arrayOfObject70 = new Object[1];
    Object[] arrayOfObject71 = new Object[1];
    arrayOfObject71[0] = Symbol.intern(null, "coll");
    arrayOfObject70[0] = RT.vector(arrayOfObject71);
    const__139 = PersistentList.create(Arrays.asList(arrayOfObject70));
    Object[] arrayOfObject72 = new Object[16];
    arrayOfObject72[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject73 = new Object[1];
    Object[] arrayOfObject74 = new Object[1];
    arrayOfObject74[0] = Symbol.intern(null, "coll");
    arrayOfObject73[0] = RT.vector(arrayOfObject74);
    arrayOfObject72[1] = PersistentList.create(Arrays.asList(arrayOfObject73));
    arrayOfObject72[2] = RT.keyword(null, "column");
    arrayOfObject72[3] = Integer.valueOf(1);
    arrayOfObject72[4] = RT.keyword(null, "added");
    arrayOfObject72[5] = "1.0";
    arrayOfObject72[6] = RT.keyword(null, "static");
    arrayOfObject72[7] = Boolean.TRUE;
    arrayOfObject72[8] = RT.keyword(null, "doc");
    arrayOfObject72[9] = "Returns an array of Objects containing the contents of coll, which\n  can be any Collection.  Maps to java.util.Collection.toArray().";
    arrayOfObject72[10] = RT.keyword(null, "line");
    arrayOfObject72[11] = Integer.valueOf(327);
    arrayOfObject72[12] = RT.keyword(null, "file");
    arrayOfObject72[13] = "clojure/core.clj";
    arrayOfObject72[14] = RT.keyword(null, "tag");
    arrayOfObject72[15] = "[Ljava.lang.Object;";
    const__140 = (AFn)RT.map(arrayOfObject72);
    const__141 = (Var)RT.var("clojure.core", "vector");
    const__142 = Integer.valueOf(335);
    Object[] arrayOfObject75 = new Object[6];
    arrayOfObject75[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject76 = new Object[1];
    arrayOfObject76[0] = Symbol.intern(null, "a");
    arrayOfObject75[1] = RT.vector(arrayOfObject76);
    Object[] arrayOfObject77 = new Object[2];
    arrayOfObject77[0] = Symbol.intern(null, "a");
    arrayOfObject77[1] = Symbol.intern(null, "b");
    arrayOfObject75[2] = RT.vector(arrayOfObject77);
    Object[] arrayOfObject78 = new Object[3];
    arrayOfObject78[0] = Symbol.intern(null, "a");
    arrayOfObject78[1] = Symbol.intern(null, "b");
    arrayOfObject78[2] = Symbol.intern(null, "c");
    arrayOfObject75[3] = RT.vector(arrayOfObject78);
    Object[] arrayOfObject79 = new Object[4];
    arrayOfObject79[0] = Symbol.intern(null, "a");
    arrayOfObject79[1] = Symbol.intern(null, "b");
    arrayOfObject79[2] = Symbol.intern(null, "c");
    arrayOfObject79[3] = Symbol.intern(null, "d");
    arrayOfObject75[4] = RT.vector(arrayOfObject79);
    Object[] arrayOfObject80 = new Object[6];
    arrayOfObject80[0] = Symbol.intern(null, "a");
    arrayOfObject80[1] = Symbol.intern(null, "b");
    arrayOfObject80[2] = Symbol.intern(null, "c");
    arrayOfObject80[3] = Symbol.intern(null, "d");
    arrayOfObject80[4] = Symbol.intern(null, "&");
    arrayOfObject80[5] = Symbol.intern(null, "args");
    arrayOfObject75[5] = RT.vector(arrayOfObject80);
    const__143 = PersistentList.create(Arrays.asList(arrayOfObject75));
    Object[] arrayOfObject81 = new Object[14];
    arrayOfObject81[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject82 = new Object[6];
    arrayOfObject82[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject83 = new Object[1];
    arrayOfObject83[0] = Symbol.intern(null, "a");
    arrayOfObject82[1] = RT.vector(arrayOfObject83);
    Object[] arrayOfObject84 = new Object[2];
    arrayOfObject84[0] = Symbol.intern(null, "a");
    arrayOfObject84[1] = Symbol.intern(null, "b");
    arrayOfObject82[2] = RT.vector(arrayOfObject84);
    Object[] arrayOfObject85 = new Object[3];
    arrayOfObject85[0] = Symbol.intern(null, "a");
    arrayOfObject85[1] = Symbol.intern(null, "b");
    arrayOfObject85[2] = Symbol.intern(null, "c");
    arrayOfObject82[3] = RT.vector(arrayOfObject85);
    Object[] arrayOfObject86 = new Object[4];
    arrayOfObject86[0] = Symbol.intern(null, "a");
    arrayOfObject86[1] = Symbol.intern(null, "b");
    arrayOfObject86[2] = Symbol.intern(null, "c");
    arrayOfObject86[3] = Symbol.intern(null, "d");
    arrayOfObject82[4] = RT.vector(arrayOfObject86);
    Object[] arrayOfObject87 = new Object[6];
    arrayOfObject87[0] = Symbol.intern(null, "a");
    arrayOfObject87[1] = Symbol.intern(null, "b");
    arrayOfObject87[2] = Symbol.intern(null, "c");
    arrayOfObject87[3] = Symbol.intern(null, "d");
    arrayOfObject87[4] = Symbol.intern(null, "&");
    arrayOfObject87[5] = Symbol.intern(null, "args");
    arrayOfObject82[5] = RT.vector(arrayOfObject87);
    arrayOfObject81[1] = PersistentList.create(Arrays.asList(arrayOfObject82));
    arrayOfObject81[2] = RT.keyword(null, "column");
    arrayOfObject81[3] = Integer.valueOf(1);
    arrayOfObject81[4] = RT.keyword(null, "added");
    arrayOfObject81[5] = "1.0";
    arrayOfObject81[6] = RT.keyword(null, "static");
    arrayOfObject81[7] = Boolean.TRUE;
    arrayOfObject81[8] = RT.keyword(null, "doc");
    arrayOfObject81[9] = "Creates a new vector containing the args.";
    arrayOfObject81[10] = RT.keyword(null, "line");
    arrayOfObject81[11] = Integer.valueOf(335);
    arrayOfObject81[12] = RT.keyword(null, "file");
    arrayOfObject81[13] = "clojure/core.clj";
    const__144 = (AFn)RT.map(arrayOfObject81);
    const__145 = (Var)RT.var("clojure.core", "vec");
    const__146 = Integer.valueOf(347);
    Object[] arrayOfObject88 = new Object[1];
    Object[] arrayOfObject89 = new Object[1];
    arrayOfObject89[0] = Symbol.intern(null, "coll");
    arrayOfObject88[0] = RT.vector(arrayOfObject89);
    const__147 = PersistentList.create(Arrays.asList(arrayOfObject88));
    Object[] arrayOfObject90 = new Object[14];
    arrayOfObject90[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject91 = new Object[1];
    Object[] arrayOfObject92 = new Object[1];
    arrayOfObject92[0] = Symbol.intern(null, "coll");
    arrayOfObject91[0] = RT.vector(arrayOfObject92);
    arrayOfObject90[1] = PersistentList.create(Arrays.asList(arrayOfObject91));
    arrayOfObject90[2] = RT.keyword(null, "column");
    arrayOfObject90[3] = Integer.valueOf(1);
    arrayOfObject90[4] = RT.keyword(null, "added");
    arrayOfObject90[5] = "1.0";
    arrayOfObject90[6] = RT.keyword(null, "static");
    arrayOfObject90[7] = Boolean.TRUE;
    arrayOfObject90[8] = RT.keyword(null, "doc");
    arrayOfObject90[9] = "Creates a new vector containing the contents of coll. Java arrays\n  will be aliased and should not be modified.";
    arrayOfObject90[10] = RT.keyword(null, "line");
    arrayOfObject90[11] = Integer.valueOf(347);
    arrayOfObject90[12] = RT.keyword(null, "file");
    arrayOfObject90[13] = "clojure/core.clj";
    const__148 = (AFn)RT.map(arrayOfObject90);
    const__149 = (Var)RT.var("clojure.core", "hash-map");
    const__150 = Integer.valueOf(357);
    Object[] arrayOfObject93 = new Object[2];
    arrayOfObject93[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject94 = new Object[2];
    arrayOfObject94[0] = Symbol.intern(null, "&");
    arrayOfObject94[1] = Symbol.intern(null, "keyvals");
    arrayOfObject93[1] = RT.vector(arrayOfObject94);
    const__151 = PersistentList.create(Arrays.asList(arrayOfObject93));
    Object[] arrayOfObject95 = new Object[14];
    arrayOfObject95[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject96 = new Object[2];
    arrayOfObject96[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject97 = new Object[2];
    arrayOfObject97[0] = Symbol.intern(null, "&");
    arrayOfObject97[1] = Symbol.intern(null, "keyvals");
    arrayOfObject96[1] = RT.vector(arrayOfObject97);
    arrayOfObject95[1] = PersistentList.create(Arrays.asList(arrayOfObject96));
    arrayOfObject95[2] = RT.keyword(null, "column");
    arrayOfObject95[3] = Integer.valueOf(1);
    arrayOfObject95[4] = RT.keyword(null, "added");
    arrayOfObject95[5] = "1.0";
    arrayOfObject95[6] = RT.keyword(null, "static");
    arrayOfObject95[7] = Boolean.TRUE;
    arrayOfObject95[8] = RT.keyword(null, "doc");
    arrayOfObject95[9] = "keyval => key val\n  Returns a new hash map with supplied mappings.  If any keys are\n  equal, they are handled as if by repeated uses of assoc.";
    arrayOfObject95[10] = RT.keyword(null, "line");
    arrayOfObject95[11] = Integer.valueOf(357);
    arrayOfObject95[12] = RT.keyword(null, "file");
    arrayOfObject95[13] = "clojure/core.clj";
    const__152 = (AFn)RT.map(arrayOfObject95);
    const__153 = (Var)RT.var("clojure.core", "hash-set");
    const__154 = Integer.valueOf(367);
    Object[] arrayOfObject98 = new Object[2];
    arrayOfObject98[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject99 = new Object[2];
    arrayOfObject99[0] = Symbol.intern(null, "&");
    arrayOfObject99[1] = Symbol.intern(null, "keys");
    arrayOfObject98[1] = RT.vector(arrayOfObject99);
    const__155 = PersistentList.create(Arrays.asList(arrayOfObject98));
    Object[] arrayOfObject100 = new Object[14];
    arrayOfObject100[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject101 = new Object[2];
    arrayOfObject101[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject102 = new Object[2];
    arrayOfObject102[0] = Symbol.intern(null, "&");
    arrayOfObject102[1] = Symbol.intern(null, "keys");
    arrayOfObject101[1] = RT.vector(arrayOfObject102);
    arrayOfObject100[1] = PersistentList.create(Arrays.asList(arrayOfObject101));
    arrayOfObject100[2] = RT.keyword(null, "column");
    arrayOfObject100[3] = Integer.valueOf(1);
    arrayOfObject100[4] = RT.keyword(null, "added");
    arrayOfObject100[5] = "1.0";
    arrayOfObject100[6] = RT.keyword(null, "static");
    arrayOfObject100[7] = Boolean.TRUE;
    arrayOfObject100[8] = RT.keyword(null, "doc");
    arrayOfObject100[9] = "Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.";
    arrayOfObject100[10] = RT.keyword(null, "line");
    arrayOfObject100[11] = Integer.valueOf(367);
    arrayOfObject100[12] = RT.keyword(null, "file");
    arrayOfObject100[13] = "clojure/core.clj";
    const__156 = (AFn)RT.map(arrayOfObject100);
    const__157 = (Var)RT.var("clojure.core", "sorted-map");
    const__158 = Integer.valueOf(376);
    Object[] arrayOfObject103 = new Object[1];
    Object[] arrayOfObject104 = new Object[2];
    arrayOfObject104[0] = Symbol.intern(null, "&");
    arrayOfObject104[1] = Symbol.intern(null, "keyvals");
    arrayOfObject103[0] = RT.vector(arrayOfObject104);
    const__159 = PersistentList.create(Arrays.asList(arrayOfObject103));
    Object[] arrayOfObject105 = new Object[14];
    arrayOfObject105[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject106 = new Object[1];
    Object[] arrayOfObject107 = new Object[2];
    arrayOfObject107[0] = Symbol.intern(null, "&");
    arrayOfObject107[1] = Symbol.intern(null, "keyvals");
    arrayOfObject106[0] = RT.vector(arrayOfObject107);
    arrayOfObject105[1] = PersistentList.create(Arrays.asList(arrayOfObject106));
    arrayOfObject105[2] = RT.keyword(null, "column");
    arrayOfObject105[3] = Integer.valueOf(1);
    arrayOfObject105[4] = RT.keyword(null, "added");
    arrayOfObject105[5] = "1.0";
    arrayOfObject105[6] = RT.keyword(null, "static");
    arrayOfObject105[7] = Boolean.TRUE;
    arrayOfObject105[8] = RT.keyword(null, "doc");
    arrayOfObject105[9] = "keyval => key val\n  Returns a new sorted map with supplied mappings.  If any keys are\n  equal, they are handled as if by repeated uses of assoc.";
    arrayOfObject105[10] = RT.keyword(null, "line");
    arrayOfObject105[11] = Integer.valueOf(376);
    arrayOfObject105[12] = RT.keyword(null, "file");
    arrayOfObject105[13] = "clojure/core.clj";
    const__160 = (AFn)RT.map(arrayOfObject105);
    const__161 = (Var)RT.var("clojure.core", "sorted-map-by");
    const__162 = Integer.valueOf(385);
    Object[] arrayOfObject108 = new Object[1];
    Object[] arrayOfObject109 = new Object[3];
    arrayOfObject109[0] = Symbol.intern(null, "comparator");
    arrayOfObject109[1] = Symbol.intern(null, "&");
    arrayOfObject109[2] = Symbol.intern(null, "keyvals");
    arrayOfObject108[0] = RT.vector(arrayOfObject109);
    const__163 = PersistentList.create(Arrays.asList(arrayOfObject108));
    Object[] arrayOfObject110 = new Object[14];
    arrayOfObject110[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject111 = new Object[1];
    Object[] arrayOfObject112 = new Object[3];
    arrayOfObject112[0] = Symbol.intern(null, "comparator");
    arrayOfObject112[1] = Symbol.intern(null, "&");
    arrayOfObject112[2] = Symbol.intern(null, "keyvals");
    arrayOfObject111[0] = RT.vector(arrayOfObject112);
    arrayOfObject110[1] = PersistentList.create(Arrays.asList(arrayOfObject111));
    arrayOfObject110[2] = RT.keyword(null, "column");
    arrayOfObject110[3] = Integer.valueOf(1);
    arrayOfObject110[4] = RT.keyword(null, "added");
    arrayOfObject110[5] = "1.0";
    arrayOfObject110[6] = RT.keyword(null, "static");
    arrayOfObject110[7] = Boolean.TRUE;
    arrayOfObject110[8] = RT.keyword(null, "doc");
    arrayOfObject110[9] = "keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied\n  comparator.  If any keys are equal, they are handled as if by\n  repeated uses of assoc.";
    arrayOfObject110[10] = RT.keyword(null, "line");
    arrayOfObject110[11] = Integer.valueOf(385);
    arrayOfObject110[12] = RT.keyword(null, "file");
    arrayOfObject110[13] = "clojure/core.clj";
    const__164 = (AFn)RT.map(arrayOfObject110);
    const__165 = (Var)RT.var("clojure.core", "sorted-set");
    const__166 = Integer.valueOf(395);
    Object[] arrayOfObject113 = new Object[1];
    Object[] arrayOfObject114 = new Object[2];
    arrayOfObject114[0] = Symbol.intern(null, "&");
    arrayOfObject114[1] = Symbol.intern(null, "keys");
    arrayOfObject113[0] = RT.vector(arrayOfObject114);
    const__167 = PersistentList.create(Arrays.asList(arrayOfObject113));
    Object[] arrayOfObject115 = new Object[14];
    arrayOfObject115[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject116 = new Object[1];
    Object[] arrayOfObject117 = new Object[2];
    arrayOfObject117[0] = Symbol.intern(null, "&");
    arrayOfObject117[1] = Symbol.intern(null, "keys");
    arrayOfObject116[0] = RT.vector(arrayOfObject117);
    arrayOfObject115[1] = PersistentList.create(Arrays.asList(arrayOfObject116));
    arrayOfObject115[2] = RT.keyword(null, "column");
    arrayOfObject115[3] = Integer.valueOf(1);
    arrayOfObject115[4] = RT.keyword(null, "added");
    arrayOfObject115[5] = "1.0";
    arrayOfObject115[6] = RT.keyword(null, "static");
    arrayOfObject115[7] = Boolean.TRUE;
    arrayOfObject115[8] = RT.keyword(null, "doc");
    arrayOfObject115[9] = "Returns a new sorted set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.";
    arrayOfObject115[10] = RT.keyword(null, "line");
    arrayOfObject115[11] = Integer.valueOf(395);
    arrayOfObject115[12] = RT.keyword(null, "file");
    arrayOfObject115[13] = "clojure/core.clj";
    const__168 = (AFn)RT.map(arrayOfObject115);
    const__169 = (Var)RT.var("clojure.core", "sorted-set-by");
    const__170 = Integer.valueOf(403);
    Object[] arrayOfObject118 = new Object[1];
    Object[] arrayOfObject119 = new Object[3];
    arrayOfObject119[0] = Symbol.intern(null, "comparator");
    arrayOfObject119[1] = Symbol.intern(null, "&");
    arrayOfObject119[2] = Symbol.intern(null, "keys");
    arrayOfObject118[0] = RT.vector(arrayOfObject119);
    const__171 = PersistentList.create(Arrays.asList(arrayOfObject118));
    Object[] arrayOfObject120 = new Object[14];
    arrayOfObject120[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject121 = new Object[1];
    Object[] arrayOfObject122 = new Object[3];
    arrayOfObject122[0] = Symbol.intern(null, "comparator");
    arrayOfObject122[1] = Symbol.intern(null, "&");
    arrayOfObject122[2] = Symbol.intern(null, "keys");
    arrayOfObject121[0] = RT.vector(arrayOfObject122);
    arrayOfObject120[1] = PersistentList.create(Arrays.asList(arrayOfObject121));
    arrayOfObject120[2] = RT.keyword(null, "column");
    arrayOfObject120[3] = Integer.valueOf(1);
    arrayOfObject120[4] = RT.keyword(null, "added");
    arrayOfObject120[5] = "1.1";
    arrayOfObject120[6] = RT.keyword(null, "static");
    arrayOfObject120[7] = Boolean.TRUE;
    arrayOfObject120[8] = RT.keyword(null, "doc");
    arrayOfObject120[9] = "Returns a new sorted set with supplied keys, using the supplied\n  comparator.  Any equal keys are handled as if by repeated uses of\n  conj.";
    arrayOfObject120[10] = RT.keyword(null, "line");
    arrayOfObject120[11] = Integer.valueOf(403);
    arrayOfObject120[12] = RT.keyword(null, "file");
    arrayOfObject120[13] = "clojure/core.clj";
    const__172 = (AFn)RT.map(arrayOfObject120);
    const__173 = (Var)RT.var("clojure.core", "nil?");
    const__174 = Integer.valueOf(414);
    Object[] arrayOfObject123 = new Object[1];
    Object[] arrayOfObject124 = new Object[1];
    arrayOfObject124[0] = Symbol.intern(null, "x");
    arrayOfObject123[0] = RT.vector(arrayOfObject124);
    const__175 = PersistentList.create(Arrays.asList(arrayOfObject123));
    const__176 = (Keyword)RT.keyword(null, "inline");
    const__177 = Class.forName("java.lang.Boolean");
    const__178 = (Var)RT.var("clojure.core", "defmacro");
    const__179 = Integer.valueOf(422);
    Object[] arrayOfObject125 = new Object[2];
    Object[] arrayOfObject126 = new Object[5];
    arrayOfObject126[0] = Symbol.intern(null, "name");
    arrayOfObject126[1] = Symbol.intern(null, "doc-string?");
    arrayOfObject126[2] = Symbol.intern(null, "attr-map?");
    Object[] arrayOfObject127 = new Object[1];
    arrayOfObject127[0] = Symbol.intern(null, "params*");
    arrayOfObject126[3] = RT.vector(arrayOfObject127);
    arrayOfObject126[4] = Symbol.intern(null, "body");
    arrayOfObject125[0] = RT.vector(arrayOfObject126);
    Object[] arrayOfObject128 = new Object[6];
    arrayOfObject128[0] = Symbol.intern(null, "name");
    arrayOfObject128[1] = Symbol.intern(null, "doc-string?");
    arrayOfObject128[2] = Symbol.intern(null, "attr-map?");
    Object[] arrayOfObject129 = new Object[2];
    Object[] arrayOfObject130 = new Object[1];
    arrayOfObject130[0] = Symbol.intern(null, "params*");
    arrayOfObject129[0] = RT.vector(arrayOfObject130);
    arrayOfObject129[1] = Symbol.intern(null, "body");
    IObj localIObj20 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject129));
    Object[] arrayOfObject131 = new Object[4];
    arrayOfObject131[0] = RT.keyword(null, "line");
    arrayOfObject131[1] = Integer.valueOf(428);
    arrayOfObject131[2] = RT.keyword(null, "column");
    arrayOfObject131[3] = Integer.valueOf(46);
    arrayOfObject128[3] = localIObj20.withMeta((IPersistentMap)RT.map(arrayOfObject131));
    arrayOfObject128[4] = Symbol.intern(null, "+");
    arrayOfObject128[5] = Symbol.intern(null, "attr-map?");
    arrayOfObject125[1] = RT.vector(arrayOfObject128);
    IObj localIObj21 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject125));
    Object[] arrayOfObject132 = new Object[4];
    arrayOfObject132[0] = RT.keyword(null, "line");
    arrayOfObject132[1] = Integer.valueOf(427);
    arrayOfObject132[2] = RT.keyword(null, "column");
    arrayOfObject132[3] = Integer.valueOf(15);
    const__180 = localIObj21.withMeta((IPersistentMap)RT.map(arrayOfObject132));
    Object[] arrayOfObject133 = new Object[12];
    arrayOfObject133[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject134 = new Object[2];
    Object[] arrayOfObject135 = new Object[5];
    arrayOfObject135[0] = Symbol.intern(null, "name");
    arrayOfObject135[1] = Symbol.intern(null, "doc-string?");
    arrayOfObject135[2] = Symbol.intern(null, "attr-map?");
    Object[] arrayOfObject136 = new Object[1];
    arrayOfObject136[0] = Symbol.intern(null, "params*");
    arrayOfObject135[3] = RT.vector(arrayOfObject136);
    arrayOfObject135[4] = Symbol.intern(null, "body");
    arrayOfObject134[0] = RT.vector(arrayOfObject135);
    Object[] arrayOfObject137 = new Object[6];
    arrayOfObject137[0] = Symbol.intern(null, "name");
    arrayOfObject137[1] = Symbol.intern(null, "doc-string?");
    arrayOfObject137[2] = Symbol.intern(null, "attr-map?");
    Object[] arrayOfObject138 = new Object[2];
    Object[] arrayOfObject139 = new Object[1];
    arrayOfObject139[0] = Symbol.intern(null, "params*");
    arrayOfObject138[0] = RT.vector(arrayOfObject139);
    arrayOfObject138[1] = Symbol.intern(null, "body");
    IObj localIObj22 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject138));
    Object[] arrayOfObject140 = new Object[4];
    arrayOfObject140[0] = RT.keyword(null, "line");
    arrayOfObject140[1] = Integer.valueOf(428);
    arrayOfObject140[2] = RT.keyword(null, "column");
    arrayOfObject140[3] = Integer.valueOf(46);
    arrayOfObject137[3] = localIObj22.withMeta((IPersistentMap)RT.map(arrayOfObject140));
    arrayOfObject137[4] = Symbol.intern(null, "+");
    arrayOfObject137[5] = Symbol.intern(null, "attr-map?");
    arrayOfObject134[1] = RT.vector(arrayOfObject137);
    IObj localIObj23 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject134));
    Object[] arrayOfObject141 = new Object[4];
    arrayOfObject141[0] = RT.keyword(null, "line");
    arrayOfObject141[1] = Integer.valueOf(427);
    arrayOfObject141[2] = RT.keyword(null, "column");
    arrayOfObject141[3] = Integer.valueOf(15);
    arrayOfObject133[1] = localIObj23.withMeta((IPersistentMap)RT.map(arrayOfObject141));
    arrayOfObject133[2] = RT.keyword(null, "column");
    arrayOfObject133[3] = Integer.valueOf(1);
    arrayOfObject133[4] = RT.keyword(null, "added");
    arrayOfObject133[5] = "1.0";
    arrayOfObject133[6] = RT.keyword(null, "doc");
    arrayOfObject133[7] = "Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called.";
    arrayOfObject133[8] = RT.keyword(null, "line");
    arrayOfObject133[9] = Integer.valueOf(422);
    arrayOfObject133[10] = RT.keyword(null, "file");
    arrayOfObject133[11] = "clojure/core.clj";
    const__181 = (AFn)RT.map(arrayOfObject133);
    const__182 = (Var)RT.var("clojure.core", "when");
    const__183 = Integer.valueOf(471);
    Object[] arrayOfObject142 = new Object[1];
    Object[] arrayOfObject143 = new Object[3];
    arrayOfObject143[0] = Symbol.intern(null, "test");
    arrayOfObject143[1] = Symbol.intern(null, "&");
    arrayOfObject143[2] = Symbol.intern(null, "body");
    arrayOfObject142[0] = RT.vector(arrayOfObject143);
    const__184 = PersistentList.create(Arrays.asList(arrayOfObject142));
    Object[] arrayOfObject144 = new Object[12];
    arrayOfObject144[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject145 = new Object[1];
    Object[] arrayOfObject146 = new Object[3];
    arrayOfObject146[0] = Symbol.intern(null, "test");
    arrayOfObject146[1] = Symbol.intern(null, "&");
    arrayOfObject146[2] = Symbol.intern(null, "body");
    arrayOfObject145[0] = RT.vector(arrayOfObject146);
    arrayOfObject144[1] = PersistentList.create(Arrays.asList(arrayOfObject145));
    arrayOfObject144[2] = RT.keyword(null, "column");
    arrayOfObject144[3] = Integer.valueOf(1);
    arrayOfObject144[4] = RT.keyword(null, "added");
    arrayOfObject144[5] = "1.0";
    arrayOfObject144[6] = RT.keyword(null, "doc");
    arrayOfObject144[7] = "Evaluates test. If logical true, evaluates body in an implicit do.";
    arrayOfObject144[8] = RT.keyword(null, "line");
    arrayOfObject144[9] = Integer.valueOf(471);
    arrayOfObject144[10] = RT.keyword(null, "file");
    arrayOfObject144[11] = "clojure/core.clj";
    const__185 = (AFn)RT.map(arrayOfObject144);
    const__186 = (Var)RT.var("clojure.core", "when-not");
    const__187 = Integer.valueOf(477);
    Object[] arrayOfObject147 = new Object[1];
    Object[] arrayOfObject148 = new Object[3];
    arrayOfObject148[0] = Symbol.intern(null, "test");
    arrayOfObject148[1] = Symbol.intern(null, "&");
    arrayOfObject148[2] = Symbol.intern(null, "body");
    arrayOfObject147[0] = RT.vector(arrayOfObject148);
    const__188 = PersistentList.create(Arrays.asList(arrayOfObject147));
    Object[] arrayOfObject149 = new Object[12];
    arrayOfObject149[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject150 = new Object[1];
    Object[] arrayOfObject151 = new Object[3];
    arrayOfObject151[0] = Symbol.intern(null, "test");
    arrayOfObject151[1] = Symbol.intern(null, "&");
    arrayOfObject151[2] = Symbol.intern(null, "body");
    arrayOfObject150[0] = RT.vector(arrayOfObject151);
    arrayOfObject149[1] = PersistentList.create(Arrays.asList(arrayOfObject150));
    arrayOfObject149[2] = RT.keyword(null, "column");
    arrayOfObject149[3] = Integer.valueOf(1);
    arrayOfObject149[4] = RT.keyword(null, "added");
    arrayOfObject149[5] = "1.0";
    arrayOfObject149[6] = RT.keyword(null, "doc");
    arrayOfObject149[7] = "Evaluates test. If logical false, evaluates body in an implicit do.";
    arrayOfObject149[8] = RT.keyword(null, "line");
    arrayOfObject149[9] = Integer.valueOf(477);
    arrayOfObject149[10] = RT.keyword(null, "file");
    arrayOfObject149[11] = "clojure/core.clj";
    const__189 = (AFn)RT.map(arrayOfObject149);
    const__190 = (Var)RT.var("clojure.core", "false?");
    const__191 = Integer.valueOf(483);
    Object[] arrayOfObject152 = new Object[1];
    Object[] arrayOfObject153 = new Object[1];
    arrayOfObject153[0] = Symbol.intern(null, "x");
    arrayOfObject152[0] = RT.vector(arrayOfObject153);
    const__192 = PersistentList.create(Arrays.asList(arrayOfObject152));
    Object[] arrayOfObject154 = new Object[16];
    arrayOfObject154[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject155 = new Object[1];
    Object[] arrayOfObject156 = new Object[1];
    arrayOfObject156[0] = Symbol.intern(null, "x");
    arrayOfObject155[0] = RT.vector(arrayOfObject156);
    arrayOfObject154[1] = PersistentList.create(Arrays.asList(arrayOfObject155));
    arrayOfObject154[2] = RT.keyword(null, "column");
    arrayOfObject154[3] = Integer.valueOf(1);
    arrayOfObject154[4] = RT.keyword(null, "added");
    arrayOfObject154[5] = "1.0";
    arrayOfObject154[6] = RT.keyword(null, "static");
    arrayOfObject154[7] = Boolean.TRUE;
    arrayOfObject154[8] = RT.keyword(null, "doc");
    arrayOfObject154[9] = "Returns true if x is the value false, false otherwise.";
    arrayOfObject154[10] = RT.keyword(null, "line");
    arrayOfObject154[11] = Integer.valueOf(483);
    arrayOfObject154[12] = RT.keyword(null, "file");
    arrayOfObject154[13] = "clojure/core.clj";
    arrayOfObject154[14] = RT.keyword(null, "tag");
    arrayOfObject154[15] = Class.forName("java.lang.Boolean");
    const__193 = (AFn)RT.map(arrayOfObject154);
    const__194 = (Var)RT.var("clojure.core", "true?");
    const__195 = Integer.valueOf(490);
    Object[] arrayOfObject157 = new Object[1];
    Object[] arrayOfObject158 = new Object[1];
    arrayOfObject158[0] = Symbol.intern(null, "x");
    arrayOfObject157[0] = RT.vector(arrayOfObject158);
    const__196 = PersistentList.create(Arrays.asList(arrayOfObject157));
    Object[] arrayOfObject159 = new Object[16];
    arrayOfObject159[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject160 = new Object[1];
    Object[] arrayOfObject161 = new Object[1];
    arrayOfObject161[0] = Symbol.intern(null, "x");
    arrayOfObject160[0] = RT.vector(arrayOfObject161);
    arrayOfObject159[1] = PersistentList.create(Arrays.asList(arrayOfObject160));
    arrayOfObject159[2] = RT.keyword(null, "column");
    arrayOfObject159[3] = Integer.valueOf(1);
    arrayOfObject159[4] = RT.keyword(null, "added");
    arrayOfObject159[5] = "1.0";
    arrayOfObject159[6] = RT.keyword(null, "static");
    arrayOfObject159[7] = Boolean.TRUE;
    arrayOfObject159[8] = RT.keyword(null, "doc");
    arrayOfObject159[9] = "Returns true if x is the value true, false otherwise.";
    arrayOfObject159[10] = RT.keyword(null, "line");
    arrayOfObject159[11] = Integer.valueOf(490);
    arrayOfObject159[12] = RT.keyword(null, "file");
    arrayOfObject159[13] = "clojure/core.clj";
    arrayOfObject159[14] = RT.keyword(null, "tag");
    arrayOfObject159[15] = Class.forName("java.lang.Boolean");
    const__197 = (AFn)RT.map(arrayOfObject159);
    const__198 = (Var)RT.var("clojure.core", "not");
    const__199 = Integer.valueOf(497);
  }

  public static void __init10()
  {
    Object[] arrayOfObject1 = new Object[1];
    Object[] arrayOfObject2 = new Object[3];
    arrayOfObject2[0] = Symbol.intern(null, "f");
    arrayOfObject2[1] = Symbol.intern(null, "&");
    arrayOfObject2[2] = Symbol.intern(null, "maps");
    arrayOfObject1[0] = RT.vector(arrayOfObject2);
    const__1000 = PersistentList.create(Arrays.asList(arrayOfObject1));
    Object[] arrayOfObject3 = new Object[14];
    arrayOfObject3[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject4 = new Object[1];
    Object[] arrayOfObject5 = new Object[3];
    arrayOfObject5[0] = Symbol.intern(null, "f");
    arrayOfObject5[1] = Symbol.intern(null, "&");
    arrayOfObject5[2] = Symbol.intern(null, "maps");
    arrayOfObject4[0] = RT.vector(arrayOfObject5);
    arrayOfObject3[1] = PersistentList.create(Arrays.asList(arrayOfObject4));
    arrayOfObject3[2] = RT.keyword(null, "column");
    arrayOfObject3[3] = Integer.valueOf(1);
    arrayOfObject3[4] = RT.keyword(null, "added");
    arrayOfObject3[5] = "1.0";
    arrayOfObject3[6] = RT.keyword(null, "static");
    arrayOfObject3[7] = Boolean.TRUE;
    arrayOfObject3[8] = RT.keyword(null, "doc");
    arrayOfObject3[9] = "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).";
    arrayOfObject3[10] = RT.keyword(null, "line");
    arrayOfObject3[11] = Integer.valueOf(2686);
    arrayOfObject3[12] = RT.keyword(null, "file");
    arrayOfObject3[13] = "clojure/core.clj";
    const__1001 = (AFn)RT.map(arrayOfObject3);
    const__1002 = (Var)RT.var("clojure.core", "zipmap");
    const__1003 = Integer.valueOf(2706);
    Object[] arrayOfObject6 = new Object[1];
    Object[] arrayOfObject7 = new Object[2];
    arrayOfObject7[0] = Symbol.intern(null, "keys");
    arrayOfObject7[1] = Symbol.intern(null, "vals");
    arrayOfObject6[0] = RT.vector(arrayOfObject7);
    const__1004 = PersistentList.create(Arrays.asList(arrayOfObject6));
    Object[] arrayOfObject8 = new Object[14];
    arrayOfObject8[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject9 = new Object[1];
    Object[] arrayOfObject10 = new Object[2];
    arrayOfObject10[0] = Symbol.intern(null, "keys");
    arrayOfObject10[1] = Symbol.intern(null, "vals");
    arrayOfObject9[0] = RT.vector(arrayOfObject10);
    arrayOfObject8[1] = PersistentList.create(Arrays.asList(arrayOfObject9));
    arrayOfObject8[2] = RT.keyword(null, "column");
    arrayOfObject8[3] = Integer.valueOf(1);
    arrayOfObject8[4] = RT.keyword(null, "added");
    arrayOfObject8[5] = "1.0";
    arrayOfObject8[6] = RT.keyword(null, "static");
    arrayOfObject8[7] = Boolean.TRUE;
    arrayOfObject8[8] = RT.keyword(null, "doc");
    arrayOfObject8[9] = "Returns a map with the keys mapped to the corresponding vals.";
    arrayOfObject8[10] = RT.keyword(null, "line");
    arrayOfObject8[11] = Integer.valueOf(2706);
    arrayOfObject8[12] = RT.keyword(null, "file");
    arrayOfObject8[13] = "clojure/core.clj";
    const__1005 = (AFn)RT.map(arrayOfObject8);
    const__1006 = (Var)RT.var("clojure.core", "declare");
    const__1007 = Integer.valueOf(2720);
    Object[] arrayOfObject11 = new Object[1];
    Object[] arrayOfObject12 = new Object[2];
    arrayOfObject12[0] = Symbol.intern(null, "&");
    arrayOfObject12[1] = Symbol.intern(null, "names");
    arrayOfObject11[0] = RT.vector(arrayOfObject12);
    const__1008 = PersistentList.create(Arrays.asList(arrayOfObject11));
    Object[] arrayOfObject13 = new Object[12];
    arrayOfObject13[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject14 = new Object[1];
    Object[] arrayOfObject15 = new Object[2];
    arrayOfObject15[0] = Symbol.intern(null, "&");
    arrayOfObject15[1] = Symbol.intern(null, "names");
    arrayOfObject14[0] = RT.vector(arrayOfObject15);
    arrayOfObject13[1] = PersistentList.create(Arrays.asList(arrayOfObject14));
    arrayOfObject13[2] = RT.keyword(null, "column");
    arrayOfObject13[3] = Integer.valueOf(1);
    arrayOfObject13[4] = RT.keyword(null, "added");
    arrayOfObject13[5] = "1.0";
    arrayOfObject13[6] = RT.keyword(null, "doc");
    arrayOfObject13[7] = "defs the supplied var names with no bindings, useful for making forward declarations.";
    arrayOfObject13[8] = RT.keyword(null, "line");
    arrayOfObject13[9] = Integer.valueOf(2720);
    arrayOfObject13[10] = RT.keyword(null, "file");
    arrayOfObject13[11] = "clojure/core.clj";
    const__1009 = (AFn)RT.map(arrayOfObject13);
    const__1010 = (Var)RT.var("clojure.core", "line-seq");
    const__1011 = Integer.valueOf(2725);
    Object[] arrayOfObject16 = new Object[1];
    Object[] arrayOfObject17 = new Object[1];
    IObj localIObj1 = (IObj)Symbol.intern(null, "rdr");
    Object[] arrayOfObject18 = new Object[2];
    arrayOfObject18[0] = RT.keyword(null, "tag");
    arrayOfObject18[1] = Symbol.intern(null, "java.io.BufferedReader");
    arrayOfObject17[0] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject18));
    arrayOfObject16[0] = RT.vector(arrayOfObject17);
    const__1012 = PersistentList.create(Arrays.asList(arrayOfObject16));
    Object[] arrayOfObject19 = new Object[14];
    arrayOfObject19[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject20 = new Object[1];
    Object[] arrayOfObject21 = new Object[1];
    IObj localIObj2 = (IObj)Symbol.intern(null, "rdr");
    Object[] arrayOfObject22 = new Object[2];
    arrayOfObject22[0] = RT.keyword(null, "tag");
    arrayOfObject22[1] = Symbol.intern(null, "java.io.BufferedReader");
    arrayOfObject21[0] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject22));
    arrayOfObject20[0] = RT.vector(arrayOfObject21);
    arrayOfObject19[1] = PersistentList.create(Arrays.asList(arrayOfObject20));
    arrayOfObject19[2] = RT.keyword(null, "column");
    arrayOfObject19[3] = Integer.valueOf(1);
    arrayOfObject19[4] = RT.keyword(null, "added");
    arrayOfObject19[5] = "1.0";
    arrayOfObject19[6] = RT.keyword(null, "static");
    arrayOfObject19[7] = Boolean.TRUE;
    arrayOfObject19[8] = RT.keyword(null, "doc");
    arrayOfObject19[9] = "Returns the lines of text from rdr as a lazy sequence of strings.\n  rdr must implement java.io.BufferedReader.";
    arrayOfObject19[10] = RT.keyword(null, "line");
    arrayOfObject19[11] = Integer.valueOf(2725);
    arrayOfObject19[12] = RT.keyword(null, "file");
    arrayOfObject19[13] = "clojure/core.clj";
    const__1013 = (AFn)RT.map(arrayOfObject19);
    const__1014 = (Var)RT.var("clojure.core", "comparator");
    const__1015 = Integer.valueOf(2734);
    Object[] arrayOfObject23 = new Object[1];
    Object[] arrayOfObject24 = new Object[1];
    arrayOfObject24[0] = Symbol.intern(null, "pred");
    arrayOfObject23[0] = RT.vector(arrayOfObject24);
    const__1016 = PersistentList.create(Arrays.asList(arrayOfObject23));
    Object[] arrayOfObject25 = new Object[14];
    arrayOfObject25[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject26 = new Object[1];
    Object[] arrayOfObject27 = new Object[1];
    arrayOfObject27[0] = Symbol.intern(null, "pred");
    arrayOfObject26[0] = RT.vector(arrayOfObject27);
    arrayOfObject25[1] = PersistentList.create(Arrays.asList(arrayOfObject26));
    arrayOfObject25[2] = RT.keyword(null, "column");
    arrayOfObject25[3] = Integer.valueOf(1);
    arrayOfObject25[4] = RT.keyword(null, "added");
    arrayOfObject25[5] = "1.0";
    arrayOfObject25[6] = RT.keyword(null, "static");
    arrayOfObject25[7] = Boolean.TRUE;
    arrayOfObject25[8] = RT.keyword(null, "doc");
    arrayOfObject25[9] = "Returns an implementation of java.util.Comparator based upon pred.";
    arrayOfObject25[10] = RT.keyword(null, "line");
    arrayOfObject25[11] = Integer.valueOf(2734);
    arrayOfObject25[12] = RT.keyword(null, "file");
    arrayOfObject25[13] = "clojure/core.clj";
    const__1017 = (AFn)RT.map(arrayOfObject25);
    const__1018 = (Var)RT.var("clojure.core", "sort");
    const__1019 = Integer.valueOf(2742);
    Object[] arrayOfObject28 = new Object[2];
    Object[] arrayOfObject29 = new Object[1];
    arrayOfObject29[0] = Symbol.intern(null, "coll");
    arrayOfObject28[0] = RT.vector(arrayOfObject29);
    Object[] arrayOfObject30 = new Object[2];
    IObj localIObj3 = (IObj)Symbol.intern(null, "comp");
    Object[] arrayOfObject31 = new Object[2];
    arrayOfObject31[0] = RT.keyword(null, "tag");
    arrayOfObject31[1] = Symbol.intern(null, "java.util.Comparator");
    arrayOfObject30[0] = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject31));
    arrayOfObject30[1] = Symbol.intern(null, "coll");
    arrayOfObject28[1] = RT.vector(arrayOfObject30);
    const__1020 = PersistentList.create(Arrays.asList(arrayOfObject28));
    Object[] arrayOfObject32 = new Object[14];
    arrayOfObject32[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject33 = new Object[2];
    Object[] arrayOfObject34 = new Object[1];
    arrayOfObject34[0] = Symbol.intern(null, "coll");
    arrayOfObject33[0] = RT.vector(arrayOfObject34);
    Object[] arrayOfObject35 = new Object[2];
    IObj localIObj4 = (IObj)Symbol.intern(null, "comp");
    Object[] arrayOfObject36 = new Object[2];
    arrayOfObject36[0] = RT.keyword(null, "tag");
    arrayOfObject36[1] = Symbol.intern(null, "java.util.Comparator");
    arrayOfObject35[0] = localIObj4.withMeta((IPersistentMap)RT.map(arrayOfObject36));
    arrayOfObject35[1] = Symbol.intern(null, "coll");
    arrayOfObject33[1] = RT.vector(arrayOfObject35);
    arrayOfObject32[1] = PersistentList.create(Arrays.asList(arrayOfObject33));
    arrayOfObject32[2] = RT.keyword(null, "column");
    arrayOfObject32[3] = Integer.valueOf(1);
    arrayOfObject32[4] = RT.keyword(null, "added");
    arrayOfObject32[5] = "1.0";
    arrayOfObject32[6] = RT.keyword(null, "static");
    arrayOfObject32[7] = Boolean.TRUE;
    arrayOfObject32[8] = RT.keyword(null, "doc");
    arrayOfObject32[9] = "Returns a sorted sequence of the items in coll. If no comparator is\n  supplied, uses compare.  comparator must implement\n  java.util.Comparator.  If coll is a Java array, it will be modified.\n  To avoid this, sort a copy of the array.";
    arrayOfObject32[10] = RT.keyword(null, "line");
    arrayOfObject32[11] = Integer.valueOf(2742);
    arrayOfObject32[12] = RT.keyword(null, "file");
    arrayOfObject32[13] = "clojure/core.clj";
    const__1021 = (AFn)RT.map(arrayOfObject32);
    const__1022 = (Var)RT.var("clojure.core", "sort-by");
    const__1023 = Integer.valueOf(2758);
    Object[] arrayOfObject37 = new Object[2];
    Object[] arrayOfObject38 = new Object[2];
    arrayOfObject38[0] = Symbol.intern(null, "keyfn");
    arrayOfObject38[1] = Symbol.intern(null, "coll");
    arrayOfObject37[0] = RT.vector(arrayOfObject38);
    Object[] arrayOfObject39 = new Object[3];
    arrayOfObject39[0] = Symbol.intern(null, "keyfn");
    IObj localIObj5 = (IObj)Symbol.intern(null, "comp");
    Object[] arrayOfObject40 = new Object[2];
    arrayOfObject40[0] = RT.keyword(null, "tag");
    arrayOfObject40[1] = Symbol.intern(null, "java.util.Comparator");
    arrayOfObject39[1] = localIObj5.withMeta((IPersistentMap)RT.map(arrayOfObject40));
    arrayOfObject39[2] = Symbol.intern(null, "coll");
    arrayOfObject37[1] = RT.vector(arrayOfObject39);
    const__1024 = PersistentList.create(Arrays.asList(arrayOfObject37));
    Object[] arrayOfObject41 = new Object[14];
    arrayOfObject41[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject42 = new Object[2];
    Object[] arrayOfObject43 = new Object[2];
    arrayOfObject43[0] = Symbol.intern(null, "keyfn");
    arrayOfObject43[1] = Symbol.intern(null, "coll");
    arrayOfObject42[0] = RT.vector(arrayOfObject43);
    Object[] arrayOfObject44 = new Object[3];
    arrayOfObject44[0] = Symbol.intern(null, "keyfn");
    IObj localIObj6 = (IObj)Symbol.intern(null, "comp");
    Object[] arrayOfObject45 = new Object[2];
    arrayOfObject45[0] = RT.keyword(null, "tag");
    arrayOfObject45[1] = Symbol.intern(null, "java.util.Comparator");
    arrayOfObject44[1] = localIObj6.withMeta((IPersistentMap)RT.map(arrayOfObject45));
    arrayOfObject44[2] = Symbol.intern(null, "coll");
    arrayOfObject42[1] = RT.vector(arrayOfObject44);
    arrayOfObject41[1] = PersistentList.create(Arrays.asList(arrayOfObject42));
    arrayOfObject41[2] = RT.keyword(null, "column");
    arrayOfObject41[3] = Integer.valueOf(1);
    arrayOfObject41[4] = RT.keyword(null, "added");
    arrayOfObject41[5] = "1.0";
    arrayOfObject41[6] = RT.keyword(null, "static");
    arrayOfObject41[7] = Boolean.TRUE;
    arrayOfObject41[8] = RT.keyword(null, "doc");
    arrayOfObject41[9] = "Returns a sorted sequence of the items in coll, where the sort\n  order is determined by comparing (keyfn item).  If no comparator is\n  supplied, uses compare.  comparator must implement\n  java.util.Comparator.  If coll is a Java array, it will be modified.\n  To avoid this, sort a copy of the array.";
    arrayOfObject41[10] = RT.keyword(null, "line");
    arrayOfObject41[11] = Integer.valueOf(2758);
    arrayOfObject41[12] = RT.keyword(null, "file");
    arrayOfObject41[13] = "clojure/core.clj";
    const__1025 = (AFn)RT.map(arrayOfObject41);
    const__1026 = (Var)RT.var("clojure.core", "dorun");
    const__1027 = Integer.valueOf(2771);
    Object[] arrayOfObject46 = new Object[2];
    Object[] arrayOfObject47 = new Object[1];
    arrayOfObject47[0] = Symbol.intern(null, "coll");
    arrayOfObject46[0] = RT.vector(arrayOfObject47);
    Object[] arrayOfObject48 = new Object[2];
    arrayOfObject48[0] = Symbol.intern(null, "n");
    arrayOfObject48[1] = Symbol.intern(null, "coll");
    arrayOfObject46[1] = RT.vector(arrayOfObject48);
    const__1028 = PersistentList.create(Arrays.asList(arrayOfObject46));
    Object[] arrayOfObject49 = new Object[14];
    arrayOfObject49[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject50 = new Object[2];
    Object[] arrayOfObject51 = new Object[1];
    arrayOfObject51[0] = Symbol.intern(null, "coll");
    arrayOfObject50[0] = RT.vector(arrayOfObject51);
    Object[] arrayOfObject52 = new Object[2];
    arrayOfObject52[0] = Symbol.intern(null, "n");
    arrayOfObject52[1] = Symbol.intern(null, "coll");
    arrayOfObject50[1] = RT.vector(arrayOfObject52);
    arrayOfObject49[1] = PersistentList.create(Arrays.asList(arrayOfObject50));
    arrayOfObject49[2] = RT.keyword(null, "column");
    arrayOfObject49[3] = Integer.valueOf(1);
    arrayOfObject49[4] = RT.keyword(null, "added");
    arrayOfObject49[5] = "1.0";
    arrayOfObject49[6] = RT.keyword(null, "static");
    arrayOfObject49[7] = Boolean.TRUE;
    arrayOfObject49[8] = RT.keyword(null, "doc");
    arrayOfObject49[9] = "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.";
    arrayOfObject49[10] = RT.keyword(null, "line");
    arrayOfObject49[11] = Integer.valueOf(2771);
    arrayOfObject49[12] = RT.keyword(null, "file");
    arrayOfObject49[13] = "clojure/core.clj";
    const__1029 = (AFn)RT.map(arrayOfObject49);
    const__1030 = (Var)RT.var("clojure.core", "doall");
    const__1031 = Integer.valueOf(2786);
    Object[] arrayOfObject53 = new Object[2];
    Object[] arrayOfObject54 = new Object[1];
    arrayOfObject54[0] = Symbol.intern(null, "coll");
    arrayOfObject53[0] = RT.vector(arrayOfObject54);
    Object[] arrayOfObject55 = new Object[2];
    arrayOfObject55[0] = Symbol.intern(null, "n");
    arrayOfObject55[1] = Symbol.intern(null, "coll");
    arrayOfObject53[1] = RT.vector(arrayOfObject55);
    const__1032 = PersistentList.create(Arrays.asList(arrayOfObject53));
    Object[] arrayOfObject56 = new Object[14];
    arrayOfObject56[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject57 = new Object[2];
    Object[] arrayOfObject58 = new Object[1];
    arrayOfObject58[0] = Symbol.intern(null, "coll");
    arrayOfObject57[0] = RT.vector(arrayOfObject58);
    Object[] arrayOfObject59 = new Object[2];
    arrayOfObject59[0] = Symbol.intern(null, "n");
    arrayOfObject59[1] = Symbol.intern(null, "coll");
    arrayOfObject57[1] = RT.vector(arrayOfObject59);
    arrayOfObject56[1] = PersistentList.create(Arrays.asList(arrayOfObject57));
    arrayOfObject56[2] = RT.keyword(null, "column");
    arrayOfObject56[3] = Integer.valueOf(1);
    arrayOfObject56[4] = RT.keyword(null, "added");
    arrayOfObject56[5] = "1.0";
    arrayOfObject56[6] = RT.keyword(null, "static");
    arrayOfObject56[7] = Boolean.TRUE;
    arrayOfObject56[8] = RT.keyword(null, "doc");
    arrayOfObject56[9] = "When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.";
    arrayOfObject56[10] = RT.keyword(null, "line");
    arrayOfObject56[11] = Integer.valueOf(2786);
    arrayOfObject56[12] = RT.keyword(null, "file");
    arrayOfObject56[13] = "clojure/core.clj";
    const__1033 = (AFn)RT.map(arrayOfObject56);
    const__1034 = (Var)RT.var("clojure.core", "nthnext");
    const__1035 = Integer.valueOf(2802);
    Object[] arrayOfObject60 = new Object[1];
    Object[] arrayOfObject61 = new Object[2];
    arrayOfObject61[0] = Symbol.intern(null, "coll");
    arrayOfObject61[1] = Symbol.intern(null, "n");
    arrayOfObject60[0] = RT.vector(arrayOfObject61);
    const__1036 = PersistentList.create(Arrays.asList(arrayOfObject60));
    Object[] arrayOfObject62 = new Object[14];
    arrayOfObject62[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject63 = new Object[1];
    Object[] arrayOfObject64 = new Object[2];
    arrayOfObject64[0] = Symbol.intern(null, "coll");
    arrayOfObject64[1] = Symbol.intern(null, "n");
    arrayOfObject63[0] = RT.vector(arrayOfObject64);
    arrayOfObject62[1] = PersistentList.create(Arrays.asList(arrayOfObject63));
    arrayOfObject62[2] = RT.keyword(null, "column");
    arrayOfObject62[3] = Integer.valueOf(1);
    arrayOfObject62[4] = RT.keyword(null, "added");
    arrayOfObject62[5] = "1.0";
    arrayOfObject62[6] = RT.keyword(null, "static");
    arrayOfObject62[7] = Boolean.TRUE;
    arrayOfObject62[8] = RT.keyword(null, "doc");
    arrayOfObject62[9] = "Returns the nth next of coll, (seq coll) when n is 0.";
    arrayOfObject62[10] = RT.keyword(null, "line");
    arrayOfObject62[11] = Integer.valueOf(2802);
    arrayOfObject62[12] = RT.keyword(null, "file");
    arrayOfObject62[13] = "clojure/core.clj";
    const__1037 = (AFn)RT.map(arrayOfObject62);
    const__1038 = (Var)RT.var("clojure.core", "nthrest");
    const__1039 = Integer.valueOf(2812);
    Object[] arrayOfObject65 = new Object[1];
    Object[] arrayOfObject66 = new Object[2];
    arrayOfObject66[0] = Symbol.intern(null, "coll");
    arrayOfObject66[1] = Symbol.intern(null, "n");
    arrayOfObject65[0] = RT.vector(arrayOfObject66);
    const__1040 = PersistentList.create(Arrays.asList(arrayOfObject65));
    Object[] arrayOfObject67 = new Object[14];
    arrayOfObject67[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject68 = new Object[1];
    Object[] arrayOfObject69 = new Object[2];
    arrayOfObject69[0] = Symbol.intern(null, "coll");
    arrayOfObject69[1] = Symbol.intern(null, "n");
    arrayOfObject68[0] = RT.vector(arrayOfObject69);
    arrayOfObject67[1] = PersistentList.create(Arrays.asList(arrayOfObject68));
    arrayOfObject67[2] = RT.keyword(null, "column");
    arrayOfObject67[3] = Integer.valueOf(1);
    arrayOfObject67[4] = RT.keyword(null, "added");
    arrayOfObject67[5] = "1.3";
    arrayOfObject67[6] = RT.keyword(null, "static");
    arrayOfObject67[7] = Boolean.TRUE;
    arrayOfObject67[8] = RT.keyword(null, "doc");
    arrayOfObject67[9] = "Returns the nth rest of coll, coll when n is 0.";
    arrayOfObject67[10] = RT.keyword(null, "line");
    arrayOfObject67[11] = Integer.valueOf(2812);
    arrayOfObject67[12] = RT.keyword(null, "file");
    arrayOfObject67[13] = "clojure/core.clj";
    const__1041 = (AFn)RT.map(arrayOfObject67);
    const__1042 = (Var)RT.var("clojure.core", "partition");
    const__1043 = Integer.valueOf(2822);
    Object[] arrayOfObject70 = new Object[3];
    Object[] arrayOfObject71 = new Object[2];
    arrayOfObject71[0] = Symbol.intern(null, "n");
    arrayOfObject71[1] = Symbol.intern(null, "coll");
    arrayOfObject70[0] = RT.vector(arrayOfObject71);
    Object[] arrayOfObject72 = new Object[3];
    arrayOfObject72[0] = Symbol.intern(null, "n");
    arrayOfObject72[1] = Symbol.intern(null, "step");
    arrayOfObject72[2] = Symbol.intern(null, "coll");
    arrayOfObject70[1] = RT.vector(arrayOfObject72);
    Object[] arrayOfObject73 = new Object[4];
    arrayOfObject73[0] = Symbol.intern(null, "n");
    arrayOfObject73[1] = Symbol.intern(null, "step");
    arrayOfObject73[2] = Symbol.intern(null, "pad");
    arrayOfObject73[3] = Symbol.intern(null, "coll");
    arrayOfObject70[2] = RT.vector(arrayOfObject73);
    const__1044 = PersistentList.create(Arrays.asList(arrayOfObject70));
    Object[] arrayOfObject74 = new Object[14];
    arrayOfObject74[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject75 = new Object[3];
    Object[] arrayOfObject76 = new Object[2];
    arrayOfObject76[0] = Symbol.intern(null, "n");
    arrayOfObject76[1] = Symbol.intern(null, "coll");
    arrayOfObject75[0] = RT.vector(arrayOfObject76);
    Object[] arrayOfObject77 = new Object[3];
    arrayOfObject77[0] = Symbol.intern(null, "n");
    arrayOfObject77[1] = Symbol.intern(null, "step");
    arrayOfObject77[2] = Symbol.intern(null, "coll");
    arrayOfObject75[1] = RT.vector(arrayOfObject77);
    Object[] arrayOfObject78 = new Object[4];
    arrayOfObject78[0] = Symbol.intern(null, "n");
    arrayOfObject78[1] = Symbol.intern(null, "step");
    arrayOfObject78[2] = Symbol.intern(null, "pad");
    arrayOfObject78[3] = Symbol.intern(null, "coll");
    arrayOfObject75[2] = RT.vector(arrayOfObject78);
    arrayOfObject74[1] = PersistentList.create(Arrays.asList(arrayOfObject75));
    arrayOfObject74[2] = RT.keyword(null, "column");
    arrayOfObject74[3] = Integer.valueOf(1);
    arrayOfObject74[4] = RT.keyword(null, "added");
    arrayOfObject74[5] = "1.0";
    arrayOfObject74[6] = RT.keyword(null, "static");
    arrayOfObject74[7] = Boolean.TRUE;
    arrayOfObject74[8] = RT.keyword(null, "doc");
    arrayOfObject74[9] = "Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition upto n items. In case there are\n  not enough padding elements, return a partition with less than n items.";
    arrayOfObject74[10] = RT.keyword(null, "line");
    arrayOfObject74[11] = Integer.valueOf(2822);
    arrayOfObject74[12] = RT.keyword(null, "file");
    arrayOfObject74[13] = "clojure/core.clj";
    const__1045 = (AFn)RT.map(arrayOfObject74);
    const__1046 = (Var)RT.var("clojure.core", "eval");
    const__1047 = Integer.valueOf(2848);
    Object[] arrayOfObject79 = new Object[1];
    Object[] arrayOfObject80 = new Object[1];
    arrayOfObject80[0] = Symbol.intern(null, "form");
    arrayOfObject79[0] = RT.vector(arrayOfObject80);
    const__1048 = PersistentList.create(Arrays.asList(arrayOfObject79));
    Object[] arrayOfObject81 = new Object[14];
    arrayOfObject81[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject82 = new Object[1];
    Object[] arrayOfObject83 = new Object[1];
    arrayOfObject83[0] = Symbol.intern(null, "form");
    arrayOfObject82[0] = RT.vector(arrayOfObject83);
    arrayOfObject81[1] = PersistentList.create(Arrays.asList(arrayOfObject82));
    arrayOfObject81[2] = RT.keyword(null, "column");
    arrayOfObject81[3] = Integer.valueOf(1);
    arrayOfObject81[4] = RT.keyword(null, "added");
    arrayOfObject81[5] = "1.0";
    arrayOfObject81[6] = RT.keyword(null, "static");
    arrayOfObject81[7] = Boolean.TRUE;
    arrayOfObject81[8] = RT.keyword(null, "doc");
    arrayOfObject81[9] = "Evaluates the form data structure (not text!) and returns the result.";
    arrayOfObject81[10] = RT.keyword(null, "line");
    arrayOfObject81[11] = Integer.valueOf(2848);
    arrayOfObject81[12] = RT.keyword(null, "file");
    arrayOfObject81[13] = "clojure/core.clj";
    const__1049 = (AFn)RT.map(arrayOfObject81);
    const__1050 = (Var)RT.var("clojure.core", "doseq");
    const__1051 = Integer.valueOf(2854);
    Object[] arrayOfObject84 = new Object[1];
    Object[] arrayOfObject85 = new Object[3];
    arrayOfObject85[0] = Symbol.intern(null, "seq-exprs");
    arrayOfObject85[1] = Symbol.intern(null, "&");
    arrayOfObject85[2] = Symbol.intern(null, "body");
    arrayOfObject84[0] = RT.vector(arrayOfObject85);
    const__1052 = PersistentList.create(Arrays.asList(arrayOfObject84));
    Object[] arrayOfObject86 = new Object[12];
    arrayOfObject86[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject87 = new Object[1];
    Object[] arrayOfObject88 = new Object[3];
    arrayOfObject88[0] = Symbol.intern(null, "seq-exprs");
    arrayOfObject88[1] = Symbol.intern(null, "&");
    arrayOfObject88[2] = Symbol.intern(null, "body");
    arrayOfObject87[0] = RT.vector(arrayOfObject88);
    arrayOfObject86[1] = PersistentList.create(Arrays.asList(arrayOfObject87));
    arrayOfObject86[2] = RT.keyword(null, "column");
    arrayOfObject86[3] = Integer.valueOf(1);
    arrayOfObject86[4] = RT.keyword(null, "added");
    arrayOfObject86[5] = "1.0";
    arrayOfObject86[6] = RT.keyword(null, "doc");
    arrayOfObject86[7] = "Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil.";
    arrayOfObject86[8] = RT.keyword(null, "line");
    arrayOfObject86[9] = Integer.valueOf(2854);
    arrayOfObject86[10] = RT.keyword(null, "file");
    arrayOfObject86[11] = "clojure/core.clj";
    const__1053 = (AFn)RT.map(arrayOfObject86);
    const__1054 = (Var)RT.var("clojure.core", "await");
    const__1055 = Integer.valueOf(2912);
    Object[] arrayOfObject89 = new Object[1];
    Object[] arrayOfObject90 = new Object[2];
    arrayOfObject90[0] = Symbol.intern(null, "&");
    arrayOfObject90[1] = Symbol.intern(null, "agents");
    arrayOfObject89[0] = RT.vector(arrayOfObject90);
    const__1056 = PersistentList.create(Arrays.asList(arrayOfObject89));
    Object[] arrayOfObject91 = new Object[14];
    arrayOfObject91[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject92 = new Object[1];
    Object[] arrayOfObject93 = new Object[2];
    arrayOfObject93[0] = Symbol.intern(null, "&");
    arrayOfObject93[1] = Symbol.intern(null, "agents");
    arrayOfObject92[0] = RT.vector(arrayOfObject93);
    arrayOfObject91[1] = PersistentList.create(Arrays.asList(arrayOfObject92));
    arrayOfObject91[2] = RT.keyword(null, "column");
    arrayOfObject91[3] = Integer.valueOf(1);
    arrayOfObject91[4] = RT.keyword(null, "added");
    arrayOfObject91[5] = "1.0";
    arrayOfObject91[6] = RT.keyword(null, "static");
    arrayOfObject91[7] = Boolean.TRUE;
    arrayOfObject91[8] = RT.keyword(null, "doc");
    arrayOfObject91[9] = "Blocks the current thread (indefinitely!) until all actions\n  dispatched thus far, from this thread or agent, to the agent(s) have\n  occurred.  Will block on failed agents.  Will never return if\n  a failed agent is restarted with :clear-actions true.";
    arrayOfObject91[10] = RT.keyword(null, "line");
    arrayOfObject91[11] = Integer.valueOf(2912);
    arrayOfObject91[12] = RT.keyword(null, "file");
    arrayOfObject91[13] = "clojure/core.clj";
    const__1057 = (AFn)RT.map(arrayOfObject91);
    const__1058 = (Var)RT.var("clojure.core", "await1");
    const__1059 = Integer.valueOf(2929);
    Object[] arrayOfObject94 = new Object[1];
    Object[] arrayOfObject95 = new Object[1];
    IObj localIObj7 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject96 = new Object[2];
    arrayOfObject96[0] = RT.keyword(null, "tag");
    arrayOfObject96[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject95[0] = localIObj7.withMeta((IPersistentMap)RT.map(arrayOfObject96));
    arrayOfObject94[0] = RT.vector(arrayOfObject95);
    const__1060 = PersistentList.create(Arrays.asList(arrayOfObject94));
    Object[] arrayOfObject97 = new Object[10];
    arrayOfObject97[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject98 = new Object[1];
    Object[] arrayOfObject99 = new Object[1];
    IObj localIObj8 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject100 = new Object[2];
    arrayOfObject100[0] = RT.keyword(null, "tag");
    arrayOfObject100[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject99[0] = localIObj8.withMeta((IPersistentMap)RT.map(arrayOfObject100));
    arrayOfObject98[0] = RT.vector(arrayOfObject99);
    arrayOfObject97[1] = PersistentList.create(Arrays.asList(arrayOfObject98));
    arrayOfObject97[2] = RT.keyword(null, "column");
    arrayOfObject97[3] = Integer.valueOf(1);
    arrayOfObject97[4] = RT.keyword(null, "static");
    arrayOfObject97[5] = Boolean.TRUE;
    arrayOfObject97[6] = RT.keyword(null, "line");
    arrayOfObject97[7] = Integer.valueOf(2929);
    arrayOfObject97[8] = RT.keyword(null, "file");
    arrayOfObject97[9] = "clojure/core.clj";
    const__1061 = (AFn)RT.map(arrayOfObject97);
    const__1062 = (Var)RT.var("clojure.core", "await-for");
    const__1063 = Integer.valueOf(2934);
    Object[] arrayOfObject101 = new Object[1];
    Object[] arrayOfObject102 = new Object[3];
    arrayOfObject102[0] = Symbol.intern(null, "timeout-ms");
    arrayOfObject102[1] = Symbol.intern(null, "&");
    arrayOfObject102[2] = Symbol.intern(null, "agents");
    arrayOfObject101[0] = RT.vector(arrayOfObject102);
    const__1064 = PersistentList.create(Arrays.asList(arrayOfObject101));
    Object[] arrayOfObject103 = new Object[14];
    arrayOfObject103[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject104 = new Object[1];
    Object[] arrayOfObject105 = new Object[3];
    arrayOfObject105[0] = Symbol.intern(null, "timeout-ms");
    arrayOfObject105[1] = Symbol.intern(null, "&");
    arrayOfObject105[2] = Symbol.intern(null, "agents");
    arrayOfObject104[0] = RT.vector(arrayOfObject105);
    arrayOfObject103[1] = PersistentList.create(Arrays.asList(arrayOfObject104));
    arrayOfObject103[2] = RT.keyword(null, "column");
    arrayOfObject103[3] = Integer.valueOf(1);
    arrayOfObject103[4] = RT.keyword(null, "added");
    arrayOfObject103[5] = "1.0";
    arrayOfObject103[6] = RT.keyword(null, "static");
    arrayOfObject103[7] = Boolean.TRUE;
    arrayOfObject103[8] = RT.keyword(null, "doc");
    arrayOfObject103[9] = "Blocks the current thread until all actions dispatched thus\n  far (from this thread or agent) to the agents have occurred, or the\n  timeout (in milliseconds) has elapsed. Returns logical false if\n  returning due to timeout, logical true otherwise.";
    arrayOfObject103[10] = RT.keyword(null, "line");
    arrayOfObject103[11] = Integer.valueOf(2934);
    arrayOfObject103[12] = RT.keyword(null, "file");
    arrayOfObject103[13] = "clojure/core.clj";
    const__1065 = (AFn)RT.map(arrayOfObject103);
    const__1066 = Integer.valueOf(2951);
    Object[] arrayOfObject106 = new Object[1];
    Object[] arrayOfObject107 = new Object[3];
    arrayOfObject107[0] = Symbol.intern(null, "bindings");
    arrayOfObject107[1] = Symbol.intern(null, "&");
    arrayOfObject107[2] = Symbol.intern(null, "body");
    arrayOfObject106[0] = RT.vector(arrayOfObject107);
    const__1067 = PersistentList.create(Arrays.asList(arrayOfObject106));
    Object[] arrayOfObject108 = new Object[12];
    arrayOfObject108[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject109 = new Object[1];
    Object[] arrayOfObject110 = new Object[3];
    arrayOfObject110[0] = Symbol.intern(null, "bindings");
    arrayOfObject110[1] = Symbol.intern(null, "&");
    arrayOfObject110[2] = Symbol.intern(null, "body");
    arrayOfObject109[0] = RT.vector(arrayOfObject110);
    arrayOfObject108[1] = PersistentList.create(Arrays.asList(arrayOfObject109));
    arrayOfObject108[2] = RT.keyword(null, "column");
    arrayOfObject108[3] = Integer.valueOf(1);
    arrayOfObject108[4] = RT.keyword(null, "added");
    arrayOfObject108[5] = "1.0";
    arrayOfObject108[6] = RT.keyword(null, "doc");
    arrayOfObject108[7] = "bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1.";
    arrayOfObject108[8] = RT.keyword(null, "line");
    arrayOfObject108[9] = Integer.valueOf(2951);
    arrayOfObject108[10] = RT.keyword(null, "file");
    arrayOfObject108[11] = "clojure/core.clj";
    const__1068 = (AFn)RT.map(arrayOfObject108);
    const__1069 = (Var)RT.var("clojure.core", "transient");
    const__1070 = Integer.valueOf(2980);
    Object[] arrayOfObject111 = new Object[1];
    Object[] arrayOfObject112 = new Object[1];
    IObj localIObj9 = (IObj)Symbol.intern(null, "coll");
    Object[] arrayOfObject113 = new Object[2];
    arrayOfObject113[0] = RT.keyword(null, "tag");
    arrayOfObject113[1] = Symbol.intern(null, "clojure.lang.IEditableCollection");
    arrayOfObject112[0] = localIObj9.withMeta((IPersistentMap)RT.map(arrayOfObject113));
    arrayOfObject111[0] = RT.vector(arrayOfObject112);
    const__1071 = PersistentList.create(Arrays.asList(arrayOfObject111));
    Object[] arrayOfObject114 = new Object[14];
    arrayOfObject114[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject115 = new Object[1];
    Object[] arrayOfObject116 = new Object[1];
    IObj localIObj10 = (IObj)Symbol.intern(null, "coll");
    Object[] arrayOfObject117 = new Object[2];
    arrayOfObject117[0] = RT.keyword(null, "tag");
    arrayOfObject117[1] = Symbol.intern(null, "clojure.lang.IEditableCollection");
    arrayOfObject116[0] = localIObj10.withMeta((IPersistentMap)RT.map(arrayOfObject117));
    arrayOfObject115[0] = RT.vector(arrayOfObject116);
    arrayOfObject114[1] = PersistentList.create(Arrays.asList(arrayOfObject115));
    arrayOfObject114[2] = RT.keyword(null, "column");
    arrayOfObject114[3] = Integer.valueOf(1);
    arrayOfObject114[4] = RT.keyword(null, "added");
    arrayOfObject114[5] = "1.1";
    arrayOfObject114[6] = RT.keyword(null, "static");
    arrayOfObject114[7] = Boolean.TRUE;
    arrayOfObject114[8] = RT.keyword(null, "doc");
    arrayOfObject114[9] = "Alpha - subject to change.\n  Returns a new, transient version of the collection, in constant time.";
    arrayOfObject114[10] = RT.keyword(null, "line");
    arrayOfObject114[11] = Integer.valueOf(2980);
    arrayOfObject114[12] = RT.keyword(null, "file");
    arrayOfObject114[13] = "clojure/core.clj";
    const__1072 = (AFn)RT.map(arrayOfObject114);
    const__1073 = (Var)RT.var("clojure.core", "persistent!");
    const__1074 = Integer.valueOf(2988);
    Object[] arrayOfObject118 = new Object[1];
    Object[] arrayOfObject119 = new Object[1];
    IObj localIObj11 = (IObj)Symbol.intern(null, "coll");
    Object[] arrayOfObject120 = new Object[2];
    arrayOfObject120[0] = RT.keyword(null, "tag");
    arrayOfObject120[1] = Symbol.intern(null, "clojure.lang.ITransientCollection");
    arrayOfObject119[0] = localIObj11.withMeta((IPersistentMap)RT.map(arrayOfObject120));
    arrayOfObject118[0] = RT.vector(arrayOfObject119);
    const__1075 = PersistentList.create(Arrays.asList(arrayOfObject118));
    Object[] arrayOfObject121 = new Object[14];
    arrayOfObject121[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject122 = new Object[1];
    Object[] arrayOfObject123 = new Object[1];
    IObj localIObj12 = (IObj)Symbol.intern(null, "coll");
    Object[] arrayOfObject124 = new Object[2];
    arrayOfObject124[0] = RT.keyword(null, "tag");
    arrayOfObject124[1] = Symbol.intern(null, "clojure.lang.ITransientCollection");
    arrayOfObject123[0] = localIObj12.withMeta((IPersistentMap)RT.map(arrayOfObject124));
    arrayOfObject122[0] = RT.vector(arrayOfObject123);
    arrayOfObject121[1] = PersistentList.create(Arrays.asList(arrayOfObject122));
    arrayOfObject121[2] = RT.keyword(null, "column");
    arrayOfObject121[3] = Integer.valueOf(1);
    arrayOfObject121[4] = RT.keyword(null, "added");
    arrayOfObject121[5] = "1.1";
    arrayOfObject121[6] = RT.keyword(null, "static");
    arrayOfObject121[7] = Boolean.TRUE;
    arrayOfObject121[8] = RT.keyword(null, "doc");
    arrayOfObject121[9] = "Alpha - subject to change.\n  Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception.";
    arrayOfObject121[10] = RT.keyword(null, "line");
    arrayOfObject121[11] = Integer.valueOf(2988);
    arrayOfObject121[12] = RT.keyword(null, "file");
    arrayOfObject121[13] = "clojure/core.clj";
    const__1076 = (AFn)RT.map(arrayOfObject121);
    const__1077 = (Var)RT.var("clojure.core", "conj!");
    const__1078 = Integer.valueOf(2998);
    Object[] arrayOfObject125 = new Object[1];
    Object[] arrayOfObject126 = new Object[2];
    IObj localIObj13 = (IObj)Symbol.intern(null, "coll");
    Object[] arrayOfObject127 = new Object[2];
    arrayOfObject127[0] = RT.keyword(null, "tag");
    arrayOfObject127[1] = Symbol.intern(null, "clojure.lang.ITransientCollection");
    arrayOfObject126[0] = localIObj13.withMeta((IPersistentMap)RT.map(arrayOfObject127));
    arrayOfObject126[1] = Symbol.intern(null, "x");
    arrayOfObject125[0] = RT.vector(arrayOfObject126);
    const__1079 = PersistentList.create(Arrays.asList(arrayOfObject125));
    Object[] arrayOfObject128 = new Object[14];
    arrayOfObject128[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject129 = new Object[1];
    Object[] arrayOfObject130 = new Object[2];
    IObj localIObj14 = (IObj)Symbol.intern(null, "coll");
    Object[] arrayOfObject131 = new Object[2];
    arrayOfObject131[0] = RT.keyword(null, "tag");
    arrayOfObject131[1] = Symbol.intern(null, "clojure.lang.ITransientCollection");
    arrayOfObject130[0] = localIObj14.withMeta((IPersistentMap)RT.map(arrayOfObject131));
    arrayOfObject130[1] = Symbol.intern(null, "x");
    arrayOfObject129[0] = RT.vector(arrayOfObject130);
    arrayOfObject128[1] = PersistentList.create(Arrays.asList(arrayOfObject129));
    arrayOfObject128[2] = RT.keyword(null, "column");
    arrayOfObject128[3] = Integer.valueOf(1);
    arrayOfObject128[4] = RT.keyword(null, "added");
    arrayOfObject128[5] = "1.1";
    arrayOfObject128[6] = RT.keyword(null, "static");
    arrayOfObject128[7] = Boolean.TRUE;
    arrayOfObject128[8] = RT.keyword(null, "doc");
    arrayOfObject128[9] = "Alpha - subject to change.\n  Adds x to the transient collection, and return coll. The 'addition'\n  may happen at different 'places' depending on the concrete type.";
    arrayOfObject128[10] = RT.keyword(null, "line");
    arrayOfObject128[11] = Integer.valueOf(2998);
    arrayOfObject128[12] = RT.keyword(null, "file");
    arrayOfObject128[13] = "clojure/core.clj";
    const__1080 = (AFn)RT.map(arrayOfObject128);
    const__1081 = (Var)RT.var("clojure.core", "assoc!");
    const__1082 = Integer.valueOf(3007);
    Object[] arrayOfObject132 = new Object[2];
    Object[] arrayOfObject133 = new Object[3];
    IObj localIObj15 = (IObj)Symbol.intern(null, "coll");
    Object[] arrayOfObject134 = new Object[2];
    arrayOfObject134[0] = RT.keyword(null, "tag");
    arrayOfObject134[1] = Symbol.intern(null, "clojure.lang.ITransientAssociative");
    arrayOfObject133[0] = localIObj15.withMeta((IPersistentMap)RT.map(arrayOfObject134));
    arrayOfObject133[1] = Symbol.intern(null, "key");
    arrayOfObject133[2] = Symbol.intern(null, "val");
    arrayOfObject132[0] = RT.vector(arrayOfObject133);
    Object[] arrayOfObject135 = new Object[5];
    IObj localIObj16 = (IObj)Symbol.intern(null, "coll");
    Object[] arrayOfObject136 = new Object[2];
    arrayOfObject136[0] = RT.keyword(null, "tag");
    arrayOfObject136[1] = Symbol.intern(null, "clojure.lang.ITransientAssociative");
    arrayOfObject135[0] = localIObj16.withMeta((IPersistentMap)RT.map(arrayOfObject136));
    arrayOfObject135[1] = Symbol.intern(null, "key");
    arrayOfObject135[2] = Symbol.intern(null, "val");
    arrayOfObject135[3] = Symbol.intern(null, "&");
    arrayOfObject135[4] = Symbol.intern(null, "kvs");
    arrayOfObject132[1] = RT.vector(arrayOfObject135);
    const__1083 = PersistentList.create(Arrays.asList(arrayOfObject132));
    Object[] arrayOfObject137 = new Object[14];
    arrayOfObject137[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject138 = new Object[2];
    Object[] arrayOfObject139 = new Object[3];
    IObj localIObj17 = (IObj)Symbol.intern(null, "coll");
    Object[] arrayOfObject140 = new Object[2];
    arrayOfObject140[0] = RT.keyword(null, "tag");
    arrayOfObject140[1] = Symbol.intern(null, "clojure.lang.ITransientAssociative");
    arrayOfObject139[0] = localIObj17.withMeta((IPersistentMap)RT.map(arrayOfObject140));
    arrayOfObject139[1] = Symbol.intern(null, "key");
    arrayOfObject139[2] = Symbol.intern(null, "val");
    arrayOfObject138[0] = RT.vector(arrayOfObject139);
    Object[] arrayOfObject141 = new Object[5];
    IObj localIObj18 = (IObj)Symbol.intern(null, "coll");
    Object[] arrayOfObject142 = new Object[2];
    arrayOfObject142[0] = RT.keyword(null, "tag");
    arrayOfObject142[1] = Symbol.intern(null, "clojure.lang.ITransientAssociative");
    arrayOfObject141[0] = localIObj18.withMeta((IPersistentMap)RT.map(arrayOfObject142));
    arrayOfObject141[1] = Symbol.intern(null, "key");
    arrayOfObject141[2] = Symbol.intern(null, "val");
    arrayOfObject141[3] = Symbol.intern(null, "&");
    arrayOfObject141[4] = Symbol.intern(null, "kvs");
    arrayOfObject138[1] = RT.vector(arrayOfObject141);
    arrayOfObject137[1] = PersistentList.create(Arrays.asList(arrayOfObject138));
    arrayOfObject137[2] = RT.keyword(null, "column");
    arrayOfObject137[3] = Integer.valueOf(1);
    arrayOfObject137[4] = RT.keyword(null, "added");
    arrayOfObject137[5] = "1.1";
    arrayOfObject137[6] = RT.keyword(null, "static");
    arrayOfObject137[7] = Boolean.TRUE;
    arrayOfObject137[8] = RT.keyword(null, "doc");
    arrayOfObject137[9] = "Alpha - subject to change.\n  When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.";
    arrayOfObject137[10] = RT.keyword(null, "line");
    arrayOfObject137[11] = Integer.valueOf(3007);
    arrayOfObject137[12] = RT.keyword(null, "file");
    arrayOfObject137[13] = "clojure/core.clj";
    const__1084 = (AFn)RT.map(arrayOfObject137);
    const__1085 = (Var)RT.var("clojure.core", "dissoc!");
    const__1086 = Integer.valueOf(3021);
    Object[] arrayOfObject143 = new Object[2];
    Object[] arrayOfObject144 = new Object[2];
    IObj localIObj19 = (IObj)Symbol.intern(null, "map");
    Object[] arrayOfObject145 = new Object[2];
    arrayOfObject145[0] = RT.keyword(null, "tag");
    arrayOfObject145[1] = Symbol.intern(null, "clojure.lang.ITransientMap");
    arrayOfObject144[0] = localIObj19.withMeta((IPersistentMap)RT.map(arrayOfObject145));
    arrayOfObject144[1] = Symbol.intern(null, "key");
    arrayOfObject143[0] = RT.vector(arrayOfObject144);
    Object[] arrayOfObject146 = new Object[4];
    IObj localIObj20 = (IObj)Symbol.intern(null, "map");
    Object[] arrayOfObject147 = new Object[2];
    arrayOfObject147[0] = RT.keyword(null, "tag");
    arrayOfObject147[1] = Symbol.intern(null, "clojure.lang.ITransientMap");
    arrayOfObject146[0] = localIObj20.withMeta((IPersistentMap)RT.map(arrayOfObject147));
    arrayOfObject146[1] = Symbol.intern(null, "key");
    arrayOfObject146[2] = Symbol.intern(null, "&");
    arrayOfObject146[3] = Symbol.intern(null, "ks");
    arrayOfObject143[1] = RT.vector(arrayOfObject146);
    const__1087 = PersistentList.create(Arrays.asList(arrayOfObject143));
    Object[] arrayOfObject148 = new Object[14];
    arrayOfObject148[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject149 = new Object[2];
    Object[] arrayOfObject150 = new Object[2];
    IObj localIObj21 = (IObj)Symbol.intern(null, "map");
    Object[] arrayOfObject151 = new Object[2];
    arrayOfObject151[0] = RT.keyword(null, "tag");
    arrayOfObject151[1] = Symbol.intern(null, "clojure.lang.ITransientMap");
    arrayOfObject150[0] = localIObj21.withMeta((IPersistentMap)RT.map(arrayOfObject151));
    arrayOfObject150[1] = Symbol.intern(null, "key");
    arrayOfObject149[0] = RT.vector(arrayOfObject150);
    Object[] arrayOfObject152 = new Object[4];
    IObj localIObj22 = (IObj)Symbol.intern(null, "map");
    Object[] arrayOfObject153 = new Object[2];
    arrayOfObject153[0] = RT.keyword(null, "tag");
    arrayOfObject153[1] = Symbol.intern(null, "clojure.lang.ITransientMap");
    arrayOfObject152[0] = localIObj22.withMeta((IPersistentMap)RT.map(arrayOfObject153));
    arrayOfObject152[1] = Symbol.intern(null, "key");
    arrayOfObject152[2] = Symbol.intern(null, "&");
    arrayOfObject152[3] = Symbol.intern(null, "ks");
    arrayOfObject149[1] = RT.vector(arrayOfObject152);
    arrayOfObject148[1] = PersistentList.create(Arrays.asList(arrayOfObject149));
    arrayOfObject148[2] = RT.keyword(null, "column");
    arrayOfObject148[3] = Integer.valueOf(1);
    arrayOfObject148[4] = RT.keyword(null, "added");
    arrayOfObject148[5] = "1.1";
    arrayOfObject148[6] = RT.keyword(null, "static");
    arrayOfObject148[7] = Boolean.TRUE;
    arrayOfObject148[8] = RT.keyword(null, "doc");
    arrayOfObject148[9] = "Alpha - subject to change.\n  Returns a transient map that doesn't contain a mapping for key(s).";
    arrayOfObject148[10] = RT.keyword(null, "line");
    arrayOfObject148[11] = Integer.valueOf(3021);
    arrayOfObject148[12] = RT.keyword(null, "file");
    arrayOfObject148[13] = "clojure/core.clj";
    const__1088 = (AFn)RT.map(arrayOfObject148);
    const__1089 = (Var)RT.var("clojure.core", "pop!");
    const__1090 = Integer.valueOf(3033);
    Object[] arrayOfObject154 = new Object[1];
    Object[] arrayOfObject155 = new Object[1];
    IObj localIObj23 = (IObj)Symbol.intern(null, "coll");
    Object[] arrayOfObject156 = new Object[2];
    arrayOfObject156[0] = RT.keyword(null, "tag");
    arrayOfObject156[1] = Symbol.intern(null, "clojure.lang.ITransientVector");
    arrayOfObject155[0] = localIObj23.withMeta((IPersistentMap)RT.map(arrayOfObject156));
    arrayOfObject154[0] = RT.vector(arrayOfObject155);
    const__1091 = PersistentList.create(Arrays.asList(arrayOfObject154));
    Object[] arrayOfObject157 = new Object[14];
    arrayOfObject157[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject158 = new Object[1];
    Object[] arrayOfObject159 = new Object[1];
    IObj localIObj24 = (IObj)Symbol.intern(null, "coll");
    Object[] arrayOfObject160 = new Object[2];
    arrayOfObject160[0] = RT.keyword(null, "tag");
    arrayOfObject160[1] = Symbol.intern(null, "clojure.lang.ITransientVector");
    arrayOfObject159[0] = localIObj24.withMeta((IPersistentMap)RT.map(arrayOfObject160));
    arrayOfObject158[0] = RT.vector(arrayOfObject159);
    arrayOfObject157[1] = PersistentList.create(Arrays.asList(arrayOfObject158));
    arrayOfObject157[2] = RT.keyword(null, "column");
    arrayOfObject157[3] = Integer.valueOf(1);
    arrayOfObject157[4] = RT.keyword(null, "added");
    arrayOfObject157[5] = "1.1";
    arrayOfObject157[6] = RT.keyword(null, "static");
    arrayOfObject157[7] = Boolean.TRUE;
    arrayOfObject157[8] = RT.keyword(null, "doc");
    arrayOfObject157[9] = "Alpha - subject to change.\n  Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns coll";
    arrayOfObject157[10] = RT.keyword(null, "line");
    arrayOfObject157[11] = Integer.valueOf(3033);
    arrayOfObject157[12] = RT.keyword(null, "file");
    arrayOfObject157[13] = "clojure/core.clj";
    const__1092 = (AFn)RT.map(arrayOfObject157);
    const__1093 = (Var)RT.var("clojure.core", "disj!");
    const__1094 = Integer.valueOf(3042);
    Object[] arrayOfObject161 = new Object[3];
    Object[] arrayOfObject162 = new Object[1];
    arrayOfObject162[0] = Symbol.intern(null, "set");
    arrayOfObject161[0] = RT.vector(arrayOfObject162);
    Object[] arrayOfObject163 = new Object[2];
    IObj localIObj25 = (IObj)Symbol.intern(null, "set");
    Object[] arrayOfObject164 = new Object[2];
    arrayOfObject164[0] = RT.keyword(null, "tag");
    arrayOfObject164[1] = Symbol.intern(null, "clojure.lang.ITransientSet");
    arrayOfObject163[0] = localIObj25.withMeta((IPersistentMap)RT.map(arrayOfObject164));
    arrayOfObject163[1] = Symbol.intern(null, "key");
    arrayOfObject161[1] = RT.vector(arrayOfObject163);
    Object[] arrayOfObject165 = new Object[4];
    IObj localIObj26 = (IObj)Symbol.intern(null, "set");
    Object[] arrayOfObject166 = new Object[2];
    arrayOfObject166[0] = RT.keyword(null, "tag");
    arrayOfObject166[1] = Symbol.intern(null, "clojure.lang.ITransientSet");
    arrayOfObject165[0] = localIObj26.withMeta((IPersistentMap)RT.map(arrayOfObject166));
    arrayOfObject165[1] = Symbol.intern(null, "key");
    arrayOfObject165[2] = Symbol.intern(null, "&");
    arrayOfObject165[3] = Symbol.intern(null, "ks");
    arrayOfObject161[2] = RT.vector(arrayOfObject165);
    const__1095 = PersistentList.create(Arrays.asList(arrayOfObject161));
    Object[] arrayOfObject167 = new Object[14];
    arrayOfObject167[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject168 = new Object[3];
    Object[] arrayOfObject169 = new Object[1];
    arrayOfObject169[0] = Symbol.intern(null, "set");
    arrayOfObject168[0] = RT.vector(arrayOfObject169);
    Object[] arrayOfObject170 = new Object[2];
    IObj localIObj27 = (IObj)Symbol.intern(null, "set");
    Object[] arrayOfObject171 = new Object[2];
    arrayOfObject171[0] = RT.keyword(null, "tag");
    arrayOfObject171[1] = Symbol.intern(null, "clojure.lang.ITransientSet");
    arrayOfObject170[0] = localIObj27.withMeta((IPersistentMap)RT.map(arrayOfObject171));
    arrayOfObject170[1] = Symbol.intern(null, "key");
    arrayOfObject168[1] = RT.vector(arrayOfObject170);
    Object[] arrayOfObject172 = new Object[4];
    IObj localIObj28 = (IObj)Symbol.intern(null, "set");
    Object[] arrayOfObject173 = new Object[2];
    arrayOfObject173[0] = RT.keyword(null, "tag");
    arrayOfObject173[1] = Symbol.intern(null, "clojure.lang.ITransientSet");
    arrayOfObject172[0] = localIObj28.withMeta((IPersistentMap)RT.map(arrayOfObject173));
    arrayOfObject172[1] = Symbol.intern(null, "key");
    arrayOfObject172[2] = Symbol.intern(null, "&");
    arrayOfObject172[3] = Symbol.intern(null, "ks");
    arrayOfObject168[2] = RT.vector(arrayOfObject172);
    arrayOfObject167[1] = PersistentList.create(Arrays.asList(arrayOfObject168));
    arrayOfObject167[2] = RT.keyword(null, "column");
    arrayOfObject167[3] = Integer.valueOf(1);
    arrayOfObject167[4] = RT.keyword(null, "added");
    arrayOfObject167[5] = "1.1";
    arrayOfObject167[6] = RT.keyword(null, "static");
    arrayOfObject167[7] = Boolean.TRUE;
    arrayOfObject167[8] = RT.keyword(null, "doc");
    arrayOfObject167[9] = "Alpha - subject to change.\n  disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).";
    arrayOfObject167[10] = RT.keyword(null, "line");
    arrayOfObject167[11] = Integer.valueOf(3042);
    arrayOfObject167[12] = RT.keyword(null, "file");
    arrayOfObject167[13] = "clojure/core.clj";
    const__1096 = (AFn)RT.map(arrayOfObject167);
    const__1097 = (Var)RT.var("clojure.core", "into1");
    const__1098 = Integer.valueOf(3058);
    Object[] arrayOfObject174 = new Object[1];
    Object[] arrayOfObject175 = new Object[2];
    arrayOfObject175[0] = Symbol.intern(null, "to");
    arrayOfObject175[1] = Symbol.intern(null, "from");
    arrayOfObject174[0] = RT.vector(arrayOfObject175);
    const__1099 = PersistentList.create(Arrays.asList(arrayOfObject174));
  }

  public static void __init11()
  {
    Object[] arrayOfObject1 = new Object[16];
    arrayOfObject1[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject2 = new Object[1];
    Object[] arrayOfObject3 = new Object[2];
    arrayOfObject3[0] = Symbol.intern(null, "to");
    arrayOfObject3[1] = Symbol.intern(null, "from");
    arrayOfObject2[0] = RT.vector(arrayOfObject3);
    arrayOfObject1[1] = PersistentList.create(Arrays.asList(arrayOfObject2));
    arrayOfObject1[2] = RT.keyword(null, "column");
    arrayOfObject1[3] = Integer.valueOf(1);
    arrayOfObject1[4] = RT.keyword(null, "added");
    arrayOfObject1[5] = "1.0";
    arrayOfObject1[6] = RT.keyword(null, "private");
    arrayOfObject1[7] = Boolean.TRUE;
    arrayOfObject1[8] = RT.keyword(null, "static");
    arrayOfObject1[9] = Boolean.TRUE;
    arrayOfObject1[10] = RT.keyword(null, "doc");
    arrayOfObject1[11] = "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined.";
    arrayOfObject1[12] = RT.keyword(null, "line");
    arrayOfObject1[13] = Integer.valueOf(3058);
    arrayOfObject1[14] = RT.keyword(null, "file");
    arrayOfObject1[15] = "clojure/core.clj";
    const__1100 = (AFn)RT.map(arrayOfObject1);
    const__1101 = (Var)RT.var("clojure.core", "import");
    const__1102 = Integer.valueOf(3068);
    Object[] arrayOfObject4 = new Object[1];
    Object[] arrayOfObject5 = new Object[2];
    arrayOfObject5[0] = Symbol.intern(null, "&");
    arrayOfObject5[1] = Symbol.intern(null, "import-symbols-or-lists");
    arrayOfObject4[0] = RT.vector(arrayOfObject5);
    const__1103 = PersistentList.create(Arrays.asList(arrayOfObject4));
    Object[] arrayOfObject6 = new Object[12];
    arrayOfObject6[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject7 = new Object[1];
    Object[] arrayOfObject8 = new Object[2];
    arrayOfObject8[0] = Symbol.intern(null, "&");
    arrayOfObject8[1] = Symbol.intern(null, "import-symbols-or-lists");
    arrayOfObject7[0] = RT.vector(arrayOfObject8);
    arrayOfObject6[1] = PersistentList.create(Arrays.asList(arrayOfObject7));
    arrayOfObject6[2] = RT.keyword(null, "column");
    arrayOfObject6[3] = Integer.valueOf(1);
    arrayOfObject6[4] = RT.keyword(null, "added");
    arrayOfObject6[5] = "1.0";
    arrayOfObject6[6] = RT.keyword(null, "doc");
    arrayOfObject6[7] = "import-list => (package-symbol class-name-symbols*)\n\n  For each name in class-name-symbols, adds a mapping from name to the\n  class named by package.name to the current namespace. Use :import in the ns\n  macro in preference to calling this directly.";
    arrayOfObject6[8] = RT.keyword(null, "line");
    arrayOfObject6[9] = Integer.valueOf(3068);
    arrayOfObject6[10] = RT.keyword(null, "file");
    arrayOfObject6[11] = "clojure/core.clj";
    const__1104 = (AFn)RT.map(arrayOfObject6);
    const__1105 = (Var)RT.var("clojure.core", "into-array");
    const__1106 = Integer.valueOf(3086);
    Object[] arrayOfObject9 = new Object[2];
    Object[] arrayOfObject10 = new Object[1];
    arrayOfObject10[0] = Symbol.intern(null, "aseq");
    arrayOfObject9[0] = RT.vector(arrayOfObject10);
    Object[] arrayOfObject11 = new Object[2];
    arrayOfObject11[0] = Symbol.intern(null, "type");
    arrayOfObject11[1] = Symbol.intern(null, "aseq");
    arrayOfObject9[1] = RT.vector(arrayOfObject11);
    const__1107 = PersistentList.create(Arrays.asList(arrayOfObject9));
    Object[] arrayOfObject12 = new Object[14];
    arrayOfObject12[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject13 = new Object[2];
    Object[] arrayOfObject14 = new Object[1];
    arrayOfObject14[0] = Symbol.intern(null, "aseq");
    arrayOfObject13[0] = RT.vector(arrayOfObject14);
    Object[] arrayOfObject15 = new Object[2];
    arrayOfObject15[0] = Symbol.intern(null, "type");
    arrayOfObject15[1] = Symbol.intern(null, "aseq");
    arrayOfObject13[1] = RT.vector(arrayOfObject15);
    arrayOfObject12[1] = PersistentList.create(Arrays.asList(arrayOfObject13));
    arrayOfObject12[2] = RT.keyword(null, "column");
    arrayOfObject12[3] = Integer.valueOf(1);
    arrayOfObject12[4] = RT.keyword(null, "added");
    arrayOfObject12[5] = "1.0";
    arrayOfObject12[6] = RT.keyword(null, "static");
    arrayOfObject12[7] = Boolean.TRUE;
    arrayOfObject12[8] = RT.keyword(null, "doc");
    arrayOfObject12[9] = "Returns an array with components set to the values in aseq. The array's\n  component type is type if provided, or the type of the first value in\n  aseq if present, or Object. All values in aseq must be compatible with\n  the component type. Class objects for the primitive types can be obtained\n  using, e.g., Integer/TYPE.";
    arrayOfObject12[10] = RT.keyword(null, "line");
    arrayOfObject12[11] = Integer.valueOf(3086);
    arrayOfObject12[12] = RT.keyword(null, "file");
    arrayOfObject12[13] = "clojure/core.clj";
    const__1108 = (AFn)RT.map(arrayOfObject12);
    const__1109 = (Var)RT.var("clojure.core", "array");
    const__1110 = Integer.valueOf(3099);
    Object[] arrayOfObject16 = new Object[1];
    Object[] arrayOfObject17 = new Object[2];
    arrayOfObject17[0] = Symbol.intern(null, "&");
    arrayOfObject17[1] = Symbol.intern(null, "items");
    arrayOfObject16[0] = RT.vector(arrayOfObject17);
    const__1111 = PersistentList.create(Arrays.asList(arrayOfObject16));
    Object[] arrayOfObject18 = new Object[10];
    arrayOfObject18[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject19 = new Object[1];
    Object[] arrayOfObject20 = new Object[2];
    arrayOfObject20[0] = Symbol.intern(null, "&");
    arrayOfObject20[1] = Symbol.intern(null, "items");
    arrayOfObject19[0] = RT.vector(arrayOfObject20);
    arrayOfObject18[1] = PersistentList.create(Arrays.asList(arrayOfObject19));
    arrayOfObject18[2] = RT.keyword(null, "column");
    arrayOfObject18[3] = Integer.valueOf(1);
    arrayOfObject18[4] = RT.keyword(null, "private");
    arrayOfObject18[5] = Boolean.TRUE;
    arrayOfObject18[6] = RT.keyword(null, "line");
    arrayOfObject18[7] = Integer.valueOf(3099);
    arrayOfObject18[8] = RT.keyword(null, "file");
    arrayOfObject18[9] = "clojure/core.clj";
    const__1112 = (AFn)RT.map(arrayOfObject18);
    const__1113 = (Var)RT.var("clojure.core", "class");
    const__1114 = Integer.valueOf(3103);
    Object[] arrayOfObject21 = new Object[1];
    Object[] arrayOfObject22 = new Object[1];
    IObj localIObj1 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject23 = new Object[2];
    arrayOfObject23[0] = RT.keyword(null, "tag");
    arrayOfObject23[1] = Symbol.intern(null, "Object");
    arrayOfObject22[0] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject23));
    IObj localIObj2 = (IObj)RT.vector(arrayOfObject22);
    Object[] arrayOfObject24 = new Object[2];
    arrayOfObject24[0] = RT.keyword(null, "tag");
    arrayOfObject24[1] = Symbol.intern(null, "Class");
    arrayOfObject21[0] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject24));
    const__1115 = PersistentList.create(Arrays.asList(arrayOfObject21));
    Object[] arrayOfObject25 = new Object[14];
    arrayOfObject25[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject26 = new Object[1];
    Object[] arrayOfObject27 = new Object[1];
    IObj localIObj3 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject28 = new Object[2];
    arrayOfObject28[0] = RT.keyword(null, "tag");
    arrayOfObject28[1] = Symbol.intern(null, "Object");
    arrayOfObject27[0] = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject28));
    IObj localIObj4 = (IObj)RT.vector(arrayOfObject27);
    Object[] arrayOfObject29 = new Object[2];
    arrayOfObject29[0] = RT.keyword(null, "tag");
    arrayOfObject29[1] = Symbol.intern(null, "Class");
    arrayOfObject26[0] = localIObj4.withMeta((IPersistentMap)RT.map(arrayOfObject29));
    arrayOfObject25[1] = PersistentList.create(Arrays.asList(arrayOfObject26));
    arrayOfObject25[2] = RT.keyword(null, "column");
    arrayOfObject25[3] = Integer.valueOf(1);
    arrayOfObject25[4] = RT.keyword(null, "added");
    arrayOfObject25[5] = "1.0";
    arrayOfObject25[6] = RT.keyword(null, "static");
    arrayOfObject25[7] = Boolean.TRUE;
    arrayOfObject25[8] = RT.keyword(null, "doc");
    arrayOfObject25[9] = "Returns the Class of x";
    arrayOfObject25[10] = RT.keyword(null, "line");
    arrayOfObject25[11] = Integer.valueOf(3103);
    arrayOfObject25[12] = RT.keyword(null, "file");
    arrayOfObject25[13] = "clojure/core.clj";
    const__1116 = (AFn)RT.map(arrayOfObject25);
    const__1117 = (Var)RT.var("clojure.core", "type");
    const__1118 = Integer.valueOf(3109);
    Object[] arrayOfObject30 = new Object[1];
    Object[] arrayOfObject31 = new Object[1];
    arrayOfObject31[0] = Symbol.intern(null, "x");
    arrayOfObject30[0] = RT.vector(arrayOfObject31);
    const__1119 = PersistentList.create(Arrays.asList(arrayOfObject30));
    Object[] arrayOfObject32 = new Object[14];
    arrayOfObject32[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject33 = new Object[1];
    Object[] arrayOfObject34 = new Object[1];
    arrayOfObject34[0] = Symbol.intern(null, "x");
    arrayOfObject33[0] = RT.vector(arrayOfObject34);
    arrayOfObject32[1] = PersistentList.create(Arrays.asList(arrayOfObject33));
    arrayOfObject32[2] = RT.keyword(null, "column");
    arrayOfObject32[3] = Integer.valueOf(1);
    arrayOfObject32[4] = RT.keyword(null, "added");
    arrayOfObject32[5] = "1.0";
    arrayOfObject32[6] = RT.keyword(null, "static");
    arrayOfObject32[7] = Boolean.TRUE;
    arrayOfObject32[8] = RT.keyword(null, "doc");
    arrayOfObject32[9] = "Returns the :type metadata of x, or its Class if none";
    arrayOfObject32[10] = RT.keyword(null, "line");
    arrayOfObject32[11] = Integer.valueOf(3109);
    arrayOfObject32[12] = RT.keyword(null, "file");
    arrayOfObject32[13] = "clojure/core.clj";
    const__1120 = (AFn)RT.map(arrayOfObject32);
    const__1121 = (Var)RT.var("clojure.core", "num");
    const__1122 = Integer.valueOf(3116);
    Object[] arrayOfObject35 = new Object[1];
    Object[] arrayOfObject36 = new Object[1];
    arrayOfObject36[0] = Symbol.intern(null, "x");
    arrayOfObject35[0] = RT.vector(arrayOfObject36);
    const__1123 = PersistentList.create(Arrays.asList(arrayOfObject35));
    const__1124 = Class.forName("java.lang.Number");
    const__1125 = (Var)RT.var("clojure.core", "long");
    const__1126 = Integer.valueOf(3123);
    Object[] arrayOfObject37 = new Object[1];
    Object[] arrayOfObject38 = new Object[1];
    IObj localIObj5 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject39 = new Object[2];
    arrayOfObject39[0] = RT.keyword(null, "tag");
    arrayOfObject39[1] = Symbol.intern(null, "Number");
    arrayOfObject38[0] = localIObj5.withMeta((IPersistentMap)RT.map(arrayOfObject39));
    arrayOfObject37[0] = RT.vector(arrayOfObject38);
    const__1127 = PersistentList.create(Arrays.asList(arrayOfObject37));
    const__1128 = (Var)RT.var("clojure.core", "float");
    const__1129 = Integer.valueOf(3129);
    Object[] arrayOfObject40 = new Object[1];
    Object[] arrayOfObject41 = new Object[1];
    IObj localIObj6 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject42 = new Object[2];
    arrayOfObject42[0] = RT.keyword(null, "tag");
    arrayOfObject42[1] = Symbol.intern(null, "Number");
    arrayOfObject41[0] = localIObj6.withMeta((IPersistentMap)RT.map(arrayOfObject42));
    arrayOfObject40[0] = RT.vector(arrayOfObject41);
    const__1130 = PersistentList.create(Arrays.asList(arrayOfObject40));
    const__1131 = (Var)RT.var("clojure.core", "double");
    const__1132 = Integer.valueOf(3135);
    Object[] arrayOfObject43 = new Object[1];
    Object[] arrayOfObject44 = new Object[1];
    IObj localIObj7 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject45 = new Object[2];
    arrayOfObject45[0] = RT.keyword(null, "tag");
    arrayOfObject45[1] = Symbol.intern(null, "Number");
    arrayOfObject44[0] = localIObj7.withMeta((IPersistentMap)RT.map(arrayOfObject45));
    arrayOfObject43[0] = RT.vector(arrayOfObject44);
    const__1133 = PersistentList.create(Arrays.asList(arrayOfObject43));
    const__1134 = (Var)RT.var("clojure.core", "short");
    const__1135 = Integer.valueOf(3141);
    Object[] arrayOfObject46 = new Object[1];
    Object[] arrayOfObject47 = new Object[1];
    IObj localIObj8 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject48 = new Object[2];
    arrayOfObject48[0] = RT.keyword(null, "tag");
    arrayOfObject48[1] = Symbol.intern(null, "Number");
    arrayOfObject47[0] = localIObj8.withMeta((IPersistentMap)RT.map(arrayOfObject48));
    arrayOfObject46[0] = RT.vector(arrayOfObject47);
    const__1136 = PersistentList.create(Arrays.asList(arrayOfObject46));
    const__1137 = (Var)RT.var("clojure.core", "byte");
    const__1138 = Integer.valueOf(3147);
    Object[] arrayOfObject49 = new Object[1];
    Object[] arrayOfObject50 = new Object[1];
    IObj localIObj9 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject51 = new Object[2];
    arrayOfObject51[0] = RT.keyword(null, "tag");
    arrayOfObject51[1] = Symbol.intern(null, "Number");
    arrayOfObject50[0] = localIObj9.withMeta((IPersistentMap)RT.map(arrayOfObject51));
    arrayOfObject49[0] = RT.vector(arrayOfObject50);
    const__1139 = PersistentList.create(Arrays.asList(arrayOfObject49));
    const__1140 = (Var)RT.var("clojure.core", "char");
    const__1141 = Integer.valueOf(3153);
    Object[] arrayOfObject52 = new Object[1];
    Object[] arrayOfObject53 = new Object[1];
    arrayOfObject53[0] = Symbol.intern(null, "x");
    arrayOfObject52[0] = RT.vector(arrayOfObject53);
    const__1142 = PersistentList.create(Arrays.asList(arrayOfObject52));
    const__1143 = (Var)RT.var("clojure.core", "boolean");
    const__1144 = Integer.valueOf(3159);
    Object[] arrayOfObject54 = new Object[1];
    Object[] arrayOfObject55 = new Object[1];
    arrayOfObject55[0] = Symbol.intern(null, "x");
    arrayOfObject54[0] = RT.vector(arrayOfObject55);
    const__1145 = PersistentList.create(Arrays.asList(arrayOfObject54));
    const__1146 = (Var)RT.var("clojure.core", "unchecked-byte");
    const__1147 = Integer.valueOf(3166);
    Object[] arrayOfObject56 = new Object[1];
    Object[] arrayOfObject57 = new Object[1];
    IObj localIObj10 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject58 = new Object[2];
    arrayOfObject58[0] = RT.keyword(null, "tag");
    arrayOfObject58[1] = Symbol.intern(null, "Number");
    arrayOfObject57[0] = localIObj10.withMeta((IPersistentMap)RT.map(arrayOfObject58));
    arrayOfObject56[0] = RT.vector(arrayOfObject57);
    const__1148 = PersistentList.create(Arrays.asList(arrayOfObject56));
    const__1149 = (Var)RT.var("clojure.core", "unchecked-short");
    const__1150 = Integer.valueOf(3172);
    Object[] arrayOfObject59 = new Object[1];
    Object[] arrayOfObject60 = new Object[1];
    IObj localIObj11 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject61 = new Object[2];
    arrayOfObject61[0] = RT.keyword(null, "tag");
    arrayOfObject61[1] = Symbol.intern(null, "Number");
    arrayOfObject60[0] = localIObj11.withMeta((IPersistentMap)RT.map(arrayOfObject61));
    arrayOfObject59[0] = RT.vector(arrayOfObject60);
    const__1151 = PersistentList.create(Arrays.asList(arrayOfObject59));
    const__1152 = (Var)RT.var("clojure.core", "unchecked-char");
    const__1153 = Integer.valueOf(3178);
    Object[] arrayOfObject62 = new Object[1];
    Object[] arrayOfObject63 = new Object[1];
    arrayOfObject63[0] = Symbol.intern(null, "x");
    arrayOfObject62[0] = RT.vector(arrayOfObject63);
    const__1154 = PersistentList.create(Arrays.asList(arrayOfObject62));
    const__1155 = (Var)RT.var("clojure.core", "unchecked-int");
    const__1156 = Integer.valueOf(3184);
    Object[] arrayOfObject64 = new Object[1];
    Object[] arrayOfObject65 = new Object[1];
    IObj localIObj12 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject66 = new Object[2];
    arrayOfObject66[0] = RT.keyword(null, "tag");
    arrayOfObject66[1] = Symbol.intern(null, "Number");
    arrayOfObject65[0] = localIObj12.withMeta((IPersistentMap)RT.map(arrayOfObject66));
    arrayOfObject64[0] = RT.vector(arrayOfObject65);
    const__1157 = PersistentList.create(Arrays.asList(arrayOfObject64));
    const__1158 = (Var)RT.var("clojure.core", "unchecked-long");
    const__1159 = Integer.valueOf(3190);
    Object[] arrayOfObject67 = new Object[1];
    Object[] arrayOfObject68 = new Object[1];
    IObj localIObj13 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject69 = new Object[2];
    arrayOfObject69[0] = RT.keyword(null, "tag");
    arrayOfObject69[1] = Symbol.intern(null, "Number");
    arrayOfObject68[0] = localIObj13.withMeta((IPersistentMap)RT.map(arrayOfObject69));
    arrayOfObject67[0] = RT.vector(arrayOfObject68);
    const__1160 = PersistentList.create(Arrays.asList(arrayOfObject67));
    const__1161 = (Var)RT.var("clojure.core", "unchecked-float");
    const__1162 = Integer.valueOf(3196);
    Object[] arrayOfObject70 = new Object[1];
    Object[] arrayOfObject71 = new Object[1];
    IObj localIObj14 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject72 = new Object[2];
    arrayOfObject72[0] = RT.keyword(null, "tag");
    arrayOfObject72[1] = Symbol.intern(null, "Number");
    arrayOfObject71[0] = localIObj14.withMeta((IPersistentMap)RT.map(arrayOfObject72));
    arrayOfObject70[0] = RT.vector(arrayOfObject71);
    const__1163 = PersistentList.create(Arrays.asList(arrayOfObject70));
    const__1164 = (Var)RT.var("clojure.core", "unchecked-double");
    const__1165 = Integer.valueOf(3202);
    Object[] arrayOfObject73 = new Object[1];
    Object[] arrayOfObject74 = new Object[1];
    IObj localIObj15 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject75 = new Object[2];
    arrayOfObject75[0] = RT.keyword(null, "tag");
    arrayOfObject75[1] = Symbol.intern(null, "Number");
    arrayOfObject74[0] = localIObj15.withMeta((IPersistentMap)RT.map(arrayOfObject75));
    arrayOfObject73[0] = RT.vector(arrayOfObject74);
    const__1166 = PersistentList.create(Arrays.asList(arrayOfObject73));
    const__1167 = (Var)RT.var("clojure.core", "number?");
    const__1168 = Integer.valueOf(3209);
    Object[] arrayOfObject76 = new Object[1];
    Object[] arrayOfObject77 = new Object[1];
    arrayOfObject77[0] = Symbol.intern(null, "x");
    arrayOfObject76[0] = RT.vector(arrayOfObject77);
    const__1169 = PersistentList.create(Arrays.asList(arrayOfObject76));
    Object[] arrayOfObject78 = new Object[14];
    arrayOfObject78[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject79 = new Object[1];
    Object[] arrayOfObject80 = new Object[1];
    arrayOfObject80[0] = Symbol.intern(null, "x");
    arrayOfObject79[0] = RT.vector(arrayOfObject80);
    arrayOfObject78[1] = PersistentList.create(Arrays.asList(arrayOfObject79));
    arrayOfObject78[2] = RT.keyword(null, "column");
    arrayOfObject78[3] = Integer.valueOf(1);
    arrayOfObject78[4] = RT.keyword(null, "added");
    arrayOfObject78[5] = "1.0";
    arrayOfObject78[6] = RT.keyword(null, "static");
    arrayOfObject78[7] = Boolean.TRUE;
    arrayOfObject78[8] = RT.keyword(null, "doc");
    arrayOfObject78[9] = "Returns true if x is a Number";
    arrayOfObject78[10] = RT.keyword(null, "line");
    arrayOfObject78[11] = Integer.valueOf(3209);
    arrayOfObject78[12] = RT.keyword(null, "file");
    arrayOfObject78[13] = "clojure/core.clj";
    const__1170 = (AFn)RT.map(arrayOfObject78);
    const__1171 = (Var)RT.var("clojure.core", "mod");
    const__1172 = Integer.valueOf(3216);
    Object[] arrayOfObject81 = new Object[1];
    Object[] arrayOfObject82 = new Object[2];
    arrayOfObject82[0] = Symbol.intern(null, "num");
    arrayOfObject82[1] = Symbol.intern(null, "div");
    arrayOfObject81[0] = RT.vector(arrayOfObject82);
    const__1173 = PersistentList.create(Arrays.asList(arrayOfObject81));
    Object[] arrayOfObject83 = new Object[14];
    arrayOfObject83[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject84 = new Object[1];
    Object[] arrayOfObject85 = new Object[2];
    arrayOfObject85[0] = Symbol.intern(null, "num");
    arrayOfObject85[1] = Symbol.intern(null, "div");
    arrayOfObject84[0] = RT.vector(arrayOfObject85);
    arrayOfObject83[1] = PersistentList.create(Arrays.asList(arrayOfObject84));
    arrayOfObject83[2] = RT.keyword(null, "column");
    arrayOfObject83[3] = Integer.valueOf(1);
    arrayOfObject83[4] = RT.keyword(null, "added");
    arrayOfObject83[5] = "1.0";
    arrayOfObject83[6] = RT.keyword(null, "static");
    arrayOfObject83[7] = Boolean.TRUE;
    arrayOfObject83[8] = RT.keyword(null, "doc");
    arrayOfObject83[9] = "Modulus of num and div. Truncates toward negative infinity.";
    arrayOfObject83[10] = RT.keyword(null, "line");
    arrayOfObject83[11] = Integer.valueOf(3216);
    arrayOfObject83[12] = RT.keyword(null, "file");
    arrayOfObject83[13] = "clojure/core.clj";
    const__1174 = (AFn)RT.map(arrayOfObject83);
    const__1175 = (Var)RT.var("clojure.core", "ratio?");
    const__1176 = Integer.valueOf(3226);
    Object[] arrayOfObject86 = new Object[1];
    Object[] arrayOfObject87 = new Object[1];
    arrayOfObject87[0] = Symbol.intern(null, "n");
    arrayOfObject86[0] = RT.vector(arrayOfObject87);
    const__1177 = PersistentList.create(Arrays.asList(arrayOfObject86));
    Object[] arrayOfObject88 = new Object[14];
    arrayOfObject88[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject89 = new Object[1];
    Object[] arrayOfObject90 = new Object[1];
    arrayOfObject90[0] = Symbol.intern(null, "n");
    arrayOfObject89[0] = RT.vector(arrayOfObject90);
    arrayOfObject88[1] = PersistentList.create(Arrays.asList(arrayOfObject89));
    arrayOfObject88[2] = RT.keyword(null, "column");
    arrayOfObject88[3] = Integer.valueOf(1);
    arrayOfObject88[4] = RT.keyword(null, "added");
    arrayOfObject88[5] = "1.0";
    arrayOfObject88[6] = RT.keyword(null, "static");
    arrayOfObject88[7] = Boolean.TRUE;
    arrayOfObject88[8] = RT.keyword(null, "doc");
    arrayOfObject88[9] = "Returns true if n is a Ratio";
    arrayOfObject88[10] = RT.keyword(null, "line");
    arrayOfObject88[11] = Integer.valueOf(3226);
    arrayOfObject88[12] = RT.keyword(null, "file");
    arrayOfObject88[13] = "clojure/core.clj";
    const__1178 = (AFn)RT.map(arrayOfObject88);
    const__1179 = (Var)RT.var("clojure.core", "numerator");
    const__1180 = Integer.valueOf(3232);
    Object[] arrayOfObject91 = new Object[1];
    Object[] arrayOfObject92 = new Object[1];
    arrayOfObject92[0] = Symbol.intern(null, "r");
    arrayOfObject91[0] = RT.vector(arrayOfObject92);
    const__1181 = PersistentList.create(Arrays.asList(arrayOfObject91));
    const__1182 = Class.forName("java.math.BigInteger");
    Object[] arrayOfObject93 = new Object[16];
    arrayOfObject93[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject94 = new Object[1];
    Object[] arrayOfObject95 = new Object[1];
    arrayOfObject95[0] = Symbol.intern(null, "r");
    arrayOfObject94[0] = RT.vector(arrayOfObject95);
    arrayOfObject93[1] = PersistentList.create(Arrays.asList(arrayOfObject94));
    arrayOfObject93[2] = RT.keyword(null, "column");
    arrayOfObject93[3] = Integer.valueOf(1);
    arrayOfObject93[4] = RT.keyword(null, "added");
    arrayOfObject93[5] = "1.2";
    arrayOfObject93[6] = RT.keyword(null, "static");
    arrayOfObject93[7] = Boolean.TRUE;
    arrayOfObject93[8] = RT.keyword(null, "doc");
    arrayOfObject93[9] = "Returns the numerator part of a Ratio.";
    arrayOfObject93[10] = RT.keyword(null, "line");
    arrayOfObject93[11] = Integer.valueOf(3232);
    arrayOfObject93[12] = RT.keyword(null, "file");
    arrayOfObject93[13] = "clojure/core.clj";
    arrayOfObject93[14] = RT.keyword(null, "tag");
    arrayOfObject93[15] = Class.forName("java.math.BigInteger");
    const__1183 = (AFn)RT.map(arrayOfObject93);
    const__1184 = (Var)RT.var("clojure.core", "denominator");
    const__1185 = Integer.valueOf(3240);
    Object[] arrayOfObject96 = new Object[1];
    Object[] arrayOfObject97 = new Object[1];
    arrayOfObject97[0] = Symbol.intern(null, "r");
    arrayOfObject96[0] = RT.vector(arrayOfObject97);
    const__1186 = PersistentList.create(Arrays.asList(arrayOfObject96));
    Object[] arrayOfObject98 = new Object[16];
    arrayOfObject98[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject99 = new Object[1];
    Object[] arrayOfObject100 = new Object[1];
    arrayOfObject100[0] = Symbol.intern(null, "r");
    arrayOfObject99[0] = RT.vector(arrayOfObject100);
    arrayOfObject98[1] = PersistentList.create(Arrays.asList(arrayOfObject99));
    arrayOfObject98[2] = RT.keyword(null, "column");
    arrayOfObject98[3] = Integer.valueOf(1);
    arrayOfObject98[4] = RT.keyword(null, "added");
    arrayOfObject98[5] = "1.2";
    arrayOfObject98[6] = RT.keyword(null, "static");
    arrayOfObject98[7] = Boolean.TRUE;
    arrayOfObject98[8] = RT.keyword(null, "doc");
    arrayOfObject98[9] = "Returns the denominator part of a Ratio.";
    arrayOfObject98[10] = RT.keyword(null, "line");
    arrayOfObject98[11] = Integer.valueOf(3240);
    arrayOfObject98[12] = RT.keyword(null, "file");
    arrayOfObject98[13] = "clojure/core.clj";
    arrayOfObject98[14] = RT.keyword(null, "tag");
    arrayOfObject98[15] = Class.forName("java.math.BigInteger");
    const__1187 = (AFn)RT.map(arrayOfObject98);
    const__1188 = (Var)RT.var("clojure.core", "decimal?");
    const__1189 = Integer.valueOf(3248);
    Object[] arrayOfObject101 = new Object[1];
    Object[] arrayOfObject102 = new Object[1];
    arrayOfObject102[0] = Symbol.intern(null, "n");
    arrayOfObject101[0] = RT.vector(arrayOfObject102);
    const__1190 = PersistentList.create(Arrays.asList(arrayOfObject101));
    Object[] arrayOfObject103 = new Object[14];
    arrayOfObject103[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject104 = new Object[1];
    Object[] arrayOfObject105 = new Object[1];
    arrayOfObject105[0] = Symbol.intern(null, "n");
    arrayOfObject104[0] = RT.vector(arrayOfObject105);
    arrayOfObject103[1] = PersistentList.create(Arrays.asList(arrayOfObject104));
    arrayOfObject103[2] = RT.keyword(null, "column");
    arrayOfObject103[3] = Integer.valueOf(1);
    arrayOfObject103[4] = RT.keyword(null, "added");
    arrayOfObject103[5] = "1.0";
    arrayOfObject103[6] = RT.keyword(null, "static");
    arrayOfObject103[7] = Boolean.TRUE;
    arrayOfObject103[8] = RT.keyword(null, "doc");
    arrayOfObject103[9] = "Returns true if n is a BigDecimal";
    arrayOfObject103[10] = RT.keyword(null, "line");
    arrayOfObject103[11] = Integer.valueOf(3248);
    arrayOfObject103[12] = RT.keyword(null, "file");
    arrayOfObject103[13] = "clojure/core.clj";
    const__1191 = (AFn)RT.map(arrayOfObject103);
    const__1192 = (Var)RT.var("clojure.core", "float?");
    const__1193 = Integer.valueOf(3254);
    Object[] arrayOfObject106 = new Object[1];
    Object[] arrayOfObject107 = new Object[1];
    arrayOfObject107[0] = Symbol.intern(null, "n");
    arrayOfObject106[0] = RT.vector(arrayOfObject107);
    const__1194 = PersistentList.create(Arrays.asList(arrayOfObject106));
    Object[] arrayOfObject108 = new Object[14];
    arrayOfObject108[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject109 = new Object[1];
    Object[] arrayOfObject110 = new Object[1];
    arrayOfObject110[0] = Symbol.intern(null, "n");
    arrayOfObject109[0] = RT.vector(arrayOfObject110);
    arrayOfObject108[1] = PersistentList.create(Arrays.asList(arrayOfObject109));
    arrayOfObject108[2] = RT.keyword(null, "column");
    arrayOfObject108[3] = Integer.valueOf(1);
    arrayOfObject108[4] = RT.keyword(null, "added");
    arrayOfObject108[5] = "1.0";
    arrayOfObject108[6] = RT.keyword(null, "static");
    arrayOfObject108[7] = Boolean.TRUE;
    arrayOfObject108[8] = RT.keyword(null, "doc");
    arrayOfObject108[9] = "Returns true if n is a floating point number";
    arrayOfObject108[10] = RT.keyword(null, "line");
    arrayOfObject108[11] = Integer.valueOf(3254);
    arrayOfObject108[12] = RT.keyword(null, "file");
    arrayOfObject108[13] = "clojure/core.clj";
    const__1195 = (AFn)RT.map(arrayOfObject108);
    const__1196 = (Var)RT.var("clojure.core", "rational?");
    const__1197 = Integer.valueOf(3262);
    Object[] arrayOfObject111 = new Object[1];
    Object[] arrayOfObject112 = new Object[1];
    arrayOfObject112[0] = Symbol.intern(null, "n");
    arrayOfObject111[0] = RT.vector(arrayOfObject112);
    const__1198 = PersistentList.create(Arrays.asList(arrayOfObject111));
    Object[] arrayOfObject113 = new Object[14];
    arrayOfObject113[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject114 = new Object[1];
    Object[] arrayOfObject115 = new Object[1];
    arrayOfObject115[0] = Symbol.intern(null, "n");
    arrayOfObject114[0] = RT.vector(arrayOfObject115);
    arrayOfObject113[1] = PersistentList.create(Arrays.asList(arrayOfObject114));
    arrayOfObject113[2] = RT.keyword(null, "column");
    arrayOfObject113[3] = Integer.valueOf(1);
    arrayOfObject113[4] = RT.keyword(null, "added");
    arrayOfObject113[5] = "1.0";
    arrayOfObject113[6] = RT.keyword(null, "static");
    arrayOfObject113[7] = Boolean.TRUE;
    arrayOfObject113[8] = RT.keyword(null, "doc");
    arrayOfObject113[9] = "Returns true if n is a rational number";
    arrayOfObject113[10] = RT.keyword(null, "line");
    arrayOfObject113[11] = Integer.valueOf(3262);
    arrayOfObject113[12] = RT.keyword(null, "file");
    arrayOfObject113[13] = "clojure/core.clj";
    const__1199 = (AFn)RT.map(arrayOfObject113);
  }

  public static void __init12()
  {
    const__1200 = (Var)RT.var("clojure.core", "bigint");
    const__1201 = Integer.valueOf(3269);
    Object[] arrayOfObject1 = new Object[1];
    Object[] arrayOfObject2 = new Object[1];
    arrayOfObject2[0] = Symbol.intern(null, "x");
    arrayOfObject1[0] = RT.vector(arrayOfObject2);
    const__1202 = PersistentList.create(Arrays.asList(arrayOfObject1));
    const__1203 = Class.forName("clojure.lang.BigInt");
    Object[] arrayOfObject3 = new Object[16];
    arrayOfObject3[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject4 = new Object[1];
    Object[] arrayOfObject5 = new Object[1];
    arrayOfObject5[0] = Symbol.intern(null, "x");
    arrayOfObject4[0] = RT.vector(arrayOfObject5);
    arrayOfObject3[1] = PersistentList.create(Arrays.asList(arrayOfObject4));
    arrayOfObject3[2] = RT.keyword(null, "column");
    arrayOfObject3[3] = Integer.valueOf(1);
    arrayOfObject3[4] = RT.keyword(null, "added");
    arrayOfObject3[5] = "1.3";
    arrayOfObject3[6] = RT.keyword(null, "static");
    arrayOfObject3[7] = Boolean.TRUE;
    arrayOfObject3[8] = RT.keyword(null, "doc");
    arrayOfObject3[9] = "Coerce to BigInt";
    arrayOfObject3[10] = RT.keyword(null, "line");
    arrayOfObject3[11] = Integer.valueOf(3269);
    arrayOfObject3[12] = RT.keyword(null, "file");
    arrayOfObject3[13] = "clojure/core.clj";
    arrayOfObject3[14] = RT.keyword(null, "tag");
    arrayOfObject3[15] = Class.forName("clojure.lang.BigInt");
    const__1204 = (AFn)RT.map(arrayOfObject3);
    const__1205 = (Var)RT.var("clojure.core", "biginteger");
    const__1206 = Integer.valueOf(3282);
    Object[] arrayOfObject6 = new Object[1];
    Object[] arrayOfObject7 = new Object[1];
    arrayOfObject7[0] = Symbol.intern(null, "x");
    arrayOfObject6[0] = RT.vector(arrayOfObject7);
    const__1207 = PersistentList.create(Arrays.asList(arrayOfObject6));
    Object[] arrayOfObject8 = new Object[16];
    arrayOfObject8[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject9 = new Object[1];
    Object[] arrayOfObject10 = new Object[1];
    arrayOfObject10[0] = Symbol.intern(null, "x");
    arrayOfObject9[0] = RT.vector(arrayOfObject10);
    arrayOfObject8[1] = PersistentList.create(Arrays.asList(arrayOfObject9));
    arrayOfObject8[2] = RT.keyword(null, "column");
    arrayOfObject8[3] = Integer.valueOf(1);
    arrayOfObject8[4] = RT.keyword(null, "added");
    arrayOfObject8[5] = "1.0";
    arrayOfObject8[6] = RT.keyword(null, "static");
    arrayOfObject8[7] = Boolean.TRUE;
    arrayOfObject8[8] = RT.keyword(null, "doc");
    arrayOfObject8[9] = "Coerce to BigInteger";
    arrayOfObject8[10] = RT.keyword(null, "line");
    arrayOfObject8[11] = Integer.valueOf(3282);
    arrayOfObject8[12] = RT.keyword(null, "file");
    arrayOfObject8[13] = "clojure/core.clj";
    arrayOfObject8[14] = RT.keyword(null, "tag");
    arrayOfObject8[15] = Class.forName("java.math.BigInteger");
    const__1208 = (AFn)RT.map(arrayOfObject8);
    const__1209 = (Var)RT.var("clojure.core", "bigdec");
    const__1210 = Integer.valueOf(3295);
    Object[] arrayOfObject11 = new Object[1];
    Object[] arrayOfObject12 = new Object[1];
    arrayOfObject12[0] = Symbol.intern(null, "x");
    arrayOfObject11[0] = RT.vector(arrayOfObject12);
    const__1211 = PersistentList.create(Arrays.asList(arrayOfObject11));
    const__1212 = Class.forName("java.math.BigDecimal");
    Object[] arrayOfObject13 = new Object[16];
    arrayOfObject13[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject14 = new Object[1];
    Object[] arrayOfObject15 = new Object[1];
    arrayOfObject15[0] = Symbol.intern(null, "x");
    arrayOfObject14[0] = RT.vector(arrayOfObject15);
    arrayOfObject13[1] = PersistentList.create(Arrays.asList(arrayOfObject14));
    arrayOfObject13[2] = RT.keyword(null, "column");
    arrayOfObject13[3] = Integer.valueOf(1);
    arrayOfObject13[4] = RT.keyword(null, "added");
    arrayOfObject13[5] = "1.0";
    arrayOfObject13[6] = RT.keyword(null, "static");
    arrayOfObject13[7] = Boolean.TRUE;
    arrayOfObject13[8] = RT.keyword(null, "doc");
    arrayOfObject13[9] = "Coerce to BigDecimal";
    arrayOfObject13[10] = RT.keyword(null, "line");
    arrayOfObject13[11] = Integer.valueOf(3295);
    arrayOfObject13[12] = RT.keyword(null, "file");
    arrayOfObject13[13] = "clojure/core.clj";
    arrayOfObject13[14] = RT.keyword(null, "tag");
    arrayOfObject13[15] = Class.forName("java.math.BigDecimal");
    const__1213 = (AFn)RT.map(arrayOfObject13);
    const__1214 = (Var)RT.var("clojure.core", "print-initialized");
    const__1215 = Integer.valueOf(3309);
    Object[] arrayOfObject16 = new Object[10];
    arrayOfObject16[0] = RT.keyword(null, "dynamic");
    arrayOfObject16[1] = Boolean.TRUE;
    arrayOfObject16[2] = RT.keyword(null, "column");
    arrayOfObject16[3] = Integer.valueOf(1);
    arrayOfObject16[4] = RT.keyword(null, "private");
    arrayOfObject16[5] = Boolean.TRUE;
    arrayOfObject16[6] = RT.keyword(null, "line");
    arrayOfObject16[7] = Integer.valueOf(3309);
    arrayOfObject16[8] = RT.keyword(null, "file");
    arrayOfObject16[9] = "clojure/core.clj";
    const__1216 = (AFn)RT.map(arrayOfObject16);
    const__1217 = (Var)RT.var("clojure.core", "pr-on");
    const__1218 = Integer.valueOf(3316);
    Object[] arrayOfObject17 = new Object[1];
    Object[] arrayOfObject18 = new Object[2];
    arrayOfObject18[0] = Symbol.intern(null, "x");
    arrayOfObject18[1] = Symbol.intern(null, "w");
    arrayOfObject17[0] = RT.vector(arrayOfObject18);
    const__1219 = PersistentList.create(Arrays.asList(arrayOfObject17));
    Object[] arrayOfObject19 = new Object[12];
    arrayOfObject19[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject20 = new Object[1];
    Object[] arrayOfObject21 = new Object[2];
    arrayOfObject21[0] = Symbol.intern(null, "x");
    arrayOfObject21[1] = Symbol.intern(null, "w");
    arrayOfObject20[0] = RT.vector(arrayOfObject21);
    arrayOfObject19[1] = PersistentList.create(Arrays.asList(arrayOfObject20));
    arrayOfObject19[2] = RT.keyword(null, "column");
    arrayOfObject19[3] = Integer.valueOf(1);
    arrayOfObject19[4] = RT.keyword(null, "private");
    arrayOfObject19[5] = Boolean.TRUE;
    arrayOfObject19[6] = RT.keyword(null, "static");
    arrayOfObject19[7] = Boolean.TRUE;
    arrayOfObject19[8] = RT.keyword(null, "line");
    arrayOfObject19[9] = Integer.valueOf(3316);
    arrayOfObject19[10] = RT.keyword(null, "file");
    arrayOfObject19[11] = "clojure/core.clj";
    const__1220 = (AFn)RT.map(arrayOfObject19);
    const__1221 = (Var)RT.var("clojure.core", "pr");
    const__1222 = Integer.valueOf(3325);
    Object[] arrayOfObject22 = new Object[3];
    arrayOfObject22[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject23 = new Object[1];
    arrayOfObject23[0] = Symbol.intern(null, "x");
    arrayOfObject22[1] = RT.vector(arrayOfObject23);
    Object[] arrayOfObject24 = new Object[3];
    arrayOfObject24[0] = Symbol.intern(null, "x");
    arrayOfObject24[1] = Symbol.intern(null, "&");
    arrayOfObject24[2] = Symbol.intern(null, "more");
    arrayOfObject22[2] = RT.vector(arrayOfObject24);
    const__1223 = PersistentList.create(Arrays.asList(arrayOfObject22));
    Object[] arrayOfObject25 = new Object[14];
    arrayOfObject25[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject26 = new Object[3];
    arrayOfObject26[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject27 = new Object[1];
    arrayOfObject27[0] = Symbol.intern(null, "x");
    arrayOfObject26[1] = RT.vector(arrayOfObject27);
    Object[] arrayOfObject28 = new Object[3];
    arrayOfObject28[0] = Symbol.intern(null, "x");
    arrayOfObject28[1] = Symbol.intern(null, "&");
    arrayOfObject28[2] = Symbol.intern(null, "more");
    arrayOfObject26[2] = RT.vector(arrayOfObject28);
    arrayOfObject25[1] = PersistentList.create(Arrays.asList(arrayOfObject26));
    arrayOfObject25[2] = RT.keyword(null, "dynamic");
    arrayOfObject25[3] = Boolean.TRUE;
    arrayOfObject25[4] = RT.keyword(null, "column");
    arrayOfObject25[5] = Integer.valueOf(1);
    arrayOfObject25[6] = RT.keyword(null, "added");
    arrayOfObject25[7] = "1.0";
    arrayOfObject25[8] = RT.keyword(null, "doc");
    arrayOfObject25[9] = "Prints the object(s) to the output stream that is the current value\n  of *out*.  Prints the object(s), separated by spaces if there is\n  more than one.  By default, pr and prn print in a way that objects\n  can be read by the reader";
    arrayOfObject25[10] = RT.keyword(null, "line");
    arrayOfObject25[11] = Integer.valueOf(3325);
    arrayOfObject25[12] = RT.keyword(null, "file");
    arrayOfObject25[13] = "clojure/core.clj";
    const__1224 = (AFn)RT.map(arrayOfObject25);
    const__1225 = (Var)RT.var("clojure.core", "system-newline");
    const__1226 = Integer.valueOf(3342);
    Object[] arrayOfObject29 = new Object[10];
    arrayOfObject29[0] = RT.keyword(null, "column");
    arrayOfObject29[1] = Integer.valueOf(1);
    arrayOfObject29[2] = RT.keyword(null, "private");
    arrayOfObject29[3] = Boolean.TRUE;
    arrayOfObject29[4] = RT.keyword(null, "line");
    arrayOfObject29[5] = Integer.valueOf(3342);
    arrayOfObject29[6] = RT.keyword(null, "file");
    arrayOfObject29[7] = "clojure/core.clj";
    arrayOfObject29[8] = RT.keyword(null, "tag");
    arrayOfObject29[9] = Class.forName("java.lang.String");
    const__1227 = (AFn)RT.map(arrayOfObject29);
    const__1228 = (Var)RT.var("clojure.core", "newline");
    const__1229 = Integer.valueOf(3345);
    Object[] arrayOfObject30 = new Object[1];
    arrayOfObject30[0] = RT.vector(new Object[0]);
    const__1230 = PersistentList.create(Arrays.asList(arrayOfObject30));
    Object[] arrayOfObject31 = new Object[14];
    arrayOfObject31[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject32 = new Object[1];
    arrayOfObject32[0] = RT.vector(new Object[0]);
    arrayOfObject31[1] = PersistentList.create(Arrays.asList(arrayOfObject32));
    arrayOfObject31[2] = RT.keyword(null, "column");
    arrayOfObject31[3] = Integer.valueOf(1);
    arrayOfObject31[4] = RT.keyword(null, "added");
    arrayOfObject31[5] = "1.0";
    arrayOfObject31[6] = RT.keyword(null, "static");
    arrayOfObject31[7] = Boolean.TRUE;
    arrayOfObject31[8] = RT.keyword(null, "doc");
    arrayOfObject31[9] = "Writes a platform-specific newline to *out*";
    arrayOfObject31[10] = RT.keyword(null, "line");
    arrayOfObject31[11] = Integer.valueOf(3345);
    arrayOfObject31[12] = RT.keyword(null, "file");
    arrayOfObject31[13] = "clojure/core.clj";
    const__1231 = (AFn)RT.map(arrayOfObject31);
    const__1232 = (Var)RT.var("clojure.core", "flush");
    const__1233 = Integer.valueOf(3353);
    Object[] arrayOfObject33 = new Object[1];
    arrayOfObject33[0] = RT.vector(new Object[0]);
    const__1234 = PersistentList.create(Arrays.asList(arrayOfObject33));
    Object[] arrayOfObject34 = new Object[14];
    arrayOfObject34[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject35 = new Object[1];
    arrayOfObject35[0] = RT.vector(new Object[0]);
    arrayOfObject34[1] = PersistentList.create(Arrays.asList(arrayOfObject35));
    arrayOfObject34[2] = RT.keyword(null, "column");
    arrayOfObject34[3] = Integer.valueOf(1);
    arrayOfObject34[4] = RT.keyword(null, "added");
    arrayOfObject34[5] = "1.0";
    arrayOfObject34[6] = RT.keyword(null, "static");
    arrayOfObject34[7] = Boolean.TRUE;
    arrayOfObject34[8] = RT.keyword(null, "doc");
    arrayOfObject34[9] = "Flushes the output stream that is the current value of\n  *out*";
    arrayOfObject34[10] = RT.keyword(null, "line");
    arrayOfObject34[11] = Integer.valueOf(3353);
    arrayOfObject34[12] = RT.keyword(null, "file");
    arrayOfObject34[13] = "clojure/core.clj";
    const__1235 = (AFn)RT.map(arrayOfObject34);
    const__1236 = (Var)RT.var("clojure.core", "prn");
    const__1237 = Integer.valueOf(3362);
    Object[] arrayOfObject36 = new Object[1];
    Object[] arrayOfObject37 = new Object[2];
    arrayOfObject37[0] = Symbol.intern(null, "&");
    arrayOfObject37[1] = Symbol.intern(null, "more");
    arrayOfObject36[0] = RT.vector(arrayOfObject37);
    const__1238 = PersistentList.create(Arrays.asList(arrayOfObject36));
    Object[] arrayOfObject38 = new Object[14];
    arrayOfObject38[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject39 = new Object[1];
    Object[] arrayOfObject40 = new Object[2];
    arrayOfObject40[0] = Symbol.intern(null, "&");
    arrayOfObject40[1] = Symbol.intern(null, "more");
    arrayOfObject39[0] = RT.vector(arrayOfObject40);
    arrayOfObject38[1] = PersistentList.create(Arrays.asList(arrayOfObject39));
    arrayOfObject38[2] = RT.keyword(null, "column");
    arrayOfObject38[3] = Integer.valueOf(1);
    arrayOfObject38[4] = RT.keyword(null, "added");
    arrayOfObject38[5] = "1.0";
    arrayOfObject38[6] = RT.keyword(null, "static");
    arrayOfObject38[7] = Boolean.TRUE;
    arrayOfObject38[8] = RT.keyword(null, "doc");
    arrayOfObject38[9] = "Same as pr followed by (newline). Observes *flush-on-newline*";
    arrayOfObject38[10] = RT.keyword(null, "line");
    arrayOfObject38[11] = Integer.valueOf(3362);
    arrayOfObject38[12] = RT.keyword(null, "file");
    arrayOfObject38[13] = "clojure/core.clj";
    const__1239 = (AFn)RT.map(arrayOfObject38);
    const__1240 = (Var)RT.var("clojure.core", "print");
    const__1241 = Integer.valueOf(3372);
    Object[] arrayOfObject41 = new Object[1];
    Object[] arrayOfObject42 = new Object[2];
    arrayOfObject42[0] = Symbol.intern(null, "&");
    arrayOfObject42[1] = Symbol.intern(null, "more");
    arrayOfObject41[0] = RT.vector(arrayOfObject42);
    const__1242 = PersistentList.create(Arrays.asList(arrayOfObject41));
    Object[] arrayOfObject43 = new Object[14];
    arrayOfObject43[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject44 = new Object[1];
    Object[] arrayOfObject45 = new Object[2];
    arrayOfObject45[0] = Symbol.intern(null, "&");
    arrayOfObject45[1] = Symbol.intern(null, "more");
    arrayOfObject44[0] = RT.vector(arrayOfObject45);
    arrayOfObject43[1] = PersistentList.create(Arrays.asList(arrayOfObject44));
    arrayOfObject43[2] = RT.keyword(null, "column");
    arrayOfObject43[3] = Integer.valueOf(1);
    arrayOfObject43[4] = RT.keyword(null, "added");
    arrayOfObject43[5] = "1.0";
    arrayOfObject43[6] = RT.keyword(null, "static");
    arrayOfObject43[7] = Boolean.TRUE;
    arrayOfObject43[8] = RT.keyword(null, "doc");
    arrayOfObject43[9] = "Prints the object(s) to the output stream that is the current value\n  of *out*.  print and println produce output for human consumption.";
    arrayOfObject43[10] = RT.keyword(null, "line");
    arrayOfObject43[11] = Integer.valueOf(3372);
    arrayOfObject43[12] = RT.keyword(null, "file");
    arrayOfObject43[13] = "clojure/core.clj";
    const__1243 = (AFn)RT.map(arrayOfObject43);
    const__1244 = (Var)RT.var("clojure.core", "println");
    const__1245 = Integer.valueOf(3381);
    Object[] arrayOfObject46 = new Object[1];
    Object[] arrayOfObject47 = new Object[2];
    arrayOfObject47[0] = Symbol.intern(null, "&");
    arrayOfObject47[1] = Symbol.intern(null, "more");
    arrayOfObject46[0] = RT.vector(arrayOfObject47);
    const__1246 = PersistentList.create(Arrays.asList(arrayOfObject46));
    Object[] arrayOfObject48 = new Object[14];
    arrayOfObject48[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject49 = new Object[1];
    Object[] arrayOfObject50 = new Object[2];
    arrayOfObject50[0] = Symbol.intern(null, "&");
    arrayOfObject50[1] = Symbol.intern(null, "more");
    arrayOfObject49[0] = RT.vector(arrayOfObject50);
    arrayOfObject48[1] = PersistentList.create(Arrays.asList(arrayOfObject49));
    arrayOfObject48[2] = RT.keyword(null, "column");
    arrayOfObject48[3] = Integer.valueOf(1);
    arrayOfObject48[4] = RT.keyword(null, "added");
    arrayOfObject48[5] = "1.0";
    arrayOfObject48[6] = RT.keyword(null, "static");
    arrayOfObject48[7] = Boolean.TRUE;
    arrayOfObject48[8] = RT.keyword(null, "doc");
    arrayOfObject48[9] = "Same as print followed by (newline)";
    arrayOfObject48[10] = RT.keyword(null, "line");
    arrayOfObject48[11] = Integer.valueOf(3381);
    arrayOfObject48[12] = RT.keyword(null, "file");
    arrayOfObject48[13] = "clojure/core.clj";
    const__1247 = (AFn)RT.map(arrayOfObject48);
    const__1248 = (Var)RT.var("clojure.core", "read");
    const__1249 = Integer.valueOf(3389);
    Object[] arrayOfObject51 = new Object[4];
    arrayOfObject51[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject52 = new Object[1];
    arrayOfObject52[0] = Symbol.intern(null, "stream");
    arrayOfObject51[1] = RT.vector(arrayOfObject52);
    Object[] arrayOfObject53 = new Object[3];
    arrayOfObject53[0] = Symbol.intern(null, "stream");
    arrayOfObject53[1] = Symbol.intern(null, "eof-error?");
    arrayOfObject53[2] = Symbol.intern(null, "eof-value");
    arrayOfObject51[2] = RT.vector(arrayOfObject53);
    Object[] arrayOfObject54 = new Object[4];
    arrayOfObject54[0] = Symbol.intern(null, "stream");
    arrayOfObject54[1] = Symbol.intern(null, "eof-error?");
    arrayOfObject54[2] = Symbol.intern(null, "eof-value");
    arrayOfObject54[3] = Symbol.intern(null, "recursive?");
    arrayOfObject51[3] = RT.vector(arrayOfObject54);
    const__1250 = PersistentList.create(Arrays.asList(arrayOfObject51));
    Object[] arrayOfObject55 = new Object[14];
    arrayOfObject55[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject56 = new Object[4];
    arrayOfObject56[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject57 = new Object[1];
    arrayOfObject57[0] = Symbol.intern(null, "stream");
    arrayOfObject56[1] = RT.vector(arrayOfObject57);
    Object[] arrayOfObject58 = new Object[3];
    arrayOfObject58[0] = Symbol.intern(null, "stream");
    arrayOfObject58[1] = Symbol.intern(null, "eof-error?");
    arrayOfObject58[2] = Symbol.intern(null, "eof-value");
    arrayOfObject56[2] = RT.vector(arrayOfObject58);
    Object[] arrayOfObject59 = new Object[4];
    arrayOfObject59[0] = Symbol.intern(null, "stream");
    arrayOfObject59[1] = Symbol.intern(null, "eof-error?");
    arrayOfObject59[2] = Symbol.intern(null, "eof-value");
    arrayOfObject59[3] = Symbol.intern(null, "recursive?");
    arrayOfObject56[3] = RT.vector(arrayOfObject59);
    arrayOfObject55[1] = PersistentList.create(Arrays.asList(arrayOfObject56));
    arrayOfObject55[2] = RT.keyword(null, "column");
    arrayOfObject55[3] = Integer.valueOf(1);
    arrayOfObject55[4] = RT.keyword(null, "added");
    arrayOfObject55[5] = "1.0";
    arrayOfObject55[6] = RT.keyword(null, "static");
    arrayOfObject55[7] = Boolean.TRUE;
    arrayOfObject55[8] = RT.keyword(null, "doc");
    arrayOfObject55[9] = "Reads the next object from stream, which must be an instance of\n  java.io.PushbackReader or some derivee.  stream defaults to the\n  current value of *in*.\n\n  Note that read can execute code (controlled by *read-eval*),\n  and as such should be used only with trusted sources.\n\n  For data structure interop use clojure.edn/read";
    arrayOfObject55[10] = RT.keyword(null, "line");
    arrayOfObject55[11] = Integer.valueOf(3389);
    arrayOfObject55[12] = RT.keyword(null, "file");
    arrayOfObject55[13] = "clojure/core.clj";
    const__1251 = (AFn)RT.map(arrayOfObject55);
    const__1252 = (Var)RT.var("clojure.core", "read-line");
    const__1253 = Integer.valueOf(3409);
    Object[] arrayOfObject60 = new Object[1];
    arrayOfObject60[0] = RT.vector(new Object[0]);
    const__1254 = PersistentList.create(Arrays.asList(arrayOfObject60));
    Object[] arrayOfObject61 = new Object[14];
    arrayOfObject61[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject62 = new Object[1];
    arrayOfObject62[0] = RT.vector(new Object[0]);
    arrayOfObject61[1] = PersistentList.create(Arrays.asList(arrayOfObject62));
    arrayOfObject61[2] = RT.keyword(null, "column");
    arrayOfObject61[3] = Integer.valueOf(1);
    arrayOfObject61[4] = RT.keyword(null, "added");
    arrayOfObject61[5] = "1.0";
    arrayOfObject61[6] = RT.keyword(null, "static");
    arrayOfObject61[7] = Boolean.TRUE;
    arrayOfObject61[8] = RT.keyword(null, "doc");
    arrayOfObject61[9] = "Reads the next line from stream that is the current value of *in* .";
    arrayOfObject61[10] = RT.keyword(null, "line");
    arrayOfObject61[11] = Integer.valueOf(3409);
    arrayOfObject61[12] = RT.keyword(null, "file");
    arrayOfObject61[13] = "clojure/core.clj";
    const__1255 = (AFn)RT.map(arrayOfObject61);
    const__1256 = (Var)RT.var("clojure.core", "read-string");
    const__1257 = Integer.valueOf(3418);
    Object[] arrayOfObject63 = new Object[1];
    Object[] arrayOfObject64 = new Object[1];
    arrayOfObject64[0] = Symbol.intern(null, "s");
    arrayOfObject63[0] = RT.vector(arrayOfObject64);
    const__1258 = PersistentList.create(Arrays.asList(arrayOfObject63));
    Object[] arrayOfObject65 = new Object[14];
    arrayOfObject65[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject66 = new Object[1];
    Object[] arrayOfObject67 = new Object[1];
    arrayOfObject67[0] = Symbol.intern(null, "s");
    arrayOfObject66[0] = RT.vector(arrayOfObject67);
    arrayOfObject65[1] = PersistentList.create(Arrays.asList(arrayOfObject66));
    arrayOfObject65[2] = RT.keyword(null, "column");
    arrayOfObject65[3] = Integer.valueOf(1);
    arrayOfObject65[4] = RT.keyword(null, "added");
    arrayOfObject65[5] = "1.0";
    arrayOfObject65[6] = RT.keyword(null, "static");
    arrayOfObject65[7] = Boolean.TRUE;
    arrayOfObject65[8] = RT.keyword(null, "doc");
    arrayOfObject65[9] = "Reads one object from the string s.\n\n  Note that read-string can execute code (controlled by *read-eval*),\n  and as such should be used only with trusted sources.\n\n  For data structure interop use clojure.edn/read-string";
    arrayOfObject65[10] = RT.keyword(null, "line");
    arrayOfObject65[11] = Integer.valueOf(3418);
    arrayOfObject65[12] = RT.keyword(null, "file");
    arrayOfObject65[13] = "clojure/core.clj";
    const__1259 = (AFn)RT.map(arrayOfObject65);
    const__1260 = (Var)RT.var("clojure.core", "subvec");
    const__1261 = Integer.valueOf(3429);
    Object[] arrayOfObject68 = new Object[2];
    Object[] arrayOfObject69 = new Object[2];
    arrayOfObject69[0] = Symbol.intern(null, "v");
    arrayOfObject69[1] = Symbol.intern(null, "start");
    arrayOfObject68[0] = RT.vector(arrayOfObject69);
    Object[] arrayOfObject70 = new Object[3];
    arrayOfObject70[0] = Symbol.intern(null, "v");
    arrayOfObject70[1] = Symbol.intern(null, "start");
    arrayOfObject70[2] = Symbol.intern(null, "end");
    arrayOfObject68[1] = RT.vector(arrayOfObject70);
    const__1262 = PersistentList.create(Arrays.asList(arrayOfObject68));
    Object[] arrayOfObject71 = new Object[14];
    arrayOfObject71[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject72 = new Object[2];
    Object[] arrayOfObject73 = new Object[2];
    arrayOfObject73[0] = Symbol.intern(null, "v");
    arrayOfObject73[1] = Symbol.intern(null, "start");
    arrayOfObject72[0] = RT.vector(arrayOfObject73);
    Object[] arrayOfObject74 = new Object[3];
    arrayOfObject74[0] = Symbol.intern(null, "v");
    arrayOfObject74[1] = Symbol.intern(null, "start");
    arrayOfObject74[2] = Symbol.intern(null, "end");
    arrayOfObject72[1] = RT.vector(arrayOfObject74);
    arrayOfObject71[1] = PersistentList.create(Arrays.asList(arrayOfObject72));
    arrayOfObject71[2] = RT.keyword(null, "column");
    arrayOfObject71[3] = Integer.valueOf(1);
    arrayOfObject71[4] = RT.keyword(null, "added");
    arrayOfObject71[5] = "1.0";
    arrayOfObject71[6] = RT.keyword(null, "static");
    arrayOfObject71[7] = Boolean.TRUE;
    arrayOfObject71[8] = RT.keyword(null, "doc");
    arrayOfObject71[9] = "Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.";
    arrayOfObject71[10] = RT.keyword(null, "line");
    arrayOfObject71[11] = Integer.valueOf(3429);
    arrayOfObject71[12] = RT.keyword(null, "file");
    arrayOfObject71[13] = "clojure/core.clj";
    const__1263 = (AFn)RT.map(arrayOfObject71);
    const__1264 = (Var)RT.var("clojure.core", "with-open");
    const__1265 = Integer.valueOf(3442);
    Object[] arrayOfObject75 = new Object[1];
    Object[] arrayOfObject76 = new Object[3];
    arrayOfObject76[0] = Symbol.intern(null, "bindings");
    arrayOfObject76[1] = Symbol.intern(null, "&");
    arrayOfObject76[2] = Symbol.intern(null, "body");
    arrayOfObject75[0] = RT.vector(arrayOfObject76);
    const__1266 = PersistentList.create(Arrays.asList(arrayOfObject75));
    Object[] arrayOfObject77 = new Object[12];
    arrayOfObject77[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject78 = new Object[1];
    Object[] arrayOfObject79 = new Object[3];
    arrayOfObject79[0] = Symbol.intern(null, "bindings");
    arrayOfObject79[1] = Symbol.intern(null, "&");
    arrayOfObject79[2] = Symbol.intern(null, "body");
    arrayOfObject78[0] = RT.vector(arrayOfObject79);
    arrayOfObject77[1] = PersistentList.create(Arrays.asList(arrayOfObject78));
    arrayOfObject77[2] = RT.keyword(null, "column");
    arrayOfObject77[3] = Integer.valueOf(1);
    arrayOfObject77[4] = RT.keyword(null, "added");
    arrayOfObject77[5] = "1.0";
    arrayOfObject77[6] = RT.keyword(null, "doc");
    arrayOfObject77[7] = "bindings => [name init ...]\n\n  Evaluates body in a try expression with names bound to the values\n  of the inits, and a finally clause that calls (.close name) on each\n  name in reverse order.";
    arrayOfObject77[8] = RT.keyword(null, "line");
    arrayOfObject77[9] = Integer.valueOf(3442);
    arrayOfObject77[10] = RT.keyword(null, "file");
    arrayOfObject77[11] = "clojure/core.clj";
    const__1267 = (AFn)RT.map(arrayOfObject77);
    const__1268 = (Var)RT.var("clojure.core", "doto");
    const__1269 = Integer.valueOf(3463);
    Object[] arrayOfObject80 = new Object[1];
    Object[] arrayOfObject81 = new Object[3];
    arrayOfObject81[0] = Symbol.intern(null, "x");
    arrayOfObject81[1] = Symbol.intern(null, "&");
    arrayOfObject81[2] = Symbol.intern(null, "forms");
    arrayOfObject80[0] = RT.vector(arrayOfObject81);
    const__1270 = PersistentList.create(Arrays.asList(arrayOfObject80));
    Object[] arrayOfObject82 = new Object[12];
    arrayOfObject82[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject83 = new Object[1];
    Object[] arrayOfObject84 = new Object[3];
    arrayOfObject84[0] = Symbol.intern(null, "x");
    arrayOfObject84[1] = Symbol.intern(null, "&");
    arrayOfObject84[2] = Symbol.intern(null, "forms");
    arrayOfObject83[0] = RT.vector(arrayOfObject84);
    arrayOfObject82[1] = PersistentList.create(Arrays.asList(arrayOfObject83));
    arrayOfObject82[2] = RT.keyword(null, "column");
    arrayOfObject82[3] = Integer.valueOf(1);
    arrayOfObject82[4] = RT.keyword(null, "added");
    arrayOfObject82[5] = "1.0";
    arrayOfObject82[6] = RT.keyword(null, "doc");
    arrayOfObject82[7] = "Evaluates x then calls all of the methods and functions with the\n  value of x supplied at the front of the given arguments.  The forms\n  are evaluated in order.  Returns x.\n\n  (doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))";
    arrayOfObject82[8] = RT.keyword(null, "line");
    arrayOfObject82[9] = Integer.valueOf(3463);
    arrayOfObject82[10] = RT.keyword(null, "file");
    arrayOfObject82[11] = "clojure/core.clj";
    const__1271 = (AFn)RT.map(arrayOfObject82);
    const__1272 = (Var)RT.var("clojure.core", "memfn");
    const__1273 = Integer.valueOf(3480);
    Object[] arrayOfObject85 = new Object[1];
    Object[] arrayOfObject86 = new Object[3];
    arrayOfObject86[0] = Symbol.intern(null, "name");
    arrayOfObject86[1] = Symbol.intern(null, "&");
    arrayOfObject86[2] = Symbol.intern(null, "args");
    arrayOfObject85[0] = RT.vector(arrayOfObject86);
    const__1274 = PersistentList.create(Arrays.asList(arrayOfObject85));
    Object[] arrayOfObject87 = new Object[12];
    arrayOfObject87[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject88 = new Object[1];
    Object[] arrayOfObject89 = new Object[3];
    arrayOfObject89[0] = Symbol.intern(null, "name");
    arrayOfObject89[1] = Symbol.intern(null, "&");
    arrayOfObject89[2] = Symbol.intern(null, "args");
    arrayOfObject88[0] = RT.vector(arrayOfObject89);
    arrayOfObject87[1] = PersistentList.create(Arrays.asList(arrayOfObject88));
    arrayOfObject87[2] = RT.keyword(null, "column");
    arrayOfObject87[3] = Integer.valueOf(1);
    arrayOfObject87[4] = RT.keyword(null, "added");
    arrayOfObject87[5] = "1.0";
    arrayOfObject87[6] = RT.keyword(null, "doc");
    arrayOfObject87[7] = "Expands into code that creates a fn that expects to be passed an\n  object and any args and calls the named instance method on the\n  object passing the args. Use when you want to treat a Java method as\n  a first-class fn. name may be type-hinted with the method receiver's\n  type in order to avoid reflective calls.";
    arrayOfObject87[8] = RT.keyword(null, "line");
    arrayOfObject87[9] = Integer.valueOf(3480);
    arrayOfObject87[10] = RT.keyword(null, "file");
    arrayOfObject87[11] = "clojure/core.clj";
    const__1275 = (AFn)RT.map(arrayOfObject87);
    const__1276 = (Var)RT.var("clojure.core", "time");
    const__1277 = Integer.valueOf(3493);
    Object[] arrayOfObject90 = new Object[1];
    Object[] arrayOfObject91 = new Object[1];
    arrayOfObject91[0] = Symbol.intern(null, "expr");
    arrayOfObject90[0] = RT.vector(arrayOfObject91);
    const__1278 = PersistentList.create(Arrays.asList(arrayOfObject90));
    Object[] arrayOfObject92 = new Object[12];
    arrayOfObject92[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject93 = new Object[1];
    Object[] arrayOfObject94 = new Object[1];
    arrayOfObject94[0] = Symbol.intern(null, "expr");
    arrayOfObject93[0] = RT.vector(arrayOfObject94);
    arrayOfObject92[1] = PersistentList.create(Arrays.asList(arrayOfObject93));
    arrayOfObject92[2] = RT.keyword(null, "column");
    arrayOfObject92[3] = Integer.valueOf(1);
    arrayOfObject92[4] = RT.keyword(null, "added");
    arrayOfObject92[5] = "1.0";
    arrayOfObject92[6] = RT.keyword(null, "doc");
    arrayOfObject92[7] = "Evaluates expr and prints the time it took.  Returns the value of\n expr.";
    arrayOfObject92[8] = RT.keyword(null, "line");
    arrayOfObject92[9] = Integer.valueOf(3493);
    arrayOfObject92[10] = RT.keyword(null, "file");
    arrayOfObject92[11] = "clojure/core.clj";
    const__1279 = (AFn)RT.map(arrayOfObject92);
    const__1280 = (Var)RT.var("clojure.core", "alength");
    const__1281 = Integer.valueOf(3507);
    Object[] arrayOfObject95 = new Object[1];
    Object[] arrayOfObject96 = new Object[1];
    arrayOfObject96[0] = Symbol.intern(null, "array");
    arrayOfObject95[0] = RT.vector(arrayOfObject96);
    const__1282 = PersistentList.create(Arrays.asList(arrayOfObject95));
    const__1283 = (Var)RT.var("clojure.core", "aclone");
    const__1284 = Integer.valueOf(3514);
    Object[] arrayOfObject97 = new Object[1];
    Object[] arrayOfObject98 = new Object[1];
    arrayOfObject98[0] = Symbol.intern(null, "array");
    arrayOfObject97[0] = RT.vector(arrayOfObject98);
    const__1285 = PersistentList.create(Arrays.asList(arrayOfObject97));
    const__1286 = (Var)RT.var("clojure.core", "aget");
    const__1287 = Integer.valueOf(3521);
    Object[] arrayOfObject99 = new Object[2];
    Object[] arrayOfObject100 = new Object[2];
    arrayOfObject100[0] = Symbol.intern(null, "array");
    arrayOfObject100[1] = Symbol.intern(null, "idx");
    arrayOfObject99[0] = RT.vector(arrayOfObject100);
    Object[] arrayOfObject101 = new Object[4];
    arrayOfObject101[0] = Symbol.intern(null, "array");
    arrayOfObject101[1] = Symbol.intern(null, "idx");
    arrayOfObject101[2] = Symbol.intern(null, "&");
    arrayOfObject101[3] = Symbol.intern(null, "idxs");
    arrayOfObject99[1] = RT.vector(arrayOfObject101);
    const__1288 = PersistentList.create(Arrays.asList(arrayOfObject99));
    Object[] arrayOfObject102 = new Object[1];
    arrayOfObject102[0] = Long.valueOf(2L);
    const__1289 = (AFn)PersistentHashSet.create(arrayOfObject102);
    const__1290 = (Var)RT.var("clojure.core", "aset");
    const__1291 = Integer.valueOf(3532);
    Object[] arrayOfObject103 = new Object[2];
    Object[] arrayOfObject104 = new Object[3];
    arrayOfObject104[0] = Symbol.intern(null, "array");
    arrayOfObject104[1] = Symbol.intern(null, "idx");
    arrayOfObject104[2] = Symbol.intern(null, "val");
    arrayOfObject103[0] = RT.vector(arrayOfObject104);
    Object[] arrayOfObject105 = new Object[5];
    arrayOfObject105[0] = Symbol.intern(null, "array");
    arrayOfObject105[1] = Symbol.intern(null, "idx");
    arrayOfObject105[2] = Symbol.intern(null, "idx2");
    arrayOfObject105[3] = Symbol.intern(null, "&");
    arrayOfObject105[4] = Symbol.intern(null, "idxv");
    arrayOfObject103[1] = RT.vector(arrayOfObject105);
    const__1292 = PersistentList.create(Arrays.asList(arrayOfObject103));
    Object[] arrayOfObject106 = new Object[1];
    arrayOfObject106[0] = Long.valueOf(3L);
    const__1293 = (AFn)PersistentHashSet.create(arrayOfObject106);
    const__1294 = (Var)RT.var("clojure.core", "def-aset");
    const__1295 = Integer.valueOf(3544);
    Object[] arrayOfObject107 = new Object[1];
    Object[] arrayOfObject108 = new Object[3];
    arrayOfObject108[0] = Symbol.intern(null, "name");
    arrayOfObject108[1] = Symbol.intern(null, "method");
    arrayOfObject108[2] = Symbol.intern(null, "coerce");
    arrayOfObject107[0] = RT.vector(arrayOfObject108);
    const__1296 = PersistentList.create(Arrays.asList(arrayOfObject107));
    Object[] arrayOfObject109 = new Object[10];
    arrayOfObject109[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject110 = new Object[1];
    Object[] arrayOfObject111 = new Object[3];
    arrayOfObject111[0] = Symbol.intern(null, "name");
    arrayOfObject111[1] = Symbol.intern(null, "method");
    arrayOfObject111[2] = Symbol.intern(null, "coerce");
    arrayOfObject110[0] = RT.vector(arrayOfObject111);
    arrayOfObject109[1] = PersistentList.create(Arrays.asList(arrayOfObject110));
    arrayOfObject109[2] = RT.keyword(null, "column");
    arrayOfObject109[3] = Integer.valueOf(1);
    arrayOfObject109[4] = RT.keyword(null, "private");
    arrayOfObject109[5] = Boolean.TRUE;
    arrayOfObject109[6] = RT.keyword(null, "line");
    arrayOfObject109[7] = Integer.valueOf(3544);
    arrayOfObject109[8] = RT.keyword(null, "file");
    arrayOfObject109[9] = "clojure/core.clj";
    const__1297 = (AFn)RT.map(arrayOfObject109);
    const__1298 = (Var)RT.var("clojure.core", "aset-int");
    const__1299 = Integer.valueOf(3555);
  }

  public static void __init13()
  {
    Object[] arrayOfObject1 = new Object[2];
    Object[] arrayOfObject2 = new Object[3];
    arrayOfObject2[0] = Symbol.intern(null, "array");
    arrayOfObject2[1] = Symbol.intern(null, "idx");
    arrayOfObject2[2] = Symbol.intern(null, "val");
    arrayOfObject1[0] = RT.vector(arrayOfObject2);
    Object[] arrayOfObject3 = new Object[5];
    arrayOfObject3[0] = Symbol.intern(null, "array");
    arrayOfObject3[1] = Symbol.intern(null, "idx");
    arrayOfObject3[2] = Symbol.intern(null, "idx2");
    arrayOfObject3[3] = Symbol.intern(null, "&");
    arrayOfObject3[4] = Symbol.intern(null, "idxv");
    arrayOfObject1[1] = RT.vector(arrayOfObject3);
    const__1300 = PersistentList.create(Arrays.asList(arrayOfObject1));
    Object[] arrayOfObject4 = new Object[12];
    arrayOfObject4[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject5 = new Object[2];
    Object[] arrayOfObject6 = new Object[3];
    arrayOfObject6[0] = Symbol.intern(null, "array");
    arrayOfObject6[1] = Symbol.intern(null, "idx");
    arrayOfObject6[2] = Symbol.intern(null, "val");
    arrayOfObject5[0] = RT.vector(arrayOfObject6);
    Object[] arrayOfObject7 = new Object[5];
    arrayOfObject7[0] = Symbol.intern(null, "array");
    arrayOfObject7[1] = Symbol.intern(null, "idx");
    arrayOfObject7[2] = Symbol.intern(null, "idx2");
    arrayOfObject7[3] = Symbol.intern(null, "&");
    arrayOfObject7[4] = Symbol.intern(null, "idxv");
    arrayOfObject5[1] = RT.vector(arrayOfObject7);
    arrayOfObject4[1] = PersistentList.create(Arrays.asList(arrayOfObject5));
    arrayOfObject4[2] = RT.keyword(null, "column");
    arrayOfObject4[3] = Integer.valueOf(1);
    arrayOfObject4[4] = RT.keyword(null, "added");
    arrayOfObject4[5] = "1.0";
    arrayOfObject4[6] = RT.keyword(null, "doc");
    arrayOfObject4[7] = "Sets the value at the index/indices. Works on arrays of int. Returns val.";
    arrayOfObject4[8] = RT.keyword(null, "line");
    arrayOfObject4[9] = Integer.valueOf(3555);
    arrayOfObject4[10] = RT.keyword(null, "file");
    arrayOfObject4[11] = "clojure/core.clj";
    const__1301 = (AFn)RT.map(arrayOfObject4);
    const__1302 = (Var)RT.var("clojure.core", "aset-long");
    const__1303 = Integer.valueOf(3560);
    Object[] arrayOfObject8 = new Object[2];
    Object[] arrayOfObject9 = new Object[3];
    arrayOfObject9[0] = Symbol.intern(null, "array");
    arrayOfObject9[1] = Symbol.intern(null, "idx");
    arrayOfObject9[2] = Symbol.intern(null, "val");
    arrayOfObject8[0] = RT.vector(arrayOfObject9);
    Object[] arrayOfObject10 = new Object[5];
    arrayOfObject10[0] = Symbol.intern(null, "array");
    arrayOfObject10[1] = Symbol.intern(null, "idx");
    arrayOfObject10[2] = Symbol.intern(null, "idx2");
    arrayOfObject10[3] = Symbol.intern(null, "&");
    arrayOfObject10[4] = Symbol.intern(null, "idxv");
    arrayOfObject8[1] = RT.vector(arrayOfObject10);
    const__1304 = PersistentList.create(Arrays.asList(arrayOfObject8));
    Object[] arrayOfObject11 = new Object[12];
    arrayOfObject11[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject12 = new Object[2];
    Object[] arrayOfObject13 = new Object[3];
    arrayOfObject13[0] = Symbol.intern(null, "array");
    arrayOfObject13[1] = Symbol.intern(null, "idx");
    arrayOfObject13[2] = Symbol.intern(null, "val");
    arrayOfObject12[0] = RT.vector(arrayOfObject13);
    Object[] arrayOfObject14 = new Object[5];
    arrayOfObject14[0] = Symbol.intern(null, "array");
    arrayOfObject14[1] = Symbol.intern(null, "idx");
    arrayOfObject14[2] = Symbol.intern(null, "idx2");
    arrayOfObject14[3] = Symbol.intern(null, "&");
    arrayOfObject14[4] = Symbol.intern(null, "idxv");
    arrayOfObject12[1] = RT.vector(arrayOfObject14);
    arrayOfObject11[1] = PersistentList.create(Arrays.asList(arrayOfObject12));
    arrayOfObject11[2] = RT.keyword(null, "column");
    arrayOfObject11[3] = Integer.valueOf(1);
    arrayOfObject11[4] = RT.keyword(null, "added");
    arrayOfObject11[5] = "1.0";
    arrayOfObject11[6] = RT.keyword(null, "doc");
    arrayOfObject11[7] = "Sets the value at the index/indices. Works on arrays of long. Returns val.";
    arrayOfObject11[8] = RT.keyword(null, "line");
    arrayOfObject11[9] = Integer.valueOf(3560);
    arrayOfObject11[10] = RT.keyword(null, "file");
    arrayOfObject11[11] = "clojure/core.clj";
    const__1305 = (AFn)RT.map(arrayOfObject11);
    const__1306 = (Var)RT.var("clojure.core", "aset-boolean");
    const__1307 = Integer.valueOf(3565);
    Object[] arrayOfObject15 = new Object[2];
    Object[] arrayOfObject16 = new Object[3];
    arrayOfObject16[0] = Symbol.intern(null, "array");
    arrayOfObject16[1] = Symbol.intern(null, "idx");
    arrayOfObject16[2] = Symbol.intern(null, "val");
    arrayOfObject15[0] = RT.vector(arrayOfObject16);
    Object[] arrayOfObject17 = new Object[5];
    arrayOfObject17[0] = Symbol.intern(null, "array");
    arrayOfObject17[1] = Symbol.intern(null, "idx");
    arrayOfObject17[2] = Symbol.intern(null, "idx2");
    arrayOfObject17[3] = Symbol.intern(null, "&");
    arrayOfObject17[4] = Symbol.intern(null, "idxv");
    arrayOfObject15[1] = RT.vector(arrayOfObject17);
    const__1308 = PersistentList.create(Arrays.asList(arrayOfObject15));
    Object[] arrayOfObject18 = new Object[12];
    arrayOfObject18[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject19 = new Object[2];
    Object[] arrayOfObject20 = new Object[3];
    arrayOfObject20[0] = Symbol.intern(null, "array");
    arrayOfObject20[1] = Symbol.intern(null, "idx");
    arrayOfObject20[2] = Symbol.intern(null, "val");
    arrayOfObject19[0] = RT.vector(arrayOfObject20);
    Object[] arrayOfObject21 = new Object[5];
    arrayOfObject21[0] = Symbol.intern(null, "array");
    arrayOfObject21[1] = Symbol.intern(null, "idx");
    arrayOfObject21[2] = Symbol.intern(null, "idx2");
    arrayOfObject21[3] = Symbol.intern(null, "&");
    arrayOfObject21[4] = Symbol.intern(null, "idxv");
    arrayOfObject19[1] = RT.vector(arrayOfObject21);
    arrayOfObject18[1] = PersistentList.create(Arrays.asList(arrayOfObject19));
    arrayOfObject18[2] = RT.keyword(null, "column");
    arrayOfObject18[3] = Integer.valueOf(1);
    arrayOfObject18[4] = RT.keyword(null, "added");
    arrayOfObject18[5] = "1.0";
    arrayOfObject18[6] = RT.keyword(null, "doc");
    arrayOfObject18[7] = "Sets the value at the index/indices. Works on arrays of boolean. Returns val.";
    arrayOfObject18[8] = RT.keyword(null, "line");
    arrayOfObject18[9] = Integer.valueOf(3565);
    arrayOfObject18[10] = RT.keyword(null, "file");
    arrayOfObject18[11] = "clojure/core.clj";
    const__1309 = (AFn)RT.map(arrayOfObject18);
    const__1310 = (Var)RT.var("clojure.core", "aset-float");
    const__1311 = Integer.valueOf(3570);
    Object[] arrayOfObject22 = new Object[2];
    Object[] arrayOfObject23 = new Object[3];
    arrayOfObject23[0] = Symbol.intern(null, "array");
    arrayOfObject23[1] = Symbol.intern(null, "idx");
    arrayOfObject23[2] = Symbol.intern(null, "val");
    arrayOfObject22[0] = RT.vector(arrayOfObject23);
    Object[] arrayOfObject24 = new Object[5];
    arrayOfObject24[0] = Symbol.intern(null, "array");
    arrayOfObject24[1] = Symbol.intern(null, "idx");
    arrayOfObject24[2] = Symbol.intern(null, "idx2");
    arrayOfObject24[3] = Symbol.intern(null, "&");
    arrayOfObject24[4] = Symbol.intern(null, "idxv");
    arrayOfObject22[1] = RT.vector(arrayOfObject24);
    const__1312 = PersistentList.create(Arrays.asList(arrayOfObject22));
    Object[] arrayOfObject25 = new Object[12];
    arrayOfObject25[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject26 = new Object[2];
    Object[] arrayOfObject27 = new Object[3];
    arrayOfObject27[0] = Symbol.intern(null, "array");
    arrayOfObject27[1] = Symbol.intern(null, "idx");
    arrayOfObject27[2] = Symbol.intern(null, "val");
    arrayOfObject26[0] = RT.vector(arrayOfObject27);
    Object[] arrayOfObject28 = new Object[5];
    arrayOfObject28[0] = Symbol.intern(null, "array");
    arrayOfObject28[1] = Symbol.intern(null, "idx");
    arrayOfObject28[2] = Symbol.intern(null, "idx2");
    arrayOfObject28[3] = Symbol.intern(null, "&");
    arrayOfObject28[4] = Symbol.intern(null, "idxv");
    arrayOfObject26[1] = RT.vector(arrayOfObject28);
    arrayOfObject25[1] = PersistentList.create(Arrays.asList(arrayOfObject26));
    arrayOfObject25[2] = RT.keyword(null, "column");
    arrayOfObject25[3] = Integer.valueOf(1);
    arrayOfObject25[4] = RT.keyword(null, "added");
    arrayOfObject25[5] = "1.0";
    arrayOfObject25[6] = RT.keyword(null, "doc");
    arrayOfObject25[7] = "Sets the value at the index/indices. Works on arrays of float. Returns val.";
    arrayOfObject25[8] = RT.keyword(null, "line");
    arrayOfObject25[9] = Integer.valueOf(3570);
    arrayOfObject25[10] = RT.keyword(null, "file");
    arrayOfObject25[11] = "clojure/core.clj";
    const__1313 = (AFn)RT.map(arrayOfObject25);
    const__1314 = (Var)RT.var("clojure.core", "aset-double");
    const__1315 = Integer.valueOf(3575);
    Object[] arrayOfObject29 = new Object[2];
    Object[] arrayOfObject30 = new Object[3];
    arrayOfObject30[0] = Symbol.intern(null, "array");
    arrayOfObject30[1] = Symbol.intern(null, "idx");
    arrayOfObject30[2] = Symbol.intern(null, "val");
    arrayOfObject29[0] = RT.vector(arrayOfObject30);
    Object[] arrayOfObject31 = new Object[5];
    arrayOfObject31[0] = Symbol.intern(null, "array");
    arrayOfObject31[1] = Symbol.intern(null, "idx");
    arrayOfObject31[2] = Symbol.intern(null, "idx2");
    arrayOfObject31[3] = Symbol.intern(null, "&");
    arrayOfObject31[4] = Symbol.intern(null, "idxv");
    arrayOfObject29[1] = RT.vector(arrayOfObject31);
    const__1316 = PersistentList.create(Arrays.asList(arrayOfObject29));
    Object[] arrayOfObject32 = new Object[12];
    arrayOfObject32[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject33 = new Object[2];
    Object[] arrayOfObject34 = new Object[3];
    arrayOfObject34[0] = Symbol.intern(null, "array");
    arrayOfObject34[1] = Symbol.intern(null, "idx");
    arrayOfObject34[2] = Symbol.intern(null, "val");
    arrayOfObject33[0] = RT.vector(arrayOfObject34);
    Object[] arrayOfObject35 = new Object[5];
    arrayOfObject35[0] = Symbol.intern(null, "array");
    arrayOfObject35[1] = Symbol.intern(null, "idx");
    arrayOfObject35[2] = Symbol.intern(null, "idx2");
    arrayOfObject35[3] = Symbol.intern(null, "&");
    arrayOfObject35[4] = Symbol.intern(null, "idxv");
    arrayOfObject33[1] = RT.vector(arrayOfObject35);
    arrayOfObject32[1] = PersistentList.create(Arrays.asList(arrayOfObject33));
    arrayOfObject32[2] = RT.keyword(null, "column");
    arrayOfObject32[3] = Integer.valueOf(1);
    arrayOfObject32[4] = RT.keyword(null, "added");
    arrayOfObject32[5] = "1.0";
    arrayOfObject32[6] = RT.keyword(null, "doc");
    arrayOfObject32[7] = "Sets the value at the index/indices. Works on arrays of double. Returns val.";
    arrayOfObject32[8] = RT.keyword(null, "line");
    arrayOfObject32[9] = Integer.valueOf(3575);
    arrayOfObject32[10] = RT.keyword(null, "file");
    arrayOfObject32[11] = "clojure/core.clj";
    const__1317 = (AFn)RT.map(arrayOfObject32);
    const__1318 = (Var)RT.var("clojure.core", "aset-short");
    const__1319 = Integer.valueOf(3580);
    Object[] arrayOfObject36 = new Object[2];
    Object[] arrayOfObject37 = new Object[3];
    arrayOfObject37[0] = Symbol.intern(null, "array");
    arrayOfObject37[1] = Symbol.intern(null, "idx");
    arrayOfObject37[2] = Symbol.intern(null, "val");
    arrayOfObject36[0] = RT.vector(arrayOfObject37);
    Object[] arrayOfObject38 = new Object[5];
    arrayOfObject38[0] = Symbol.intern(null, "array");
    arrayOfObject38[1] = Symbol.intern(null, "idx");
    arrayOfObject38[2] = Symbol.intern(null, "idx2");
    arrayOfObject38[3] = Symbol.intern(null, "&");
    arrayOfObject38[4] = Symbol.intern(null, "idxv");
    arrayOfObject36[1] = RT.vector(arrayOfObject38);
    const__1320 = PersistentList.create(Arrays.asList(arrayOfObject36));
    Object[] arrayOfObject39 = new Object[12];
    arrayOfObject39[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject40 = new Object[2];
    Object[] arrayOfObject41 = new Object[3];
    arrayOfObject41[0] = Symbol.intern(null, "array");
    arrayOfObject41[1] = Symbol.intern(null, "idx");
    arrayOfObject41[2] = Symbol.intern(null, "val");
    arrayOfObject40[0] = RT.vector(arrayOfObject41);
    Object[] arrayOfObject42 = new Object[5];
    arrayOfObject42[0] = Symbol.intern(null, "array");
    arrayOfObject42[1] = Symbol.intern(null, "idx");
    arrayOfObject42[2] = Symbol.intern(null, "idx2");
    arrayOfObject42[3] = Symbol.intern(null, "&");
    arrayOfObject42[4] = Symbol.intern(null, "idxv");
    arrayOfObject40[1] = RT.vector(arrayOfObject42);
    arrayOfObject39[1] = PersistentList.create(Arrays.asList(arrayOfObject40));
    arrayOfObject39[2] = RT.keyword(null, "column");
    arrayOfObject39[3] = Integer.valueOf(1);
    arrayOfObject39[4] = RT.keyword(null, "added");
    arrayOfObject39[5] = "1.0";
    arrayOfObject39[6] = RT.keyword(null, "doc");
    arrayOfObject39[7] = "Sets the value at the index/indices. Works on arrays of short. Returns val.";
    arrayOfObject39[8] = RT.keyword(null, "line");
    arrayOfObject39[9] = Integer.valueOf(3580);
    arrayOfObject39[10] = RT.keyword(null, "file");
    arrayOfObject39[11] = "clojure/core.clj";
    const__1321 = (AFn)RT.map(arrayOfObject39);
    const__1322 = (Var)RT.var("clojure.core", "aset-byte");
    const__1323 = Integer.valueOf(3585);
    Object[] arrayOfObject43 = new Object[2];
    Object[] arrayOfObject44 = new Object[3];
    arrayOfObject44[0] = Symbol.intern(null, "array");
    arrayOfObject44[1] = Symbol.intern(null, "idx");
    arrayOfObject44[2] = Symbol.intern(null, "val");
    arrayOfObject43[0] = RT.vector(arrayOfObject44);
    Object[] arrayOfObject45 = new Object[5];
    arrayOfObject45[0] = Symbol.intern(null, "array");
    arrayOfObject45[1] = Symbol.intern(null, "idx");
    arrayOfObject45[2] = Symbol.intern(null, "idx2");
    arrayOfObject45[3] = Symbol.intern(null, "&");
    arrayOfObject45[4] = Symbol.intern(null, "idxv");
    arrayOfObject43[1] = RT.vector(arrayOfObject45);
    const__1324 = PersistentList.create(Arrays.asList(arrayOfObject43));
    Object[] arrayOfObject46 = new Object[12];
    arrayOfObject46[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject47 = new Object[2];
    Object[] arrayOfObject48 = new Object[3];
    arrayOfObject48[0] = Symbol.intern(null, "array");
    arrayOfObject48[1] = Symbol.intern(null, "idx");
    arrayOfObject48[2] = Symbol.intern(null, "val");
    arrayOfObject47[0] = RT.vector(arrayOfObject48);
    Object[] arrayOfObject49 = new Object[5];
    arrayOfObject49[0] = Symbol.intern(null, "array");
    arrayOfObject49[1] = Symbol.intern(null, "idx");
    arrayOfObject49[2] = Symbol.intern(null, "idx2");
    arrayOfObject49[3] = Symbol.intern(null, "&");
    arrayOfObject49[4] = Symbol.intern(null, "idxv");
    arrayOfObject47[1] = RT.vector(arrayOfObject49);
    arrayOfObject46[1] = PersistentList.create(Arrays.asList(arrayOfObject47));
    arrayOfObject46[2] = RT.keyword(null, "column");
    arrayOfObject46[3] = Integer.valueOf(1);
    arrayOfObject46[4] = RT.keyword(null, "added");
    arrayOfObject46[5] = "1.0";
    arrayOfObject46[6] = RT.keyword(null, "doc");
    arrayOfObject46[7] = "Sets the value at the index/indices. Works on arrays of byte. Returns val.";
    arrayOfObject46[8] = RT.keyword(null, "line");
    arrayOfObject46[9] = Integer.valueOf(3585);
    arrayOfObject46[10] = RT.keyword(null, "file");
    arrayOfObject46[11] = "clojure/core.clj";
    const__1325 = (AFn)RT.map(arrayOfObject46);
    const__1326 = (Var)RT.var("clojure.core", "aset-char");
    const__1327 = Integer.valueOf(3590);
    Object[] arrayOfObject50 = new Object[2];
    Object[] arrayOfObject51 = new Object[3];
    arrayOfObject51[0] = Symbol.intern(null, "array");
    arrayOfObject51[1] = Symbol.intern(null, "idx");
    arrayOfObject51[2] = Symbol.intern(null, "val");
    arrayOfObject50[0] = RT.vector(arrayOfObject51);
    Object[] arrayOfObject52 = new Object[5];
    arrayOfObject52[0] = Symbol.intern(null, "array");
    arrayOfObject52[1] = Symbol.intern(null, "idx");
    arrayOfObject52[2] = Symbol.intern(null, "idx2");
    arrayOfObject52[3] = Symbol.intern(null, "&");
    arrayOfObject52[4] = Symbol.intern(null, "idxv");
    arrayOfObject50[1] = RT.vector(arrayOfObject52);
    const__1328 = PersistentList.create(Arrays.asList(arrayOfObject50));
    Object[] arrayOfObject53 = new Object[12];
    arrayOfObject53[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject54 = new Object[2];
    Object[] arrayOfObject55 = new Object[3];
    arrayOfObject55[0] = Symbol.intern(null, "array");
    arrayOfObject55[1] = Symbol.intern(null, "idx");
    arrayOfObject55[2] = Symbol.intern(null, "val");
    arrayOfObject54[0] = RT.vector(arrayOfObject55);
    Object[] arrayOfObject56 = new Object[5];
    arrayOfObject56[0] = Symbol.intern(null, "array");
    arrayOfObject56[1] = Symbol.intern(null, "idx");
    arrayOfObject56[2] = Symbol.intern(null, "idx2");
    arrayOfObject56[3] = Symbol.intern(null, "&");
    arrayOfObject56[4] = Symbol.intern(null, "idxv");
    arrayOfObject54[1] = RT.vector(arrayOfObject56);
    arrayOfObject53[1] = PersistentList.create(Arrays.asList(arrayOfObject54));
    arrayOfObject53[2] = RT.keyword(null, "column");
    arrayOfObject53[3] = Integer.valueOf(1);
    arrayOfObject53[4] = RT.keyword(null, "added");
    arrayOfObject53[5] = "1.0";
    arrayOfObject53[6] = RT.keyword(null, "doc");
    arrayOfObject53[7] = "Sets the value at the index/indices. Works on arrays of char. Returns val.";
    arrayOfObject53[8] = RT.keyword(null, "line");
    arrayOfObject53[9] = Integer.valueOf(3590);
    arrayOfObject53[10] = RT.keyword(null, "file");
    arrayOfObject53[11] = "clojure/core.clj";
    const__1329 = (AFn)RT.map(arrayOfObject53);
    const__1330 = (Var)RT.var("clojure.core", "make-array");
    const__1331 = Integer.valueOf(3595);
    Object[] arrayOfObject57 = new Object[2];
    Object[] arrayOfObject58 = new Object[2];
    IObj localIObj1 = (IObj)Symbol.intern(null, "type");
    Object[] arrayOfObject59 = new Object[2];
    arrayOfObject59[0] = RT.keyword(null, "tag");
    arrayOfObject59[1] = Symbol.intern(null, "Class");
    arrayOfObject58[0] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject59));
    arrayOfObject58[1] = Symbol.intern(null, "len");
    arrayOfObject57[0] = RT.vector(arrayOfObject58);
    Object[] arrayOfObject60 = new Object[4];
    IObj localIObj2 = (IObj)Symbol.intern(null, "type");
    Object[] arrayOfObject61 = new Object[2];
    arrayOfObject61[0] = RT.keyword(null, "tag");
    arrayOfObject61[1] = Symbol.intern(null, "Class");
    arrayOfObject60[0] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject61));
    arrayOfObject60[1] = Symbol.intern(null, "dim");
    arrayOfObject60[2] = Symbol.intern(null, "&");
    arrayOfObject60[3] = Symbol.intern(null, "more-dims");
    arrayOfObject57[1] = RT.vector(arrayOfObject60);
    const__1332 = PersistentList.create(Arrays.asList(arrayOfObject57));
    Object[] arrayOfObject62 = new Object[14];
    arrayOfObject62[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject63 = new Object[2];
    Object[] arrayOfObject64 = new Object[2];
    IObj localIObj3 = (IObj)Symbol.intern(null, "type");
    Object[] arrayOfObject65 = new Object[2];
    arrayOfObject65[0] = RT.keyword(null, "tag");
    arrayOfObject65[1] = Symbol.intern(null, "Class");
    arrayOfObject64[0] = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject65));
    arrayOfObject64[1] = Symbol.intern(null, "len");
    arrayOfObject63[0] = RT.vector(arrayOfObject64);
    Object[] arrayOfObject66 = new Object[4];
    IObj localIObj4 = (IObj)Symbol.intern(null, "type");
    Object[] arrayOfObject67 = new Object[2];
    arrayOfObject67[0] = RT.keyword(null, "tag");
    arrayOfObject67[1] = Symbol.intern(null, "Class");
    arrayOfObject66[0] = localIObj4.withMeta((IPersistentMap)RT.map(arrayOfObject67));
    arrayOfObject66[1] = Symbol.intern(null, "dim");
    arrayOfObject66[2] = Symbol.intern(null, "&");
    arrayOfObject66[3] = Symbol.intern(null, "more-dims");
    arrayOfObject63[1] = RT.vector(arrayOfObject66);
    arrayOfObject62[1] = PersistentList.create(Arrays.asList(arrayOfObject63));
    arrayOfObject62[2] = RT.keyword(null, "column");
    arrayOfObject62[3] = Integer.valueOf(1);
    arrayOfObject62[4] = RT.keyword(null, "added");
    arrayOfObject62[5] = "1.0";
    arrayOfObject62[6] = RT.keyword(null, "static");
    arrayOfObject62[7] = Boolean.TRUE;
    arrayOfObject62[8] = RT.keyword(null, "doc");
    arrayOfObject62[9] = "Creates and returns an array of instances of the specified class of\n  the specified dimension(s).  Note that a class object is required.\n  Class objects can be obtained by using their imported or\n  fully-qualified name.  Class objects for the primitive types can be\n  obtained using, e.g., Integer/TYPE.";
    arrayOfObject62[10] = RT.keyword(null, "line");
    arrayOfObject62[11] = Integer.valueOf(3595);
    arrayOfObject62[12] = RT.keyword(null, "file");
    arrayOfObject62[13] = "clojure/core.clj";
    const__1333 = (AFn)RT.map(arrayOfObject62);
    const__1334 = (Var)RT.var("clojure.core", "to-array-2d");
    const__1335 = Integer.valueOf(3612);
    Object[] arrayOfObject68 = new Object[1];
    Object[] arrayOfObject69 = new Object[1];
    IObj localIObj5 = (IObj)Symbol.intern(null, "coll");
    Object[] arrayOfObject70 = new Object[2];
    arrayOfObject70[0] = RT.keyword(null, "tag");
    arrayOfObject70[1] = Symbol.intern(null, "java.util.Collection");
    arrayOfObject69[0] = localIObj5.withMeta((IPersistentMap)RT.map(arrayOfObject70));
    arrayOfObject68[0] = RT.vector(arrayOfObject69);
    const__1336 = PersistentList.create(Arrays.asList(arrayOfObject68));
    Object[] arrayOfObject71 = new Object[16];
    arrayOfObject71[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject72 = new Object[1];
    Object[] arrayOfObject73 = new Object[1];
    IObj localIObj6 = (IObj)Symbol.intern(null, "coll");
    Object[] arrayOfObject74 = new Object[2];
    arrayOfObject74[0] = RT.keyword(null, "tag");
    arrayOfObject74[1] = Symbol.intern(null, "java.util.Collection");
    arrayOfObject73[0] = localIObj6.withMeta((IPersistentMap)RT.map(arrayOfObject74));
    arrayOfObject72[0] = RT.vector(arrayOfObject73);
    arrayOfObject71[1] = PersistentList.create(Arrays.asList(arrayOfObject72));
    arrayOfObject71[2] = RT.keyword(null, "column");
    arrayOfObject71[3] = Integer.valueOf(1);
    arrayOfObject71[4] = RT.keyword(null, "added");
    arrayOfObject71[5] = "1.0";
    arrayOfObject71[6] = RT.keyword(null, "static");
    arrayOfObject71[7] = Boolean.TRUE;
    arrayOfObject71[8] = RT.keyword(null, "doc");
    arrayOfObject71[9] = "Returns a (potentially-ragged) 2-dimensional array of Objects\n  containing the contents of coll, which can be any Collection of any\n  Collection.";
    arrayOfObject71[10] = RT.keyword(null, "line");
    arrayOfObject71[11] = Integer.valueOf(3612);
    arrayOfObject71[12] = RT.keyword(null, "file");
    arrayOfObject71[13] = "clojure/core.clj";
    arrayOfObject71[14] = RT.keyword(null, "tag");
    arrayOfObject71[15] = "[[Ljava.lang.Object;";
    const__1337 = (AFn)RT.map(arrayOfObject71);
    const__1338 = (Var)RT.var("clojure.core", "macroexpand-1");
    const__1339 = Integer.valueOf(3627);
    Object[] arrayOfObject75 = new Object[1];
    Object[] arrayOfObject76 = new Object[1];
    arrayOfObject76[0] = Symbol.intern(null, "form");
    arrayOfObject75[0] = RT.vector(arrayOfObject76);
    const__1340 = PersistentList.create(Arrays.asList(arrayOfObject75));
    Object[] arrayOfObject77 = new Object[14];
    arrayOfObject77[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject78 = new Object[1];
    Object[] arrayOfObject79 = new Object[1];
    arrayOfObject79[0] = Symbol.intern(null, "form");
    arrayOfObject78[0] = RT.vector(arrayOfObject79);
    arrayOfObject77[1] = PersistentList.create(Arrays.asList(arrayOfObject78));
    arrayOfObject77[2] = RT.keyword(null, "column");
    arrayOfObject77[3] = Integer.valueOf(1);
    arrayOfObject77[4] = RT.keyword(null, "added");
    arrayOfObject77[5] = "1.0";
    arrayOfObject77[6] = RT.keyword(null, "static");
    arrayOfObject77[7] = Boolean.TRUE;
    arrayOfObject77[8] = RT.keyword(null, "doc");
    arrayOfObject77[9] = "If form represents a macro form, returns its expansion,\n  else returns form.";
    arrayOfObject77[10] = RT.keyword(null, "line");
    arrayOfObject77[11] = Integer.valueOf(3627);
    arrayOfObject77[12] = RT.keyword(null, "file");
    arrayOfObject77[13] = "clojure/core.clj";
    const__1341 = (AFn)RT.map(arrayOfObject77);
    const__1342 = (Var)RT.var("clojure.core", "macroexpand");
    const__1343 = Integer.valueOf(3635);
    Object[] arrayOfObject80 = new Object[1];
    Object[] arrayOfObject81 = new Object[1];
    arrayOfObject81[0] = Symbol.intern(null, "form");
    arrayOfObject80[0] = RT.vector(arrayOfObject81);
    const__1344 = PersistentList.create(Arrays.asList(arrayOfObject80));
    Object[] arrayOfObject82 = new Object[14];
    arrayOfObject82[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject83 = new Object[1];
    Object[] arrayOfObject84 = new Object[1];
    arrayOfObject84[0] = Symbol.intern(null, "form");
    arrayOfObject83[0] = RT.vector(arrayOfObject84);
    arrayOfObject82[1] = PersistentList.create(Arrays.asList(arrayOfObject83));
    arrayOfObject82[2] = RT.keyword(null, "column");
    arrayOfObject82[3] = Integer.valueOf(1);
    arrayOfObject82[4] = RT.keyword(null, "added");
    arrayOfObject82[5] = "1.0";
    arrayOfObject82[6] = RT.keyword(null, "static");
    arrayOfObject82[7] = Boolean.TRUE;
    arrayOfObject82[8] = RT.keyword(null, "doc");
    arrayOfObject82[9] = "Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms.";
    arrayOfObject82[10] = RT.keyword(null, "line");
    arrayOfObject82[11] = Integer.valueOf(3635);
    arrayOfObject82[12] = RT.keyword(null, "file");
    arrayOfObject82[13] = "clojure/core.clj";
    const__1345 = (AFn)RT.map(arrayOfObject82);
    const__1346 = (Var)RT.var("clojure.core", "create-struct");
    const__1347 = Integer.valueOf(3647);
    Object[] arrayOfObject85 = new Object[1];
    Object[] arrayOfObject86 = new Object[2];
    arrayOfObject86[0] = Symbol.intern(null, "&");
    arrayOfObject86[1] = Symbol.intern(null, "keys");
    arrayOfObject85[0] = RT.vector(arrayOfObject86);
    const__1348 = PersistentList.create(Arrays.asList(arrayOfObject85));
    Object[] arrayOfObject87 = new Object[14];
    arrayOfObject87[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject88 = new Object[1];
    Object[] arrayOfObject89 = new Object[2];
    arrayOfObject89[0] = Symbol.intern(null, "&");
    arrayOfObject89[1] = Symbol.intern(null, "keys");
    arrayOfObject88[0] = RT.vector(arrayOfObject89);
    arrayOfObject87[1] = PersistentList.create(Arrays.asList(arrayOfObject88));
    arrayOfObject87[2] = RT.keyword(null, "column");
    arrayOfObject87[3] = Integer.valueOf(1);
    arrayOfObject87[4] = RT.keyword(null, "added");
    arrayOfObject87[5] = "1.0";
    arrayOfObject87[6] = RT.keyword(null, "static");
    arrayOfObject87[7] = Boolean.TRUE;
    arrayOfObject87[8] = RT.keyword(null, "doc");
    arrayOfObject87[9] = "Returns a structure basis object.";
    arrayOfObject87[10] = RT.keyword(null, "line");
    arrayOfObject87[11] = Integer.valueOf(3647);
    arrayOfObject87[12] = RT.keyword(null, "file");
    arrayOfObject87[13] = "clojure/core.clj";
    const__1349 = (AFn)RT.map(arrayOfObject87);
    const__1350 = (Var)RT.var("clojure.core", "defstruct");
    const__1351 = Integer.valueOf(3654);
    Object[] arrayOfObject90 = new Object[1];
    Object[] arrayOfObject91 = new Object[3];
    arrayOfObject91[0] = Symbol.intern(null, "name");
    arrayOfObject91[1] = Symbol.intern(null, "&");
    arrayOfObject91[2] = Symbol.intern(null, "keys");
    arrayOfObject90[0] = RT.vector(arrayOfObject91);
    const__1352 = PersistentList.create(Arrays.asList(arrayOfObject90));
    Object[] arrayOfObject92 = new Object[14];
    arrayOfObject92[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject93 = new Object[1];
    Object[] arrayOfObject94 = new Object[3];
    arrayOfObject94[0] = Symbol.intern(null, "name");
    arrayOfObject94[1] = Symbol.intern(null, "&");
    arrayOfObject94[2] = Symbol.intern(null, "keys");
    arrayOfObject93[0] = RT.vector(arrayOfObject94);
    arrayOfObject92[1] = PersistentList.create(Arrays.asList(arrayOfObject93));
    arrayOfObject92[2] = RT.keyword(null, "column");
    arrayOfObject92[3] = Integer.valueOf(1);
    arrayOfObject92[4] = RT.keyword(null, "added");
    arrayOfObject92[5] = "1.0";
    arrayOfObject92[6] = RT.keyword(null, "static");
    arrayOfObject92[7] = Boolean.TRUE;
    arrayOfObject92[8] = RT.keyword(null, "doc");
    arrayOfObject92[9] = "Same as (def name (create-struct keys...))";
    arrayOfObject92[10] = RT.keyword(null, "line");
    arrayOfObject92[11] = Integer.valueOf(3654);
    arrayOfObject92[12] = RT.keyword(null, "file");
    arrayOfObject92[13] = "clojure/core.clj";
    const__1353 = (AFn)RT.map(arrayOfObject92);
    const__1354 = (Var)RT.var("clojure.core", "struct-map");
    const__1355 = Integer.valueOf(3661);
    Object[] arrayOfObject95 = new Object[1];
    Object[] arrayOfObject96 = new Object[3];
    arrayOfObject96[0] = Symbol.intern(null, "s");
    arrayOfObject96[1] = Symbol.intern(null, "&");
    arrayOfObject96[2] = Symbol.intern(null, "inits");
    arrayOfObject95[0] = RT.vector(arrayOfObject96);
    const__1356 = PersistentList.create(Arrays.asList(arrayOfObject95));
    Object[] arrayOfObject97 = new Object[14];
    arrayOfObject97[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject98 = new Object[1];
    Object[] arrayOfObject99 = new Object[3];
    arrayOfObject99[0] = Symbol.intern(null, "s");
    arrayOfObject99[1] = Symbol.intern(null, "&");
    arrayOfObject99[2] = Symbol.intern(null, "inits");
    arrayOfObject98[0] = RT.vector(arrayOfObject99);
    arrayOfObject97[1] = PersistentList.create(Arrays.asList(arrayOfObject98));
    arrayOfObject97[2] = RT.keyword(null, "column");
    arrayOfObject97[3] = Integer.valueOf(1);
    arrayOfObject97[4] = RT.keyword(null, "added");
    arrayOfObject97[5] = "1.0";
    arrayOfObject97[6] = RT.keyword(null, "static");
    arrayOfObject97[7] = Boolean.TRUE;
    arrayOfObject97[8] = RT.keyword(null, "doc");
    arrayOfObject97[9] = "Returns a new structmap instance with the keys of the\n  structure-basis. keyvals may contain all, some or none of the basis\n  keys - where values are not supplied they will default to nil.\n  keyvals can also contain keys not in the basis.";
    arrayOfObject97[10] = RT.keyword(null, "line");
    arrayOfObject97[11] = Integer.valueOf(3661);
    arrayOfObject97[12] = RT.keyword(null, "file");
    arrayOfObject97[13] = "clojure/core.clj";
    const__1357 = (AFn)RT.map(arrayOfObject97);
    const__1358 = (Var)RT.var("clojure.core", "struct");
    const__1359 = Integer.valueOf(3671);
    Object[] arrayOfObject100 = new Object[1];
    Object[] arrayOfObject101 = new Object[3];
    arrayOfObject101[0] = Symbol.intern(null, "s");
    arrayOfObject101[1] = Symbol.intern(null, "&");
    arrayOfObject101[2] = Symbol.intern(null, "vals");
    arrayOfObject100[0] = RT.vector(arrayOfObject101);
    const__1360 = PersistentList.create(Arrays.asList(arrayOfObject100));
    Object[] arrayOfObject102 = new Object[14];
    arrayOfObject102[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject103 = new Object[1];
    Object[] arrayOfObject104 = new Object[3];
    arrayOfObject104[0] = Symbol.intern(null, "s");
    arrayOfObject104[1] = Symbol.intern(null, "&");
    arrayOfObject104[2] = Symbol.intern(null, "vals");
    arrayOfObject103[0] = RT.vector(arrayOfObject104);
    arrayOfObject102[1] = PersistentList.create(Arrays.asList(arrayOfObject103));
    arrayOfObject102[2] = RT.keyword(null, "column");
    arrayOfObject102[3] = Integer.valueOf(1);
    arrayOfObject102[4] = RT.keyword(null, "added");
    arrayOfObject102[5] = "1.0";
    arrayOfObject102[6] = RT.keyword(null, "static");
    arrayOfObject102[7] = Boolean.TRUE;
    arrayOfObject102[8] = RT.keyword(null, "doc");
    arrayOfObject102[9] = "Returns a new structmap instance with the keys of the\n  structure-basis. vals must be supplied for basis keys in order -\n  where values are not supplied they will default to nil.";
    arrayOfObject102[10] = RT.keyword(null, "line");
    arrayOfObject102[11] = Integer.valueOf(3671);
    arrayOfObject102[12] = RT.keyword(null, "file");
    arrayOfObject102[13] = "clojure/core.clj";
    const__1361 = (AFn)RT.map(arrayOfObject102);
    const__1362 = (Var)RT.var("clojure.core", "accessor");
    const__1363 = Integer.valueOf(3680);
    Object[] arrayOfObject105 = new Object[1];
    Object[] arrayOfObject106 = new Object[2];
    arrayOfObject106[0] = Symbol.intern(null, "s");
    arrayOfObject106[1] = Symbol.intern(null, "key");
    arrayOfObject105[0] = RT.vector(arrayOfObject106);
    const__1364 = PersistentList.create(Arrays.asList(arrayOfObject105));
    Object[] arrayOfObject107 = new Object[14];
    arrayOfObject107[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject108 = new Object[1];
    Object[] arrayOfObject109 = new Object[2];
    arrayOfObject109[0] = Symbol.intern(null, "s");
    arrayOfObject109[1] = Symbol.intern(null, "key");
    arrayOfObject108[0] = RT.vector(arrayOfObject109);
    arrayOfObject107[1] = PersistentList.create(Arrays.asList(arrayOfObject108));
    arrayOfObject107[2] = RT.keyword(null, "column");
    arrayOfObject107[3] = Integer.valueOf(1);
    arrayOfObject107[4] = RT.keyword(null, "added");
    arrayOfObject107[5] = "1.0";
    arrayOfObject107[6] = RT.keyword(null, "static");
    arrayOfObject107[7] = Boolean.TRUE;
    arrayOfObject107[8] = RT.keyword(null, "doc");
    arrayOfObject107[9] = "Returns a fn that, given an instance of a structmap with the basis,\n  returns the value at the key.  The key must be in the basis. The\n  returned function should be (slightly) more efficient than using\n  get, but such use of accessors should be limited to known\n  performance-critical areas.";
    arrayOfObject107[10] = RT.keyword(null, "line");
    arrayOfObject107[11] = Integer.valueOf(3680);
    arrayOfObject107[12] = RT.keyword(null, "file");
    arrayOfObject107[13] = "clojure/core.clj";
    const__1365 = (AFn)RT.map(arrayOfObject107);
    const__1366 = (Var)RT.var("clojure.core", "load-reader");
    const__1367 = Integer.valueOf(3691);
    Object[] arrayOfObject110 = new Object[1];
    Object[] arrayOfObject111 = new Object[1];
    arrayOfObject111[0] = Symbol.intern(null, "rdr");
    arrayOfObject110[0] = RT.vector(arrayOfObject111);
    const__1368 = PersistentList.create(Arrays.asList(arrayOfObject110));
    Object[] arrayOfObject112 = new Object[14];
    arrayOfObject112[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject113 = new Object[1];
    Object[] arrayOfObject114 = new Object[1];
    arrayOfObject114[0] = Symbol.intern(null, "rdr");
    arrayOfObject113[0] = RT.vector(arrayOfObject114);
    arrayOfObject112[1] = PersistentList.create(Arrays.asList(arrayOfObject113));
    arrayOfObject112[2] = RT.keyword(null, "column");
    arrayOfObject112[3] = Integer.valueOf(1);
    arrayOfObject112[4] = RT.keyword(null, "added");
    arrayOfObject112[5] = "1.0";
    arrayOfObject112[6] = RT.keyword(null, "static");
    arrayOfObject112[7] = Boolean.TRUE;
    arrayOfObject112[8] = RT.keyword(null, "doc");
    arrayOfObject112[9] = "Sequentially read and evaluate the set of forms contained in the\n  stream/file";
    arrayOfObject112[10] = RT.keyword(null, "line");
    arrayOfObject112[11] = Integer.valueOf(3691);
    arrayOfObject112[12] = RT.keyword(null, "file");
    arrayOfObject112[13] = "clojure/core.clj";
    const__1369 = (AFn)RT.map(arrayOfObject112);
    const__1370 = (Var)RT.var("clojure.core", "load-string");
    const__1371 = Integer.valueOf(3698);
    Object[] arrayOfObject115 = new Object[1];
    Object[] arrayOfObject116 = new Object[1];
    arrayOfObject116[0] = Symbol.intern(null, "s");
    arrayOfObject115[0] = RT.vector(arrayOfObject116);
    const__1372 = PersistentList.create(Arrays.asList(arrayOfObject115));
    Object[] arrayOfObject117 = new Object[14];
    arrayOfObject117[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject118 = new Object[1];
    Object[] arrayOfObject119 = new Object[1];
    arrayOfObject119[0] = Symbol.intern(null, "s");
    arrayOfObject118[0] = RT.vector(arrayOfObject119);
    arrayOfObject117[1] = PersistentList.create(Arrays.asList(arrayOfObject118));
    arrayOfObject117[2] = RT.keyword(null, "column");
    arrayOfObject117[3] = Integer.valueOf(1);
    arrayOfObject117[4] = RT.keyword(null, "added");
    arrayOfObject117[5] = "1.0";
    arrayOfObject117[6] = RT.keyword(null, "static");
    arrayOfObject117[7] = Boolean.TRUE;
    arrayOfObject117[8] = RT.keyword(null, "doc");
    arrayOfObject117[9] = "Sequentially read and evaluate the set of forms contained in the\n  string";
    arrayOfObject117[10] = RT.keyword(null, "line");
    arrayOfObject117[11] = Integer.valueOf(3698);
    arrayOfObject117[12] = RT.keyword(null, "file");
    arrayOfObject117[13] = "clojure/core.clj";
    const__1373 = (AFn)RT.map(arrayOfObject117);
    const__1374 = (Var)RT.var("clojure.core", "set");
    const__1375 = Integer.valueOf(3708);
    Object[] arrayOfObject120 = new Object[1];
    Object[] arrayOfObject121 = new Object[1];
    arrayOfObject121[0] = Symbol.intern(null, "coll");
    arrayOfObject120[0] = RT.vector(arrayOfObject121);
    const__1376 = PersistentList.create(Arrays.asList(arrayOfObject120));
    Object[] arrayOfObject122 = new Object[14];
    arrayOfObject122[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject123 = new Object[1];
    Object[] arrayOfObject124 = new Object[1];
    arrayOfObject124[0] = Symbol.intern(null, "coll");
    arrayOfObject123[0] = RT.vector(arrayOfObject124);
    arrayOfObject122[1] = PersistentList.create(Arrays.asList(arrayOfObject123));
    arrayOfObject122[2] = RT.keyword(null, "column");
    arrayOfObject122[3] = Integer.valueOf(1);
    arrayOfObject122[4] = RT.keyword(null, "added");
    arrayOfObject122[5] = "1.0";
    arrayOfObject122[6] = RT.keyword(null, "static");
    arrayOfObject122[7] = Boolean.TRUE;
    arrayOfObject122[8] = RT.keyword(null, "doc");
    arrayOfObject122[9] = "Returns a set of the distinct elements of coll.";
    arrayOfObject122[10] = RT.keyword(null, "line");
    arrayOfObject122[11] = Integer.valueOf(3708);
    arrayOfObject122[12] = RT.keyword(null, "file");
    arrayOfObject122[13] = "clojure/core.clj";
    const__1377 = (AFn)RT.map(arrayOfObject122);
    const__1378 = (Var)RT.var("clojure.core", "filter-key");
    const__1379 = Integer.valueOf(3714);
    Object[] arrayOfObject125 = new Object[1];
    Object[] arrayOfObject126 = new Object[3];
    arrayOfObject126[0] = Symbol.intern(null, "keyfn");
    arrayOfObject126[1] = Symbol.intern(null, "pred");
    arrayOfObject126[2] = Symbol.intern(null, "amap");
    arrayOfObject125[0] = RT.vector(arrayOfObject126);
    const__1380 = PersistentList.create(Arrays.asList(arrayOfObject125));
    Object[] arrayOfObject127 = new Object[12];
    arrayOfObject127[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject128 = new Object[1];
    Object[] arrayOfObject129 = new Object[3];
    arrayOfObject129[0] = Symbol.intern(null, "keyfn");
    arrayOfObject129[1] = Symbol.intern(null, "pred");
    arrayOfObject129[2] = Symbol.intern(null, "amap");
    arrayOfObject128[0] = RT.vector(arrayOfObject129);
    arrayOfObject127[1] = PersistentList.create(Arrays.asList(arrayOfObject128));
    arrayOfObject127[2] = RT.keyword(null, "column");
    arrayOfObject127[3] = Integer.valueOf(1);
    arrayOfObject127[4] = RT.keyword(null, "private");
    arrayOfObject127[5] = Boolean.TRUE;
    arrayOfObject127[6] = RT.keyword(null, "static");
    arrayOfObject127[7] = Boolean.TRUE;
    arrayOfObject127[8] = RT.keyword(null, "line");
    arrayOfObject127[9] = Integer.valueOf(3714);
    arrayOfObject127[10] = RT.keyword(null, "file");
    arrayOfObject127[11] = "clojure/core.clj";
    const__1381 = (AFn)RT.map(arrayOfObject127);
    const__1382 = (Var)RT.var("clojure.core", "find-ns");
    const__1383 = Integer.valueOf(3724);
    Object[] arrayOfObject130 = new Object[1];
    Object[] arrayOfObject131 = new Object[1];
    arrayOfObject131[0] = Symbol.intern(null, "sym");
    arrayOfObject130[0] = RT.vector(arrayOfObject131);
    const__1384 = PersistentList.create(Arrays.asList(arrayOfObject130));
    Object[] arrayOfObject132 = new Object[14];
    arrayOfObject132[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject133 = new Object[1];
    Object[] arrayOfObject134 = new Object[1];
    arrayOfObject134[0] = Symbol.intern(null, "sym");
    arrayOfObject133[0] = RT.vector(arrayOfObject134);
    arrayOfObject132[1] = PersistentList.create(Arrays.asList(arrayOfObject133));
    arrayOfObject132[2] = RT.keyword(null, "column");
    arrayOfObject132[3] = Integer.valueOf(1);
    arrayOfObject132[4] = RT.keyword(null, "added");
    arrayOfObject132[5] = "1.0";
    arrayOfObject132[6] = RT.keyword(null, "static");
    arrayOfObject132[7] = Boolean.TRUE;
    arrayOfObject132[8] = RT.keyword(null, "doc");
    arrayOfObject132[9] = "Returns the namespace named by the symbol or nil if it doesn't exist.";
    arrayOfObject132[10] = RT.keyword(null, "line");
    arrayOfObject132[11] = Integer.valueOf(3724);
    arrayOfObject132[12] = RT.keyword(null, "file");
    arrayOfObject132[13] = "clojure/core.clj";
    const__1385 = (AFn)RT.map(arrayOfObject132);
    const__1386 = (Var)RT.var("clojure.core", "create-ns");
    const__1387 = Integer.valueOf(3730);
    Object[] arrayOfObject135 = new Object[1];
    Object[] arrayOfObject136 = new Object[1];
    arrayOfObject136[0] = Symbol.intern(null, "sym");
    arrayOfObject135[0] = RT.vector(arrayOfObject136);
    const__1388 = PersistentList.create(Arrays.asList(arrayOfObject135));
    Object[] arrayOfObject137 = new Object[14];
    arrayOfObject137[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject138 = new Object[1];
    Object[] arrayOfObject139 = new Object[1];
    arrayOfObject139[0] = Symbol.intern(null, "sym");
    arrayOfObject138[0] = RT.vector(arrayOfObject139);
    arrayOfObject137[1] = PersistentList.create(Arrays.asList(arrayOfObject138));
    arrayOfObject137[2] = RT.keyword(null, "column");
    arrayOfObject137[3] = Integer.valueOf(1);
    arrayOfObject137[4] = RT.keyword(null, "added");
    arrayOfObject137[5] = "1.0";
    arrayOfObject137[6] = RT.keyword(null, "static");
    arrayOfObject137[7] = Boolean.TRUE;
    arrayOfObject137[8] = RT.keyword(null, "doc");
    arrayOfObject137[9] = "Create a new namespace named by the symbol if one doesn't already\n  exist, returns it or the already-existing namespace of the same\n  name.";
    arrayOfObject137[10] = RT.keyword(null, "line");
    arrayOfObject137[11] = Integer.valueOf(3730);
    arrayOfObject137[12] = RT.keyword(null, "file");
    arrayOfObject137[13] = "clojure/core.clj";
    const__1389 = (AFn)RT.map(arrayOfObject137);
    const__1390 = (Var)RT.var("clojure.core", "remove-ns");
    const__1391 = Integer.valueOf(3738);
    Object[] arrayOfObject140 = new Object[1];
    Object[] arrayOfObject141 = new Object[1];
    arrayOfObject141[0] = Symbol.intern(null, "sym");
    arrayOfObject140[0] = RT.vector(arrayOfObject141);
    const__1392 = PersistentList.create(Arrays.asList(arrayOfObject140));
    Object[] arrayOfObject142 = new Object[14];
    arrayOfObject142[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject143 = new Object[1];
    Object[] arrayOfObject144 = new Object[1];
    arrayOfObject144[0] = Symbol.intern(null, "sym");
    arrayOfObject143[0] = RT.vector(arrayOfObject144);
    arrayOfObject142[1] = PersistentList.create(Arrays.asList(arrayOfObject143));
    arrayOfObject142[2] = RT.keyword(null, "column");
    arrayOfObject142[3] = Integer.valueOf(1);
    arrayOfObject142[4] = RT.keyword(null, "added");
    arrayOfObject142[5] = "1.0";
    arrayOfObject142[6] = RT.keyword(null, "static");
    arrayOfObject142[7] = Boolean.TRUE;
    arrayOfObject142[8] = RT.keyword(null, "doc");
    arrayOfObject142[9] = "Removes the namespace named by the symbol. Use with caution.\n  Cannot be used to remove the clojure namespace.";
    arrayOfObject142[10] = RT.keyword(null, "line");
    arrayOfObject142[11] = Integer.valueOf(3738);
    arrayOfObject142[12] = RT.keyword(null, "file");
    arrayOfObject142[13] = "clojure/core.clj";
    const__1393 = (AFn)RT.map(arrayOfObject142);
    const__1394 = (Var)RT.var("clojure.core", "all-ns");
    const__1395 = Integer.valueOf(3745);
    Object[] arrayOfObject145 = new Object[1];
    arrayOfObject145[0] = RT.vector(new Object[0]);
    const__1396 = PersistentList.create(Arrays.asList(arrayOfObject145));
    Object[] arrayOfObject146 = new Object[14];
    arrayOfObject146[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject147 = new Object[1];
    arrayOfObject147[0] = RT.vector(new Object[0]);
    arrayOfObject146[1] = PersistentList.create(Arrays.asList(arrayOfObject147));
    arrayOfObject146[2] = RT.keyword(null, "column");
    arrayOfObject146[3] = Integer.valueOf(1);
    arrayOfObject146[4] = RT.keyword(null, "added");
    arrayOfObject146[5] = "1.0";
    arrayOfObject146[6] = RT.keyword(null, "static");
    arrayOfObject146[7] = Boolean.TRUE;
    arrayOfObject146[8] = RT.keyword(null, "doc");
    arrayOfObject146[9] = "Returns a sequence of all namespaces.";
    arrayOfObject146[10] = RT.keyword(null, "line");
    arrayOfObject146[11] = Integer.valueOf(3745);
    arrayOfObject146[12] = RT.keyword(null, "file");
    arrayOfObject146[13] = "clojure/core.clj";
    const__1397 = (AFn)RT.map(arrayOfObject146);
    const__1398 = (Var)RT.var("clojure.core", "the-ns");
    const__1399 = Integer.valueOf(3751);
  }

  public static void __init14()
  {
    Object[] arrayOfObject1 = new Object[1];
    Object[] arrayOfObject2 = new Object[1];
    arrayOfObject2[0] = Symbol.intern(null, "x");
    IObj localIObj1 = (IObj)RT.vector(arrayOfObject2);
    Object[] arrayOfObject3 = new Object[2];
    arrayOfObject3[0] = RT.keyword(null, "tag");
    arrayOfObject3[1] = Symbol.intern(null, "clojure.lang.Namespace");
    arrayOfObject1[0] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject3));
    const__1400 = PersistentList.create(Arrays.asList(arrayOfObject1));
    Object[] arrayOfObject4 = new Object[14];
    arrayOfObject4[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject5 = new Object[1];
    Object[] arrayOfObject6 = new Object[1];
    arrayOfObject6[0] = Symbol.intern(null, "x");
    IObj localIObj2 = (IObj)RT.vector(arrayOfObject6);
    Object[] arrayOfObject7 = new Object[2];
    arrayOfObject7[0] = RT.keyword(null, "tag");
    arrayOfObject7[1] = Symbol.intern(null, "clojure.lang.Namespace");
    arrayOfObject5[0] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject7));
    arrayOfObject4[1] = PersistentList.create(Arrays.asList(arrayOfObject5));
    arrayOfObject4[2] = RT.keyword(null, "column");
    arrayOfObject4[3] = Integer.valueOf(1);
    arrayOfObject4[4] = RT.keyword(null, "added");
    arrayOfObject4[5] = "1.0";
    arrayOfObject4[6] = RT.keyword(null, "static");
    arrayOfObject4[7] = Boolean.TRUE;
    arrayOfObject4[8] = RT.keyword(null, "doc");
    arrayOfObject4[9] = "If passed a namespace, returns it. Else, when passed a symbol,\n  returns the namespace named by it, throwing an exception if not\n  found.";
    arrayOfObject4[10] = RT.keyword(null, "line");
    arrayOfObject4[11] = Integer.valueOf(3751);
    arrayOfObject4[12] = RT.keyword(null, "file");
    arrayOfObject4[13] = "clojure/core.clj";
    const__1401 = (AFn)RT.map(arrayOfObject4);
    const__1402 = (Var)RT.var("clojure.core", "ns-name");
    const__1403 = Integer.valueOf(3762);
    Object[] arrayOfObject8 = new Object[1];
    Object[] arrayOfObject9 = new Object[1];
    arrayOfObject9[0] = Symbol.intern(null, "ns");
    arrayOfObject8[0] = RT.vector(arrayOfObject9);
    const__1404 = PersistentList.create(Arrays.asList(arrayOfObject8));
    Object[] arrayOfObject10 = new Object[14];
    arrayOfObject10[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject11 = new Object[1];
    Object[] arrayOfObject12 = new Object[1];
    arrayOfObject12[0] = Symbol.intern(null, "ns");
    arrayOfObject11[0] = RT.vector(arrayOfObject12);
    arrayOfObject10[1] = PersistentList.create(Arrays.asList(arrayOfObject11));
    arrayOfObject10[2] = RT.keyword(null, "column");
    arrayOfObject10[3] = Integer.valueOf(1);
    arrayOfObject10[4] = RT.keyword(null, "added");
    arrayOfObject10[5] = "1.0";
    arrayOfObject10[6] = RT.keyword(null, "static");
    arrayOfObject10[7] = Boolean.TRUE;
    arrayOfObject10[8] = RT.keyword(null, "doc");
    arrayOfObject10[9] = "Returns the name of the namespace, a symbol.";
    arrayOfObject10[10] = RT.keyword(null, "line");
    arrayOfObject10[11] = Integer.valueOf(3762);
    arrayOfObject10[12] = RT.keyword(null, "file");
    arrayOfObject10[13] = "clojure/core.clj";
    const__1405 = (AFn)RT.map(arrayOfObject10);
    const__1406 = (Var)RT.var("clojure.core", "ns-map");
    const__1407 = Integer.valueOf(3769);
    Object[] arrayOfObject13 = new Object[1];
    Object[] arrayOfObject14 = new Object[1];
    arrayOfObject14[0] = Symbol.intern(null, "ns");
    arrayOfObject13[0] = RT.vector(arrayOfObject14);
    const__1408 = PersistentList.create(Arrays.asList(arrayOfObject13));
    Object[] arrayOfObject15 = new Object[14];
    arrayOfObject15[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject16 = new Object[1];
    Object[] arrayOfObject17 = new Object[1];
    arrayOfObject17[0] = Symbol.intern(null, "ns");
    arrayOfObject16[0] = RT.vector(arrayOfObject17);
    arrayOfObject15[1] = PersistentList.create(Arrays.asList(arrayOfObject16));
    arrayOfObject15[2] = RT.keyword(null, "column");
    arrayOfObject15[3] = Integer.valueOf(1);
    arrayOfObject15[4] = RT.keyword(null, "added");
    arrayOfObject15[5] = "1.0";
    arrayOfObject15[6] = RT.keyword(null, "static");
    arrayOfObject15[7] = Boolean.TRUE;
    arrayOfObject15[8] = RT.keyword(null, "doc");
    arrayOfObject15[9] = "Returns a map of all the mappings for the namespace.";
    arrayOfObject15[10] = RT.keyword(null, "line");
    arrayOfObject15[11] = Integer.valueOf(3769);
    arrayOfObject15[12] = RT.keyword(null, "file");
    arrayOfObject15[13] = "clojure/core.clj";
    const__1409 = (AFn)RT.map(arrayOfObject15);
    const__1410 = (Var)RT.var("clojure.core", "ns-unmap");
    const__1411 = Integer.valueOf(3776);
    Object[] arrayOfObject18 = new Object[1];
    Object[] arrayOfObject19 = new Object[2];
    arrayOfObject19[0] = Symbol.intern(null, "ns");
    arrayOfObject19[1] = Symbol.intern(null, "sym");
    arrayOfObject18[0] = RT.vector(arrayOfObject19);
    const__1412 = PersistentList.create(Arrays.asList(arrayOfObject18));
    Object[] arrayOfObject20 = new Object[14];
    arrayOfObject20[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject21 = new Object[1];
    Object[] arrayOfObject22 = new Object[2];
    arrayOfObject22[0] = Symbol.intern(null, "ns");
    arrayOfObject22[1] = Symbol.intern(null, "sym");
    arrayOfObject21[0] = RT.vector(arrayOfObject22);
    arrayOfObject20[1] = PersistentList.create(Arrays.asList(arrayOfObject21));
    arrayOfObject20[2] = RT.keyword(null, "column");
    arrayOfObject20[3] = Integer.valueOf(1);
    arrayOfObject20[4] = RT.keyword(null, "added");
    arrayOfObject20[5] = "1.0";
    arrayOfObject20[6] = RT.keyword(null, "static");
    arrayOfObject20[7] = Boolean.TRUE;
    arrayOfObject20[8] = RT.keyword(null, "doc");
    arrayOfObject20[9] = "Removes the mappings for the symbol from the namespace.";
    arrayOfObject20[10] = RT.keyword(null, "line");
    arrayOfObject20[11] = Integer.valueOf(3776);
    arrayOfObject20[12] = RT.keyword(null, "file");
    arrayOfObject20[13] = "clojure/core.clj";
    const__1413 = (AFn)RT.map(arrayOfObject20);
    const__1414 = (Var)RT.var("clojure.core", "ns-publics");
    const__1415 = Integer.valueOf(3787);
    Object[] arrayOfObject23 = new Object[1];
    Object[] arrayOfObject24 = new Object[1];
    arrayOfObject24[0] = Symbol.intern(null, "ns");
    arrayOfObject23[0] = RT.vector(arrayOfObject24);
    const__1416 = PersistentList.create(Arrays.asList(arrayOfObject23));
    Object[] arrayOfObject25 = new Object[14];
    arrayOfObject25[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject26 = new Object[1];
    Object[] arrayOfObject27 = new Object[1];
    arrayOfObject27[0] = Symbol.intern(null, "ns");
    arrayOfObject26[0] = RT.vector(arrayOfObject27);
    arrayOfObject25[1] = PersistentList.create(Arrays.asList(arrayOfObject26));
    arrayOfObject25[2] = RT.keyword(null, "column");
    arrayOfObject25[3] = Integer.valueOf(1);
    arrayOfObject25[4] = RT.keyword(null, "added");
    arrayOfObject25[5] = "1.0";
    arrayOfObject25[6] = RT.keyword(null, "static");
    arrayOfObject25[7] = Boolean.TRUE;
    arrayOfObject25[8] = RT.keyword(null, "doc");
    arrayOfObject25[9] = "Returns a map of the public intern mappings for the namespace.";
    arrayOfObject25[10] = RT.keyword(null, "line");
    arrayOfObject25[11] = Integer.valueOf(3787);
    arrayOfObject25[12] = RT.keyword(null, "file");
    arrayOfObject25[13] = "clojure/core.clj";
    const__1417 = (AFn)RT.map(arrayOfObject25);
    const__1418 = (Var)RT.var("clojure.core", "ns-imports");
    const__1419 = Integer.valueOf(3798);
    Object[] arrayOfObject28 = new Object[1];
    Object[] arrayOfObject29 = new Object[1];
    arrayOfObject29[0] = Symbol.intern(null, "ns");
    arrayOfObject28[0] = RT.vector(arrayOfObject29);
    const__1420 = PersistentList.create(Arrays.asList(arrayOfObject28));
    Object[] arrayOfObject30 = new Object[14];
    arrayOfObject30[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject31 = new Object[1];
    Object[] arrayOfObject32 = new Object[1];
    arrayOfObject32[0] = Symbol.intern(null, "ns");
    arrayOfObject31[0] = RT.vector(arrayOfObject32);
    arrayOfObject30[1] = PersistentList.create(Arrays.asList(arrayOfObject31));
    arrayOfObject30[2] = RT.keyword(null, "column");
    arrayOfObject30[3] = Integer.valueOf(1);
    arrayOfObject30[4] = RT.keyword(null, "added");
    arrayOfObject30[5] = "1.0";
    arrayOfObject30[6] = RT.keyword(null, "static");
    arrayOfObject30[7] = Boolean.TRUE;
    arrayOfObject30[8] = RT.keyword(null, "doc");
    arrayOfObject30[9] = "Returns a map of the import mappings for the namespace.";
    arrayOfObject30[10] = RT.keyword(null, "line");
    arrayOfObject30[11] = Integer.valueOf(3798);
    arrayOfObject30[12] = RT.keyword(null, "file");
    arrayOfObject30[13] = "clojure/core.clj";
    const__1421 = (AFn)RT.map(arrayOfObject30);
    const__1422 = (Var)RT.var("clojure.core", "ns-interns");
    const__1423 = Integer.valueOf(3805);
    Object[] arrayOfObject33 = new Object[1];
    Object[] arrayOfObject34 = new Object[1];
    arrayOfObject34[0] = Symbol.intern(null, "ns");
    arrayOfObject33[0] = RT.vector(arrayOfObject34);
    const__1424 = PersistentList.create(Arrays.asList(arrayOfObject33));
    Object[] arrayOfObject35 = new Object[14];
    arrayOfObject35[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject36 = new Object[1];
    Object[] arrayOfObject37 = new Object[1];
    arrayOfObject37[0] = Symbol.intern(null, "ns");
    arrayOfObject36[0] = RT.vector(arrayOfObject37);
    arrayOfObject35[1] = PersistentList.create(Arrays.asList(arrayOfObject36));
    arrayOfObject35[2] = RT.keyword(null, "column");
    arrayOfObject35[3] = Integer.valueOf(1);
    arrayOfObject35[4] = RT.keyword(null, "added");
    arrayOfObject35[5] = "1.0";
    arrayOfObject35[6] = RT.keyword(null, "static");
    arrayOfObject35[7] = Boolean.TRUE;
    arrayOfObject35[8] = RT.keyword(null, "doc");
    arrayOfObject35[9] = "Returns a map of the intern mappings for the namespace.";
    arrayOfObject35[10] = RT.keyword(null, "line");
    arrayOfObject35[11] = Integer.valueOf(3805);
    arrayOfObject35[12] = RT.keyword(null, "file");
    arrayOfObject35[13] = "clojure/core.clj";
    const__1425 = (AFn)RT.map(arrayOfObject35);
    const__1426 = (Var)RT.var("clojure.core", "refer");
    const__1427 = Integer.valueOf(3815);
    Object[] arrayOfObject38 = new Object[1];
    Object[] arrayOfObject39 = new Object[3];
    arrayOfObject39[0] = Symbol.intern(null, "ns-sym");
    arrayOfObject39[1] = Symbol.intern(null, "&");
    arrayOfObject39[2] = Symbol.intern(null, "filters");
    arrayOfObject38[0] = RT.vector(arrayOfObject39);
    const__1428 = PersistentList.create(Arrays.asList(arrayOfObject38));
    Object[] arrayOfObject40 = new Object[12];
    arrayOfObject40[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject41 = new Object[1];
    Object[] arrayOfObject42 = new Object[3];
    arrayOfObject42[0] = Symbol.intern(null, "ns-sym");
    arrayOfObject42[1] = Symbol.intern(null, "&");
    arrayOfObject42[2] = Symbol.intern(null, "filters");
    arrayOfObject41[0] = RT.vector(arrayOfObject42);
    arrayOfObject40[1] = PersistentList.create(Arrays.asList(arrayOfObject41));
    arrayOfObject40[2] = RT.keyword(null, "column");
    arrayOfObject40[3] = Integer.valueOf(1);
    arrayOfObject40[4] = RT.keyword(null, "added");
    arrayOfObject40[5] = "1.0";
    arrayOfObject40[6] = RT.keyword(null, "doc");
    arrayOfObject40[7] = "refers to all public vars of ns, subject to filters.\n  filters can include at most one each of:\n\n  :exclude list-of-symbols\n  :only list-of-symbols\n  :rename map-of-fromsymbol-tosymbol\n\n  For each public interned var in the namespace named by the symbol,\n  adds a mapping from the name of the var to the var to the current\n  namespace.  Throws an exception if name is already mapped to\n  something else in the current namespace. Filters can be used to\n  select a subset, via inclusion or exclusion, or to provide a mapping\n  to a symbol different from the var's name, in order to prevent\n  clashes. Use :use in the ns macro in preference to calling this directly.";
    arrayOfObject40[8] = RT.keyword(null, "line");
    arrayOfObject40[9] = Integer.valueOf(3815);
    arrayOfObject40[10] = RT.keyword(null, "file");
    arrayOfObject40[11] = "clojure/core.clj";
    const__1429 = (AFn)RT.map(arrayOfObject40);
    const__1430 = (Var)RT.var("clojure.core", "ns-refers");
    const__1431 = Integer.valueOf(3852);
    Object[] arrayOfObject43 = new Object[1];
    Object[] arrayOfObject44 = new Object[1];
    arrayOfObject44[0] = Symbol.intern(null, "ns");
    arrayOfObject43[0] = RT.vector(arrayOfObject44);
    const__1432 = PersistentList.create(Arrays.asList(arrayOfObject43));
    Object[] arrayOfObject45 = new Object[14];
    arrayOfObject45[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject46 = new Object[1];
    Object[] arrayOfObject47 = new Object[1];
    arrayOfObject47[0] = Symbol.intern(null, "ns");
    arrayOfObject46[0] = RT.vector(arrayOfObject47);
    arrayOfObject45[1] = PersistentList.create(Arrays.asList(arrayOfObject46));
    arrayOfObject45[2] = RT.keyword(null, "column");
    arrayOfObject45[3] = Integer.valueOf(1);
    arrayOfObject45[4] = RT.keyword(null, "added");
    arrayOfObject45[5] = "1.0";
    arrayOfObject45[6] = RT.keyword(null, "static");
    arrayOfObject45[7] = Boolean.TRUE;
    arrayOfObject45[8] = RT.keyword(null, "doc");
    arrayOfObject45[9] = "Returns a map of the refer mappings for the namespace.";
    arrayOfObject45[10] = RT.keyword(null, "line");
    arrayOfObject45[11] = Integer.valueOf(3852);
    arrayOfObject45[12] = RT.keyword(null, "file");
    arrayOfObject45[13] = "clojure/core.clj";
    const__1433 = (AFn)RT.map(arrayOfObject45);
    const__1434 = (Var)RT.var("clojure.core", "alias");
    const__1435 = Integer.valueOf(3862);
    Object[] arrayOfObject48 = new Object[1];
    Object[] arrayOfObject49 = new Object[2];
    arrayOfObject49[0] = Symbol.intern(null, "alias");
    arrayOfObject49[1] = Symbol.intern(null, "namespace-sym");
    arrayOfObject48[0] = RT.vector(arrayOfObject49);
    const__1436 = PersistentList.create(Arrays.asList(arrayOfObject48));
    Object[] arrayOfObject50 = new Object[14];
    arrayOfObject50[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject51 = new Object[1];
    Object[] arrayOfObject52 = new Object[2];
    arrayOfObject52[0] = Symbol.intern(null, "alias");
    arrayOfObject52[1] = Symbol.intern(null, "namespace-sym");
    arrayOfObject51[0] = RT.vector(arrayOfObject52);
    arrayOfObject50[1] = PersistentList.create(Arrays.asList(arrayOfObject51));
    arrayOfObject50[2] = RT.keyword(null, "column");
    arrayOfObject50[3] = Integer.valueOf(1);
    arrayOfObject50[4] = RT.keyword(null, "added");
    arrayOfObject50[5] = "1.0";
    arrayOfObject50[6] = RT.keyword(null, "static");
    arrayOfObject50[7] = Boolean.TRUE;
    arrayOfObject50[8] = RT.keyword(null, "doc");
    arrayOfObject50[9] = "Add an alias in the current namespace to another\n  namespace. Arguments are two symbols: the alias to be used, and\n  the symbolic name of the target namespace. Use :as in the ns macro in preference\n  to calling this directly.";
    arrayOfObject50[10] = RT.keyword(null, "line");
    arrayOfObject50[11] = Integer.valueOf(3862);
    arrayOfObject50[12] = RT.keyword(null, "file");
    arrayOfObject50[13] = "clojure/core.clj";
    const__1437 = (AFn)RT.map(arrayOfObject50);
    const__1438 = (Var)RT.var("clojure.core", "ns-aliases");
    const__1439 = Integer.valueOf(3872);
    Object[] arrayOfObject53 = new Object[1];
    Object[] arrayOfObject54 = new Object[1];
    arrayOfObject54[0] = Symbol.intern(null, "ns");
    arrayOfObject53[0] = RT.vector(arrayOfObject54);
    const__1440 = PersistentList.create(Arrays.asList(arrayOfObject53));
    Object[] arrayOfObject55 = new Object[14];
    arrayOfObject55[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject56 = new Object[1];
    Object[] arrayOfObject57 = new Object[1];
    arrayOfObject57[0] = Symbol.intern(null, "ns");
    arrayOfObject56[0] = RT.vector(arrayOfObject57);
    arrayOfObject55[1] = PersistentList.create(Arrays.asList(arrayOfObject56));
    arrayOfObject55[2] = RT.keyword(null, "column");
    arrayOfObject55[3] = Integer.valueOf(1);
    arrayOfObject55[4] = RT.keyword(null, "added");
    arrayOfObject55[5] = "1.0";
    arrayOfObject55[6] = RT.keyword(null, "static");
    arrayOfObject55[7] = Boolean.TRUE;
    arrayOfObject55[8] = RT.keyword(null, "doc");
    arrayOfObject55[9] = "Returns a map of the aliases for the namespace.";
    arrayOfObject55[10] = RT.keyword(null, "line");
    arrayOfObject55[11] = Integer.valueOf(3872);
    arrayOfObject55[12] = RT.keyword(null, "file");
    arrayOfObject55[13] = "clojure/core.clj";
    const__1441 = (AFn)RT.map(arrayOfObject55);
    const__1442 = (Var)RT.var("clojure.core", "ns-unalias");
    const__1443 = Integer.valueOf(3879);
    Object[] arrayOfObject58 = new Object[1];
    Object[] arrayOfObject59 = new Object[2];
    arrayOfObject59[0] = Symbol.intern(null, "ns");
    arrayOfObject59[1] = Symbol.intern(null, "sym");
    arrayOfObject58[0] = RT.vector(arrayOfObject59);
    const__1444 = PersistentList.create(Arrays.asList(arrayOfObject58));
    Object[] arrayOfObject60 = new Object[14];
    arrayOfObject60[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject61 = new Object[1];
    Object[] arrayOfObject62 = new Object[2];
    arrayOfObject62[0] = Symbol.intern(null, "ns");
    arrayOfObject62[1] = Symbol.intern(null, "sym");
    arrayOfObject61[0] = RT.vector(arrayOfObject62);
    arrayOfObject60[1] = PersistentList.create(Arrays.asList(arrayOfObject61));
    arrayOfObject60[2] = RT.keyword(null, "column");
    arrayOfObject60[3] = Integer.valueOf(1);
    arrayOfObject60[4] = RT.keyword(null, "added");
    arrayOfObject60[5] = "1.0";
    arrayOfObject60[6] = RT.keyword(null, "static");
    arrayOfObject60[7] = Boolean.TRUE;
    arrayOfObject60[8] = RT.keyword(null, "doc");
    arrayOfObject60[9] = "Removes the alias for the symbol from the namespace.";
    arrayOfObject60[10] = RT.keyword(null, "line");
    arrayOfObject60[11] = Integer.valueOf(3879);
    arrayOfObject60[12] = RT.keyword(null, "file");
    arrayOfObject60[13] = "clojure/core.clj";
    const__1445 = (AFn)RT.map(arrayOfObject60);
    const__1446 = (Var)RT.var("clojure.core", "take-nth");
    const__1447 = Integer.valueOf(3886);
    Object[] arrayOfObject63 = new Object[1];
    Object[] arrayOfObject64 = new Object[2];
    arrayOfObject64[0] = Symbol.intern(null, "n");
    arrayOfObject64[1] = Symbol.intern(null, "coll");
    arrayOfObject63[0] = RT.vector(arrayOfObject64);
    const__1448 = PersistentList.create(Arrays.asList(arrayOfObject63));
    Object[] arrayOfObject65 = new Object[14];
    arrayOfObject65[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject66 = new Object[1];
    Object[] arrayOfObject67 = new Object[2];
    arrayOfObject67[0] = Symbol.intern(null, "n");
    arrayOfObject67[1] = Symbol.intern(null, "coll");
    arrayOfObject66[0] = RT.vector(arrayOfObject67);
    arrayOfObject65[1] = PersistentList.create(Arrays.asList(arrayOfObject66));
    arrayOfObject65[2] = RT.keyword(null, "column");
    arrayOfObject65[3] = Integer.valueOf(1);
    arrayOfObject65[4] = RT.keyword(null, "added");
    arrayOfObject65[5] = "1.0";
    arrayOfObject65[6] = RT.keyword(null, "static");
    arrayOfObject65[7] = Boolean.TRUE;
    arrayOfObject65[8] = RT.keyword(null, "doc");
    arrayOfObject65[9] = "Returns a lazy seq of every nth item in coll.";
    arrayOfObject65[10] = RT.keyword(null, "line");
    arrayOfObject65[11] = Integer.valueOf(3886);
    arrayOfObject65[12] = RT.keyword(null, "file");
    arrayOfObject65[13] = "clojure/core.clj";
    const__1449 = (AFn)RT.map(arrayOfObject65);
    const__1450 = (Var)RT.var("clojure.core", "interleave");
    const__1451 = Integer.valueOf(3895);
    Object[] arrayOfObject68 = new Object[2];
    Object[] arrayOfObject69 = new Object[2];
    arrayOfObject69[0] = Symbol.intern(null, "c1");
    arrayOfObject69[1] = Symbol.intern(null, "c2");
    arrayOfObject68[0] = RT.vector(arrayOfObject69);
    Object[] arrayOfObject70 = new Object[4];
    arrayOfObject70[0] = Symbol.intern(null, "c1");
    arrayOfObject70[1] = Symbol.intern(null, "c2");
    arrayOfObject70[2] = Symbol.intern(null, "&");
    arrayOfObject70[3] = Symbol.intern(null, "colls");
    arrayOfObject68[1] = RT.vector(arrayOfObject70);
    const__1452 = PersistentList.create(Arrays.asList(arrayOfObject68));
    Object[] arrayOfObject71 = new Object[14];
    arrayOfObject71[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject72 = new Object[2];
    Object[] arrayOfObject73 = new Object[2];
    arrayOfObject73[0] = Symbol.intern(null, "c1");
    arrayOfObject73[1] = Symbol.intern(null, "c2");
    arrayOfObject72[0] = RT.vector(arrayOfObject73);
    Object[] arrayOfObject74 = new Object[4];
    arrayOfObject74[0] = Symbol.intern(null, "c1");
    arrayOfObject74[1] = Symbol.intern(null, "c2");
    arrayOfObject74[2] = Symbol.intern(null, "&");
    arrayOfObject74[3] = Symbol.intern(null, "colls");
    arrayOfObject72[1] = RT.vector(arrayOfObject74);
    arrayOfObject71[1] = PersistentList.create(Arrays.asList(arrayOfObject72));
    arrayOfObject71[2] = RT.keyword(null, "column");
    arrayOfObject71[3] = Integer.valueOf(1);
    arrayOfObject71[4] = RT.keyword(null, "added");
    arrayOfObject71[5] = "1.0";
    arrayOfObject71[6] = RT.keyword(null, "static");
    arrayOfObject71[7] = Boolean.TRUE;
    arrayOfObject71[8] = RT.keyword(null, "doc");
    arrayOfObject71[9] = "Returns a lazy seq of the first item in each coll, then the second etc.";
    arrayOfObject71[10] = RT.keyword(null, "line");
    arrayOfObject71[11] = Integer.valueOf(3895);
    arrayOfObject71[12] = RT.keyword(null, "file");
    arrayOfObject71[13] = "clojure/core.clj";
    const__1453 = (AFn)RT.map(arrayOfObject71);
    const__1454 = (Var)RT.var("clojure.core", "var-get");
    const__1455 = Integer.valueOf(3911);
    Object[] arrayOfObject75 = new Object[1];
    Object[] arrayOfObject76 = new Object[1];
    IObj localIObj3 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject77 = new Object[2];
    arrayOfObject77[0] = RT.keyword(null, "tag");
    arrayOfObject77[1] = Symbol.intern(null, "clojure.lang.Var");
    arrayOfObject76[0] = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject77));
    arrayOfObject75[0] = RT.vector(arrayOfObject76);
    const__1456 = PersistentList.create(Arrays.asList(arrayOfObject75));
    Object[] arrayOfObject78 = new Object[14];
    arrayOfObject78[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject79 = new Object[1];
    Object[] arrayOfObject80 = new Object[1];
    IObj localIObj4 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject81 = new Object[2];
    arrayOfObject81[0] = RT.keyword(null, "tag");
    arrayOfObject81[1] = Symbol.intern(null, "clojure.lang.Var");
    arrayOfObject80[0] = localIObj4.withMeta((IPersistentMap)RT.map(arrayOfObject81));
    arrayOfObject79[0] = RT.vector(arrayOfObject80);
    arrayOfObject78[1] = PersistentList.create(Arrays.asList(arrayOfObject79));
    arrayOfObject78[2] = RT.keyword(null, "column");
    arrayOfObject78[3] = Integer.valueOf(1);
    arrayOfObject78[4] = RT.keyword(null, "added");
    arrayOfObject78[5] = "1.0";
    arrayOfObject78[6] = RT.keyword(null, "static");
    arrayOfObject78[7] = Boolean.TRUE;
    arrayOfObject78[8] = RT.keyword(null, "doc");
    arrayOfObject78[9] = "Gets the value in the var object";
    arrayOfObject78[10] = RT.keyword(null, "line");
    arrayOfObject78[11] = Integer.valueOf(3911);
    arrayOfObject78[12] = RT.keyword(null, "file");
    arrayOfObject78[13] = "clojure/core.clj";
    const__1457 = (AFn)RT.map(arrayOfObject78);
    const__1458 = (Var)RT.var("clojure.core", "var-set");
    const__1459 = Integer.valueOf(3917);
    Object[] arrayOfObject82 = new Object[1];
    Object[] arrayOfObject83 = new Object[2];
    IObj localIObj5 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject84 = new Object[2];
    arrayOfObject84[0] = RT.keyword(null, "tag");
    arrayOfObject84[1] = Symbol.intern(null, "clojure.lang.Var");
    arrayOfObject83[0] = localIObj5.withMeta((IPersistentMap)RT.map(arrayOfObject84));
    arrayOfObject83[1] = Symbol.intern(null, "val");
    arrayOfObject82[0] = RT.vector(arrayOfObject83);
    const__1460 = PersistentList.create(Arrays.asList(arrayOfObject82));
    Object[] arrayOfObject85 = new Object[14];
    arrayOfObject85[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject86 = new Object[1];
    Object[] arrayOfObject87 = new Object[2];
    IObj localIObj6 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject88 = new Object[2];
    arrayOfObject88[0] = RT.keyword(null, "tag");
    arrayOfObject88[1] = Symbol.intern(null, "clojure.lang.Var");
    arrayOfObject87[0] = localIObj6.withMeta((IPersistentMap)RT.map(arrayOfObject88));
    arrayOfObject87[1] = Symbol.intern(null, "val");
    arrayOfObject86[0] = RT.vector(arrayOfObject87);
    arrayOfObject85[1] = PersistentList.create(Arrays.asList(arrayOfObject86));
    arrayOfObject85[2] = RT.keyword(null, "column");
    arrayOfObject85[3] = Integer.valueOf(1);
    arrayOfObject85[4] = RT.keyword(null, "added");
    arrayOfObject85[5] = "1.0";
    arrayOfObject85[6] = RT.keyword(null, "static");
    arrayOfObject85[7] = Boolean.TRUE;
    arrayOfObject85[8] = RT.keyword(null, "doc");
    arrayOfObject85[9] = "Sets the value in the var object to val. The var must be\n thread-locally bound.";
    arrayOfObject85[10] = RT.keyword(null, "line");
    arrayOfObject85[11] = Integer.valueOf(3917);
    arrayOfObject85[12] = RT.keyword(null, "file");
    arrayOfObject85[13] = "clojure/core.clj";
    const__1461 = (AFn)RT.map(arrayOfObject85);
    const__1462 = (Var)RT.var("clojure.core", "with-local-vars");
    const__1463 = Integer.valueOf(3924);
    Object[] arrayOfObject89 = new Object[1];
    Object[] arrayOfObject90 = new Object[3];
    arrayOfObject90[0] = Symbol.intern(null, "name-vals-vec");
    arrayOfObject90[1] = Symbol.intern(null, "&");
    arrayOfObject90[2] = Symbol.intern(null, "body");
    arrayOfObject89[0] = RT.vector(arrayOfObject90);
    const__1464 = PersistentList.create(Arrays.asList(arrayOfObject89));
    Object[] arrayOfObject91 = new Object[12];
    arrayOfObject91[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject92 = new Object[1];
    Object[] arrayOfObject93 = new Object[3];
    arrayOfObject93[0] = Symbol.intern(null, "name-vals-vec");
    arrayOfObject93[1] = Symbol.intern(null, "&");
    arrayOfObject93[2] = Symbol.intern(null, "body");
    arrayOfObject92[0] = RT.vector(arrayOfObject93);
    arrayOfObject91[1] = PersistentList.create(Arrays.asList(arrayOfObject92));
    arrayOfObject91[2] = RT.keyword(null, "column");
    arrayOfObject91[3] = Integer.valueOf(1);
    arrayOfObject91[4] = RT.keyword(null, "added");
    arrayOfObject91[5] = "1.0";
    arrayOfObject91[6] = RT.keyword(null, "doc");
    arrayOfObject91[7] = "varbinding=> symbol init-expr\n\n  Executes the exprs in a context in which the symbols are bound to\n  vars with per-thread bindings to the init-exprs.  The symbols refer\n  to the var objects themselves, and must be accessed with var-get and\n  var-set";
    arrayOfObject91[8] = RT.keyword(null, "line");
    arrayOfObject91[9] = Integer.valueOf(3924);
    arrayOfObject91[10] = RT.keyword(null, "file");
    arrayOfObject91[11] = "clojure/core.clj";
    const__1465 = (AFn)RT.map(arrayOfObject91);
    const__1466 = (Var)RT.var("clojure.core", "ns-resolve");
    const__1467 = Integer.valueOf(3943);
    Object[] arrayOfObject94 = new Object[2];
    Object[] arrayOfObject95 = new Object[2];
    arrayOfObject95[0] = Symbol.intern(null, "ns");
    arrayOfObject95[1] = Symbol.intern(null, "sym");
    arrayOfObject94[0] = RT.vector(arrayOfObject95);
    Object[] arrayOfObject96 = new Object[3];
    arrayOfObject96[0] = Symbol.intern(null, "ns");
    arrayOfObject96[1] = Symbol.intern(null, "env");
    arrayOfObject96[2] = Symbol.intern(null, "sym");
    arrayOfObject94[1] = RT.vector(arrayOfObject96);
    const__1468 = PersistentList.create(Arrays.asList(arrayOfObject94));
    Object[] arrayOfObject97 = new Object[14];
    arrayOfObject97[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject98 = new Object[2];
    Object[] arrayOfObject99 = new Object[2];
    arrayOfObject99[0] = Symbol.intern(null, "ns");
    arrayOfObject99[1] = Symbol.intern(null, "sym");
    arrayOfObject98[0] = RT.vector(arrayOfObject99);
    Object[] arrayOfObject100 = new Object[3];
    arrayOfObject100[0] = Symbol.intern(null, "ns");
    arrayOfObject100[1] = Symbol.intern(null, "env");
    arrayOfObject100[2] = Symbol.intern(null, "sym");
    arrayOfObject98[1] = RT.vector(arrayOfObject100);
    arrayOfObject97[1] = PersistentList.create(Arrays.asList(arrayOfObject98));
    arrayOfObject97[2] = RT.keyword(null, "column");
    arrayOfObject97[3] = Integer.valueOf(1);
    arrayOfObject97[4] = RT.keyword(null, "added");
    arrayOfObject97[5] = "1.0";
    arrayOfObject97[6] = RT.keyword(null, "static");
    arrayOfObject97[7] = Boolean.TRUE;
    arrayOfObject97[8] = RT.keyword(null, "doc");
    arrayOfObject97[9] = "Returns the var or Class to which a symbol will be resolved in the\n  namespace (unless found in the environment), else nil.  Note that\n  if the symbol is fully qualified, the var/Class to which it resolves\n  need not be present in the namespace.";
    arrayOfObject97[10] = RT.keyword(null, "line");
    arrayOfObject97[11] = Integer.valueOf(3943);
    arrayOfObject97[12] = RT.keyword(null, "file");
    arrayOfObject97[13] = "clojure/core.clj";
    const__1469 = (AFn)RT.map(arrayOfObject97);
    const__1470 = (Var)RT.var("clojure.core", "resolve");
    const__1471 = Integer.valueOf(3956);
    Object[] arrayOfObject101 = new Object[2];
    Object[] arrayOfObject102 = new Object[1];
    arrayOfObject102[0] = Symbol.intern(null, "sym");
    arrayOfObject101[0] = RT.vector(arrayOfObject102);
    Object[] arrayOfObject103 = new Object[2];
    arrayOfObject103[0] = Symbol.intern(null, "env");
    arrayOfObject103[1] = Symbol.intern(null, "sym");
    arrayOfObject101[1] = RT.vector(arrayOfObject103);
    const__1472 = PersistentList.create(Arrays.asList(arrayOfObject101));
    Object[] arrayOfObject104 = new Object[14];
    arrayOfObject104[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject105 = new Object[2];
    Object[] arrayOfObject106 = new Object[1];
    arrayOfObject106[0] = Symbol.intern(null, "sym");
    arrayOfObject105[0] = RT.vector(arrayOfObject106);
    Object[] arrayOfObject107 = new Object[2];
    arrayOfObject107[0] = Symbol.intern(null, "env");
    arrayOfObject107[1] = Symbol.intern(null, "sym");
    arrayOfObject105[1] = RT.vector(arrayOfObject107);
    arrayOfObject104[1] = PersistentList.create(Arrays.asList(arrayOfObject105));
    arrayOfObject104[2] = RT.keyword(null, "column");
    arrayOfObject104[3] = Integer.valueOf(1);
    arrayOfObject104[4] = RT.keyword(null, "added");
    arrayOfObject104[5] = "1.0";
    arrayOfObject104[6] = RT.keyword(null, "static");
    arrayOfObject104[7] = Boolean.TRUE;
    arrayOfObject104[8] = RT.keyword(null, "doc");
    arrayOfObject104[9] = "same as (ns-resolve *ns* symbol) or (ns-resolve *ns* &env symbol)";
    arrayOfObject104[10] = RT.keyword(null, "line");
    arrayOfObject104[11] = Integer.valueOf(3956);
    arrayOfObject104[12] = RT.keyword(null, "file");
    arrayOfObject104[13] = "clojure/core.clj";
    const__1473 = (AFn)RT.map(arrayOfObject104);
    const__1474 = (Var)RT.var("clojure.core", "array-map");
    const__1475 = Integer.valueOf(3963);
    Object[] arrayOfObject108 = new Object[2];
    arrayOfObject108[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject109 = new Object[2];
    arrayOfObject109[0] = Symbol.intern(null, "&");
    arrayOfObject109[1] = Symbol.intern(null, "keyvals");
    arrayOfObject108[1] = RT.vector(arrayOfObject109);
    const__1476 = PersistentList.create(Arrays.asList(arrayOfObject108));
    Object[] arrayOfObject110 = new Object[14];
    arrayOfObject110[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject111 = new Object[2];
    arrayOfObject111[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject112 = new Object[2];
    arrayOfObject112[0] = Symbol.intern(null, "&");
    arrayOfObject112[1] = Symbol.intern(null, "keyvals");
    arrayOfObject111[1] = RT.vector(arrayOfObject112);
    arrayOfObject110[1] = PersistentList.create(Arrays.asList(arrayOfObject111));
    arrayOfObject110[2] = RT.keyword(null, "column");
    arrayOfObject110[3] = Integer.valueOf(1);
    arrayOfObject110[4] = RT.keyword(null, "added");
    arrayOfObject110[5] = "1.0";
    arrayOfObject110[6] = RT.keyword(null, "static");
    arrayOfObject110[7] = Boolean.TRUE;
    arrayOfObject110[8] = RT.keyword(null, "doc");
    arrayOfObject110[9] = "Constructs an array-map. If any keys are equal, they are handled as\n  if by repeated uses of assoc.";
    arrayOfObject110[10] = RT.keyword(null, "line");
    arrayOfObject110[11] = Integer.valueOf(3963);
    arrayOfObject110[12] = RT.keyword(null, "file");
    arrayOfObject110[13] = "clojure/core.clj";
    const__1477 = (AFn)RT.map(arrayOfObject110);
    const__1478 = (Var)RT.var("clojure.core", "destructure");
    const__1479 = Integer.valueOf(3973);
    Object[] arrayOfObject113 = new Object[1];
    Object[] arrayOfObject114 = new Object[1];
    arrayOfObject114[0] = Symbol.intern(null, "bindings");
    arrayOfObject113[0] = RT.vector(arrayOfObject114);
    const__1480 = PersistentList.create(Arrays.asList(arrayOfObject113));
    Object[] arrayOfObject115 = new Object[8];
    arrayOfObject115[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject116 = new Object[1];
    Object[] arrayOfObject117 = new Object[1];
    arrayOfObject117[0] = Symbol.intern(null, "bindings");
    arrayOfObject116[0] = RT.vector(arrayOfObject117);
    arrayOfObject115[1] = PersistentList.create(Arrays.asList(arrayOfObject116));
    arrayOfObject115[2] = RT.keyword(null, "column");
    arrayOfObject115[3] = Integer.valueOf(1);
    arrayOfObject115[4] = RT.keyword(null, "line");
    arrayOfObject115[5] = Integer.valueOf(3973);
    arrayOfObject115[6] = RT.keyword(null, "file");
    arrayOfObject115[7] = "clojure/core.clj";
    const__1481 = (AFn)RT.map(arrayOfObject115);
    const__1482 = Integer.valueOf(4035);
    Object[] arrayOfObject118 = new Object[1];
    Object[] arrayOfObject119 = new Object[3];
    arrayOfObject119[0] = Symbol.intern(null, "bindings");
    arrayOfObject119[1] = Symbol.intern(null, "&");
    arrayOfObject119[2] = Symbol.intern(null, "body");
    arrayOfObject118[0] = RT.vector(arrayOfObject119);
    const__1483 = PersistentList.create(Arrays.asList(arrayOfObject118));
    const__1484 = (Keyword)RT.keyword(null, "forms");
    Object[] arrayOfObject120 = new Object[1];
    Object[] arrayOfObject121 = new Object[3];
    arrayOfObject121[0] = Symbol.intern(null, "let");
    Object[] arrayOfObject122 = new Object[1];
    arrayOfObject122[0] = Symbol.intern(null, "bindings*");
    arrayOfObject121[1] = RT.vector(arrayOfObject122);
    arrayOfObject121[2] = Symbol.intern(null, "exprs*");
    IObj localIObj7 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject121));
    Object[] arrayOfObject123 = new Object[4];
    arrayOfObject123[0] = RT.keyword(null, "line");
    arrayOfObject123[1] = Integer.valueOf(4041);
    arrayOfObject123[2] = RT.keyword(null, "column");
    arrayOfObject123[3] = Integer.valueOf(47);
    arrayOfObject120[0] = localIObj7.withMeta((IPersistentMap)RT.map(arrayOfObject123));
    const__1485 = (AFn)RT.vector(arrayOfObject120);
    const__1486 = (Keyword)RT.keyword(null, "special-form");
    Object[] arrayOfObject124 = new Object[16];
    arrayOfObject124[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject125 = new Object[1];
    Object[] arrayOfObject126 = new Object[3];
    arrayOfObject126[0] = Symbol.intern(null, "bindings");
    arrayOfObject126[1] = Symbol.intern(null, "&");
    arrayOfObject126[2] = Symbol.intern(null, "body");
    arrayOfObject125[0] = RT.vector(arrayOfObject126);
    arrayOfObject124[1] = PersistentList.create(Arrays.asList(arrayOfObject125));
    arrayOfObject124[2] = RT.keyword(null, "forms");
    Object[] arrayOfObject127 = new Object[1];
    Object[] arrayOfObject128 = new Object[3];
    arrayOfObject128[0] = Symbol.intern(null, "let");
    Object[] arrayOfObject129 = new Object[1];
    arrayOfObject129[0] = Symbol.intern(null, "bindings*");
    arrayOfObject128[1] = RT.vector(arrayOfObject129);
    arrayOfObject128[2] = Symbol.intern(null, "exprs*");
    IObj localIObj8 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject128));
    Object[] arrayOfObject130 = new Object[4];
    arrayOfObject130[0] = RT.keyword(null, "line");
    arrayOfObject130[1] = Integer.valueOf(4041);
    arrayOfObject130[2] = RT.keyword(null, "column");
    arrayOfObject130[3] = Integer.valueOf(47);
    arrayOfObject127[0] = localIObj8.withMeta((IPersistentMap)RT.map(arrayOfObject130));
    arrayOfObject124[3] = RT.vector(arrayOfObject127);
    arrayOfObject124[4] = RT.keyword(null, "special-form");
    arrayOfObject124[5] = Boolean.TRUE;
    arrayOfObject124[6] = RT.keyword(null, "column");
    arrayOfObject124[7] = Integer.valueOf(1);
    arrayOfObject124[8] = RT.keyword(null, "added");
    arrayOfObject124[9] = "1.0";
    arrayOfObject124[10] = RT.keyword(null, "doc");
    arrayOfObject124[11] = "binding => binding-form init-expr\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein.";
    arrayOfObject124[12] = RT.keyword(null, "line");
    arrayOfObject124[13] = Integer.valueOf(4035);
    arrayOfObject124[14] = RT.keyword(null, "file");
    arrayOfObject124[15] = "clojure/core.clj";
    const__1487 = (AFn)RT.map(arrayOfObject124);
    const__1488 = (Var)RT.var("clojure.core", "maybe-destructured");
    const__1489 = Integer.valueOf(4048);
    Object[] arrayOfObject131 = new Object[1];
    Object[] arrayOfObject132 = new Object[2];
    arrayOfObject132[0] = Symbol.intern(null, "params");
    arrayOfObject132[1] = Symbol.intern(null, "body");
    arrayOfObject131[0] = RT.vector(arrayOfObject132);
    const__1490 = PersistentList.create(Arrays.asList(arrayOfObject131));
    Object[] arrayOfObject133 = new Object[10];
    arrayOfObject133[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject134 = new Object[1];
    Object[] arrayOfObject135 = new Object[2];
    arrayOfObject135[0] = Symbol.intern(null, "params");
    arrayOfObject135[1] = Symbol.intern(null, "body");
    arrayOfObject134[0] = RT.vector(arrayOfObject135);
    arrayOfObject133[1] = PersistentList.create(Arrays.asList(arrayOfObject134));
    arrayOfObject133[2] = RT.keyword(null, "column");
    arrayOfObject133[3] = Integer.valueOf(1);
    arrayOfObject133[4] = RT.keyword(null, "private");
    arrayOfObject133[5] = Boolean.TRUE;
    arrayOfObject133[6] = RT.keyword(null, "line");
    arrayOfObject133[7] = Integer.valueOf(4048);
    arrayOfObject133[8] = RT.keyword(null, "file");
    arrayOfObject133[9] = "clojure/core.clj";
    const__1491 = (AFn)RT.map(arrayOfObject133);
    const__1492 = Integer.valueOf(4067);
    Object[] arrayOfObject136 = new Object[1];
    Object[] arrayOfObject137 = new Object[2];
    arrayOfObject137[0] = Symbol.intern(null, "&");
    arrayOfObject137[1] = Symbol.intern(null, "sigs");
    arrayOfObject136[0] = RT.vector(arrayOfObject137);
    const__1493 = PersistentList.create(Arrays.asList(arrayOfObject136));
    Object[] arrayOfObject138 = new Object[2];
    Object[] arrayOfObject139 = new Object[4];
    arrayOfObject139[0] = Symbol.intern(null, "fn");
    arrayOfObject139[1] = Symbol.intern(null, "name?");
    Object[] arrayOfObject140 = new Object[1];
    arrayOfObject140[0] = Symbol.intern(null, "params*");
    arrayOfObject139[2] = RT.vector(arrayOfObject140);
    arrayOfObject139[3] = Symbol.intern(null, "exprs*");
    IObj localIObj9 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject139));
    Object[] arrayOfObject141 = new Object[4];
    arrayOfObject141[0] = RT.keyword(null, "line");
    arrayOfObject141[1] = Integer.valueOf(4075);
    arrayOfObject141[2] = RT.keyword(null, "column");
    arrayOfObject141[3] = Integer.valueOf(13);
    arrayOfObject138[0] = localIObj9.withMeta((IPersistentMap)RT.map(arrayOfObject141));
    Object[] arrayOfObject142 = new Object[4];
    arrayOfObject142[0] = Symbol.intern(null, "fn");
    arrayOfObject142[1] = Symbol.intern(null, "name?");
    Object[] arrayOfObject143 = new Object[2];
    Object[] arrayOfObject144 = new Object[1];
    arrayOfObject144[0] = Symbol.intern(null, "params*");
    arrayOfObject143[0] = RT.vector(arrayOfObject144);
    arrayOfObject143[1] = Symbol.intern(null, "exprs*");
    IObj localIObj10 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject143));
    Object[] arrayOfObject145 = new Object[4];
    arrayOfObject145[0] = RT.keyword(null, "line");
    arrayOfObject145[1] = Integer.valueOf(4075);
    arrayOfObject145[2] = RT.keyword(null, "column");
    arrayOfObject145[3] = Integer.valueOf(52);
    arrayOfObject142[2] = localIObj10.withMeta((IPersistentMap)RT.map(arrayOfObject145));
    arrayOfObject142[3] = Symbol.intern(null, "+");
    IObj localIObj11 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject142));
    Object[] arrayOfObject146 = new Object[4];
    arrayOfObject146[0] = RT.keyword(null, "line");
    arrayOfObject146[1] = Integer.valueOf(4075);
    arrayOfObject146[2] = RT.keyword(null, "column");
    arrayOfObject146[3] = Integer.valueOf(42);
    arrayOfObject138[1] = localIObj11.withMeta((IPersistentMap)RT.map(arrayOfObject146));
    const__1494 = (AFn)RT.vector(arrayOfObject138);
    Object[] arrayOfObject147 = new Object[16];
    arrayOfObject147[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject148 = new Object[1];
    Object[] arrayOfObject149 = new Object[2];
    arrayOfObject149[0] = Symbol.intern(null, "&");
    arrayOfObject149[1] = Symbol.intern(null, "sigs");
    arrayOfObject148[0] = RT.vector(arrayOfObject149);
    arrayOfObject147[1] = PersistentList.create(Arrays.asList(arrayOfObject148));
    arrayOfObject147[2] = RT.keyword(null, "forms");
    Object[] arrayOfObject150 = new Object[2];
    Object[] arrayOfObject151 = new Object[4];
    arrayOfObject151[0] = Symbol.intern(null, "fn");
    arrayOfObject151[1] = Symbol.intern(null, "name?");
    Object[] arrayOfObject152 = new Object[1];
    arrayOfObject152[0] = Symbol.intern(null, "params*");
    arrayOfObject151[2] = RT.vector(arrayOfObject152);
    arrayOfObject151[3] = Symbol.intern(null, "exprs*");
    IObj localIObj12 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject151));
    Object[] arrayOfObject153 = new Object[4];
    arrayOfObject153[0] = RT.keyword(null, "line");
    arrayOfObject153[1] = Integer.valueOf(4075);
    arrayOfObject153[2] = RT.keyword(null, "column");
    arrayOfObject153[3] = Integer.valueOf(13);
    arrayOfObject150[0] = localIObj12.withMeta((IPersistentMap)RT.map(arrayOfObject153));
    Object[] arrayOfObject154 = new Object[4];
    arrayOfObject154[0] = Symbol.intern(null, "fn");
    arrayOfObject154[1] = Symbol.intern(null, "name?");
    Object[] arrayOfObject155 = new Object[2];
    Object[] arrayOfObject156 = new Object[1];
    arrayOfObject156[0] = Symbol.intern(null, "params*");
    arrayOfObject155[0] = RT.vector(arrayOfObject156);
    arrayOfObject155[1] = Symbol.intern(null, "exprs*");
    IObj localIObj13 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject155));
    Object[] arrayOfObject157 = new Object[4];
    arrayOfObject157[0] = RT.keyword(null, "line");
    arrayOfObject157[1] = Integer.valueOf(4075);
    arrayOfObject157[2] = RT.keyword(null, "column");
    arrayOfObject157[3] = Integer.valueOf(52);
    arrayOfObject154[2] = localIObj13.withMeta((IPersistentMap)RT.map(arrayOfObject157));
    arrayOfObject154[3] = Symbol.intern(null, "+");
    IObj localIObj14 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject154));
    Object[] arrayOfObject158 = new Object[4];
    arrayOfObject158[0] = RT.keyword(null, "line");
    arrayOfObject158[1] = Integer.valueOf(4075);
    arrayOfObject158[2] = RT.keyword(null, "column");
    arrayOfObject158[3] = Integer.valueOf(42);
    arrayOfObject150[1] = localIObj14.withMeta((IPersistentMap)RT.map(arrayOfObject158));
    arrayOfObject147[3] = RT.vector(arrayOfObject150);
    arrayOfObject147[4] = RT.keyword(null, "special-form");
    arrayOfObject147[5] = Boolean.TRUE;
    arrayOfObject147[6] = RT.keyword(null, "column");
    arrayOfObject147[7] = Integer.valueOf(1);
    arrayOfObject147[8] = RT.keyword(null, "added");
    arrayOfObject147[9] = "1.0";
    arrayOfObject147[10] = RT.keyword(null, "doc");
    arrayOfObject147[11] = "params => positional-params* , or positional-params* & next-param\n  positional-param => binding-form\n  next-param => binding-form\n  name => symbol\n\n  Defines a function";
    arrayOfObject147[12] = RT.keyword(null, "line");
    arrayOfObject147[13] = Integer.valueOf(4067);
    arrayOfObject147[14] = RT.keyword(null, "file");
    arrayOfObject147[15] = "clojure/core.clj";
    const__1495 = (AFn)RT.map(arrayOfObject147);
    const__1496 = Integer.valueOf(4129);
    Object[] arrayOfObject159 = new Object[1];
    Object[] arrayOfObject160 = new Object[3];
    arrayOfObject160[0] = Symbol.intern(null, "bindings");
    arrayOfObject160[1] = Symbol.intern(null, "&");
    arrayOfObject160[2] = Symbol.intern(null, "body");
    arrayOfObject159[0] = RT.vector(arrayOfObject160);
    const__1497 = PersistentList.create(Arrays.asList(arrayOfObject159));
    Object[] arrayOfObject161 = new Object[1];
    Object[] arrayOfObject162 = new Object[3];
    arrayOfObject162[0] = Symbol.intern(null, "loop");
    Object[] arrayOfObject163 = new Object[1];
    arrayOfObject163[0] = Symbol.intern(null, "bindings*");
    arrayOfObject162[1] = RT.vector(arrayOfObject163);
    arrayOfObject162[2] = Symbol.intern(null, "exprs*");
    IObj localIObj15 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject162));
    Object[] arrayOfObject164 = new Object[4];
    arrayOfObject164[0] = RT.keyword(null, "line");
    arrayOfObject164[1] = Integer.valueOf(4133);
    arrayOfObject164[2] = RT.keyword(null, "column");
    arrayOfObject164[3] = Integer.valueOf(47);
    arrayOfObject161[0] = localIObj15.withMeta((IPersistentMap)RT.map(arrayOfObject164));
    const__1498 = (AFn)RT.vector(arrayOfObject161);
    Object[] arrayOfObject165 = new Object[16];
    arrayOfObject165[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject166 = new Object[1];
    Object[] arrayOfObject167 = new Object[3];
    arrayOfObject167[0] = Symbol.intern(null, "bindings");
    arrayOfObject167[1] = Symbol.intern(null, "&");
    arrayOfObject167[2] = Symbol.intern(null, "body");
    arrayOfObject166[0] = RT.vector(arrayOfObject167);
    arrayOfObject165[1] = PersistentList.create(Arrays.asList(arrayOfObject166));
    arrayOfObject165[2] = RT.keyword(null, "forms");
    Object[] arrayOfObject168 = new Object[1];
    Object[] arrayOfObject169 = new Object[3];
    arrayOfObject169[0] = Symbol.intern(null, "loop");
    Object[] arrayOfObject170 = new Object[1];
    arrayOfObject170[0] = Symbol.intern(null, "bindings*");
    arrayOfObject169[1] = RT.vector(arrayOfObject170);
    arrayOfObject169[2] = Symbol.intern(null, "exprs*");
    IObj localIObj16 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject169));
    Object[] arrayOfObject171 = new Object[4];
    arrayOfObject171[0] = RT.keyword(null, "line");
    arrayOfObject171[1] = Integer.valueOf(4133);
    arrayOfObject171[2] = RT.keyword(null, "column");
    arrayOfObject171[3] = Integer.valueOf(47);
    arrayOfObject168[0] = localIObj16.withMeta((IPersistentMap)RT.map(arrayOfObject171));
    arrayOfObject165[3] = RT.vector(arrayOfObject168);
    arrayOfObject165[4] = RT.keyword(null, "special-form");
    arrayOfObject165[5] = Boolean.TRUE;
    arrayOfObject165[6] = RT.keyword(null, "column");
    arrayOfObject165[7] = Integer.valueOf(1);
    arrayOfObject165[8] = RT.keyword(null, "added");
    arrayOfObject165[9] = "1.0";
    arrayOfObject165[10] = RT.keyword(null, "doc");
    arrayOfObject165[11] = "Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target.";
    arrayOfObject165[12] = RT.keyword(null, "line");
    arrayOfObject165[13] = Integer.valueOf(4129);
    arrayOfObject165[14] = RT.keyword(null, "file");
    arrayOfObject165[15] = "clojure/core.clj";
    const__1499 = (AFn)RT.map(arrayOfObject165);
  }

  public static void __init15()
  {
    const__1500 = (Var)RT.var("clojure.core", "when-first");
    const__1501 = Integer.valueOf(4154);
    Object[] arrayOfObject1 = new Object[1];
    Object[] arrayOfObject2 = new Object[3];
    arrayOfObject2[0] = Symbol.intern(null, "bindings");
    arrayOfObject2[1] = Symbol.intern(null, "&");
    arrayOfObject2[2] = Symbol.intern(null, "body");
    arrayOfObject1[0] = RT.vector(arrayOfObject2);
    const__1502 = PersistentList.create(Arrays.asList(arrayOfObject1));
    Object[] arrayOfObject3 = new Object[12];
    arrayOfObject3[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject4 = new Object[1];
    Object[] arrayOfObject5 = new Object[3];
    arrayOfObject5[0] = Symbol.intern(null, "bindings");
    arrayOfObject5[1] = Symbol.intern(null, "&");
    arrayOfObject5[2] = Symbol.intern(null, "body");
    arrayOfObject4[0] = RT.vector(arrayOfObject5);
    arrayOfObject3[1] = PersistentList.create(Arrays.asList(arrayOfObject4));
    arrayOfObject3[2] = RT.keyword(null, "column");
    arrayOfObject3[3] = Integer.valueOf(1);
    arrayOfObject3[4] = RT.keyword(null, "added");
    arrayOfObject3[5] = "1.0";
    arrayOfObject3[6] = RT.keyword(null, "doc");
    arrayOfObject3[7] = "bindings => x xs\n\n  Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once";
    arrayOfObject3[8] = RT.keyword(null, "line");
    arrayOfObject3[9] = Integer.valueOf(4154);
    arrayOfObject3[10] = RT.keyword(null, "file");
    arrayOfObject3[11] = "clojure/core.clj";
    const__1503 = (AFn)RT.map(arrayOfObject3);
    const__1504 = (Var)RT.var("clojure.core", "lazy-cat");
    const__1505 = Integer.valueOf(4168);
    Object[] arrayOfObject6 = new Object[1];
    Object[] arrayOfObject7 = new Object[2];
    arrayOfObject7[0] = Symbol.intern(null, "&");
    arrayOfObject7[1] = Symbol.intern(null, "colls");
    arrayOfObject6[0] = RT.vector(arrayOfObject7);
    const__1506 = PersistentList.create(Arrays.asList(arrayOfObject6));
    Object[] arrayOfObject8 = new Object[12];
    arrayOfObject8[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject9 = new Object[1];
    Object[] arrayOfObject10 = new Object[2];
    arrayOfObject10[0] = Symbol.intern(null, "&");
    arrayOfObject10[1] = Symbol.intern(null, "colls");
    arrayOfObject9[0] = RT.vector(arrayOfObject10);
    arrayOfObject8[1] = PersistentList.create(Arrays.asList(arrayOfObject9));
    arrayOfObject8[2] = RT.keyword(null, "column");
    arrayOfObject8[3] = Integer.valueOf(1);
    arrayOfObject8[4] = RT.keyword(null, "added");
    arrayOfObject8[5] = "1.0";
    arrayOfObject8[6] = RT.keyword(null, "doc");
    arrayOfObject8[7] = "Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed. \n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))";
    arrayOfObject8[8] = RT.keyword(null, "line");
    arrayOfObject8[9] = Integer.valueOf(4168);
    arrayOfObject8[10] = RT.keyword(null, "file");
    arrayOfObject8[11] = "clojure/core.clj";
    const__1507 = (AFn)RT.map(arrayOfObject8);
    const__1508 = (Var)RT.var("clojure.core", "for");
    const__1509 = Integer.valueOf(4178);
    Object[] arrayOfObject11 = new Object[1];
    Object[] arrayOfObject12 = new Object[2];
    arrayOfObject12[0] = Symbol.intern(null, "seq-exprs");
    arrayOfObject12[1] = Symbol.intern(null, "body-expr");
    arrayOfObject11[0] = RT.vector(arrayOfObject12);
    const__1510 = PersistentList.create(Arrays.asList(arrayOfObject11));
    Object[] arrayOfObject13 = new Object[12];
    arrayOfObject13[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject14 = new Object[1];
    Object[] arrayOfObject15 = new Object[2];
    arrayOfObject15[0] = Symbol.intern(null, "seq-exprs");
    arrayOfObject15[1] = Symbol.intern(null, "body-expr");
    arrayOfObject14[0] = RT.vector(arrayOfObject15);
    arrayOfObject13[1] = PersistentList.create(Arrays.asList(arrayOfObject14));
    arrayOfObject13[2] = RT.keyword(null, "column");
    arrayOfObject13[3] = Integer.valueOf(1);
    arrayOfObject13[4] = RT.keyword(null, "added");
    arrayOfObject13[5] = "1.0";
    arrayOfObject13[6] = RT.keyword(null, "doc");
    arrayOfObject13[7] = "List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)] [x y]))";
    arrayOfObject13[8] = RT.keyword(null, "line");
    arrayOfObject13[9] = Integer.valueOf(4178);
    arrayOfObject13[10] = RT.keyword(null, "file");
    arrayOfObject13[11] = "clojure/core.clj";
    const__1511 = (AFn)RT.map(arrayOfObject13);
    const__1512 = (Var)RT.var("clojure.core", "comment");
    const__1513 = Integer.valueOf(4265);
    Object[] arrayOfObject16 = new Object[1];
    Object[] arrayOfObject17 = new Object[2];
    arrayOfObject17[0] = Symbol.intern(null, "&");
    arrayOfObject17[1] = Symbol.intern(null, "body");
    arrayOfObject16[0] = RT.vector(arrayOfObject17);
    const__1514 = PersistentList.create(Arrays.asList(arrayOfObject16));
    Object[] arrayOfObject18 = new Object[12];
    arrayOfObject18[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject19 = new Object[1];
    Object[] arrayOfObject20 = new Object[2];
    arrayOfObject20[0] = Symbol.intern(null, "&");
    arrayOfObject20[1] = Symbol.intern(null, "body");
    arrayOfObject19[0] = RT.vector(arrayOfObject20);
    arrayOfObject18[1] = PersistentList.create(Arrays.asList(arrayOfObject19));
    arrayOfObject18[2] = RT.keyword(null, "column");
    arrayOfObject18[3] = Integer.valueOf(1);
    arrayOfObject18[4] = RT.keyword(null, "added");
    arrayOfObject18[5] = "1.0";
    arrayOfObject18[6] = RT.keyword(null, "doc");
    arrayOfObject18[7] = "Ignores body, yields nil";
    arrayOfObject18[8] = RT.keyword(null, "line");
    arrayOfObject18[9] = Integer.valueOf(4265);
    arrayOfObject18[10] = RT.keyword(null, "file");
    arrayOfObject18[11] = "clojure/core.clj";
    const__1515 = (AFn)RT.map(arrayOfObject18);
    const__1516 = (Var)RT.var("clojure.core", "with-out-str");
    const__1517 = Integer.valueOf(4270);
    Object[] arrayOfObject21 = new Object[1];
    Object[] arrayOfObject22 = new Object[2];
    arrayOfObject22[0] = Symbol.intern(null, "&");
    arrayOfObject22[1] = Symbol.intern(null, "body");
    arrayOfObject21[0] = RT.vector(arrayOfObject22);
    const__1518 = PersistentList.create(Arrays.asList(arrayOfObject21));
    Object[] arrayOfObject23 = new Object[12];
    arrayOfObject23[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject24 = new Object[1];
    Object[] arrayOfObject25 = new Object[2];
    arrayOfObject25[0] = Symbol.intern(null, "&");
    arrayOfObject25[1] = Symbol.intern(null, "body");
    arrayOfObject24[0] = RT.vector(arrayOfObject25);
    arrayOfObject23[1] = PersistentList.create(Arrays.asList(arrayOfObject24));
    arrayOfObject23[2] = RT.keyword(null, "column");
    arrayOfObject23[3] = Integer.valueOf(1);
    arrayOfObject23[4] = RT.keyword(null, "added");
    arrayOfObject23[5] = "1.0";
    arrayOfObject23[6] = RT.keyword(null, "doc");
    arrayOfObject23[7] = "Evaluates exprs in a context in which *out* is bound to a fresh\n  StringWriter.  Returns the string created by any nested printing\n  calls.";
    arrayOfObject23[8] = RT.keyword(null, "line");
    arrayOfObject23[9] = Integer.valueOf(4270);
    arrayOfObject23[10] = RT.keyword(null, "file");
    arrayOfObject23[11] = "clojure/core.clj";
    const__1519 = (AFn)RT.map(arrayOfObject23);
    const__1520 = (Var)RT.var("clojure.core", "with-in-str");
    const__1521 = Integer.valueOf(4281);
    Object[] arrayOfObject26 = new Object[1];
    Object[] arrayOfObject27 = new Object[3];
    arrayOfObject27[0] = Symbol.intern(null, "s");
    arrayOfObject27[1] = Symbol.intern(null, "&");
    arrayOfObject27[2] = Symbol.intern(null, "body");
    arrayOfObject26[0] = RT.vector(arrayOfObject27);
    const__1522 = PersistentList.create(Arrays.asList(arrayOfObject26));
    Object[] arrayOfObject28 = new Object[12];
    arrayOfObject28[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject29 = new Object[1];
    Object[] arrayOfObject30 = new Object[3];
    arrayOfObject30[0] = Symbol.intern(null, "s");
    arrayOfObject30[1] = Symbol.intern(null, "&");
    arrayOfObject30[2] = Symbol.intern(null, "body");
    arrayOfObject29[0] = RT.vector(arrayOfObject30);
    arrayOfObject28[1] = PersistentList.create(Arrays.asList(arrayOfObject29));
    arrayOfObject28[2] = RT.keyword(null, "column");
    arrayOfObject28[3] = Integer.valueOf(1);
    arrayOfObject28[4] = RT.keyword(null, "added");
    arrayOfObject28[5] = "1.0";
    arrayOfObject28[6] = RT.keyword(null, "doc");
    arrayOfObject28[7] = "Evaluates body in a context in which *in* is bound to a fresh\n  StringReader initialized with the string s.";
    arrayOfObject28[8] = RT.keyword(null, "line");
    arrayOfObject28[9] = Integer.valueOf(4281);
    arrayOfObject28[10] = RT.keyword(null, "file");
    arrayOfObject28[11] = "clojure/core.clj";
    const__1523 = (AFn)RT.map(arrayOfObject28);
    const__1524 = (Var)RT.var("clojure.core", "pr-str");
    const__1525 = Integer.valueOf(4290);
    Object[] arrayOfObject31 = new Object[1];
    Object[] arrayOfObject32 = new Object[2];
    arrayOfObject32[0] = Symbol.intern(null, "&");
    arrayOfObject32[1] = Symbol.intern(null, "xs");
    arrayOfObject31[0] = RT.vector(arrayOfObject32);
    const__1526 = PersistentList.create(Arrays.asList(arrayOfObject31));
    Object[] arrayOfObject33 = new Object[16];
    arrayOfObject33[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject34 = new Object[1];
    Object[] arrayOfObject35 = new Object[2];
    arrayOfObject35[0] = Symbol.intern(null, "&");
    arrayOfObject35[1] = Symbol.intern(null, "xs");
    arrayOfObject34[0] = RT.vector(arrayOfObject35);
    arrayOfObject33[1] = PersistentList.create(Arrays.asList(arrayOfObject34));
    arrayOfObject33[2] = RT.keyword(null, "column");
    arrayOfObject33[3] = Integer.valueOf(1);
    arrayOfObject33[4] = RT.keyword(null, "added");
    arrayOfObject33[5] = "1.0";
    arrayOfObject33[6] = RT.keyword(null, "static");
    arrayOfObject33[7] = Boolean.TRUE;
    arrayOfObject33[8] = RT.keyword(null, "doc");
    arrayOfObject33[9] = "pr to a string, returning it";
    arrayOfObject33[10] = RT.keyword(null, "line");
    arrayOfObject33[11] = Integer.valueOf(4290);
    arrayOfObject33[12] = RT.keyword(null, "file");
    arrayOfObject33[13] = "clojure/core.clj";
    arrayOfObject33[14] = RT.keyword(null, "tag");
    arrayOfObject33[15] = Class.forName("java.lang.String");
    const__1527 = (AFn)RT.map(arrayOfObject33);
    const__1528 = (Var)RT.var("clojure.core", "prn-str");
    const__1529 = Integer.valueOf(4299);
    Object[] arrayOfObject36 = new Object[1];
    Object[] arrayOfObject37 = new Object[2];
    arrayOfObject37[0] = Symbol.intern(null, "&");
    arrayOfObject37[1] = Symbol.intern(null, "xs");
    arrayOfObject36[0] = RT.vector(arrayOfObject37);
    const__1530 = PersistentList.create(Arrays.asList(arrayOfObject36));
    Object[] arrayOfObject38 = new Object[16];
    arrayOfObject38[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject39 = new Object[1];
    Object[] arrayOfObject40 = new Object[2];
    arrayOfObject40[0] = Symbol.intern(null, "&");
    arrayOfObject40[1] = Symbol.intern(null, "xs");
    arrayOfObject39[0] = RT.vector(arrayOfObject40);
    arrayOfObject38[1] = PersistentList.create(Arrays.asList(arrayOfObject39));
    arrayOfObject38[2] = RT.keyword(null, "column");
    arrayOfObject38[3] = Integer.valueOf(1);
    arrayOfObject38[4] = RT.keyword(null, "added");
    arrayOfObject38[5] = "1.0";
    arrayOfObject38[6] = RT.keyword(null, "static");
    arrayOfObject38[7] = Boolean.TRUE;
    arrayOfObject38[8] = RT.keyword(null, "doc");
    arrayOfObject38[9] = "prn to a string, returning it";
    arrayOfObject38[10] = RT.keyword(null, "line");
    arrayOfObject38[11] = Integer.valueOf(4299);
    arrayOfObject38[12] = RT.keyword(null, "file");
    arrayOfObject38[13] = "clojure/core.clj";
    arrayOfObject38[14] = RT.keyword(null, "tag");
    arrayOfObject38[15] = Class.forName("java.lang.String");
    const__1531 = (AFn)RT.map(arrayOfObject38);
    const__1532 = (Var)RT.var("clojure.core", "print-str");
    const__1533 = Integer.valueOf(4308);
    Object[] arrayOfObject41 = new Object[1];
    Object[] arrayOfObject42 = new Object[2];
    arrayOfObject42[0] = Symbol.intern(null, "&");
    arrayOfObject42[1] = Symbol.intern(null, "xs");
    arrayOfObject41[0] = RT.vector(arrayOfObject42);
    const__1534 = PersistentList.create(Arrays.asList(arrayOfObject41));
    Object[] arrayOfObject43 = new Object[16];
    arrayOfObject43[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject44 = new Object[1];
    Object[] arrayOfObject45 = new Object[2];
    arrayOfObject45[0] = Symbol.intern(null, "&");
    arrayOfObject45[1] = Symbol.intern(null, "xs");
    arrayOfObject44[0] = RT.vector(arrayOfObject45);
    arrayOfObject43[1] = PersistentList.create(Arrays.asList(arrayOfObject44));
    arrayOfObject43[2] = RT.keyword(null, "column");
    arrayOfObject43[3] = Integer.valueOf(1);
    arrayOfObject43[4] = RT.keyword(null, "added");
    arrayOfObject43[5] = "1.0";
    arrayOfObject43[6] = RT.keyword(null, "static");
    arrayOfObject43[7] = Boolean.TRUE;
    arrayOfObject43[8] = RT.keyword(null, "doc");
    arrayOfObject43[9] = "print to a string, returning it";
    arrayOfObject43[10] = RT.keyword(null, "line");
    arrayOfObject43[11] = Integer.valueOf(4308);
    arrayOfObject43[12] = RT.keyword(null, "file");
    arrayOfObject43[13] = "clojure/core.clj";
    arrayOfObject43[14] = RT.keyword(null, "tag");
    arrayOfObject43[15] = Class.forName("java.lang.String");
    const__1535 = (AFn)RT.map(arrayOfObject43);
    const__1536 = (Var)RT.var("clojure.core", "println-str");
    const__1537 = Integer.valueOf(4317);
    Object[] arrayOfObject46 = new Object[1];
    Object[] arrayOfObject47 = new Object[2];
    arrayOfObject47[0] = Symbol.intern(null, "&");
    arrayOfObject47[1] = Symbol.intern(null, "xs");
    arrayOfObject46[0] = RT.vector(arrayOfObject47);
    const__1538 = PersistentList.create(Arrays.asList(arrayOfObject46));
    Object[] arrayOfObject48 = new Object[16];
    arrayOfObject48[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject49 = new Object[1];
    Object[] arrayOfObject50 = new Object[2];
    arrayOfObject50[0] = Symbol.intern(null, "&");
    arrayOfObject50[1] = Symbol.intern(null, "xs");
    arrayOfObject49[0] = RT.vector(arrayOfObject50);
    arrayOfObject48[1] = PersistentList.create(Arrays.asList(arrayOfObject49));
    arrayOfObject48[2] = RT.keyword(null, "column");
    arrayOfObject48[3] = Integer.valueOf(1);
    arrayOfObject48[4] = RT.keyword(null, "added");
    arrayOfObject48[5] = "1.0";
    arrayOfObject48[6] = RT.keyword(null, "static");
    arrayOfObject48[7] = Boolean.TRUE;
    arrayOfObject48[8] = RT.keyword(null, "doc");
    arrayOfObject48[9] = "println to a string, returning it";
    arrayOfObject48[10] = RT.keyword(null, "line");
    arrayOfObject48[11] = Integer.valueOf(4317);
    arrayOfObject48[12] = RT.keyword(null, "file");
    arrayOfObject48[13] = "clojure/core.clj";
    arrayOfObject48[14] = RT.keyword(null, "tag");
    arrayOfObject48[15] = Class.forName("java.lang.String");
    const__1539 = (AFn)RT.map(arrayOfObject48);
    const__1540 = (Var)RT.var("clojure.core", "ex-info");
    const__1541 = Integer.valueOf(4327);
    Object[] arrayOfObject51 = new Object[2];
    Object[] arrayOfObject52 = new Object[2];
    arrayOfObject52[0] = Symbol.intern(null, "msg");
    arrayOfObject52[1] = Symbol.intern(null, "map");
    arrayOfObject51[0] = RT.vector(arrayOfObject52);
    Object[] arrayOfObject53 = new Object[3];
    arrayOfObject53[0] = Symbol.intern(null, "msg");
    arrayOfObject53[1] = Symbol.intern(null, "map");
    arrayOfObject53[2] = Symbol.intern(null, "cause");
    arrayOfObject51[1] = RT.vector(arrayOfObject53);
    const__1542 = PersistentList.create(Arrays.asList(arrayOfObject51));
    Object[] arrayOfObject54 = new Object[12];
    arrayOfObject54[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject55 = new Object[2];
    Object[] arrayOfObject56 = new Object[2];
    arrayOfObject56[0] = Symbol.intern(null, "msg");
    arrayOfObject56[1] = Symbol.intern(null, "map");
    arrayOfObject55[0] = RT.vector(arrayOfObject56);
    Object[] arrayOfObject57 = new Object[3];
    arrayOfObject57[0] = Symbol.intern(null, "msg");
    arrayOfObject57[1] = Symbol.intern(null, "map");
    arrayOfObject57[2] = Symbol.intern(null, "cause");
    arrayOfObject55[1] = RT.vector(arrayOfObject57);
    arrayOfObject54[1] = PersistentList.create(Arrays.asList(arrayOfObject55));
    arrayOfObject54[2] = RT.keyword(null, "column");
    arrayOfObject54[3] = Integer.valueOf(1);
    arrayOfObject54[4] = RT.keyword(null, "added");
    arrayOfObject54[5] = "1.4";
    arrayOfObject54[6] = RT.keyword(null, "doc");
    arrayOfObject54[7] = "Alpha - subject to change.\n   Create an instance of ExceptionInfo, a RuntimeException subclass\n   that carries a map of additional data.";
    arrayOfObject54[8] = RT.keyword(null, "line");
    arrayOfObject54[9] = Integer.valueOf(4327);
    arrayOfObject54[10] = RT.keyword(null, "file");
    arrayOfObject54[11] = "clojure/core.clj";
    const__1543 = (AFn)RT.map(arrayOfObject54);
    const__1544 = (Var)RT.var("clojure.core", "ex-data");
    const__1545 = Integer.valueOf(4337);
    Object[] arrayOfObject58 = new Object[1];
    Object[] arrayOfObject59 = new Object[1];
    arrayOfObject59[0] = Symbol.intern(null, "ex");
    arrayOfObject58[0] = RT.vector(arrayOfObject59);
    const__1546 = PersistentList.create(Arrays.asList(arrayOfObject58));
    Object[] arrayOfObject60 = new Object[12];
    arrayOfObject60[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject61 = new Object[1];
    Object[] arrayOfObject62 = new Object[1];
    arrayOfObject62[0] = Symbol.intern(null, "ex");
    arrayOfObject61[0] = RT.vector(arrayOfObject62);
    arrayOfObject60[1] = PersistentList.create(Arrays.asList(arrayOfObject61));
    arrayOfObject60[2] = RT.keyword(null, "column");
    arrayOfObject60[3] = Integer.valueOf(1);
    arrayOfObject60[4] = RT.keyword(null, "added");
    arrayOfObject60[5] = "1.4";
    arrayOfObject60[6] = RT.keyword(null, "doc");
    arrayOfObject60[7] = "Alpha - subject to change.\n   Returns exception data (a map) if ex is an IExceptionInfo.\n   Otherwise returns nil.";
    arrayOfObject60[8] = RT.keyword(null, "line");
    arrayOfObject60[9] = Integer.valueOf(4337);
    arrayOfObject60[10] = RT.keyword(null, "file");
    arrayOfObject60[11] = "clojure/core.clj";
    const__1547 = (AFn)RT.map(arrayOfObject60);
    const__1548 = (Var)RT.var("clojure.core", "assert");
    const__1549 = Integer.valueOf(4346);
    Object[] arrayOfObject63 = new Object[2];
    Object[] arrayOfObject64 = new Object[1];
    arrayOfObject64[0] = Symbol.intern(null, "x");
    arrayOfObject63[0] = RT.vector(arrayOfObject64);
    Object[] arrayOfObject65 = new Object[2];
    arrayOfObject65[0] = Symbol.intern(null, "x");
    arrayOfObject65[1] = Symbol.intern(null, "message");
    arrayOfObject63[1] = RT.vector(arrayOfObject65);
    const__1550 = PersistentList.create(Arrays.asList(arrayOfObject63));
    Object[] arrayOfObject66 = new Object[12];
    arrayOfObject66[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject67 = new Object[2];
    Object[] arrayOfObject68 = new Object[1];
    arrayOfObject68[0] = Symbol.intern(null, "x");
    arrayOfObject67[0] = RT.vector(arrayOfObject68);
    Object[] arrayOfObject69 = new Object[2];
    arrayOfObject69[0] = Symbol.intern(null, "x");
    arrayOfObject69[1] = Symbol.intern(null, "message");
    arrayOfObject67[1] = RT.vector(arrayOfObject69);
    arrayOfObject66[1] = PersistentList.create(Arrays.asList(arrayOfObject67));
    arrayOfObject66[2] = RT.keyword(null, "column");
    arrayOfObject66[3] = Integer.valueOf(1);
    arrayOfObject66[4] = RT.keyword(null, "added");
    arrayOfObject66[5] = "1.0";
    arrayOfObject66[6] = RT.keyword(null, "doc");
    arrayOfObject66[7] = "Evaluates expr and throws an exception if it does not evaluate to\n  logical true.";
    arrayOfObject66[8] = RT.keyword(null, "line");
    arrayOfObject66[9] = Integer.valueOf(4346);
    arrayOfObject66[10] = RT.keyword(null, "file");
    arrayOfObject66[11] = "clojure/core.clj";
    const__1551 = (AFn)RT.map(arrayOfObject66);
    const__1552 = (Var)RT.var("clojure.core", "test");
    const__1553 = Integer.valueOf(4359);
    Object[] arrayOfObject70 = new Object[1];
    Object[] arrayOfObject71 = new Object[1];
    arrayOfObject71[0] = Symbol.intern(null, "v");
    arrayOfObject70[0] = RT.vector(arrayOfObject71);
    const__1554 = PersistentList.create(Arrays.asList(arrayOfObject70));
    Object[] arrayOfObject72 = new Object[12];
    arrayOfObject72[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject73 = new Object[1];
    Object[] arrayOfObject74 = new Object[1];
    arrayOfObject74[0] = Symbol.intern(null, "v");
    arrayOfObject73[0] = RT.vector(arrayOfObject74);
    arrayOfObject72[1] = PersistentList.create(Arrays.asList(arrayOfObject73));
    arrayOfObject72[2] = RT.keyword(null, "column");
    arrayOfObject72[3] = Integer.valueOf(1);
    arrayOfObject72[4] = RT.keyword(null, "added");
    arrayOfObject72[5] = "1.0";
    arrayOfObject72[6] = RT.keyword(null, "doc");
    arrayOfObject72[7] = "test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception";
    arrayOfObject72[8] = RT.keyword(null, "line");
    arrayOfObject72[9] = Integer.valueOf(4359);
    arrayOfObject72[10] = RT.keyword(null, "file");
    arrayOfObject72[11] = "clojure/core.clj";
    const__1555 = (AFn)RT.map(arrayOfObject72);
    const__1556 = (Var)RT.var("clojure.core", "re-pattern");
    const__1557 = Integer.valueOf(4369);
    Object[] arrayOfObject75 = new Object[1];
    Object[] arrayOfObject76 = new Object[1];
    arrayOfObject76[0] = Symbol.intern(null, "s");
    arrayOfObject75[0] = RT.vector(arrayOfObject76);
    const__1558 = PersistentList.create(Arrays.asList(arrayOfObject75));
    const__1559 = Class.forName("java.util.regex.Pattern");
    Object[] arrayOfObject77 = new Object[16];
    arrayOfObject77[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject78 = new Object[1];
    Object[] arrayOfObject79 = new Object[1];
    arrayOfObject79[0] = Symbol.intern(null, "s");
    arrayOfObject78[0] = RT.vector(arrayOfObject79);
    arrayOfObject77[1] = PersistentList.create(Arrays.asList(arrayOfObject78));
    arrayOfObject77[2] = RT.keyword(null, "column");
    arrayOfObject77[3] = Integer.valueOf(1);
    arrayOfObject77[4] = RT.keyword(null, "added");
    arrayOfObject77[5] = "1.0";
    arrayOfObject77[6] = RT.keyword(null, "static");
    arrayOfObject77[7] = Boolean.TRUE;
    arrayOfObject77[8] = RT.keyword(null, "doc");
    arrayOfObject77[9] = "Returns an instance of java.util.regex.Pattern, for use, e.g. in\n  re-matcher.";
    arrayOfObject77[10] = RT.keyword(null, "line");
    arrayOfObject77[11] = Integer.valueOf(4369);
    arrayOfObject77[12] = RT.keyword(null, "file");
    arrayOfObject77[13] = "clojure/core.clj";
    arrayOfObject77[14] = RT.keyword(null, "tag");
    arrayOfObject77[15] = Class.forName("java.util.regex.Pattern");
    const__1560 = (AFn)RT.map(arrayOfObject77);
    const__1561 = (Var)RT.var("clojure.core", "re-matcher");
    const__1562 = Integer.valueOf(4379);
    Object[] arrayOfObject80 = new Object[1];
    Object[] arrayOfObject81 = new Object[2];
    IObj localIObj1 = (IObj)Symbol.intern(null, "re");
    Object[] arrayOfObject82 = new Object[2];
    arrayOfObject82[0] = RT.keyword(null, "tag");
    arrayOfObject82[1] = Symbol.intern(null, "java.util.regex.Pattern");
    arrayOfObject81[0] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject82));
    arrayOfObject81[1] = Symbol.intern(null, "s");
    arrayOfObject80[0] = RT.vector(arrayOfObject81);
    const__1563 = PersistentList.create(Arrays.asList(arrayOfObject80));
    const__1564 = Class.forName("java.util.regex.Matcher");
    Object[] arrayOfObject83 = new Object[16];
    arrayOfObject83[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject84 = new Object[1];
    Object[] arrayOfObject85 = new Object[2];
    IObj localIObj2 = (IObj)Symbol.intern(null, "re");
    Object[] arrayOfObject86 = new Object[2];
    arrayOfObject86[0] = RT.keyword(null, "tag");
    arrayOfObject86[1] = Symbol.intern(null, "java.util.regex.Pattern");
    arrayOfObject85[0] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject86));
    arrayOfObject85[1] = Symbol.intern(null, "s");
    arrayOfObject84[0] = RT.vector(arrayOfObject85);
    arrayOfObject83[1] = PersistentList.create(Arrays.asList(arrayOfObject84));
    arrayOfObject83[2] = RT.keyword(null, "column");
    arrayOfObject83[3] = Integer.valueOf(1);
    arrayOfObject83[4] = RT.keyword(null, "added");
    arrayOfObject83[5] = "1.0";
    arrayOfObject83[6] = RT.keyword(null, "static");
    arrayOfObject83[7] = Boolean.TRUE;
    arrayOfObject83[8] = RT.keyword(null, "doc");
    arrayOfObject83[9] = "Returns an instance of java.util.regex.Matcher, for use, e.g. in\n  re-find.";
    arrayOfObject83[10] = RT.keyword(null, "line");
    arrayOfObject83[11] = Integer.valueOf(4379);
    arrayOfObject83[12] = RT.keyword(null, "file");
    arrayOfObject83[13] = "clojure/core.clj";
    arrayOfObject83[14] = RT.keyword(null, "tag");
    arrayOfObject83[15] = Class.forName("java.util.regex.Matcher");
    const__1565 = (AFn)RT.map(arrayOfObject83);
    const__1566 = (Var)RT.var("clojure.core", "re-groups");
    const__1567 = Integer.valueOf(4388);
    Object[] arrayOfObject87 = new Object[1];
    Object[] arrayOfObject88 = new Object[1];
    IObj localIObj3 = (IObj)Symbol.intern(null, "m");
    Object[] arrayOfObject89 = new Object[2];
    arrayOfObject89[0] = RT.keyword(null, "tag");
    arrayOfObject89[1] = Symbol.intern(null, "java.util.regex.Matcher");
    arrayOfObject88[0] = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject89));
    arrayOfObject87[0] = RT.vector(arrayOfObject88);
    const__1568 = PersistentList.create(Arrays.asList(arrayOfObject87));
    Object[] arrayOfObject90 = new Object[14];
    arrayOfObject90[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject91 = new Object[1];
    Object[] arrayOfObject92 = new Object[1];
    IObj localIObj4 = (IObj)Symbol.intern(null, "m");
    Object[] arrayOfObject93 = new Object[2];
    arrayOfObject93[0] = RT.keyword(null, "tag");
    arrayOfObject93[1] = Symbol.intern(null, "java.util.regex.Matcher");
    arrayOfObject92[0] = localIObj4.withMeta((IPersistentMap)RT.map(arrayOfObject93));
    arrayOfObject91[0] = RT.vector(arrayOfObject92);
    arrayOfObject90[1] = PersistentList.create(Arrays.asList(arrayOfObject91));
    arrayOfObject90[2] = RT.keyword(null, "column");
    arrayOfObject90[3] = Integer.valueOf(1);
    arrayOfObject90[4] = RT.keyword(null, "added");
    arrayOfObject90[5] = "1.0";
    arrayOfObject90[6] = RT.keyword(null, "static");
    arrayOfObject90[7] = Boolean.TRUE;
    arrayOfObject90[8] = RT.keyword(null, "doc");
    arrayOfObject90[9] = "Returns the groups from the most recent match/find. If there are no\n  nested groups, returns a string of the entire match. If there are\n  nested groups, returns a vector of the groups, the first element\n  being the entire match.";
    arrayOfObject90[10] = RT.keyword(null, "line");
    arrayOfObject90[11] = Integer.valueOf(4388);
    arrayOfObject90[12] = RT.keyword(null, "file");
    arrayOfObject90[13] = "clojure/core.clj";
    const__1569 = (AFn)RT.map(arrayOfObject90);
    const__1570 = (Var)RT.var("clojure.core", "re-seq");
    const__1571 = Integer.valueOf(4404);
    Object[] arrayOfObject94 = new Object[1];
    Object[] arrayOfObject95 = new Object[2];
    IObj localIObj5 = (IObj)Symbol.intern(null, "re");
    Object[] arrayOfObject96 = new Object[2];
    arrayOfObject96[0] = RT.keyword(null, "tag");
    arrayOfObject96[1] = Symbol.intern(null, "java.util.regex.Pattern");
    arrayOfObject95[0] = localIObj5.withMeta((IPersistentMap)RT.map(arrayOfObject96));
    arrayOfObject95[1] = Symbol.intern(null, "s");
    arrayOfObject94[0] = RT.vector(arrayOfObject95);
    const__1572 = PersistentList.create(Arrays.asList(arrayOfObject94));
    Object[] arrayOfObject97 = new Object[14];
    arrayOfObject97[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject98 = new Object[1];
    Object[] arrayOfObject99 = new Object[2];
    IObj localIObj6 = (IObj)Symbol.intern(null, "re");
    Object[] arrayOfObject100 = new Object[2];
    arrayOfObject100[0] = RT.keyword(null, "tag");
    arrayOfObject100[1] = Symbol.intern(null, "java.util.regex.Pattern");
    arrayOfObject99[0] = localIObj6.withMeta((IPersistentMap)RT.map(arrayOfObject100));
    arrayOfObject99[1] = Symbol.intern(null, "s");
    arrayOfObject98[0] = RT.vector(arrayOfObject99);
    arrayOfObject97[1] = PersistentList.create(Arrays.asList(arrayOfObject98));
    arrayOfObject97[2] = RT.keyword(null, "column");
    arrayOfObject97[3] = Integer.valueOf(1);
    arrayOfObject97[4] = RT.keyword(null, "added");
    arrayOfObject97[5] = "1.0";
    arrayOfObject97[6] = RT.keyword(null, "static");
    arrayOfObject97[7] = Boolean.TRUE;
    arrayOfObject97[8] = RT.keyword(null, "doc");
    arrayOfObject97[9] = "Returns a lazy sequence of successive matches of pattern in string,\n  using java.util.regex.Matcher.find(), each such match processed with\n  re-groups.";
    arrayOfObject97[10] = RT.keyword(null, "line");
    arrayOfObject97[11] = Integer.valueOf(4404);
    arrayOfObject97[12] = RT.keyword(null, "file");
    arrayOfObject97[13] = "clojure/core.clj";
    const__1573 = (AFn)RT.map(arrayOfObject97);
    const__1574 = (Var)RT.var("clojure.core", "re-matches");
    const__1575 = Integer.valueOf(4416);
    Object[] arrayOfObject101 = new Object[1];
    Object[] arrayOfObject102 = new Object[2];
    IObj localIObj7 = (IObj)Symbol.intern(null, "re");
    Object[] arrayOfObject103 = new Object[2];
    arrayOfObject103[0] = RT.keyword(null, "tag");
    arrayOfObject103[1] = Symbol.intern(null, "java.util.regex.Pattern");
    arrayOfObject102[0] = localIObj7.withMeta((IPersistentMap)RT.map(arrayOfObject103));
    arrayOfObject102[1] = Symbol.intern(null, "s");
    arrayOfObject101[0] = RT.vector(arrayOfObject102);
    const__1576 = PersistentList.create(Arrays.asList(arrayOfObject101));
    Object[] arrayOfObject104 = new Object[14];
    arrayOfObject104[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject105 = new Object[1];
    Object[] arrayOfObject106 = new Object[2];
    IObj localIObj8 = (IObj)Symbol.intern(null, "re");
    Object[] arrayOfObject107 = new Object[2];
    arrayOfObject107[0] = RT.keyword(null, "tag");
    arrayOfObject107[1] = Symbol.intern(null, "java.util.regex.Pattern");
    arrayOfObject106[0] = localIObj8.withMeta((IPersistentMap)RT.map(arrayOfObject107));
    arrayOfObject106[1] = Symbol.intern(null, "s");
    arrayOfObject105[0] = RT.vector(arrayOfObject106);
    arrayOfObject104[1] = PersistentList.create(Arrays.asList(arrayOfObject105));
    arrayOfObject104[2] = RT.keyword(null, "column");
    arrayOfObject104[3] = Integer.valueOf(1);
    arrayOfObject104[4] = RT.keyword(null, "added");
    arrayOfObject104[5] = "1.0";
    arrayOfObject104[6] = RT.keyword(null, "static");
    arrayOfObject104[7] = Boolean.TRUE;
    arrayOfObject104[8] = RT.keyword(null, "doc");
    arrayOfObject104[9] = "Returns the match, if any, of string to pattern, using\n  java.util.regex.Matcher.matches().  Uses re-groups to return the\n  groups.";
    arrayOfObject104[10] = RT.keyword(null, "line");
    arrayOfObject104[11] = Integer.valueOf(4416);
    arrayOfObject104[12] = RT.keyword(null, "file");
    arrayOfObject104[13] = "clojure/core.clj";
    const__1577 = (AFn)RT.map(arrayOfObject104);
    const__1578 = (Var)RT.var("clojure.core", "re-find");
    const__1579 = Integer.valueOf(4428);
    Object[] arrayOfObject108 = new Object[2];
    Object[] arrayOfObject109 = new Object[1];
    IObj localIObj9 = (IObj)Symbol.intern(null, "m");
    Object[] arrayOfObject110 = new Object[2];
    arrayOfObject110[0] = RT.keyword(null, "tag");
    arrayOfObject110[1] = Symbol.intern(null, "java.util.regex.Matcher");
    arrayOfObject109[0] = localIObj9.withMeta((IPersistentMap)RT.map(arrayOfObject110));
    arrayOfObject108[0] = RT.vector(arrayOfObject109);
    Object[] arrayOfObject111 = new Object[2];
    IObj localIObj10 = (IObj)Symbol.intern(null, "re");
    Object[] arrayOfObject112 = new Object[2];
    arrayOfObject112[0] = RT.keyword(null, "tag");
    arrayOfObject112[1] = Symbol.intern(null, "java.util.regex.Pattern");
    arrayOfObject111[0] = localIObj10.withMeta((IPersistentMap)RT.map(arrayOfObject112));
    arrayOfObject111[1] = Symbol.intern(null, "s");
    arrayOfObject108[1] = RT.vector(arrayOfObject111);
    const__1580 = PersistentList.create(Arrays.asList(arrayOfObject108));
    Object[] arrayOfObject113 = new Object[14];
    arrayOfObject113[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject114 = new Object[2];
    Object[] arrayOfObject115 = new Object[1];
    IObj localIObj11 = (IObj)Symbol.intern(null, "m");
    Object[] arrayOfObject116 = new Object[2];
    arrayOfObject116[0] = RT.keyword(null, "tag");
    arrayOfObject116[1] = Symbol.intern(null, "java.util.regex.Matcher");
    arrayOfObject115[0] = localIObj11.withMeta((IPersistentMap)RT.map(arrayOfObject116));
    arrayOfObject114[0] = RT.vector(arrayOfObject115);
    Object[] arrayOfObject117 = new Object[2];
    IObj localIObj12 = (IObj)Symbol.intern(null, "re");
    Object[] arrayOfObject118 = new Object[2];
    arrayOfObject118[0] = RT.keyword(null, "tag");
    arrayOfObject118[1] = Symbol.intern(null, "java.util.regex.Pattern");
    arrayOfObject117[0] = localIObj12.withMeta((IPersistentMap)RT.map(arrayOfObject118));
    arrayOfObject117[1] = Symbol.intern(null, "s");
    arrayOfObject114[1] = RT.vector(arrayOfObject117);
    arrayOfObject113[1] = PersistentList.create(Arrays.asList(arrayOfObject114));
    arrayOfObject113[2] = RT.keyword(null, "column");
    arrayOfObject113[3] = Integer.valueOf(1);
    arrayOfObject113[4] = RT.keyword(null, "added");
    arrayOfObject113[5] = "1.0";
    arrayOfObject113[6] = RT.keyword(null, "static");
    arrayOfObject113[7] = Boolean.TRUE;
    arrayOfObject113[8] = RT.keyword(null, "doc");
    arrayOfObject113[9] = "Returns the next regex match, if any, of string to pattern, using\n  java.util.regex.Matcher.find().  Uses re-groups to return the\n  groups.";
    arrayOfObject113[10] = RT.keyword(null, "line");
    arrayOfObject113[11] = Integer.valueOf(4428);
    arrayOfObject113[12] = RT.keyword(null, "file");
    arrayOfObject113[13] = "clojure/core.clj";
    const__1581 = (AFn)RT.map(arrayOfObject113);
    const__1582 = (Var)RT.var("clojure.core", "rand");
    const__1583 = Integer.valueOf(4441);
    Object[] arrayOfObject119 = new Object[2];
    arrayOfObject119[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject120 = new Object[1];
    arrayOfObject120[0] = Symbol.intern(null, "n");
    arrayOfObject119[1] = RT.vector(arrayOfObject120);
    const__1584 = PersistentList.create(Arrays.asList(arrayOfObject119));
    Object[] arrayOfObject121 = new Object[14];
    arrayOfObject121[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject122 = new Object[2];
    arrayOfObject122[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject123 = new Object[1];
    arrayOfObject123[0] = Symbol.intern(null, "n");
    arrayOfObject122[1] = RT.vector(arrayOfObject123);
    arrayOfObject121[1] = PersistentList.create(Arrays.asList(arrayOfObject122));
    arrayOfObject121[2] = RT.keyword(null, "column");
    arrayOfObject121[3] = Integer.valueOf(1);
    arrayOfObject121[4] = RT.keyword(null, "added");
    arrayOfObject121[5] = "1.0";
    arrayOfObject121[6] = RT.keyword(null, "static");
    arrayOfObject121[7] = Boolean.TRUE;
    arrayOfObject121[8] = RT.keyword(null, "doc");
    arrayOfObject121[9] = "Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).";
    arrayOfObject121[10] = RT.keyword(null, "line");
    arrayOfObject121[11] = Integer.valueOf(4441);
    arrayOfObject121[12] = RT.keyword(null, "file");
    arrayOfObject121[13] = "clojure/core.clj";
    const__1585 = (AFn)RT.map(arrayOfObject121);
    const__1586 = (Var)RT.var("clojure.core", "rand-int");
    const__1587 = Integer.valueOf(4449);
    Object[] arrayOfObject124 = new Object[1];
    Object[] arrayOfObject125 = new Object[1];
    arrayOfObject125[0] = Symbol.intern(null, "n");
    arrayOfObject124[0] = RT.vector(arrayOfObject125);
    const__1588 = PersistentList.create(Arrays.asList(arrayOfObject124));
    Object[] arrayOfObject126 = new Object[14];
    arrayOfObject126[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject127 = new Object[1];
    Object[] arrayOfObject128 = new Object[1];
    arrayOfObject128[0] = Symbol.intern(null, "n");
    arrayOfObject127[0] = RT.vector(arrayOfObject128);
    arrayOfObject126[1] = PersistentList.create(Arrays.asList(arrayOfObject127));
    arrayOfObject126[2] = RT.keyword(null, "column");
    arrayOfObject126[3] = Integer.valueOf(1);
    arrayOfObject126[4] = RT.keyword(null, "added");
    arrayOfObject126[5] = "1.0";
    arrayOfObject126[6] = RT.keyword(null, "static");
    arrayOfObject126[7] = Boolean.TRUE;
    arrayOfObject126[8] = RT.keyword(null, "doc");
    arrayOfObject126[9] = "Returns a random integer between 0 (inclusive) and n (exclusive).";
    arrayOfObject126[10] = RT.keyword(null, "line");
    arrayOfObject126[11] = Integer.valueOf(4449);
    arrayOfObject126[12] = RT.keyword(null, "file");
    arrayOfObject126[13] = "clojure/core.clj";
    const__1589 = (AFn)RT.map(arrayOfObject126);
    const__1590 = (Var)RT.var("clojure.core", "defn-");
    const__1591 = Integer.valueOf(4455);
    Object[] arrayOfObject129 = new Object[1];
    Object[] arrayOfObject130 = new Object[3];
    arrayOfObject130[0] = Symbol.intern(null, "name");
    arrayOfObject130[1] = Symbol.intern(null, "&");
    arrayOfObject130[2] = Symbol.intern(null, "decls");
    arrayOfObject129[0] = RT.vector(arrayOfObject130);
    const__1592 = PersistentList.create(Arrays.asList(arrayOfObject129));
    Object[] arrayOfObject131 = new Object[12];
    arrayOfObject131[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject132 = new Object[1];
    Object[] arrayOfObject133 = new Object[3];
    arrayOfObject133[0] = Symbol.intern(null, "name");
    arrayOfObject133[1] = Symbol.intern(null, "&");
    arrayOfObject133[2] = Symbol.intern(null, "decls");
    arrayOfObject132[0] = RT.vector(arrayOfObject133);
    arrayOfObject131[1] = PersistentList.create(Arrays.asList(arrayOfObject132));
    arrayOfObject131[2] = RT.keyword(null, "column");
    arrayOfObject131[3] = Integer.valueOf(1);
    arrayOfObject131[4] = RT.keyword(null, "added");
    arrayOfObject131[5] = "1.0";
    arrayOfObject131[6] = RT.keyword(null, "doc");
    arrayOfObject131[7] = "same as defn, yielding non-public def";
    arrayOfObject131[8] = RT.keyword(null, "line");
    arrayOfObject131[9] = Integer.valueOf(4455);
    arrayOfObject131[10] = RT.keyword(null, "file");
    arrayOfObject131[11] = "clojure/core.clj";
    const__1593 = (AFn)RT.map(arrayOfObject131);
    const__1594 = (Var)RT.var("clojure.core", "tree-seq");
    const__1595 = Integer.valueOf(4461);
    Object[] arrayOfObject134 = new Object[1];
    Object[] arrayOfObject135 = new Object[3];
    arrayOfObject135[0] = Symbol.intern(null, "branch?");
    arrayOfObject135[1] = Symbol.intern(null, "children");
    arrayOfObject135[2] = Symbol.intern(null, "root");
    arrayOfObject134[0] = RT.vector(arrayOfObject135);
    const__1596 = PersistentList.create(Arrays.asList(arrayOfObject134));
    Object[] arrayOfObject136 = new Object[14];
    arrayOfObject136[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject137 = new Object[1];
    Object[] arrayOfObject138 = new Object[3];
    arrayOfObject138[0] = Symbol.intern(null, "branch?");
    arrayOfObject138[1] = Symbol.intern(null, "children");
    arrayOfObject138[2] = Symbol.intern(null, "root");
    arrayOfObject137[0] = RT.vector(arrayOfObject138);
    arrayOfObject136[1] = PersistentList.create(Arrays.asList(arrayOfObject137));
    arrayOfObject136[2] = RT.keyword(null, "column");
    arrayOfObject136[3] = Integer.valueOf(1);
    arrayOfObject136[4] = RT.keyword(null, "added");
    arrayOfObject136[5] = "1.0";
    arrayOfObject136[6] = RT.keyword(null, "static");
    arrayOfObject136[7] = Boolean.TRUE;
    arrayOfObject136[8] = RT.keyword(null, "doc");
    arrayOfObject136[9] = "Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n   branch? must be a fn of one arg that returns true if passed a node\n   that can have children (but may not).  children must be a fn of one\n   arg that returns a sequence of the children. Will only be called on\n   nodes for which branch? returns true. Root is the root node of the\n  tree.";
    arrayOfObject136[10] = RT.keyword(null, "line");
    arrayOfObject136[11] = Integer.valueOf(4461);
    arrayOfObject136[12] = RT.keyword(null, "file");
    arrayOfObject136[13] = "clojure/core.clj";
    const__1597 = (AFn)RT.map(arrayOfObject136);
    const__1598 = (Var)RT.var("clojure.core", "file-seq");
    const__1599 = Integer.valueOf(4478);
  }

  public static void __init16()
  {
    Object[] arrayOfObject1 = new Object[1];
    Object[] arrayOfObject2 = new Object[1];
    arrayOfObject2[0] = Symbol.intern(null, "dir");
    arrayOfObject1[0] = RT.vector(arrayOfObject2);
    const__1600 = PersistentList.create(Arrays.asList(arrayOfObject1));
    Object[] arrayOfObject3 = new Object[14];
    arrayOfObject3[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject4 = new Object[1];
    Object[] arrayOfObject5 = new Object[1];
    arrayOfObject5[0] = Symbol.intern(null, "dir");
    arrayOfObject4[0] = RT.vector(arrayOfObject5);
    arrayOfObject3[1] = PersistentList.create(Arrays.asList(arrayOfObject4));
    arrayOfObject3[2] = RT.keyword(null, "column");
    arrayOfObject3[3] = Integer.valueOf(1);
    arrayOfObject3[4] = RT.keyword(null, "added");
    arrayOfObject3[5] = "1.0";
    arrayOfObject3[6] = RT.keyword(null, "static");
    arrayOfObject3[7] = Boolean.TRUE;
    arrayOfObject3[8] = RT.keyword(null, "doc");
    arrayOfObject3[9] = "A tree seq on java.io.Files";
    arrayOfObject3[10] = RT.keyword(null, "line");
    arrayOfObject3[11] = Integer.valueOf(4478);
    arrayOfObject3[12] = RT.keyword(null, "file");
    arrayOfObject3[13] = "clojure/core.clj";
    const__1601 = (AFn)RT.map(arrayOfObject3);
    const__1602 = (Var)RT.var("clojure.core", "xml-seq");
    const__1603 = Integer.valueOf(4488);
    Object[] arrayOfObject6 = new Object[1];
    Object[] arrayOfObject7 = new Object[1];
    arrayOfObject7[0] = Symbol.intern(null, "root");
    arrayOfObject6[0] = RT.vector(arrayOfObject7);
    const__1604 = PersistentList.create(Arrays.asList(arrayOfObject6));
    Object[] arrayOfObject8 = new Object[14];
    arrayOfObject8[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject9 = new Object[1];
    Object[] arrayOfObject10 = new Object[1];
    arrayOfObject10[0] = Symbol.intern(null, "root");
    arrayOfObject9[0] = RT.vector(arrayOfObject10);
    arrayOfObject8[1] = PersistentList.create(Arrays.asList(arrayOfObject9));
    arrayOfObject8[2] = RT.keyword(null, "column");
    arrayOfObject8[3] = Integer.valueOf(1);
    arrayOfObject8[4] = RT.keyword(null, "added");
    arrayOfObject8[5] = "1.0";
    arrayOfObject8[6] = RT.keyword(null, "static");
    arrayOfObject8[7] = Boolean.TRUE;
    arrayOfObject8[8] = RT.keyword(null, "doc");
    arrayOfObject8[9] = "A tree seq on the xml elements as per xml/parse";
    arrayOfObject8[10] = RT.keyword(null, "line");
    arrayOfObject8[11] = Integer.valueOf(4488);
    arrayOfObject8[12] = RT.keyword(null, "file");
    arrayOfObject8[13] = "clojure/core.clj";
    const__1605 = (AFn)RT.map(arrayOfObject8);
    const__1606 = (Var)RT.var("clojure.core", "special-symbol?");
    const__1607 = Integer.valueOf(4498);
    Object[] arrayOfObject11 = new Object[1];
    Object[] arrayOfObject12 = new Object[1];
    arrayOfObject12[0] = Symbol.intern(null, "s");
    arrayOfObject11[0] = RT.vector(arrayOfObject12);
    const__1608 = PersistentList.create(Arrays.asList(arrayOfObject11));
    Object[] arrayOfObject13 = new Object[14];
    arrayOfObject13[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject14 = new Object[1];
    Object[] arrayOfObject15 = new Object[1];
    arrayOfObject15[0] = Symbol.intern(null, "s");
    arrayOfObject14[0] = RT.vector(arrayOfObject15);
    arrayOfObject13[1] = PersistentList.create(Arrays.asList(arrayOfObject14));
    arrayOfObject13[2] = RT.keyword(null, "column");
    arrayOfObject13[3] = Integer.valueOf(1);
    arrayOfObject13[4] = RT.keyword(null, "added");
    arrayOfObject13[5] = "1.0";
    arrayOfObject13[6] = RT.keyword(null, "static");
    arrayOfObject13[7] = Boolean.TRUE;
    arrayOfObject13[8] = RT.keyword(null, "doc");
    arrayOfObject13[9] = "Returns true if s names a special form";
    arrayOfObject13[10] = RT.keyword(null, "line");
    arrayOfObject13[11] = Integer.valueOf(4498);
    arrayOfObject13[12] = RT.keyword(null, "file");
    arrayOfObject13[13] = "clojure/core.clj";
    const__1609 = (AFn)RT.map(arrayOfObject13);
    const__1610 = (Var)RT.var("clojure.core", "var?");
    const__1611 = Integer.valueOf(4505);
    Object[] arrayOfObject16 = new Object[1];
    Object[] arrayOfObject17 = new Object[1];
    arrayOfObject17[0] = Symbol.intern(null, "v");
    arrayOfObject16[0] = RT.vector(arrayOfObject17);
    const__1612 = PersistentList.create(Arrays.asList(arrayOfObject16));
    Object[] arrayOfObject18 = new Object[14];
    arrayOfObject18[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject19 = new Object[1];
    Object[] arrayOfObject20 = new Object[1];
    arrayOfObject20[0] = Symbol.intern(null, "v");
    arrayOfObject19[0] = RT.vector(arrayOfObject20);
    arrayOfObject18[1] = PersistentList.create(Arrays.asList(arrayOfObject19));
    arrayOfObject18[2] = RT.keyword(null, "column");
    arrayOfObject18[3] = Integer.valueOf(1);
    arrayOfObject18[4] = RT.keyword(null, "added");
    arrayOfObject18[5] = "1.0";
    arrayOfObject18[6] = RT.keyword(null, "static");
    arrayOfObject18[7] = Boolean.TRUE;
    arrayOfObject18[8] = RT.keyword(null, "doc");
    arrayOfObject18[9] = "Returns true if v is of type clojure.lang.Var";
    arrayOfObject18[10] = RT.keyword(null, "line");
    arrayOfObject18[11] = Integer.valueOf(4505);
    arrayOfObject18[12] = RT.keyword(null, "file");
    arrayOfObject18[13] = "clojure/core.clj";
    const__1613 = (AFn)RT.map(arrayOfObject18);
    const__1614 = (Var)RT.var("clojure.core", "subs");
    const__1615 = Integer.valueOf(4511);
    Object[] arrayOfObject21 = new Object[2];
    Object[] arrayOfObject22 = new Object[2];
    IObj localIObj1 = (IObj)Symbol.intern(null, "s");
    Object[] arrayOfObject23 = new Object[2];
    arrayOfObject23[0] = RT.keyword(null, "tag");
    arrayOfObject23[1] = Symbol.intern(null, "String");
    arrayOfObject22[0] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject23));
    arrayOfObject22[1] = Symbol.intern(null, "start");
    IObj localIObj2 = (IObj)RT.vector(arrayOfObject22);
    Object[] arrayOfObject24 = new Object[2];
    arrayOfObject24[0] = RT.keyword(null, "tag");
    arrayOfObject24[1] = Symbol.intern(null, "String");
    arrayOfObject21[0] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject24));
    Object[] arrayOfObject25 = new Object[3];
    IObj localIObj3 = (IObj)Symbol.intern(null, "s");
    Object[] arrayOfObject26 = new Object[2];
    arrayOfObject26[0] = RT.keyword(null, "tag");
    arrayOfObject26[1] = Symbol.intern(null, "String");
    arrayOfObject25[0] = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject26));
    arrayOfObject25[1] = Symbol.intern(null, "start");
    arrayOfObject25[2] = Symbol.intern(null, "end");
    IObj localIObj4 = (IObj)RT.vector(arrayOfObject25);
    Object[] arrayOfObject27 = new Object[2];
    arrayOfObject27[0] = RT.keyword(null, "tag");
    arrayOfObject27[1] = Symbol.intern(null, "String");
    arrayOfObject21[1] = localIObj4.withMeta((IPersistentMap)RT.map(arrayOfObject27));
    const__1616 = PersistentList.create(Arrays.asList(arrayOfObject21));
    Object[] arrayOfObject28 = new Object[14];
    arrayOfObject28[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject29 = new Object[2];
    Object[] arrayOfObject30 = new Object[2];
    IObj localIObj5 = (IObj)Symbol.intern(null, "s");
    Object[] arrayOfObject31 = new Object[2];
    arrayOfObject31[0] = RT.keyword(null, "tag");
    arrayOfObject31[1] = Symbol.intern(null, "String");
    arrayOfObject30[0] = localIObj5.withMeta((IPersistentMap)RT.map(arrayOfObject31));
    arrayOfObject30[1] = Symbol.intern(null, "start");
    IObj localIObj6 = (IObj)RT.vector(arrayOfObject30);
    Object[] arrayOfObject32 = new Object[2];
    arrayOfObject32[0] = RT.keyword(null, "tag");
    arrayOfObject32[1] = Symbol.intern(null, "String");
    arrayOfObject29[0] = localIObj6.withMeta((IPersistentMap)RT.map(arrayOfObject32));
    Object[] arrayOfObject33 = new Object[3];
    IObj localIObj7 = (IObj)Symbol.intern(null, "s");
    Object[] arrayOfObject34 = new Object[2];
    arrayOfObject34[0] = RT.keyword(null, "tag");
    arrayOfObject34[1] = Symbol.intern(null, "String");
    arrayOfObject33[0] = localIObj7.withMeta((IPersistentMap)RT.map(arrayOfObject34));
    arrayOfObject33[1] = Symbol.intern(null, "start");
    arrayOfObject33[2] = Symbol.intern(null, "end");
    IObj localIObj8 = (IObj)RT.vector(arrayOfObject33);
    Object[] arrayOfObject35 = new Object[2];
    arrayOfObject35[0] = RT.keyword(null, "tag");
    arrayOfObject35[1] = Symbol.intern(null, "String");
    arrayOfObject29[1] = localIObj8.withMeta((IPersistentMap)RT.map(arrayOfObject35));
    arrayOfObject28[1] = PersistentList.create(Arrays.asList(arrayOfObject29));
    arrayOfObject28[2] = RT.keyword(null, "column");
    arrayOfObject28[3] = Integer.valueOf(1);
    arrayOfObject28[4] = RT.keyword(null, "added");
    arrayOfObject28[5] = "1.0";
    arrayOfObject28[6] = RT.keyword(null, "static");
    arrayOfObject28[7] = Boolean.TRUE;
    arrayOfObject28[8] = RT.keyword(null, "doc");
    arrayOfObject28[9] = "Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.";
    arrayOfObject28[10] = RT.keyword(null, "line");
    arrayOfObject28[11] = Integer.valueOf(4511);
    arrayOfObject28[12] = RT.keyword(null, "file");
    arrayOfObject28[13] = "clojure/core.clj";
    const__1617 = (AFn)RT.map(arrayOfObject28);
    const__1618 = (Var)RT.var("clojure.core", "max-key");
    const__1619 = Integer.valueOf(4519);
    Object[] arrayOfObject36 = new Object[3];
    Object[] arrayOfObject37 = new Object[2];
    arrayOfObject37[0] = Symbol.intern(null, "k");
    arrayOfObject37[1] = Symbol.intern(null, "x");
    arrayOfObject36[0] = RT.vector(arrayOfObject37);
    Object[] arrayOfObject38 = new Object[3];
    arrayOfObject38[0] = Symbol.intern(null, "k");
    arrayOfObject38[1] = Symbol.intern(null, "x");
    arrayOfObject38[2] = Symbol.intern(null, "y");
    arrayOfObject36[1] = RT.vector(arrayOfObject38);
    Object[] arrayOfObject39 = new Object[5];
    arrayOfObject39[0] = Symbol.intern(null, "k");
    arrayOfObject39[1] = Symbol.intern(null, "x");
    arrayOfObject39[2] = Symbol.intern(null, "y");
    arrayOfObject39[3] = Symbol.intern(null, "&");
    arrayOfObject39[4] = Symbol.intern(null, "more");
    arrayOfObject36[2] = RT.vector(arrayOfObject39);
    const__1620 = PersistentList.create(Arrays.asList(arrayOfObject36));
    Object[] arrayOfObject40 = new Object[14];
    arrayOfObject40[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject41 = new Object[3];
    Object[] arrayOfObject42 = new Object[2];
    arrayOfObject42[0] = Symbol.intern(null, "k");
    arrayOfObject42[1] = Symbol.intern(null, "x");
    arrayOfObject41[0] = RT.vector(arrayOfObject42);
    Object[] arrayOfObject43 = new Object[3];
    arrayOfObject43[0] = Symbol.intern(null, "k");
    arrayOfObject43[1] = Symbol.intern(null, "x");
    arrayOfObject43[2] = Symbol.intern(null, "y");
    arrayOfObject41[1] = RT.vector(arrayOfObject43);
    Object[] arrayOfObject44 = new Object[5];
    arrayOfObject44[0] = Symbol.intern(null, "k");
    arrayOfObject44[1] = Symbol.intern(null, "x");
    arrayOfObject44[2] = Symbol.intern(null, "y");
    arrayOfObject44[3] = Symbol.intern(null, "&");
    arrayOfObject44[4] = Symbol.intern(null, "more");
    arrayOfObject41[2] = RT.vector(arrayOfObject44);
    arrayOfObject40[1] = PersistentList.create(Arrays.asList(arrayOfObject41));
    arrayOfObject40[2] = RT.keyword(null, "column");
    arrayOfObject40[3] = Integer.valueOf(1);
    arrayOfObject40[4] = RT.keyword(null, "added");
    arrayOfObject40[5] = "1.0";
    arrayOfObject40[6] = RT.keyword(null, "static");
    arrayOfObject40[7] = Boolean.TRUE;
    arrayOfObject40[8] = RT.keyword(null, "doc");
    arrayOfObject40[9] = "Returns the x for which (k x), a number, is greatest.";
    arrayOfObject40[10] = RT.keyword(null, "line");
    arrayOfObject40[11] = Integer.valueOf(4519);
    arrayOfObject40[12] = RT.keyword(null, "file");
    arrayOfObject40[13] = "clojure/core.clj";
    const__1621 = (AFn)RT.map(arrayOfObject40);
    const__1622 = (Var)RT.var("clojure.core", "min-key");
    const__1623 = Integer.valueOf(4528);
    Object[] arrayOfObject45 = new Object[3];
    Object[] arrayOfObject46 = new Object[2];
    arrayOfObject46[0] = Symbol.intern(null, "k");
    arrayOfObject46[1] = Symbol.intern(null, "x");
    arrayOfObject45[0] = RT.vector(arrayOfObject46);
    Object[] arrayOfObject47 = new Object[3];
    arrayOfObject47[0] = Symbol.intern(null, "k");
    arrayOfObject47[1] = Symbol.intern(null, "x");
    arrayOfObject47[2] = Symbol.intern(null, "y");
    arrayOfObject45[1] = RT.vector(arrayOfObject47);
    Object[] arrayOfObject48 = new Object[5];
    arrayOfObject48[0] = Symbol.intern(null, "k");
    arrayOfObject48[1] = Symbol.intern(null, "x");
    arrayOfObject48[2] = Symbol.intern(null, "y");
    arrayOfObject48[3] = Symbol.intern(null, "&");
    arrayOfObject48[4] = Symbol.intern(null, "more");
    arrayOfObject45[2] = RT.vector(arrayOfObject48);
    const__1624 = PersistentList.create(Arrays.asList(arrayOfObject45));
    Object[] arrayOfObject49 = new Object[14];
    arrayOfObject49[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject50 = new Object[3];
    Object[] arrayOfObject51 = new Object[2];
    arrayOfObject51[0] = Symbol.intern(null, "k");
    arrayOfObject51[1] = Symbol.intern(null, "x");
    arrayOfObject50[0] = RT.vector(arrayOfObject51);
    Object[] arrayOfObject52 = new Object[3];
    arrayOfObject52[0] = Symbol.intern(null, "k");
    arrayOfObject52[1] = Symbol.intern(null, "x");
    arrayOfObject52[2] = Symbol.intern(null, "y");
    arrayOfObject50[1] = RT.vector(arrayOfObject52);
    Object[] arrayOfObject53 = new Object[5];
    arrayOfObject53[0] = Symbol.intern(null, "k");
    arrayOfObject53[1] = Symbol.intern(null, "x");
    arrayOfObject53[2] = Symbol.intern(null, "y");
    arrayOfObject53[3] = Symbol.intern(null, "&");
    arrayOfObject53[4] = Symbol.intern(null, "more");
    arrayOfObject50[2] = RT.vector(arrayOfObject53);
    arrayOfObject49[1] = PersistentList.create(Arrays.asList(arrayOfObject50));
    arrayOfObject49[2] = RT.keyword(null, "column");
    arrayOfObject49[3] = Integer.valueOf(1);
    arrayOfObject49[4] = RT.keyword(null, "added");
    arrayOfObject49[5] = "1.0";
    arrayOfObject49[6] = RT.keyword(null, "static");
    arrayOfObject49[7] = Boolean.TRUE;
    arrayOfObject49[8] = RT.keyword(null, "doc");
    arrayOfObject49[9] = "Returns the x for which (k x), a number, is least.";
    arrayOfObject49[10] = RT.keyword(null, "line");
    arrayOfObject49[11] = Integer.valueOf(4528);
    arrayOfObject49[12] = RT.keyword(null, "file");
    arrayOfObject49[13] = "clojure/core.clj";
    const__1625 = (AFn)RT.map(arrayOfObject49);
    const__1626 = (Var)RT.var("clojure.core", "distinct");
    const__1627 = Integer.valueOf(4537);
    Object[] arrayOfObject54 = new Object[1];
    Object[] arrayOfObject55 = new Object[1];
    arrayOfObject55[0] = Symbol.intern(null, "coll");
    arrayOfObject54[0] = RT.vector(arrayOfObject55);
    const__1628 = PersistentList.create(Arrays.asList(arrayOfObject54));
    Object[] arrayOfObject56 = new Object[14];
    arrayOfObject56[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject57 = new Object[1];
    Object[] arrayOfObject58 = new Object[1];
    arrayOfObject58[0] = Symbol.intern(null, "coll");
    arrayOfObject57[0] = RT.vector(arrayOfObject58);
    arrayOfObject56[1] = PersistentList.create(Arrays.asList(arrayOfObject57));
    arrayOfObject56[2] = RT.keyword(null, "column");
    arrayOfObject56[3] = Integer.valueOf(1);
    arrayOfObject56[4] = RT.keyword(null, "added");
    arrayOfObject56[5] = "1.0";
    arrayOfObject56[6] = RT.keyword(null, "static");
    arrayOfObject56[7] = Boolean.TRUE;
    arrayOfObject56[8] = RT.keyword(null, "doc");
    arrayOfObject56[9] = "Returns a lazy sequence of the elements of coll with duplicates removed";
    arrayOfObject56[10] = RT.keyword(null, "line");
    arrayOfObject56[11] = Integer.valueOf(4537);
    arrayOfObject56[12] = RT.keyword(null, "file");
    arrayOfObject56[13] = "clojure/core.clj";
    const__1629 = (AFn)RT.map(arrayOfObject56);
    const__1630 = (Var)RT.var("clojure.core", "replace");
    const__1631 = Integer.valueOf(4554);
    Object[] arrayOfObject59 = new Object[1];
    Object[] arrayOfObject60 = new Object[2];
    arrayOfObject60[0] = Symbol.intern(null, "smap");
    arrayOfObject60[1] = Symbol.intern(null, "coll");
    arrayOfObject59[0] = RT.vector(arrayOfObject60);
    const__1632 = PersistentList.create(Arrays.asList(arrayOfObject59));
    Object[] arrayOfObject61 = new Object[14];
    arrayOfObject61[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject62 = new Object[1];
    Object[] arrayOfObject63 = new Object[2];
    arrayOfObject63[0] = Symbol.intern(null, "smap");
    arrayOfObject63[1] = Symbol.intern(null, "coll");
    arrayOfObject62[0] = RT.vector(arrayOfObject63);
    arrayOfObject61[1] = PersistentList.create(Arrays.asList(arrayOfObject62));
    arrayOfObject61[2] = RT.keyword(null, "column");
    arrayOfObject61[3] = Integer.valueOf(1);
    arrayOfObject61[4] = RT.keyword(null, "added");
    arrayOfObject61[5] = "1.0";
    arrayOfObject61[6] = RT.keyword(null, "static");
    arrayOfObject61[7] = Boolean.TRUE;
    arrayOfObject61[8] = RT.keyword(null, "doc");
    arrayOfObject61[9] = "Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap";
    arrayOfObject61[10] = RT.keyword(null, "line");
    arrayOfObject61[11] = Integer.valueOf(4554);
    arrayOfObject61[12] = RT.keyword(null, "file");
    arrayOfObject61[13] = "clojure/core.clj";
    const__1633 = (AFn)RT.map(arrayOfObject61);
    const__1634 = (Var)RT.var("clojure.core", "dosync");
    const__1635 = Integer.valueOf(4569);
    Object[] arrayOfObject64 = new Object[1];
    Object[] arrayOfObject65 = new Object[2];
    arrayOfObject65[0] = Symbol.intern(null, "&");
    arrayOfObject65[1] = Symbol.intern(null, "exprs");
    arrayOfObject64[0] = RT.vector(arrayOfObject65);
    const__1636 = PersistentList.create(Arrays.asList(arrayOfObject64));
    Object[] arrayOfObject66 = new Object[12];
    arrayOfObject66[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject67 = new Object[1];
    Object[] arrayOfObject68 = new Object[2];
    arrayOfObject68[0] = Symbol.intern(null, "&");
    arrayOfObject68[1] = Symbol.intern(null, "exprs");
    arrayOfObject67[0] = RT.vector(arrayOfObject68);
    arrayOfObject66[1] = PersistentList.create(Arrays.asList(arrayOfObject67));
    arrayOfObject66[2] = RT.keyword(null, "column");
    arrayOfObject66[3] = Integer.valueOf(1);
    arrayOfObject66[4] = RT.keyword(null, "added");
    arrayOfObject66[5] = "1.0";
    arrayOfObject66[6] = RT.keyword(null, "doc");
    arrayOfObject66[7] = "Runs the exprs (in an implicit do) in a transaction that encompasses\n  exprs and any nested calls.  Starts a transaction if none is already\n  running on this thread. Any uncaught exception will abort the\n  transaction and flow out of dosync. The exprs may be run more than\n  once, but any effects on Refs will be atomic.";
    arrayOfObject66[8] = RT.keyword(null, "line");
    arrayOfObject66[9] = Integer.valueOf(4569);
    arrayOfObject66[10] = RT.keyword(null, "file");
    arrayOfObject66[11] = "clojure/core.clj";
    const__1637 = (AFn)RT.map(arrayOfObject66);
    const__1638 = (Var)RT.var("clojure.core", "with-precision");
    const__1639 = Integer.valueOf(4579);
    Object[] arrayOfObject69 = new Object[1];
    Object[] arrayOfObject70 = new Object[3];
    arrayOfObject70[0] = Symbol.intern(null, "precision");
    arrayOfObject70[1] = Symbol.intern(null, "&");
    arrayOfObject70[2] = Symbol.intern(null, "exprs");
    arrayOfObject69[0] = RT.vector(arrayOfObject70);
    const__1640 = PersistentList.create(Arrays.asList(arrayOfObject69));
    Object[] arrayOfObject71 = new Object[12];
    arrayOfObject71[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject72 = new Object[1];
    Object[] arrayOfObject73 = new Object[3];
    arrayOfObject73[0] = Symbol.intern(null, "precision");
    arrayOfObject73[1] = Symbol.intern(null, "&");
    arrayOfObject73[2] = Symbol.intern(null, "exprs");
    arrayOfObject72[0] = RT.vector(arrayOfObject73);
    arrayOfObject71[1] = PersistentList.create(Arrays.asList(arrayOfObject72));
    arrayOfObject71[2] = RT.keyword(null, "column");
    arrayOfObject71[3] = Integer.valueOf(1);
    arrayOfObject71[4] = RT.keyword(null, "added");
    arrayOfObject71[5] = "1.0";
    arrayOfObject71[6] = RT.keyword(null, "doc");
    arrayOfObject71[7] = "Sets the precision and rounding mode to be used for BigDecimal operations.\n\n  Usage: (with-precision 10 (/ 1M 3))\n  or:    (with-precision 10 :rounding HALF_DOWN (/ 1M 3))\n\n  The rounding mode is one of CEILING, FLOOR, HALF_UP, HALF_DOWN,\n  HALF_EVEN, UP, DOWN and UNNECESSARY; it defaults to HALF_UP.";
    arrayOfObject71[8] = RT.keyword(null, "line");
    arrayOfObject71[9] = Integer.valueOf(4579);
    arrayOfObject71[10] = RT.keyword(null, "file");
    arrayOfObject71[11] = "clojure/core.clj";
    const__1641 = (AFn)RT.map(arrayOfObject71);
    const__1642 = (Var)RT.var("clojure.core", "mk-bound-fn");
    const__1643 = Integer.valueOf(4596);
    Object[] arrayOfObject74 = new Object[1];
    Object[] arrayOfObject75 = new Object[3];
    IObj localIObj9 = (IObj)Symbol.intern(null, "sc");
    Object[] arrayOfObject76 = new Object[2];
    arrayOfObject76[0] = RT.keyword(null, "tag");
    arrayOfObject76[1] = Symbol.intern(null, "clojure.lang.Sorted");
    arrayOfObject75[0] = localIObj9.withMeta((IPersistentMap)RT.map(arrayOfObject76));
    arrayOfObject75[1] = Symbol.intern(null, "test");
    arrayOfObject75[2] = Symbol.intern(null, "key");
    arrayOfObject74[0] = RT.vector(arrayOfObject75);
    const__1644 = PersistentList.create(Arrays.asList(arrayOfObject74));
    Object[] arrayOfObject77 = new Object[10];
    arrayOfObject77[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject78 = new Object[1];
    Object[] arrayOfObject79 = new Object[3];
    IObj localIObj10 = (IObj)Symbol.intern(null, "sc");
    Object[] arrayOfObject80 = new Object[2];
    arrayOfObject80[0] = RT.keyword(null, "tag");
    arrayOfObject80[1] = Symbol.intern(null, "clojure.lang.Sorted");
    arrayOfObject79[0] = localIObj10.withMeta((IPersistentMap)RT.map(arrayOfObject80));
    arrayOfObject79[1] = Symbol.intern(null, "test");
    arrayOfObject79[2] = Symbol.intern(null, "key");
    arrayOfObject78[0] = RT.vector(arrayOfObject79);
    arrayOfObject77[1] = PersistentList.create(Arrays.asList(arrayOfObject78));
    arrayOfObject77[2] = RT.keyword(null, "column");
    arrayOfObject77[3] = Integer.valueOf(1);
    arrayOfObject77[4] = RT.keyword(null, "private");
    arrayOfObject77[5] = Boolean.TRUE;
    arrayOfObject77[6] = RT.keyword(null, "line");
    arrayOfObject77[7] = Integer.valueOf(4596);
    arrayOfObject77[8] = RT.keyword(null, "file");
    arrayOfObject77[9] = "clojure/core.clj";
    const__1645 = (AFn)RT.map(arrayOfObject77);
    const__1646 = (Var)RT.var("clojure.core", "subseq");
    const__1647 = Integer.valueOf(4602);
    Object[] arrayOfObject81 = new Object[2];
    Object[] arrayOfObject82 = new Object[3];
    IObj localIObj11 = (IObj)Symbol.intern(null, "sc");
    Object[] arrayOfObject83 = new Object[2];
    arrayOfObject83[0] = RT.keyword(null, "tag");
    arrayOfObject83[1] = Symbol.intern(null, "clojure.lang.Sorted");
    arrayOfObject82[0] = localIObj11.withMeta((IPersistentMap)RT.map(arrayOfObject83));
    arrayOfObject82[1] = Symbol.intern(null, "test");
    arrayOfObject82[2] = Symbol.intern(null, "key");
    arrayOfObject81[0] = RT.vector(arrayOfObject82);
    Object[] arrayOfObject84 = new Object[5];
    IObj localIObj12 = (IObj)Symbol.intern(null, "sc");
    Object[] arrayOfObject85 = new Object[2];
    arrayOfObject85[0] = RT.keyword(null, "tag");
    arrayOfObject85[1] = Symbol.intern(null, "clojure.lang.Sorted");
    arrayOfObject84[0] = localIObj12.withMeta((IPersistentMap)RT.map(arrayOfObject85));
    arrayOfObject84[1] = Symbol.intern(null, "start-test");
    arrayOfObject84[2] = Symbol.intern(null, "start-key");
    arrayOfObject84[3] = Symbol.intern(null, "end-test");
    arrayOfObject84[4] = Symbol.intern(null, "end-key");
    arrayOfObject81[1] = RT.vector(arrayOfObject84);
    const__1648 = PersistentList.create(Arrays.asList(arrayOfObject81));
    Object[] arrayOfObject86 = new Object[14];
    arrayOfObject86[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject87 = new Object[2];
    Object[] arrayOfObject88 = new Object[3];
    IObj localIObj13 = (IObj)Symbol.intern(null, "sc");
    Object[] arrayOfObject89 = new Object[2];
    arrayOfObject89[0] = RT.keyword(null, "tag");
    arrayOfObject89[1] = Symbol.intern(null, "clojure.lang.Sorted");
    arrayOfObject88[0] = localIObj13.withMeta((IPersistentMap)RT.map(arrayOfObject89));
    arrayOfObject88[1] = Symbol.intern(null, "test");
    arrayOfObject88[2] = Symbol.intern(null, "key");
    arrayOfObject87[0] = RT.vector(arrayOfObject88);
    Object[] arrayOfObject90 = new Object[5];
    IObj localIObj14 = (IObj)Symbol.intern(null, "sc");
    Object[] arrayOfObject91 = new Object[2];
    arrayOfObject91[0] = RT.keyword(null, "tag");
    arrayOfObject91[1] = Symbol.intern(null, "clojure.lang.Sorted");
    arrayOfObject90[0] = localIObj14.withMeta((IPersistentMap)RT.map(arrayOfObject91));
    arrayOfObject90[1] = Symbol.intern(null, "start-test");
    arrayOfObject90[2] = Symbol.intern(null, "start-key");
    arrayOfObject90[3] = Symbol.intern(null, "end-test");
    arrayOfObject90[4] = Symbol.intern(null, "end-key");
    arrayOfObject87[1] = RT.vector(arrayOfObject90);
    arrayOfObject86[1] = PersistentList.create(Arrays.asList(arrayOfObject87));
    arrayOfObject86[2] = RT.keyword(null, "column");
    arrayOfObject86[3] = Integer.valueOf(1);
    arrayOfObject86[4] = RT.keyword(null, "added");
    arrayOfObject86[5] = "1.0";
    arrayOfObject86[6] = RT.keyword(null, "static");
    arrayOfObject86[7] = Boolean.TRUE;
    arrayOfObject86[8] = RT.keyword(null, "doc");
    arrayOfObject86[9] = "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true";
    arrayOfObject86[10] = RT.keyword(null, "line");
    arrayOfObject86[11] = Integer.valueOf(4602);
    arrayOfObject86[12] = RT.keyword(null, "file");
    arrayOfObject86[13] = "clojure/core.clj";
    const__1649 = (AFn)RT.map(arrayOfObject86);
    const__1650 = (Var)RT.var("clojure.core", "rsubseq");
    const__1651 = Integer.valueOf(4619);
    Object[] arrayOfObject92 = new Object[2];
    Object[] arrayOfObject93 = new Object[3];
    IObj localIObj15 = (IObj)Symbol.intern(null, "sc");
    Object[] arrayOfObject94 = new Object[2];
    arrayOfObject94[0] = RT.keyword(null, "tag");
    arrayOfObject94[1] = Symbol.intern(null, "clojure.lang.Sorted");
    arrayOfObject93[0] = localIObj15.withMeta((IPersistentMap)RT.map(arrayOfObject94));
    arrayOfObject93[1] = Symbol.intern(null, "test");
    arrayOfObject93[2] = Symbol.intern(null, "key");
    arrayOfObject92[0] = RT.vector(arrayOfObject93);
    Object[] arrayOfObject95 = new Object[5];
    IObj localIObj16 = (IObj)Symbol.intern(null, "sc");
    Object[] arrayOfObject96 = new Object[2];
    arrayOfObject96[0] = RT.keyword(null, "tag");
    arrayOfObject96[1] = Symbol.intern(null, "clojure.lang.Sorted");
    arrayOfObject95[0] = localIObj16.withMeta((IPersistentMap)RT.map(arrayOfObject96));
    arrayOfObject95[1] = Symbol.intern(null, "start-test");
    arrayOfObject95[2] = Symbol.intern(null, "start-key");
    arrayOfObject95[3] = Symbol.intern(null, "end-test");
    arrayOfObject95[4] = Symbol.intern(null, "end-key");
    arrayOfObject92[1] = RT.vector(arrayOfObject95);
    const__1652 = PersistentList.create(Arrays.asList(arrayOfObject92));
    Object[] arrayOfObject97 = new Object[14];
    arrayOfObject97[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject98 = new Object[2];
    Object[] arrayOfObject99 = new Object[3];
    IObj localIObj17 = (IObj)Symbol.intern(null, "sc");
    Object[] arrayOfObject100 = new Object[2];
    arrayOfObject100[0] = RT.keyword(null, "tag");
    arrayOfObject100[1] = Symbol.intern(null, "clojure.lang.Sorted");
    arrayOfObject99[0] = localIObj17.withMeta((IPersistentMap)RT.map(arrayOfObject100));
    arrayOfObject99[1] = Symbol.intern(null, "test");
    arrayOfObject99[2] = Symbol.intern(null, "key");
    arrayOfObject98[0] = RT.vector(arrayOfObject99);
    Object[] arrayOfObject101 = new Object[5];
    IObj localIObj18 = (IObj)Symbol.intern(null, "sc");
    Object[] arrayOfObject102 = new Object[2];
    arrayOfObject102[0] = RT.keyword(null, "tag");
    arrayOfObject102[1] = Symbol.intern(null, "clojure.lang.Sorted");
    arrayOfObject101[0] = localIObj18.withMeta((IPersistentMap)RT.map(arrayOfObject102));
    arrayOfObject101[1] = Symbol.intern(null, "start-test");
    arrayOfObject101[2] = Symbol.intern(null, "start-key");
    arrayOfObject101[3] = Symbol.intern(null, "end-test");
    arrayOfObject101[4] = Symbol.intern(null, "end-key");
    arrayOfObject98[1] = RT.vector(arrayOfObject101);
    arrayOfObject97[1] = PersistentList.create(Arrays.asList(arrayOfObject98));
    arrayOfObject97[2] = RT.keyword(null, "column");
    arrayOfObject97[3] = Integer.valueOf(1);
    arrayOfObject97[4] = RT.keyword(null, "added");
    arrayOfObject97[5] = "1.0";
    arrayOfObject97[6] = RT.keyword(null, "static");
    arrayOfObject97[7] = Boolean.TRUE;
    arrayOfObject97[8] = RT.keyword(null, "doc");
    arrayOfObject97[9] = "sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true";
    arrayOfObject97[10] = RT.keyword(null, "line");
    arrayOfObject97[11] = Integer.valueOf(4619);
    arrayOfObject97[12] = RT.keyword(null, "file");
    arrayOfObject97[13] = "clojure/core.clj";
    const__1653 = (AFn)RT.map(arrayOfObject97);
    const__1654 = (Var)RT.var("clojure.core", "repeatedly");
    const__1655 = Integer.valueOf(4636);
    Object[] arrayOfObject103 = new Object[2];
    Object[] arrayOfObject104 = new Object[1];
    arrayOfObject104[0] = Symbol.intern(null, "f");
    arrayOfObject103[0] = RT.vector(arrayOfObject104);
    Object[] arrayOfObject105 = new Object[2];
    arrayOfObject105[0] = Symbol.intern(null, "n");
    arrayOfObject105[1] = Symbol.intern(null, "f");
    arrayOfObject103[1] = RT.vector(arrayOfObject105);
    const__1656 = PersistentList.create(Arrays.asList(arrayOfObject103));
    Object[] arrayOfObject106 = new Object[14];
    arrayOfObject106[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject107 = new Object[2];
    Object[] arrayOfObject108 = new Object[1];
    arrayOfObject108[0] = Symbol.intern(null, "f");
    arrayOfObject107[0] = RT.vector(arrayOfObject108);
    Object[] arrayOfObject109 = new Object[2];
    arrayOfObject109[0] = Symbol.intern(null, "n");
    arrayOfObject109[1] = Symbol.intern(null, "f");
    arrayOfObject107[1] = RT.vector(arrayOfObject109);
    arrayOfObject106[1] = PersistentList.create(Arrays.asList(arrayOfObject107));
    arrayOfObject106[2] = RT.keyword(null, "column");
    arrayOfObject106[3] = Integer.valueOf(1);
    arrayOfObject106[4] = RT.keyword(null, "added");
    arrayOfObject106[5] = "1.0";
    arrayOfObject106[6] = RT.keyword(null, "static");
    arrayOfObject106[7] = Boolean.TRUE;
    arrayOfObject106[8] = RT.keyword(null, "doc");
    arrayOfObject106[9] = "Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it";
    arrayOfObject106[10] = RT.keyword(null, "line");
    arrayOfObject106[11] = Integer.valueOf(4636);
    arrayOfObject106[12] = RT.keyword(null, "file");
    arrayOfObject106[13] = "clojure/core.clj";
    const__1657 = (AFn)RT.map(arrayOfObject106);
    const__1658 = (Var)RT.var("clojure.core", "add-classpath");
    const__1659 = Integer.valueOf(4645);
    Object[] arrayOfObject110 = new Object[1];
    Object[] arrayOfObject111 = new Object[1];
    arrayOfObject111[0] = Symbol.intern(null, "url");
    arrayOfObject110[0] = RT.vector(arrayOfObject111);
    const__1660 = PersistentList.create(Arrays.asList(arrayOfObject110));
    Object[] arrayOfObject112 = new Object[14];
    arrayOfObject112[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject113 = new Object[1];
    Object[] arrayOfObject114 = new Object[1];
    arrayOfObject114[0] = Symbol.intern(null, "url");
    arrayOfObject113[0] = RT.vector(arrayOfObject114);
    arrayOfObject112[1] = PersistentList.create(Arrays.asList(arrayOfObject113));
    arrayOfObject112[2] = RT.keyword(null, "deprecated");
    arrayOfObject112[3] = "1.1";
    arrayOfObject112[4] = RT.keyword(null, "column");
    arrayOfObject112[5] = Integer.valueOf(1);
    arrayOfObject112[6] = RT.keyword(null, "added");
    arrayOfObject112[7] = "1.0";
    arrayOfObject112[8] = RT.keyword(null, "doc");
    arrayOfObject112[9] = "DEPRECATED \n\n  Adds the url (String or URL object) to the classpath per\n  URLClassLoader.addURL";
    arrayOfObject112[10] = RT.keyword(null, "line");
    arrayOfObject112[11] = Integer.valueOf(4645);
    arrayOfObject112[12] = RT.keyword(null, "file");
    arrayOfObject112[13] = "clojure/core.clj";
    const__1661 = (AFn)RT.map(arrayOfObject112);
    const__1662 = (Var)RT.var("clojure.core", "hash");
    const__1663 = Integer.valueOf(4658);
    Object[] arrayOfObject115 = new Object[1];
    Object[] arrayOfObject116 = new Object[1];
    arrayOfObject116[0] = Symbol.intern(null, "x");
    arrayOfObject115[0] = RT.vector(arrayOfObject116);
    const__1664 = PersistentList.create(Arrays.asList(arrayOfObject115));
    Object[] arrayOfObject117 = new Object[14];
    arrayOfObject117[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject118 = new Object[1];
    Object[] arrayOfObject119 = new Object[1];
    arrayOfObject119[0] = Symbol.intern(null, "x");
    arrayOfObject118[0] = RT.vector(arrayOfObject119);
    arrayOfObject117[1] = PersistentList.create(Arrays.asList(arrayOfObject118));
    arrayOfObject117[2] = RT.keyword(null, "column");
    arrayOfObject117[3] = Integer.valueOf(1);
    arrayOfObject117[4] = RT.keyword(null, "added");
    arrayOfObject117[5] = "1.0";
    arrayOfObject117[6] = RT.keyword(null, "static");
    arrayOfObject117[7] = Boolean.TRUE;
    arrayOfObject117[8] = RT.keyword(null, "doc");
    arrayOfObject117[9] = "Returns the hash code of its argument. Note this is the hash code\n  consistent with =, and thus is different than .hashCode for Integer,\n  Short, Byte and Clojure collections.";
    arrayOfObject117[10] = RT.keyword(null, "line");
    arrayOfObject117[11] = Integer.valueOf(4658);
    arrayOfObject117[12] = RT.keyword(null, "file");
    arrayOfObject117[13] = "clojure/core.clj";
    const__1665 = (AFn)RT.map(arrayOfObject117);
    const__1666 = (Var)RT.var("clojure.core", "interpose");
    const__1667 = Integer.valueOf(4667);
    Object[] arrayOfObject120 = new Object[1];
    Object[] arrayOfObject121 = new Object[2];
    arrayOfObject121[0] = Symbol.intern(null, "sep");
    arrayOfObject121[1] = Symbol.intern(null, "coll");
    arrayOfObject120[0] = RT.vector(arrayOfObject121);
    const__1668 = PersistentList.create(Arrays.asList(arrayOfObject120));
    Object[] arrayOfObject122 = new Object[14];
    arrayOfObject122[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject123 = new Object[1];
    Object[] arrayOfObject124 = new Object[2];
    arrayOfObject124[0] = Symbol.intern(null, "sep");
    arrayOfObject124[1] = Symbol.intern(null, "coll");
    arrayOfObject123[0] = RT.vector(arrayOfObject124);
    arrayOfObject122[1] = PersistentList.create(Arrays.asList(arrayOfObject123));
    arrayOfObject122[2] = RT.keyword(null, "column");
    arrayOfObject122[3] = Integer.valueOf(1);
    arrayOfObject122[4] = RT.keyword(null, "added");
    arrayOfObject122[5] = "1.0";
    arrayOfObject122[6] = RT.keyword(null, "static");
    arrayOfObject122[7] = Boolean.TRUE;
    arrayOfObject122[8] = RT.keyword(null, "doc");
    arrayOfObject122[9] = "Returns a lazy seq of the elements of coll separated by sep";
    arrayOfObject122[10] = RT.keyword(null, "line");
    arrayOfObject122[11] = Integer.valueOf(4667);
    arrayOfObject122[12] = RT.keyword(null, "file");
    arrayOfObject122[13] = "clojure/core.clj";
    const__1669 = (AFn)RT.map(arrayOfObject122);
    const__1670 = (Var)RT.var("clojure.core", "definline");
    const__1671 = Integer.valueOf(4673);
    Object[] arrayOfObject125 = new Object[1];
    Object[] arrayOfObject126 = new Object[3];
    arrayOfObject126[0] = Symbol.intern(null, "name");
    arrayOfObject126[1] = Symbol.intern(null, "&");
    arrayOfObject126[2] = Symbol.intern(null, "decl");
    arrayOfObject125[0] = RT.vector(arrayOfObject126);
    const__1672 = PersistentList.create(Arrays.asList(arrayOfObject125));
    Object[] arrayOfObject127 = new Object[12];
    arrayOfObject127[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject128 = new Object[1];
    Object[] arrayOfObject129 = new Object[3];
    arrayOfObject129[0] = Symbol.intern(null, "name");
    arrayOfObject129[1] = Symbol.intern(null, "&");
    arrayOfObject129[2] = Symbol.intern(null, "decl");
    arrayOfObject128[0] = RT.vector(arrayOfObject129);
    arrayOfObject127[1] = PersistentList.create(Arrays.asList(arrayOfObject128));
    arrayOfObject127[2] = RT.keyword(null, "column");
    arrayOfObject127[3] = Integer.valueOf(1);
    arrayOfObject127[4] = RT.keyword(null, "added");
    arrayOfObject127[5] = "1.0";
    arrayOfObject127[6] = RT.keyword(null, "doc");
    arrayOfObject127[7] = "Experimental - like defmacro, except defines a named function whose\n  body is the expansion, calls to which may be expanded inline as if\n  it were a macro. Cannot be used with variadic (&) args.";
    arrayOfObject127[8] = RT.keyword(null, "line");
    arrayOfObject127[9] = Integer.valueOf(4673);
    arrayOfObject127[10] = RT.keyword(null, "file");
    arrayOfObject127[11] = "clojure/core.clj";
    const__1673 = (AFn)RT.map(arrayOfObject127);
    const__1674 = (Var)RT.var("clojure.core", "empty");
    const__1675 = Integer.valueOf(4685);
    Object[] arrayOfObject130 = new Object[1];
    Object[] arrayOfObject131 = new Object[1];
    arrayOfObject131[0] = Symbol.intern(null, "coll");
    arrayOfObject130[0] = RT.vector(arrayOfObject131);
    const__1676 = PersistentList.create(Arrays.asList(arrayOfObject130));
    Object[] arrayOfObject132 = new Object[14];
    arrayOfObject132[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject133 = new Object[1];
    Object[] arrayOfObject134 = new Object[1];
    arrayOfObject134[0] = Symbol.intern(null, "coll");
    arrayOfObject133[0] = RT.vector(arrayOfObject134);
    arrayOfObject132[1] = PersistentList.create(Arrays.asList(arrayOfObject133));
    arrayOfObject132[2] = RT.keyword(null, "column");
    arrayOfObject132[3] = Integer.valueOf(1);
    arrayOfObject132[4] = RT.keyword(null, "added");
    arrayOfObject132[5] = "1.0";
    arrayOfObject132[6] = RT.keyword(null, "static");
    arrayOfObject132[7] = Boolean.TRUE;
    arrayOfObject132[8] = RT.keyword(null, "doc");
    arrayOfObject132[9] = "Returns an empty collection of the same category as coll, or nil";
    arrayOfObject132[10] = RT.keyword(null, "line");
    arrayOfObject132[11] = Integer.valueOf(4685);
    arrayOfObject132[12] = RT.keyword(null, "file");
    arrayOfObject132[13] = "clojure/core.clj";
    const__1677 = (AFn)RT.map(arrayOfObject132);
    const__1678 = (Var)RT.var("clojure.core", "amap");
    const__1679 = Integer.valueOf(4693);
    Object[] arrayOfObject135 = new Object[1];
    Object[] arrayOfObject136 = new Object[4];
    arrayOfObject136[0] = Symbol.intern(null, "a");
    arrayOfObject136[1] = Symbol.intern(null, "idx");
    arrayOfObject136[2] = Symbol.intern(null, "ret");
    arrayOfObject136[3] = Symbol.intern(null, "expr");
    arrayOfObject135[0] = RT.vector(arrayOfObject136);
    const__1680 = PersistentList.create(Arrays.asList(arrayOfObject135));
    Object[] arrayOfObject137 = new Object[12];
    arrayOfObject137[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject138 = new Object[1];
    Object[] arrayOfObject139 = new Object[4];
    arrayOfObject139[0] = Symbol.intern(null, "a");
    arrayOfObject139[1] = Symbol.intern(null, "idx");
    arrayOfObject139[2] = Symbol.intern(null, "ret");
    arrayOfObject139[3] = Symbol.intern(null, "expr");
    arrayOfObject138[0] = RT.vector(arrayOfObject139);
    arrayOfObject137[1] = PersistentList.create(Arrays.asList(arrayOfObject138));
    arrayOfObject137[2] = RT.keyword(null, "column");
    arrayOfObject137[3] = Integer.valueOf(1);
    arrayOfObject137[4] = RT.keyword(null, "added");
    arrayOfObject137[5] = "1.0";
    arrayOfObject137[6] = RT.keyword(null, "doc");
    arrayOfObject137[7] = "Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting \n  each element of ret to the evaluation of expr, returning the new \n  array ret.";
    arrayOfObject137[8] = RT.keyword(null, "line");
    arrayOfObject137[9] = Integer.valueOf(4693);
    arrayOfObject137[10] = RT.keyword(null, "file");
    arrayOfObject137[11] = "clojure/core.clj";
    const__1681 = (AFn)RT.map(arrayOfObject137);
    const__1682 = (Var)RT.var("clojure.core", "areduce");
    const__1683 = Integer.valueOf(4709);
    Object[] arrayOfObject140 = new Object[1];
    Object[] arrayOfObject141 = new Object[5];
    arrayOfObject141[0] = Symbol.intern(null, "a");
    arrayOfObject141[1] = Symbol.intern(null, "idx");
    arrayOfObject141[2] = Symbol.intern(null, "ret");
    arrayOfObject141[3] = Symbol.intern(null, "init");
    arrayOfObject141[4] = Symbol.intern(null, "expr");
    arrayOfObject140[0] = RT.vector(arrayOfObject141);
    const__1684 = PersistentList.create(Arrays.asList(arrayOfObject140));
    Object[] arrayOfObject142 = new Object[12];
    arrayOfObject142[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject143 = new Object[1];
    Object[] arrayOfObject144 = new Object[5];
    arrayOfObject144[0] = Symbol.intern(null, "a");
    arrayOfObject144[1] = Symbol.intern(null, "idx");
    arrayOfObject144[2] = Symbol.intern(null, "ret");
    arrayOfObject144[3] = Symbol.intern(null, "init");
    arrayOfObject144[4] = Symbol.intern(null, "expr");
    arrayOfObject143[0] = RT.vector(arrayOfObject144);
    arrayOfObject142[1] = PersistentList.create(Arrays.asList(arrayOfObject143));
    arrayOfObject142[2] = RT.keyword(null, "column");
    arrayOfObject142[3] = Integer.valueOf(1);
    arrayOfObject142[4] = RT.keyword(null, "added");
    arrayOfObject142[5] = "1.0";
    arrayOfObject142[6] = RT.keyword(null, "doc");
    arrayOfObject142[7] = "Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the \n  evaluation of expr at each step, returning ret.";
    arrayOfObject142[8] = RT.keyword(null, "line");
    arrayOfObject142[9] = Integer.valueOf(4709);
    arrayOfObject142[10] = RT.keyword(null, "file");
    arrayOfObject142[11] = "clojure/core.clj";
    const__1685 = (AFn)RT.map(arrayOfObject142);
    const__1686 = (Var)RT.var("clojure.core", "float-array");
    const__1687 = Integer.valueOf(4721);
    Object[] arrayOfObject145 = new Object[2];
    Object[] arrayOfObject146 = new Object[1];
    arrayOfObject146[0] = Symbol.intern(null, "size-or-seq");
    arrayOfObject145[0] = RT.vector(arrayOfObject146);
    Object[] arrayOfObject147 = new Object[2];
    arrayOfObject147[0] = Symbol.intern(null, "size");
    arrayOfObject147[1] = Symbol.intern(null, "init-val-or-seq");
    arrayOfObject145[1] = RT.vector(arrayOfObject147);
    const__1688 = PersistentList.create(Arrays.asList(arrayOfObject145));
    const__1689 = Long.valueOf(1L);
    Object[] arrayOfObject148 = new Object[2];
    arrayOfObject148[0] = Long.valueOf(1L);
    arrayOfObject148[1] = Long.valueOf(2L);
    const__1690 = (AFn)PersistentHashSet.create(arrayOfObject148);
    const__1691 = (Var)RT.var("clojure.core", "boolean-array");
    const__1692 = Integer.valueOf(4729);
    Object[] arrayOfObject149 = new Object[2];
    Object[] arrayOfObject150 = new Object[1];
    arrayOfObject150[0] = Symbol.intern(null, "size-or-seq");
    arrayOfObject149[0] = RT.vector(arrayOfObject150);
    Object[] arrayOfObject151 = new Object[2];
    arrayOfObject151[0] = Symbol.intern(null, "size");
    arrayOfObject151[1] = Symbol.intern(null, "init-val-or-seq");
    arrayOfObject149[1] = RT.vector(arrayOfObject151);
    const__1693 = PersistentList.create(Arrays.asList(arrayOfObject149));
    Object[] arrayOfObject152 = new Object[2];
    arrayOfObject152[0] = Long.valueOf(1L);
    arrayOfObject152[1] = Long.valueOf(2L);
    const__1694 = (AFn)PersistentHashSet.create(arrayOfObject152);
    const__1695 = (Var)RT.var("clojure.core", "byte-array");
    const__1696 = Integer.valueOf(4737);
    Object[] arrayOfObject153 = new Object[2];
    Object[] arrayOfObject154 = new Object[1];
    arrayOfObject154[0] = Symbol.intern(null, "size-or-seq");
    arrayOfObject153[0] = RT.vector(arrayOfObject154);
    Object[] arrayOfObject155 = new Object[2];
    arrayOfObject155[0] = Symbol.intern(null, "size");
    arrayOfObject155[1] = Symbol.intern(null, "init-val-or-seq");
    arrayOfObject153[1] = RT.vector(arrayOfObject155);
    const__1697 = PersistentList.create(Arrays.asList(arrayOfObject153));
    Object[] arrayOfObject156 = new Object[2];
    arrayOfObject156[0] = Long.valueOf(1L);
    arrayOfObject156[1] = Long.valueOf(2L);
    const__1698 = (AFn)PersistentHashSet.create(arrayOfObject156);
    const__1699 = (Var)RT.var("clojure.core", "char-array");
  }

  public static void __init17()
  {
    const__1700 = Integer.valueOf(4745);
    Object[] arrayOfObject1 = new Object[2];
    Object[] arrayOfObject2 = new Object[1];
    arrayOfObject2[0] = Symbol.intern(null, "size-or-seq");
    arrayOfObject1[0] = RT.vector(arrayOfObject2);
    Object[] arrayOfObject3 = new Object[2];
    arrayOfObject3[0] = Symbol.intern(null, "size");
    arrayOfObject3[1] = Symbol.intern(null, "init-val-or-seq");
    arrayOfObject1[1] = RT.vector(arrayOfObject3);
    const__1701 = PersistentList.create(Arrays.asList(arrayOfObject1));
    Object[] arrayOfObject4 = new Object[2];
    arrayOfObject4[0] = Long.valueOf(1L);
    arrayOfObject4[1] = Long.valueOf(2L);
    const__1702 = (AFn)PersistentHashSet.create(arrayOfObject4);
    const__1703 = (Var)RT.var("clojure.core", "short-array");
    const__1704 = Integer.valueOf(4753);
    Object[] arrayOfObject5 = new Object[2];
    Object[] arrayOfObject6 = new Object[1];
    arrayOfObject6[0] = Symbol.intern(null, "size-or-seq");
    arrayOfObject5[0] = RT.vector(arrayOfObject6);
    Object[] arrayOfObject7 = new Object[2];
    arrayOfObject7[0] = Symbol.intern(null, "size");
    arrayOfObject7[1] = Symbol.intern(null, "init-val-or-seq");
    arrayOfObject5[1] = RT.vector(arrayOfObject7);
    const__1705 = PersistentList.create(Arrays.asList(arrayOfObject5));
    Object[] arrayOfObject8 = new Object[2];
    arrayOfObject8[0] = Long.valueOf(1L);
    arrayOfObject8[1] = Long.valueOf(2L);
    const__1706 = (AFn)PersistentHashSet.create(arrayOfObject8);
    const__1707 = (Var)RT.var("clojure.core", "double-array");
    const__1708 = Integer.valueOf(4761);
    Object[] arrayOfObject9 = new Object[2];
    Object[] arrayOfObject10 = new Object[1];
    arrayOfObject10[0] = Symbol.intern(null, "size-or-seq");
    arrayOfObject9[0] = RT.vector(arrayOfObject10);
    Object[] arrayOfObject11 = new Object[2];
    arrayOfObject11[0] = Symbol.intern(null, "size");
    arrayOfObject11[1] = Symbol.intern(null, "init-val-or-seq");
    arrayOfObject9[1] = RT.vector(arrayOfObject11);
    const__1709 = PersistentList.create(Arrays.asList(arrayOfObject9));
    Object[] arrayOfObject12 = new Object[2];
    arrayOfObject12[0] = Long.valueOf(1L);
    arrayOfObject12[1] = Long.valueOf(2L);
    const__1710 = (AFn)PersistentHashSet.create(arrayOfObject12);
    const__1711 = (Var)RT.var("clojure.core", "object-array");
    const__1712 = Integer.valueOf(4769);
    Object[] arrayOfObject13 = new Object[1];
    Object[] arrayOfObject14 = new Object[1];
    arrayOfObject14[0] = Symbol.intern(null, "size-or-seq");
    arrayOfObject13[0] = RT.vector(arrayOfObject14);
    const__1713 = PersistentList.create(Arrays.asList(arrayOfObject13));
    Object[] arrayOfObject15 = new Object[1];
    arrayOfObject15[0] = Long.valueOf(1L);
    const__1714 = (AFn)PersistentHashSet.create(arrayOfObject15);
    const__1715 = (Var)RT.var("clojure.core", "int-array");
    const__1716 = Integer.valueOf(4776);
    Object[] arrayOfObject16 = new Object[2];
    Object[] arrayOfObject17 = new Object[1];
    arrayOfObject17[0] = Symbol.intern(null, "size-or-seq");
    arrayOfObject16[0] = RT.vector(arrayOfObject17);
    Object[] arrayOfObject18 = new Object[2];
    arrayOfObject18[0] = Symbol.intern(null, "size");
    arrayOfObject18[1] = Symbol.intern(null, "init-val-or-seq");
    arrayOfObject16[1] = RT.vector(arrayOfObject18);
    const__1717 = PersistentList.create(Arrays.asList(arrayOfObject16));
    Object[] arrayOfObject19 = new Object[2];
    arrayOfObject19[0] = Long.valueOf(1L);
    arrayOfObject19[1] = Long.valueOf(2L);
    const__1718 = (AFn)PersistentHashSet.create(arrayOfObject19);
    const__1719 = (Var)RT.var("clojure.core", "long-array");
    const__1720 = Integer.valueOf(4784);
    Object[] arrayOfObject20 = new Object[2];
    Object[] arrayOfObject21 = new Object[1];
    arrayOfObject21[0] = Symbol.intern(null, "size-or-seq");
    arrayOfObject20[0] = RT.vector(arrayOfObject21);
    Object[] arrayOfObject22 = new Object[2];
    arrayOfObject22[0] = Symbol.intern(null, "size");
    arrayOfObject22[1] = Symbol.intern(null, "init-val-or-seq");
    arrayOfObject20[1] = RT.vector(arrayOfObject22);
    const__1721 = PersistentList.create(Arrays.asList(arrayOfObject20));
    Object[] arrayOfObject23 = new Object[2];
    arrayOfObject23[0] = Long.valueOf(1L);
    arrayOfObject23[1] = Long.valueOf(2L);
    const__1722 = (AFn)PersistentHashSet.create(arrayOfObject23);
    const__1723 = (Var)RT.var("clojure.core", "booleans");
    const__1724 = Integer.valueOf(4792);
    Object[] arrayOfObject24 = new Object[1];
    Object[] arrayOfObject25 = new Object[1];
    arrayOfObject25[0] = Symbol.intern(null, "xs");
    arrayOfObject24[0] = RT.vector(arrayOfObject25);
    const__1725 = PersistentList.create(Arrays.asList(arrayOfObject24));
    Object[] arrayOfObject26 = new Object[12];
    arrayOfObject26[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject27 = new Object[1];
    Object[] arrayOfObject28 = new Object[1];
    arrayOfObject28[0] = Symbol.intern(null, "xs");
    arrayOfObject27[0] = RT.vector(arrayOfObject28);
    arrayOfObject26[1] = PersistentList.create(Arrays.asList(arrayOfObject27));
    arrayOfObject26[2] = RT.keyword(null, "column");
    arrayOfObject26[3] = Integer.valueOf(1);
    arrayOfObject26[4] = RT.keyword(null, "added");
    arrayOfObject26[5] = "1.1";
    arrayOfObject26[6] = RT.keyword(null, "doc");
    arrayOfObject26[7] = "Casts to boolean[]";
    arrayOfObject26[8] = RT.keyword(null, "line");
    arrayOfObject26[9] = Integer.valueOf(4792);
    arrayOfObject26[10] = RT.keyword(null, "file");
    arrayOfObject26[11] = "clojure/core.clj";
    const__1726 = (AFn)RT.map(arrayOfObject26);
    const__1727 = (Var)RT.var("clojure.core", "bytes");
    const__1728 = Integer.valueOf(4797);
    Object[] arrayOfObject29 = new Object[1];
    Object[] arrayOfObject30 = new Object[1];
    arrayOfObject30[0] = Symbol.intern(null, "xs");
    arrayOfObject29[0] = RT.vector(arrayOfObject30);
    const__1729 = PersistentList.create(Arrays.asList(arrayOfObject29));
    Object[] arrayOfObject31 = new Object[12];
    arrayOfObject31[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject32 = new Object[1];
    Object[] arrayOfObject33 = new Object[1];
    arrayOfObject33[0] = Symbol.intern(null, "xs");
    arrayOfObject32[0] = RT.vector(arrayOfObject33);
    arrayOfObject31[1] = PersistentList.create(Arrays.asList(arrayOfObject32));
    arrayOfObject31[2] = RT.keyword(null, "column");
    arrayOfObject31[3] = Integer.valueOf(1);
    arrayOfObject31[4] = RT.keyword(null, "added");
    arrayOfObject31[5] = "1.1";
    arrayOfObject31[6] = RT.keyword(null, "doc");
    arrayOfObject31[7] = "Casts to bytes[]";
    arrayOfObject31[8] = RT.keyword(null, "line");
    arrayOfObject31[9] = Integer.valueOf(4797);
    arrayOfObject31[10] = RT.keyword(null, "file");
    arrayOfObject31[11] = "clojure/core.clj";
    const__1730 = (AFn)RT.map(arrayOfObject31);
    const__1731 = (Var)RT.var("clojure.core", "chars");
    const__1732 = Integer.valueOf(4802);
    Object[] arrayOfObject34 = new Object[1];
    Object[] arrayOfObject35 = new Object[1];
    arrayOfObject35[0] = Symbol.intern(null, "xs");
    arrayOfObject34[0] = RT.vector(arrayOfObject35);
    const__1733 = PersistentList.create(Arrays.asList(arrayOfObject34));
    Object[] arrayOfObject36 = new Object[12];
    arrayOfObject36[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject37 = new Object[1];
    Object[] arrayOfObject38 = new Object[1];
    arrayOfObject38[0] = Symbol.intern(null, "xs");
    arrayOfObject37[0] = RT.vector(arrayOfObject38);
    arrayOfObject36[1] = PersistentList.create(Arrays.asList(arrayOfObject37));
    arrayOfObject36[2] = RT.keyword(null, "column");
    arrayOfObject36[3] = Integer.valueOf(1);
    arrayOfObject36[4] = RT.keyword(null, "added");
    arrayOfObject36[5] = "1.1";
    arrayOfObject36[6] = RT.keyword(null, "doc");
    arrayOfObject36[7] = "Casts to chars[]";
    arrayOfObject36[8] = RT.keyword(null, "line");
    arrayOfObject36[9] = Integer.valueOf(4802);
    arrayOfObject36[10] = RT.keyword(null, "file");
    arrayOfObject36[11] = "clojure/core.clj";
    const__1734 = (AFn)RT.map(arrayOfObject36);
    const__1735 = (Var)RT.var("clojure.core", "shorts");
    const__1736 = Integer.valueOf(4807);
    Object[] arrayOfObject39 = new Object[1];
    Object[] arrayOfObject40 = new Object[1];
    arrayOfObject40[0] = Symbol.intern(null, "xs");
    arrayOfObject39[0] = RT.vector(arrayOfObject40);
    const__1737 = PersistentList.create(Arrays.asList(arrayOfObject39));
    Object[] arrayOfObject41 = new Object[12];
    arrayOfObject41[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject42 = new Object[1];
    Object[] arrayOfObject43 = new Object[1];
    arrayOfObject43[0] = Symbol.intern(null, "xs");
    arrayOfObject42[0] = RT.vector(arrayOfObject43);
    arrayOfObject41[1] = PersistentList.create(Arrays.asList(arrayOfObject42));
    arrayOfObject41[2] = RT.keyword(null, "column");
    arrayOfObject41[3] = Integer.valueOf(1);
    arrayOfObject41[4] = RT.keyword(null, "added");
    arrayOfObject41[5] = "1.1";
    arrayOfObject41[6] = RT.keyword(null, "doc");
    arrayOfObject41[7] = "Casts to shorts[]";
    arrayOfObject41[8] = RT.keyword(null, "line");
    arrayOfObject41[9] = Integer.valueOf(4807);
    arrayOfObject41[10] = RT.keyword(null, "file");
    arrayOfObject41[11] = "clojure/core.clj";
    const__1738 = (AFn)RT.map(arrayOfObject41);
    const__1739 = (Var)RT.var("clojure.core", "floats");
    const__1740 = Integer.valueOf(4812);
    Object[] arrayOfObject44 = new Object[1];
    Object[] arrayOfObject45 = new Object[1];
    arrayOfObject45[0] = Symbol.intern(null, "xs");
    arrayOfObject44[0] = RT.vector(arrayOfObject45);
    const__1741 = PersistentList.create(Arrays.asList(arrayOfObject44));
    Object[] arrayOfObject46 = new Object[12];
    arrayOfObject46[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject47 = new Object[1];
    Object[] arrayOfObject48 = new Object[1];
    arrayOfObject48[0] = Symbol.intern(null, "xs");
    arrayOfObject47[0] = RT.vector(arrayOfObject48);
    arrayOfObject46[1] = PersistentList.create(Arrays.asList(arrayOfObject47));
    arrayOfObject46[2] = RT.keyword(null, "column");
    arrayOfObject46[3] = Integer.valueOf(1);
    arrayOfObject46[4] = RT.keyword(null, "added");
    arrayOfObject46[5] = "1.0";
    arrayOfObject46[6] = RT.keyword(null, "doc");
    arrayOfObject46[7] = "Casts to float[]";
    arrayOfObject46[8] = RT.keyword(null, "line");
    arrayOfObject46[9] = Integer.valueOf(4812);
    arrayOfObject46[10] = RT.keyword(null, "file");
    arrayOfObject46[11] = "clojure/core.clj";
    const__1742 = (AFn)RT.map(arrayOfObject46);
    const__1743 = (Var)RT.var("clojure.core", "ints");
    const__1744 = Integer.valueOf(4817);
    Object[] arrayOfObject49 = new Object[1];
    Object[] arrayOfObject50 = new Object[1];
    arrayOfObject50[0] = Symbol.intern(null, "xs");
    arrayOfObject49[0] = RT.vector(arrayOfObject50);
    const__1745 = PersistentList.create(Arrays.asList(arrayOfObject49));
    Object[] arrayOfObject51 = new Object[12];
    arrayOfObject51[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject52 = new Object[1];
    Object[] arrayOfObject53 = new Object[1];
    arrayOfObject53[0] = Symbol.intern(null, "xs");
    arrayOfObject52[0] = RT.vector(arrayOfObject53);
    arrayOfObject51[1] = PersistentList.create(Arrays.asList(arrayOfObject52));
    arrayOfObject51[2] = RT.keyword(null, "column");
    arrayOfObject51[3] = Integer.valueOf(1);
    arrayOfObject51[4] = RT.keyword(null, "added");
    arrayOfObject51[5] = "1.0";
    arrayOfObject51[6] = RT.keyword(null, "doc");
    arrayOfObject51[7] = "Casts to int[]";
    arrayOfObject51[8] = RT.keyword(null, "line");
    arrayOfObject51[9] = Integer.valueOf(4817);
    arrayOfObject51[10] = RT.keyword(null, "file");
    arrayOfObject51[11] = "clojure/core.clj";
    const__1746 = (AFn)RT.map(arrayOfObject51);
    const__1747 = (Var)RT.var("clojure.core", "doubles");
    const__1748 = Integer.valueOf(4822);
    Object[] arrayOfObject54 = new Object[1];
    Object[] arrayOfObject55 = new Object[1];
    arrayOfObject55[0] = Symbol.intern(null, "xs");
    arrayOfObject54[0] = RT.vector(arrayOfObject55);
    const__1749 = PersistentList.create(Arrays.asList(arrayOfObject54));
    Object[] arrayOfObject56 = new Object[12];
    arrayOfObject56[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject57 = new Object[1];
    Object[] arrayOfObject58 = new Object[1];
    arrayOfObject58[0] = Symbol.intern(null, "xs");
    arrayOfObject57[0] = RT.vector(arrayOfObject58);
    arrayOfObject56[1] = PersistentList.create(Arrays.asList(arrayOfObject57));
    arrayOfObject56[2] = RT.keyword(null, "column");
    arrayOfObject56[3] = Integer.valueOf(1);
    arrayOfObject56[4] = RT.keyword(null, "added");
    arrayOfObject56[5] = "1.0";
    arrayOfObject56[6] = RT.keyword(null, "doc");
    arrayOfObject56[7] = "Casts to double[]";
    arrayOfObject56[8] = RT.keyword(null, "line");
    arrayOfObject56[9] = Integer.valueOf(4822);
    arrayOfObject56[10] = RT.keyword(null, "file");
    arrayOfObject56[11] = "clojure/core.clj";
    const__1750 = (AFn)RT.map(arrayOfObject56);
    const__1751 = (Var)RT.var("clojure.core", "longs");
    const__1752 = Integer.valueOf(4827);
    Object[] arrayOfObject59 = new Object[1];
    Object[] arrayOfObject60 = new Object[1];
    arrayOfObject60[0] = Symbol.intern(null, "xs");
    arrayOfObject59[0] = RT.vector(arrayOfObject60);
    const__1753 = PersistentList.create(Arrays.asList(arrayOfObject59));
    Object[] arrayOfObject61 = new Object[12];
    arrayOfObject61[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject62 = new Object[1];
    Object[] arrayOfObject63 = new Object[1];
    arrayOfObject63[0] = Symbol.intern(null, "xs");
    arrayOfObject62[0] = RT.vector(arrayOfObject63);
    arrayOfObject61[1] = PersistentList.create(Arrays.asList(arrayOfObject62));
    arrayOfObject61[2] = RT.keyword(null, "column");
    arrayOfObject61[3] = Integer.valueOf(1);
    arrayOfObject61[4] = RT.keyword(null, "added");
    arrayOfObject61[5] = "1.0";
    arrayOfObject61[6] = RT.keyword(null, "doc");
    arrayOfObject61[7] = "Casts to long[]";
    arrayOfObject61[8] = RT.keyword(null, "line");
    arrayOfObject61[9] = Integer.valueOf(4827);
    arrayOfObject61[10] = RT.keyword(null, "file");
    arrayOfObject61[11] = "clojure/core.clj";
    const__1754 = (AFn)RT.map(arrayOfObject61);
    const__1755 = (Var)RT.var("clojure.core", "seque");
    const__1756 = Integer.valueOf(4834);
    Object[] arrayOfObject64 = new Object[2];
    Object[] arrayOfObject65 = new Object[1];
    arrayOfObject65[0] = Symbol.intern(null, "s");
    arrayOfObject64[0] = RT.vector(arrayOfObject65);
    Object[] arrayOfObject66 = new Object[2];
    arrayOfObject66[0] = Symbol.intern(null, "n-or-q");
    arrayOfObject66[1] = Symbol.intern(null, "s");
    arrayOfObject64[1] = RT.vector(arrayOfObject66);
    const__1757 = PersistentList.create(Arrays.asList(arrayOfObject64));
    Object[] arrayOfObject67 = new Object[14];
    arrayOfObject67[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject68 = new Object[2];
    Object[] arrayOfObject69 = new Object[1];
    arrayOfObject69[0] = Symbol.intern(null, "s");
    arrayOfObject68[0] = RT.vector(arrayOfObject69);
    Object[] arrayOfObject70 = new Object[2];
    arrayOfObject70[0] = Symbol.intern(null, "n-or-q");
    arrayOfObject70[1] = Symbol.intern(null, "s");
    arrayOfObject68[1] = RT.vector(arrayOfObject70);
    arrayOfObject67[1] = PersistentList.create(Arrays.asList(arrayOfObject68));
    arrayOfObject67[2] = RT.keyword(null, "column");
    arrayOfObject67[3] = Integer.valueOf(1);
    arrayOfObject67[4] = RT.keyword(null, "added");
    arrayOfObject67[5] = "1.0";
    arrayOfObject67[6] = RT.keyword(null, "static");
    arrayOfObject67[7] = Boolean.TRUE;
    arrayOfObject67[8] = RT.keyword(null, "doc");
    arrayOfObject67[9] = "Creates a queued seq on another (presumably lazy) seq s. The queued\n  seq will produce a concrete seq in the background, and can get up to\n  n items ahead of the consumer. n-or-q can be an integer n buffer\n  size, or an instance of java.util.concurrent BlockingQueue. Note\n  that reading from a seque can block if the reader gets ahead of the\n  producer.";
    arrayOfObject67[10] = RT.keyword(null, "line");
    arrayOfObject67[11] = Integer.valueOf(4834);
    arrayOfObject67[12] = RT.keyword(null, "file");
    arrayOfObject67[13] = "clojure/core.clj";
    const__1758 = (AFn)RT.map(arrayOfObject67);
    const__1759 = (Var)RT.var("clojure.core", "class?");
    const__1760 = Integer.valueOf(4879);
    Object[] arrayOfObject71 = new Object[1];
    Object[] arrayOfObject72 = new Object[1];
    arrayOfObject72[0] = Symbol.intern(null, "x");
    arrayOfObject71[0] = RT.vector(arrayOfObject72);
    const__1761 = PersistentList.create(Arrays.asList(arrayOfObject71));
    Object[] arrayOfObject73 = new Object[14];
    arrayOfObject73[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject74 = new Object[1];
    Object[] arrayOfObject75 = new Object[1];
    arrayOfObject75[0] = Symbol.intern(null, "x");
    arrayOfObject74[0] = RT.vector(arrayOfObject75);
    arrayOfObject73[1] = PersistentList.create(Arrays.asList(arrayOfObject74));
    arrayOfObject73[2] = RT.keyword(null, "column");
    arrayOfObject73[3] = Integer.valueOf(1);
    arrayOfObject73[4] = RT.keyword(null, "added");
    arrayOfObject73[5] = "1.0";
    arrayOfObject73[6] = RT.keyword(null, "static");
    arrayOfObject73[7] = Boolean.TRUE;
    arrayOfObject73[8] = RT.keyword(null, "doc");
    arrayOfObject73[9] = "Returns true if x is an instance of Class";
    arrayOfObject73[10] = RT.keyword(null, "line");
    arrayOfObject73[11] = Integer.valueOf(4879);
    arrayOfObject73[12] = RT.keyword(null, "file");
    arrayOfObject73[13] = "clojure/core.clj";
    const__1762 = (AFn)RT.map(arrayOfObject73);
    const__1763 = (Var)RT.var("clojure.core", "is-annotation?");
    const__1764 = Integer.valueOf(4885);
    Object[] arrayOfObject76 = new Object[1];
    Object[] arrayOfObject77 = new Object[1];
    arrayOfObject77[0] = Symbol.intern(null, "c");
    arrayOfObject76[0] = RT.vector(arrayOfObject77);
    const__1765 = PersistentList.create(Arrays.asList(arrayOfObject76));
    Object[] arrayOfObject78 = new Object[10];
    arrayOfObject78[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject79 = new Object[1];
    Object[] arrayOfObject80 = new Object[1];
    arrayOfObject80[0] = Symbol.intern(null, "c");
    arrayOfObject79[0] = RT.vector(arrayOfObject80);
    arrayOfObject78[1] = PersistentList.create(Arrays.asList(arrayOfObject79));
    arrayOfObject78[2] = RT.keyword(null, "column");
    arrayOfObject78[3] = Integer.valueOf(1);
    arrayOfObject78[4] = RT.keyword(null, "private");
    arrayOfObject78[5] = Boolean.TRUE;
    arrayOfObject78[6] = RT.keyword(null, "line");
    arrayOfObject78[7] = Integer.valueOf(4885);
    arrayOfObject78[8] = RT.keyword(null, "file");
    arrayOfObject78[9] = "clojure/core.clj";
    const__1766 = (AFn)RT.map(arrayOfObject78);
    const__1767 = (Var)RT.var("clojure.core", "is-runtime-annotation?");
    const__1768 = Integer.valueOf(4889);
    Object[] arrayOfObject81 = new Object[1];
    Object[] arrayOfObject82 = new Object[1];
    IObj localIObj1 = (IObj)Symbol.intern(null, "c");
    Object[] arrayOfObject83 = new Object[2];
    arrayOfObject83[0] = RT.keyword(null, "tag");
    arrayOfObject83[1] = Symbol.intern(null, "Class");
    arrayOfObject82[0] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject83));
    arrayOfObject81[0] = RT.vector(arrayOfObject82);
    const__1769 = PersistentList.create(Arrays.asList(arrayOfObject81));
    Object[] arrayOfObject84 = new Object[10];
    arrayOfObject84[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject85 = new Object[1];
    Object[] arrayOfObject86 = new Object[1];
    IObj localIObj2 = (IObj)Symbol.intern(null, "c");
    Object[] arrayOfObject87 = new Object[2];
    arrayOfObject87[0] = RT.keyword(null, "tag");
    arrayOfObject87[1] = Symbol.intern(null, "Class");
    arrayOfObject86[0] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject87));
    arrayOfObject85[0] = RT.vector(arrayOfObject86);
    arrayOfObject84[1] = PersistentList.create(Arrays.asList(arrayOfObject85));
    arrayOfObject84[2] = RT.keyword(null, "column");
    arrayOfObject84[3] = Integer.valueOf(1);
    arrayOfObject84[4] = RT.keyword(null, "private");
    arrayOfObject84[5] = Boolean.TRUE;
    arrayOfObject84[6] = RT.keyword(null, "line");
    arrayOfObject84[7] = Integer.valueOf(4889);
    arrayOfObject84[8] = RT.keyword(null, "file");
    arrayOfObject84[9] = "clojure/core.clj";
    const__1770 = (AFn)RT.map(arrayOfObject84);
    const__1771 = (Var)RT.var("clojure.core", "descriptor");
    const__1772 = Integer.valueOf(4896);
    Object[] arrayOfObject88 = new Object[1];
    Object[] arrayOfObject89 = new Object[1];
    IObj localIObj3 = (IObj)Symbol.intern(null, "c");
    Object[] arrayOfObject90 = new Object[2];
    arrayOfObject90[0] = RT.keyword(null, "tag");
    arrayOfObject90[1] = Symbol.intern(null, "Class");
    arrayOfObject89[0] = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject90));
    arrayOfObject88[0] = RT.vector(arrayOfObject89);
    const__1773 = PersistentList.create(Arrays.asList(arrayOfObject88));
    Object[] arrayOfObject91 = new Object[10];
    arrayOfObject91[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject92 = new Object[1];
    Object[] arrayOfObject93 = new Object[1];
    IObj localIObj4 = (IObj)Symbol.intern(null, "c");
    Object[] arrayOfObject94 = new Object[2];
    arrayOfObject94[0] = RT.keyword(null, "tag");
    arrayOfObject94[1] = Symbol.intern(null, "Class");
    arrayOfObject93[0] = localIObj4.withMeta((IPersistentMap)RT.map(arrayOfObject94));
    arrayOfObject92[0] = RT.vector(arrayOfObject93);
    arrayOfObject91[1] = PersistentList.create(Arrays.asList(arrayOfObject92));
    arrayOfObject91[2] = RT.keyword(null, "column");
    arrayOfObject91[3] = Integer.valueOf(1);
    arrayOfObject91[4] = RT.keyword(null, "private");
    arrayOfObject91[5] = Boolean.TRUE;
    arrayOfObject91[6] = RT.keyword(null, "line");
    arrayOfObject91[7] = Integer.valueOf(4896);
    arrayOfObject91[8] = RT.keyword(null, "file");
    arrayOfObject91[9] = "clojure/core.clj";
    const__1774 = (AFn)RT.map(arrayOfObject91);
    const__1775 = (Var)RT.var("clojure.core", "process-annotation");
    const__1776 = Integer.valueOf(4898);
    const__1777 = (Keyword)RT.keyword(null, "declared");
    Object[] arrayOfObject95 = new Object[8];
    arrayOfObject95[0] = RT.keyword(null, "column");
    arrayOfObject95[1] = Integer.valueOf(1);
    arrayOfObject95[2] = RT.keyword(null, "declared");
    arrayOfObject95[3] = Boolean.TRUE;
    arrayOfObject95[4] = RT.keyword(null, "line");
    arrayOfObject95[5] = Integer.valueOf(4898);
    arrayOfObject95[6] = RT.keyword(null, "file");
    arrayOfObject95[7] = "clojure/core.clj";
    const__1778 = (AFn)RT.map(arrayOfObject95);
    const__1779 = (Var)RT.var("clojure.core", "add-annotation");
    const__1780 = Integer.valueOf(4899);
    Object[] arrayOfObject96 = new Object[1];
    Object[] arrayOfObject97 = new Object[3];
    IObj localIObj5 = (IObj)Symbol.intern(null, "av");
    Object[] arrayOfObject98 = new Object[2];
    arrayOfObject98[0] = RT.keyword(null, "tag");
    arrayOfObject98[1] = Symbol.intern(null, "clojure.asm.AnnotationVisitor");
    arrayOfObject97[0] = localIObj5.withMeta((IPersistentMap)RT.map(arrayOfObject98));
    arrayOfObject97[1] = Symbol.intern(null, "name");
    arrayOfObject97[2] = Symbol.intern(null, "v");
    arrayOfObject96[0] = RT.vector(arrayOfObject97);
    const__1781 = PersistentList.create(Arrays.asList(arrayOfObject96));
    Object[] arrayOfObject99 = new Object[10];
    arrayOfObject99[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject100 = new Object[1];
    Object[] arrayOfObject101 = new Object[3];
    IObj localIObj6 = (IObj)Symbol.intern(null, "av");
    Object[] arrayOfObject102 = new Object[2];
    arrayOfObject102[0] = RT.keyword(null, "tag");
    arrayOfObject102[1] = Symbol.intern(null, "clojure.asm.AnnotationVisitor");
    arrayOfObject101[0] = localIObj6.withMeta((IPersistentMap)RT.map(arrayOfObject102));
    arrayOfObject101[1] = Symbol.intern(null, "name");
    arrayOfObject101[2] = Symbol.intern(null, "v");
    arrayOfObject100[0] = RT.vector(arrayOfObject101);
    arrayOfObject99[1] = PersistentList.create(Arrays.asList(arrayOfObject100));
    arrayOfObject99[2] = RT.keyword(null, "column");
    arrayOfObject99[3] = Integer.valueOf(1);
    arrayOfObject99[4] = RT.keyword(null, "private");
    arrayOfObject99[5] = Boolean.TRUE;
    arrayOfObject99[6] = RT.keyword(null, "line");
    arrayOfObject99[7] = Integer.valueOf(4899);
    arrayOfObject99[8] = RT.keyword(null, "file");
    arrayOfObject99[9] = "clojure/core.clj";
    const__1782 = (AFn)RT.map(arrayOfObject99);
    const__1783 = Integer.valueOf(4919);
    Object[] arrayOfObject103 = new Object[1];
    Object[] arrayOfObject104 = new Object[2];
    arrayOfObject104[0] = Symbol.intern(null, "av");
    arrayOfObject104[1] = Symbol.intern(null, "v");
    arrayOfObject103[0] = RT.vector(arrayOfObject104);
    const__1784 = PersistentList.create(Arrays.asList(arrayOfObject103));
    Object[] arrayOfObject105 = new Object[10];
    arrayOfObject105[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject106 = new Object[1];
    Object[] arrayOfObject107 = new Object[2];
    arrayOfObject107[0] = Symbol.intern(null, "av");
    arrayOfObject107[1] = Symbol.intern(null, "v");
    arrayOfObject106[0] = RT.vector(arrayOfObject107);
    arrayOfObject105[1] = PersistentList.create(Arrays.asList(arrayOfObject106));
    arrayOfObject105[2] = RT.keyword(null, "column");
    arrayOfObject105[3] = Integer.valueOf(1);
    arrayOfObject105[4] = RT.keyword(null, "private");
    arrayOfObject105[5] = Boolean.TRUE;
    arrayOfObject105[6] = RT.keyword(null, "line");
    arrayOfObject105[7] = Integer.valueOf(4919);
    arrayOfObject105[8] = RT.keyword(null, "file");
    arrayOfObject105[9] = "clojure/core.clj";
    const__1785 = (AFn)RT.map(arrayOfObject105);
    const__1786 = (Var)RT.var("clojure.core", "add-annotations");
    const__1787 = Integer.valueOf(4925);
    Object[] arrayOfObject108 = new Object[2];
    Object[] arrayOfObject109 = new Object[2];
    arrayOfObject109[0] = Symbol.intern(null, "visitor");
    arrayOfObject109[1] = Symbol.intern(null, "m");
    arrayOfObject108[0] = RT.vector(arrayOfObject109);
    Object[] arrayOfObject110 = new Object[3];
    arrayOfObject110[0] = Symbol.intern(null, "visitor");
    arrayOfObject110[1] = Symbol.intern(null, "m");
    arrayOfObject110[2] = Symbol.intern(null, "i");
    arrayOfObject108[1] = RT.vector(arrayOfObject110);
    const__1788 = PersistentList.create(Arrays.asList(arrayOfObject108));
    Object[] arrayOfObject111 = new Object[10];
    arrayOfObject111[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject112 = new Object[2];
    Object[] arrayOfObject113 = new Object[2];
    arrayOfObject113[0] = Symbol.intern(null, "visitor");
    arrayOfObject113[1] = Symbol.intern(null, "m");
    arrayOfObject112[0] = RT.vector(arrayOfObject113);
    Object[] arrayOfObject114 = new Object[3];
    arrayOfObject114[0] = Symbol.intern(null, "visitor");
    arrayOfObject114[1] = Symbol.intern(null, "m");
    arrayOfObject114[2] = Symbol.intern(null, "i");
    arrayOfObject112[1] = RT.vector(arrayOfObject114);
    arrayOfObject111[1] = PersistentList.create(Arrays.asList(arrayOfObject112));
    arrayOfObject111[2] = RT.keyword(null, "column");
    arrayOfObject111[3] = Integer.valueOf(1);
    arrayOfObject111[4] = RT.keyword(null, "private");
    arrayOfObject111[5] = Boolean.TRUE;
    arrayOfObject111[6] = RT.keyword(null, "line");
    arrayOfObject111[7] = Integer.valueOf(4925);
    arrayOfObject111[8] = RT.keyword(null, "file");
    arrayOfObject111[9] = "clojure/core.clj";
    const__1789 = (AFn)RT.map(arrayOfObject111);
    const__1790 = (Var)RT.var("clojure.core", "alter-var-root");
    const__1791 = Integer.valueOf(4941);
    Object[] arrayOfObject115 = new Object[1];
    Object[] arrayOfObject116 = new Object[4];
    IObj localIObj7 = (IObj)Symbol.intern(null, "v");
    Object[] arrayOfObject117 = new Object[2];
    arrayOfObject117[0] = RT.keyword(null, "tag");
    arrayOfObject117[1] = Symbol.intern(null, "clojure.lang.Var");
    arrayOfObject116[0] = localIObj7.withMeta((IPersistentMap)RT.map(arrayOfObject117));
    arrayOfObject116[1] = Symbol.intern(null, "f");
    arrayOfObject116[2] = Symbol.intern(null, "&");
    arrayOfObject116[3] = Symbol.intern(null, "args");
    arrayOfObject115[0] = RT.vector(arrayOfObject116);
    const__1792 = PersistentList.create(Arrays.asList(arrayOfObject115));
    Object[] arrayOfObject118 = new Object[14];
    arrayOfObject118[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject119 = new Object[1];
    Object[] arrayOfObject120 = new Object[4];
    IObj localIObj8 = (IObj)Symbol.intern(null, "v");
    Object[] arrayOfObject121 = new Object[2];
    arrayOfObject121[0] = RT.keyword(null, "tag");
    arrayOfObject121[1] = Symbol.intern(null, "clojure.lang.Var");
    arrayOfObject120[0] = localIObj8.withMeta((IPersistentMap)RT.map(arrayOfObject121));
    arrayOfObject120[1] = Symbol.intern(null, "f");
    arrayOfObject120[2] = Symbol.intern(null, "&");
    arrayOfObject120[3] = Symbol.intern(null, "args");
    arrayOfObject119[0] = RT.vector(arrayOfObject120);
    arrayOfObject118[1] = PersistentList.create(Arrays.asList(arrayOfObject119));
    arrayOfObject118[2] = RT.keyword(null, "column");
    arrayOfObject118[3] = Integer.valueOf(1);
    arrayOfObject118[4] = RT.keyword(null, "added");
    arrayOfObject118[5] = "1.0";
    arrayOfObject118[6] = RT.keyword(null, "static");
    arrayOfObject118[7] = Boolean.TRUE;
    arrayOfObject118[8] = RT.keyword(null, "doc");
    arrayOfObject118[9] = "Atomically alters the root binding of var v by applying f to its\n  current value plus any args";
    arrayOfObject118[10] = RT.keyword(null, "line");
    arrayOfObject118[11] = Integer.valueOf(4941);
    arrayOfObject118[12] = RT.keyword(null, "file");
    arrayOfObject118[13] = "clojure/core.clj";
    const__1793 = (AFn)RT.map(arrayOfObject118);
    const__1794 = (Var)RT.var("clojure.core", "bound?");
    const__1795 = Integer.valueOf(4948);
    Object[] arrayOfObject122 = new Object[1];
    Object[] arrayOfObject123 = new Object[2];
    arrayOfObject123[0] = Symbol.intern(null, "&");
    arrayOfObject123[1] = Symbol.intern(null, "vars");
    arrayOfObject122[0] = RT.vector(arrayOfObject123);
    const__1796 = PersistentList.create(Arrays.asList(arrayOfObject122));
    Object[] arrayOfObject124 = new Object[14];
    arrayOfObject124[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject125 = new Object[1];
    Object[] arrayOfObject126 = new Object[2];
    arrayOfObject126[0] = Symbol.intern(null, "&");
    arrayOfObject126[1] = Symbol.intern(null, "vars");
    arrayOfObject125[0] = RT.vector(arrayOfObject126);
    arrayOfObject124[1] = PersistentList.create(Arrays.asList(arrayOfObject125));
    arrayOfObject124[2] = RT.keyword(null, "column");
    arrayOfObject124[3] = Integer.valueOf(1);
    arrayOfObject124[4] = RT.keyword(null, "added");
    arrayOfObject124[5] = "1.2";
    arrayOfObject124[6] = RT.keyword(null, "static");
    arrayOfObject124[7] = Boolean.TRUE;
    arrayOfObject124[8] = RT.keyword(null, "doc");
    arrayOfObject124[9] = "Returns true if all of the vars provided as arguments have any bound value, root or thread-local.\n   Implies that deref'ing the provided vars will succeed. Returns true if no vars are provided.";
    arrayOfObject124[10] = RT.keyword(null, "line");
    arrayOfObject124[11] = Integer.valueOf(4948);
    arrayOfObject124[12] = RT.keyword(null, "file");
    arrayOfObject124[13] = "clojure/core.clj";
    const__1797 = (AFn)RT.map(arrayOfObject124);
    const__1798 = (Var)RT.var("clojure.core", "thread-bound?");
    const__1799 = Integer.valueOf(4956);
  }

  public static void __init18()
  {
    Object[] arrayOfObject1 = new Object[1];
    Object[] arrayOfObject2 = new Object[2];
    arrayOfObject2[0] = Symbol.intern(null, "&");
    arrayOfObject2[1] = Symbol.intern(null, "vars");
    arrayOfObject1[0] = RT.vector(arrayOfObject2);
    const__1800 = PersistentList.create(Arrays.asList(arrayOfObject1));
    Object[] arrayOfObject3 = new Object[14];
    arrayOfObject3[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject4 = new Object[1];
    Object[] arrayOfObject5 = new Object[2];
    arrayOfObject5[0] = Symbol.intern(null, "&");
    arrayOfObject5[1] = Symbol.intern(null, "vars");
    arrayOfObject4[0] = RT.vector(arrayOfObject5);
    arrayOfObject3[1] = PersistentList.create(Arrays.asList(arrayOfObject4));
    arrayOfObject3[2] = RT.keyword(null, "column");
    arrayOfObject3[3] = Integer.valueOf(1);
    arrayOfObject3[4] = RT.keyword(null, "added");
    arrayOfObject3[5] = "1.2";
    arrayOfObject3[6] = RT.keyword(null, "static");
    arrayOfObject3[7] = Boolean.TRUE;
    arrayOfObject3[8] = RT.keyword(null, "doc");
    arrayOfObject3[9] = "Returns true if all of the vars provided as arguments have thread-local bindings.\n   Implies that set!'ing the provided vars will succeed.  Returns true if no vars are provided.";
    arrayOfObject3[10] = RT.keyword(null, "line");
    arrayOfObject3[11] = Integer.valueOf(4956);
    arrayOfObject3[12] = RT.keyword(null, "file");
    arrayOfObject3[13] = "clojure/core.clj";
    const__1801 = (AFn)RT.map(arrayOfObject3);
    const__1802 = (Var)RT.var("clojure.core", "make-hierarchy");
    const__1803 = Integer.valueOf(4964);
    Object[] arrayOfObject6 = new Object[1];
    arrayOfObject6[0] = RT.vector(new Object[0]);
    const__1804 = PersistentList.create(Arrays.asList(arrayOfObject6));
    Object[] arrayOfObject7 = new Object[14];
    arrayOfObject7[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject8 = new Object[1];
    arrayOfObject8[0] = RT.vector(new Object[0]);
    arrayOfObject7[1] = PersistentList.create(Arrays.asList(arrayOfObject8));
    arrayOfObject7[2] = RT.keyword(null, "column");
    arrayOfObject7[3] = Integer.valueOf(1);
    arrayOfObject7[4] = RT.keyword(null, "added");
    arrayOfObject7[5] = "1.0";
    arrayOfObject7[6] = RT.keyword(null, "static");
    arrayOfObject7[7] = Boolean.TRUE;
    arrayOfObject7[8] = RT.keyword(null, "doc");
    arrayOfObject7[9] = "Creates a hierarchy object for use with derive, isa? etc.";
    arrayOfObject7[10] = RT.keyword(null, "line");
    arrayOfObject7[11] = Integer.valueOf(4964);
    arrayOfObject7[12] = RT.keyword(null, "file");
    arrayOfObject7[13] = "clojure/core.clj";
    const__1805 = (AFn)RT.map(arrayOfObject7);
    const__1806 = Integer.valueOf(4970);
    Object[] arrayOfObject9 = new Object[8];
    arrayOfObject9[0] = RT.keyword(null, "column");
    arrayOfObject9[1] = Integer.valueOf(1);
    arrayOfObject9[2] = RT.keyword(null, "private");
    arrayOfObject9[3] = Boolean.TRUE;
    arrayOfObject9[4] = RT.keyword(null, "line");
    arrayOfObject9[5] = Integer.valueOf(4970);
    arrayOfObject9[6] = RT.keyword(null, "file");
    arrayOfObject9[7] = "clojure/core.clj";
    const__1807 = (AFn)RT.map(arrayOfObject9);
    const__1808 = (Var)RT.var("clojure.core", "not-empty");
    const__1809 = Integer.valueOf(4973);
    Object[] arrayOfObject10 = new Object[1];
    Object[] arrayOfObject11 = new Object[1];
    arrayOfObject11[0] = Symbol.intern(null, "coll");
    arrayOfObject10[0] = RT.vector(arrayOfObject11);
    const__1810 = PersistentList.create(Arrays.asList(arrayOfObject10));
    Object[] arrayOfObject12 = new Object[14];
    arrayOfObject12[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject13 = new Object[1];
    Object[] arrayOfObject14 = new Object[1];
    arrayOfObject14[0] = Symbol.intern(null, "coll");
    arrayOfObject13[0] = RT.vector(arrayOfObject14);
    arrayOfObject12[1] = PersistentList.create(Arrays.asList(arrayOfObject13));
    arrayOfObject12[2] = RT.keyword(null, "column");
    arrayOfObject12[3] = Integer.valueOf(1);
    arrayOfObject12[4] = RT.keyword(null, "added");
    arrayOfObject12[5] = "1.0";
    arrayOfObject12[6] = RT.keyword(null, "static");
    arrayOfObject12[7] = Boolean.TRUE;
    arrayOfObject12[8] = RT.keyword(null, "doc");
    arrayOfObject12[9] = "If coll is empty, returns nil, else coll";
    arrayOfObject12[10] = RT.keyword(null, "line");
    arrayOfObject12[11] = Integer.valueOf(4973);
    arrayOfObject12[12] = RT.keyword(null, "file");
    arrayOfObject12[13] = "clojure/core.clj";
    const__1811 = (AFn)RT.map(arrayOfObject12);
    const__1812 = (Var)RT.var("clojure.core", "bases");
    const__1813 = Integer.valueOf(4979);
    Object[] arrayOfObject15 = new Object[1];
    Object[] arrayOfObject16 = new Object[1];
    IObj localIObj1 = (IObj)Symbol.intern(null, "c");
    Object[] arrayOfObject17 = new Object[2];
    arrayOfObject17[0] = RT.keyword(null, "tag");
    arrayOfObject17[1] = Symbol.intern(null, "Class");
    arrayOfObject16[0] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject17));
    arrayOfObject15[0] = RT.vector(arrayOfObject16);
    const__1814 = PersistentList.create(Arrays.asList(arrayOfObject15));
    Object[] arrayOfObject18 = new Object[14];
    arrayOfObject18[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject19 = new Object[1];
    Object[] arrayOfObject20 = new Object[1];
    IObj localIObj2 = (IObj)Symbol.intern(null, "c");
    Object[] arrayOfObject21 = new Object[2];
    arrayOfObject21[0] = RT.keyword(null, "tag");
    arrayOfObject21[1] = Symbol.intern(null, "Class");
    arrayOfObject20[0] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject21));
    arrayOfObject19[0] = RT.vector(arrayOfObject20);
    arrayOfObject18[1] = PersistentList.create(Arrays.asList(arrayOfObject19));
    arrayOfObject18[2] = RT.keyword(null, "column");
    arrayOfObject18[3] = Integer.valueOf(1);
    arrayOfObject18[4] = RT.keyword(null, "added");
    arrayOfObject18[5] = "1.0";
    arrayOfObject18[6] = RT.keyword(null, "static");
    arrayOfObject18[7] = Boolean.TRUE;
    arrayOfObject18[8] = RT.keyword(null, "doc");
    arrayOfObject18[9] = "Returns the immediate superclass and direct interfaces of c, if any";
    arrayOfObject18[10] = RT.keyword(null, "line");
    arrayOfObject18[11] = Integer.valueOf(4979);
    arrayOfObject18[12] = RT.keyword(null, "file");
    arrayOfObject18[13] = "clojure/core.clj";
    const__1815 = (AFn)RT.map(arrayOfObject18);
    const__1816 = (Var)RT.var("clojure.core", "supers");
    const__1817 = Integer.valueOf(4989);
    Object[] arrayOfObject22 = new Object[1];
    Object[] arrayOfObject23 = new Object[1];
    IObj localIObj3 = (IObj)Symbol.intern(null, "class");
    Object[] arrayOfObject24 = new Object[2];
    arrayOfObject24[0] = RT.keyword(null, "tag");
    arrayOfObject24[1] = Symbol.intern(null, "Class");
    arrayOfObject23[0] = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject24));
    arrayOfObject22[0] = RT.vector(arrayOfObject23);
    const__1818 = PersistentList.create(Arrays.asList(arrayOfObject22));
    Object[] arrayOfObject25 = new Object[14];
    arrayOfObject25[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject26 = new Object[1];
    Object[] arrayOfObject27 = new Object[1];
    IObj localIObj4 = (IObj)Symbol.intern(null, "class");
    Object[] arrayOfObject28 = new Object[2];
    arrayOfObject28[0] = RT.keyword(null, "tag");
    arrayOfObject28[1] = Symbol.intern(null, "Class");
    arrayOfObject27[0] = localIObj4.withMeta((IPersistentMap)RT.map(arrayOfObject28));
    arrayOfObject26[0] = RT.vector(arrayOfObject27);
    arrayOfObject25[1] = PersistentList.create(Arrays.asList(arrayOfObject26));
    arrayOfObject25[2] = RT.keyword(null, "column");
    arrayOfObject25[3] = Integer.valueOf(1);
    arrayOfObject25[4] = RT.keyword(null, "added");
    arrayOfObject25[5] = "1.0";
    arrayOfObject25[6] = RT.keyword(null, "static");
    arrayOfObject25[7] = Boolean.TRUE;
    arrayOfObject25[8] = RT.keyword(null, "doc");
    arrayOfObject25[9] = "Returns the immediate and indirect superclasses and interfaces of c, if any";
    arrayOfObject25[10] = RT.keyword(null, "line");
    arrayOfObject25[11] = Integer.valueOf(4989);
    arrayOfObject25[12] = RT.keyword(null, "file");
    arrayOfObject25[13] = "clojure/core.clj";
    const__1819 = (AFn)RT.map(arrayOfObject25);
    const__1820 = (Var)RT.var("clojure.core", "isa?");
    const__1821 = Integer.valueOf(5000);
    Object[] arrayOfObject29 = new Object[2];
    Object[] arrayOfObject30 = new Object[2];
    arrayOfObject30[0] = Symbol.intern(null, "child");
    arrayOfObject30[1] = Symbol.intern(null, "parent");
    arrayOfObject29[0] = RT.vector(arrayOfObject30);
    Object[] arrayOfObject31 = new Object[3];
    arrayOfObject31[0] = Symbol.intern(null, "h");
    arrayOfObject31[1] = Symbol.intern(null, "child");
    arrayOfObject31[2] = Symbol.intern(null, "parent");
    arrayOfObject29[1] = RT.vector(arrayOfObject31);
    const__1822 = PersistentList.create(Arrays.asList(arrayOfObject29));
    Object[] arrayOfObject32 = new Object[12];
    arrayOfObject32[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject33 = new Object[2];
    Object[] arrayOfObject34 = new Object[2];
    arrayOfObject34[0] = Symbol.intern(null, "child");
    arrayOfObject34[1] = Symbol.intern(null, "parent");
    arrayOfObject33[0] = RT.vector(arrayOfObject34);
    Object[] arrayOfObject35 = new Object[3];
    arrayOfObject35[0] = Symbol.intern(null, "h");
    arrayOfObject35[1] = Symbol.intern(null, "child");
    arrayOfObject35[2] = Symbol.intern(null, "parent");
    arrayOfObject33[1] = RT.vector(arrayOfObject35);
    arrayOfObject32[1] = PersistentList.create(Arrays.asList(arrayOfObject33));
    arrayOfObject32[2] = RT.keyword(null, "column");
    arrayOfObject32[3] = Integer.valueOf(1);
    arrayOfObject32[4] = RT.keyword(null, "added");
    arrayOfObject32[5] = "1.0";
    arrayOfObject32[6] = RT.keyword(null, "doc");
    arrayOfObject32[7] = "Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a Java type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy";
    arrayOfObject32[8] = RT.keyword(null, "line");
    arrayOfObject32[9] = Integer.valueOf(5000);
    arrayOfObject32[10] = RT.keyword(null, "file");
    arrayOfObject32[11] = "clojure/core.clj";
    const__1823 = (AFn)RT.map(arrayOfObject32);
    const__1824 = (Var)RT.var("clojure.core", "parents");
    const__1825 = Integer.valueOf(5021);
    Object[] arrayOfObject36 = new Object[2];
    Object[] arrayOfObject37 = new Object[1];
    arrayOfObject37[0] = Symbol.intern(null, "tag");
    arrayOfObject36[0] = RT.vector(arrayOfObject37);
    Object[] arrayOfObject38 = new Object[2];
    arrayOfObject38[0] = Symbol.intern(null, "h");
    arrayOfObject38[1] = Symbol.intern(null, "tag");
    arrayOfObject36[1] = RT.vector(arrayOfObject38);
    const__1826 = PersistentList.create(Arrays.asList(arrayOfObject36));
    Object[] arrayOfObject39 = new Object[12];
    arrayOfObject39[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject40 = new Object[2];
    Object[] arrayOfObject41 = new Object[1];
    arrayOfObject41[0] = Symbol.intern(null, "tag");
    arrayOfObject40[0] = RT.vector(arrayOfObject41);
    Object[] arrayOfObject42 = new Object[2];
    arrayOfObject42[0] = Symbol.intern(null, "h");
    arrayOfObject42[1] = Symbol.intern(null, "tag");
    arrayOfObject40[1] = RT.vector(arrayOfObject42);
    arrayOfObject39[1] = PersistentList.create(Arrays.asList(arrayOfObject40));
    arrayOfObject39[2] = RT.keyword(null, "column");
    arrayOfObject39[3] = Integer.valueOf(1);
    arrayOfObject39[4] = RT.keyword(null, "added");
    arrayOfObject39[5] = "1.0";
    arrayOfObject39[6] = RT.keyword(null, "doc");
    arrayOfObject39[7] = "Returns the immediate parents of tag, either via a Java type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy";
    arrayOfObject39[8] = RT.keyword(null, "line");
    arrayOfObject39[9] = Integer.valueOf(5021);
    arrayOfObject39[10] = RT.keyword(null, "file");
    arrayOfObject39[11] = "clojure/core.clj";
    const__1827 = (AFn)RT.map(arrayOfObject39);
    const__1828 = (Var)RT.var("clojure.core", "ancestors");
    const__1829 = Integer.valueOf(5034);
    Object[] arrayOfObject43 = new Object[2];
    Object[] arrayOfObject44 = new Object[1];
    arrayOfObject44[0] = Symbol.intern(null, "tag");
    arrayOfObject43[0] = RT.vector(arrayOfObject44);
    Object[] arrayOfObject45 = new Object[2];
    arrayOfObject45[0] = Symbol.intern(null, "h");
    arrayOfObject45[1] = Symbol.intern(null, "tag");
    arrayOfObject43[1] = RT.vector(arrayOfObject45);
    const__1830 = PersistentList.create(Arrays.asList(arrayOfObject43));
    Object[] arrayOfObject46 = new Object[12];
    arrayOfObject46[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject47 = new Object[2];
    Object[] arrayOfObject48 = new Object[1];
    arrayOfObject48[0] = Symbol.intern(null, "tag");
    arrayOfObject47[0] = RT.vector(arrayOfObject48);
    Object[] arrayOfObject49 = new Object[2];
    arrayOfObject49[0] = Symbol.intern(null, "h");
    arrayOfObject49[1] = Symbol.intern(null, "tag");
    arrayOfObject47[1] = RT.vector(arrayOfObject49);
    arrayOfObject46[1] = PersistentList.create(Arrays.asList(arrayOfObject47));
    arrayOfObject46[2] = RT.keyword(null, "column");
    arrayOfObject46[3] = Integer.valueOf(1);
    arrayOfObject46[4] = RT.keyword(null, "added");
    arrayOfObject46[5] = "1.0";
    arrayOfObject46[6] = RT.keyword(null, "doc");
    arrayOfObject46[7] = "Returns the immediate and indirect parents of tag, either via a Java type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy";
    arrayOfObject46[8] = RT.keyword(null, "line");
    arrayOfObject46[9] = Integer.valueOf(5034);
    arrayOfObject46[10] = RT.keyword(null, "file");
    arrayOfObject46[11] = "clojure/core.clj";
    const__1831 = (AFn)RT.map(arrayOfObject46);
    const__1832 = (Var)RT.var("clojure.core", "descendants");
    const__1833 = Integer.valueOf(5050);
    Object[] arrayOfObject50 = new Object[2];
    Object[] arrayOfObject51 = new Object[1];
    arrayOfObject51[0] = Symbol.intern(null, "tag");
    arrayOfObject50[0] = RT.vector(arrayOfObject51);
    Object[] arrayOfObject52 = new Object[2];
    arrayOfObject52[0] = Symbol.intern(null, "h");
    arrayOfObject52[1] = Symbol.intern(null, "tag");
    arrayOfObject50[1] = RT.vector(arrayOfObject52);
    const__1834 = PersistentList.create(Arrays.asList(arrayOfObject50));
    Object[] arrayOfObject53 = new Object[12];
    arrayOfObject53[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject54 = new Object[2];
    Object[] arrayOfObject55 = new Object[1];
    arrayOfObject55[0] = Symbol.intern(null, "tag");
    arrayOfObject54[0] = RT.vector(arrayOfObject55);
    Object[] arrayOfObject56 = new Object[2];
    arrayOfObject56[0] = Symbol.intern(null, "h");
    arrayOfObject56[1] = Symbol.intern(null, "tag");
    arrayOfObject54[1] = RT.vector(arrayOfObject56);
    arrayOfObject53[1] = PersistentList.create(Arrays.asList(arrayOfObject54));
    arrayOfObject53[2] = RT.keyword(null, "column");
    arrayOfObject53[3] = Integer.valueOf(1);
    arrayOfObject53[4] = RT.keyword(null, "added");
    arrayOfObject53[5] = "1.0";
    arrayOfObject53[6] = RT.keyword(null, "doc");
    arrayOfObject53[7] = "Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on Java type inheritance\n  relationships.";
    arrayOfObject53[8] = RT.keyword(null, "line");
    arrayOfObject53[9] = Integer.valueOf(5050);
    arrayOfObject53[10] = RT.keyword(null, "file");
    arrayOfObject53[11] = "clojure/core.clj";
    const__1835 = (AFn)RT.map(arrayOfObject53);
    const__1836 = (Var)RT.var("clojure.core", "derive");
    const__1837 = Integer.valueOf(5062);
    Object[] arrayOfObject57 = new Object[2];
    Object[] arrayOfObject58 = new Object[2];
    arrayOfObject58[0] = Symbol.intern(null, "tag");
    arrayOfObject58[1] = Symbol.intern(null, "parent");
    arrayOfObject57[0] = RT.vector(arrayOfObject58);
    Object[] arrayOfObject59 = new Object[3];
    arrayOfObject59[0] = Symbol.intern(null, "h");
    arrayOfObject59[1] = Symbol.intern(null, "tag");
    arrayOfObject59[2] = Symbol.intern(null, "parent");
    arrayOfObject57[1] = RT.vector(arrayOfObject59);
    const__1838 = PersistentList.create(Arrays.asList(arrayOfObject57));
    Object[] arrayOfObject60 = new Object[12];
    arrayOfObject60[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject61 = new Object[2];
    Object[] arrayOfObject62 = new Object[2];
    arrayOfObject62[0] = Symbol.intern(null, "tag");
    arrayOfObject62[1] = Symbol.intern(null, "parent");
    arrayOfObject61[0] = RT.vector(arrayOfObject62);
    Object[] arrayOfObject63 = new Object[3];
    arrayOfObject63[0] = Symbol.intern(null, "h");
    arrayOfObject63[1] = Symbol.intern(null, "tag");
    arrayOfObject63[2] = Symbol.intern(null, "parent");
    arrayOfObject61[1] = RT.vector(arrayOfObject63);
    arrayOfObject60[1] = PersistentList.create(Arrays.asList(arrayOfObject61));
    arrayOfObject60[2] = RT.keyword(null, "column");
    arrayOfObject60[3] = Integer.valueOf(1);
    arrayOfObject60[4] = RT.keyword(null, "added");
    arrayOfObject60[5] = "1.0";
    arrayOfObject60[6] = RT.keyword(null, "doc");
    arrayOfObject60[7] = "Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.";
    arrayOfObject60[8] = RT.keyword(null, "line");
    arrayOfObject60[9] = Integer.valueOf(5062);
    arrayOfObject60[10] = RT.keyword(null, "file");
    arrayOfObject60[11] = "clojure/core.clj";
    const__1839 = (AFn)RT.map(arrayOfObject60);
    const__1840 = (Var)RT.var("clojure.core", "flatten");
    const__1841 = Integer.valueOf(5098);
    Object[] arrayOfObject64 = new Object[8];
    arrayOfObject64[0] = RT.keyword(null, "column");
    arrayOfObject64[1] = Integer.valueOf(1);
    arrayOfObject64[2] = RT.keyword(null, "declared");
    arrayOfObject64[3] = Boolean.TRUE;
    arrayOfObject64[4] = RT.keyword(null, "line");
    arrayOfObject64[5] = Integer.valueOf(5098);
    arrayOfObject64[6] = RT.keyword(null, "file");
    arrayOfObject64[7] = "clojure/core.clj";
    const__1842 = (AFn)RT.map(arrayOfObject64);
    const__1843 = (Var)RT.var("clojure.core", "underive");
    const__1844 = Integer.valueOf(5100);
    Object[] arrayOfObject65 = new Object[2];
    Object[] arrayOfObject66 = new Object[2];
    arrayOfObject66[0] = Symbol.intern(null, "tag");
    arrayOfObject66[1] = Symbol.intern(null, "parent");
    arrayOfObject65[0] = RT.vector(arrayOfObject66);
    Object[] arrayOfObject67 = new Object[3];
    arrayOfObject67[0] = Symbol.intern(null, "h");
    arrayOfObject67[1] = Symbol.intern(null, "tag");
    arrayOfObject67[2] = Symbol.intern(null, "parent");
    arrayOfObject65[1] = RT.vector(arrayOfObject67);
    const__1845 = PersistentList.create(Arrays.asList(arrayOfObject65));
    Object[] arrayOfObject68 = new Object[12];
    arrayOfObject68[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject69 = new Object[2];
    Object[] arrayOfObject70 = new Object[2];
    arrayOfObject70[0] = Symbol.intern(null, "tag");
    arrayOfObject70[1] = Symbol.intern(null, "parent");
    arrayOfObject69[0] = RT.vector(arrayOfObject70);
    Object[] arrayOfObject71 = new Object[3];
    arrayOfObject71[0] = Symbol.intern(null, "h");
    arrayOfObject71[1] = Symbol.intern(null, "tag");
    arrayOfObject71[2] = Symbol.intern(null, "parent");
    arrayOfObject69[1] = RT.vector(arrayOfObject71);
    arrayOfObject68[1] = PersistentList.create(Arrays.asList(arrayOfObject69));
    arrayOfObject68[2] = RT.keyword(null, "column");
    arrayOfObject68[3] = Integer.valueOf(1);
    arrayOfObject68[4] = RT.keyword(null, "added");
    arrayOfObject68[5] = "1.0";
    arrayOfObject68[6] = RT.keyword(null, "doc");
    arrayOfObject68[7] = "Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.";
    arrayOfObject68[8] = RT.keyword(null, "line");
    arrayOfObject68[9] = Integer.valueOf(5100);
    arrayOfObject68[10] = RT.keyword(null, "file");
    arrayOfObject68[11] = "clojure/core.clj";
    const__1846 = (AFn)RT.map(arrayOfObject68);
    const__1847 = (Var)RT.var("clojure.core", "distinct?");
    const__1848 = Integer.valueOf(5121);
    Object[] arrayOfObject72 = new Object[3];
    Object[] arrayOfObject73 = new Object[1];
    arrayOfObject73[0] = Symbol.intern(null, "x");
    arrayOfObject72[0] = RT.vector(arrayOfObject73);
    Object[] arrayOfObject74 = new Object[2];
    arrayOfObject74[0] = Symbol.intern(null, "x");
    arrayOfObject74[1] = Symbol.intern(null, "y");
    arrayOfObject72[1] = RT.vector(arrayOfObject74);
    Object[] arrayOfObject75 = new Object[4];
    arrayOfObject75[0] = Symbol.intern(null, "x");
    arrayOfObject75[1] = Symbol.intern(null, "y");
    arrayOfObject75[2] = Symbol.intern(null, "&");
    arrayOfObject75[3] = Symbol.intern(null, "more");
    arrayOfObject72[2] = RT.vector(arrayOfObject75);
    const__1849 = PersistentList.create(Arrays.asList(arrayOfObject72));
    Object[] arrayOfObject76 = new Object[16];
    arrayOfObject76[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject77 = new Object[3];
    Object[] arrayOfObject78 = new Object[1];
    arrayOfObject78[0] = Symbol.intern(null, "x");
    arrayOfObject77[0] = RT.vector(arrayOfObject78);
    Object[] arrayOfObject79 = new Object[2];
    arrayOfObject79[0] = Symbol.intern(null, "x");
    arrayOfObject79[1] = Symbol.intern(null, "y");
    arrayOfObject77[1] = RT.vector(arrayOfObject79);
    Object[] arrayOfObject80 = new Object[4];
    arrayOfObject80[0] = Symbol.intern(null, "x");
    arrayOfObject80[1] = Symbol.intern(null, "y");
    arrayOfObject80[2] = Symbol.intern(null, "&");
    arrayOfObject80[3] = Symbol.intern(null, "more");
    arrayOfObject77[2] = RT.vector(arrayOfObject80);
    arrayOfObject76[1] = PersistentList.create(Arrays.asList(arrayOfObject77));
    arrayOfObject76[2] = RT.keyword(null, "column");
    arrayOfObject76[3] = Integer.valueOf(1);
    arrayOfObject76[4] = RT.keyword(null, "added");
    arrayOfObject76[5] = "1.0";
    arrayOfObject76[6] = RT.keyword(null, "static");
    arrayOfObject76[7] = Boolean.TRUE;
    arrayOfObject76[8] = RT.keyword(null, "doc");
    arrayOfObject76[9] = "Returns true if no two of the arguments are =";
    arrayOfObject76[10] = RT.keyword(null, "line");
    arrayOfObject76[11] = Integer.valueOf(5121);
    arrayOfObject76[12] = RT.keyword(null, "file");
    arrayOfObject76[13] = "clojure/core.clj";
    arrayOfObject76[14] = RT.keyword(null, "tag");
    arrayOfObject76[15] = Class.forName("java.lang.Boolean");
    const__1850 = (AFn)RT.map(arrayOfObject76);
    const__1851 = (Var)RT.var("clojure.core", "resultset-seq");
    const__1852 = Integer.valueOf(5138);
    Object[] arrayOfObject81 = new Object[1];
    Object[] arrayOfObject82 = new Object[1];
    IObj localIObj5 = (IObj)Symbol.intern(null, "rs");
    Object[] arrayOfObject83 = new Object[2];
    arrayOfObject83[0] = RT.keyword(null, "tag");
    arrayOfObject83[1] = Symbol.intern(null, "java.sql.ResultSet");
    arrayOfObject82[0] = localIObj5.withMeta((IPersistentMap)RT.map(arrayOfObject83));
    arrayOfObject81[0] = RT.vector(arrayOfObject82);
    const__1853 = PersistentList.create(Arrays.asList(arrayOfObject81));
    Object[] arrayOfObject84 = new Object[12];
    arrayOfObject84[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject85 = new Object[1];
    Object[] arrayOfObject86 = new Object[1];
    IObj localIObj6 = (IObj)Symbol.intern(null, "rs");
    Object[] arrayOfObject87 = new Object[2];
    arrayOfObject87[0] = RT.keyword(null, "tag");
    arrayOfObject87[1] = Symbol.intern(null, "java.sql.ResultSet");
    arrayOfObject86[0] = localIObj6.withMeta((IPersistentMap)RT.map(arrayOfObject87));
    arrayOfObject85[0] = RT.vector(arrayOfObject86);
    arrayOfObject84[1] = PersistentList.create(Arrays.asList(arrayOfObject85));
    arrayOfObject84[2] = RT.keyword(null, "column");
    arrayOfObject84[3] = Integer.valueOf(1);
    arrayOfObject84[4] = RT.keyword(null, "added");
    arrayOfObject84[5] = "1.0";
    arrayOfObject84[6] = RT.keyword(null, "doc");
    arrayOfObject84[7] = "Creates and returns a lazy sequence of structmaps corresponding to\n  the rows in the java.sql.ResultSet rs";
    arrayOfObject84[8] = RT.keyword(null, "line");
    arrayOfObject84[9] = Integer.valueOf(5138);
    arrayOfObject84[10] = RT.keyword(null, "file");
    arrayOfObject84[11] = "clojure/core.clj";
    const__1854 = (AFn)RT.map(arrayOfObject84);
    const__1855 = (Var)RT.var("clojure.core", "iterator-seq");
    const__1856 = Integer.valueOf(5157);
    Object[] arrayOfObject88 = new Object[1];
    Object[] arrayOfObject89 = new Object[1];
    arrayOfObject89[0] = Symbol.intern(null, "iter");
    arrayOfObject88[0] = RT.vector(arrayOfObject89);
    const__1857 = PersistentList.create(Arrays.asList(arrayOfObject88));
    Object[] arrayOfObject90 = new Object[14];
    arrayOfObject90[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject91 = new Object[1];
    Object[] arrayOfObject92 = new Object[1];
    arrayOfObject92[0] = Symbol.intern(null, "iter");
    arrayOfObject91[0] = RT.vector(arrayOfObject92);
    arrayOfObject90[1] = PersistentList.create(Arrays.asList(arrayOfObject91));
    arrayOfObject90[2] = RT.keyword(null, "column");
    arrayOfObject90[3] = Integer.valueOf(1);
    arrayOfObject90[4] = RT.keyword(null, "added");
    arrayOfObject90[5] = "1.0";
    arrayOfObject90[6] = RT.keyword(null, "static");
    arrayOfObject90[7] = Boolean.TRUE;
    arrayOfObject90[8] = RT.keyword(null, "doc");
    arrayOfObject90[9] = "Returns a seq on a java.util.Iterator. Note that most collections\n  providing iterators implement Iterable and thus support seq directly.";
    arrayOfObject90[10] = RT.keyword(null, "line");
    arrayOfObject90[11] = Integer.valueOf(5157);
    arrayOfObject90[12] = RT.keyword(null, "file");
    arrayOfObject90[13] = "clojure/core.clj";
    const__1858 = (AFn)RT.map(arrayOfObject90);
    const__1859 = (Var)RT.var("clojure.core", "enumeration-seq");
    const__1860 = Integer.valueOf(5165);
    Object[] arrayOfObject93 = new Object[1];
    Object[] arrayOfObject94 = new Object[1];
    arrayOfObject94[0] = Symbol.intern(null, "e");
    arrayOfObject93[0] = RT.vector(arrayOfObject94);
    const__1861 = PersistentList.create(Arrays.asList(arrayOfObject93));
    Object[] arrayOfObject95 = new Object[14];
    arrayOfObject95[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject96 = new Object[1];
    Object[] arrayOfObject97 = new Object[1];
    arrayOfObject97[0] = Symbol.intern(null, "e");
    arrayOfObject96[0] = RT.vector(arrayOfObject97);
    arrayOfObject95[1] = PersistentList.create(Arrays.asList(arrayOfObject96));
    arrayOfObject95[2] = RT.keyword(null, "column");
    arrayOfObject95[3] = Integer.valueOf(1);
    arrayOfObject95[4] = RT.keyword(null, "added");
    arrayOfObject95[5] = "1.0";
    arrayOfObject95[6] = RT.keyword(null, "static");
    arrayOfObject95[7] = Boolean.TRUE;
    arrayOfObject95[8] = RT.keyword(null, "doc");
    arrayOfObject95[9] = "Returns a seq on a java.util.Enumeration";
    arrayOfObject95[10] = RT.keyword(null, "line");
    arrayOfObject95[11] = Integer.valueOf(5165);
    arrayOfObject95[12] = RT.keyword(null, "file");
    arrayOfObject95[13] = "clojure/core.clj";
    const__1862 = (AFn)RT.map(arrayOfObject95);
    const__1863 = (Var)RT.var("clojure.core", "format");
    const__1864 = Integer.valueOf(5172);
    Object[] arrayOfObject98 = new Object[1];
    Object[] arrayOfObject99 = new Object[3];
    arrayOfObject99[0] = Symbol.intern(null, "fmt");
    arrayOfObject99[1] = Symbol.intern(null, "&");
    arrayOfObject99[2] = Symbol.intern(null, "args");
    IObj localIObj7 = (IObj)RT.vector(arrayOfObject99);
    Object[] arrayOfObject100 = new Object[2];
    arrayOfObject100[0] = RT.keyword(null, "tag");
    arrayOfObject100[1] = Symbol.intern(null, "String");
    arrayOfObject98[0] = localIObj7.withMeta((IPersistentMap)RT.map(arrayOfObject100));
    const__1865 = PersistentList.create(Arrays.asList(arrayOfObject98));
    Object[] arrayOfObject101 = new Object[14];
    arrayOfObject101[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject102 = new Object[1];
    Object[] arrayOfObject103 = new Object[3];
    arrayOfObject103[0] = Symbol.intern(null, "fmt");
    arrayOfObject103[1] = Symbol.intern(null, "&");
    arrayOfObject103[2] = Symbol.intern(null, "args");
    IObj localIObj8 = (IObj)RT.vector(arrayOfObject103);
    Object[] arrayOfObject104 = new Object[2];
    arrayOfObject104[0] = RT.keyword(null, "tag");
    arrayOfObject104[1] = Symbol.intern(null, "String");
    arrayOfObject102[0] = localIObj8.withMeta((IPersistentMap)RT.map(arrayOfObject104));
    arrayOfObject101[1] = PersistentList.create(Arrays.asList(arrayOfObject102));
    arrayOfObject101[2] = RT.keyword(null, "column");
    arrayOfObject101[3] = Integer.valueOf(1);
    arrayOfObject101[4] = RT.keyword(null, "added");
    arrayOfObject101[5] = "1.0";
    arrayOfObject101[6] = RT.keyword(null, "static");
    arrayOfObject101[7] = Boolean.TRUE;
    arrayOfObject101[8] = RT.keyword(null, "doc");
    arrayOfObject101[9] = "Formats a string using java.lang.String.format, see java.util.Formatter for format\n  string syntax";
    arrayOfObject101[10] = RT.keyword(null, "line");
    arrayOfObject101[11] = Integer.valueOf(5172);
    arrayOfObject101[12] = RT.keyword(null, "file");
    arrayOfObject101[13] = "clojure/core.clj";
    const__1866 = (AFn)RT.map(arrayOfObject101);
    const__1867 = (Var)RT.var("clojure.core", "printf");
    const__1868 = Integer.valueOf(5180);
    Object[] arrayOfObject105 = new Object[1];
    Object[] arrayOfObject106 = new Object[3];
    arrayOfObject106[0] = Symbol.intern(null, "fmt");
    arrayOfObject106[1] = Symbol.intern(null, "&");
    arrayOfObject106[2] = Symbol.intern(null, "args");
    arrayOfObject105[0] = RT.vector(arrayOfObject106);
    const__1869 = PersistentList.create(Arrays.asList(arrayOfObject105));
    Object[] arrayOfObject107 = new Object[14];
    arrayOfObject107[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject108 = new Object[1];
    Object[] arrayOfObject109 = new Object[3];
    arrayOfObject109[0] = Symbol.intern(null, "fmt");
    arrayOfObject109[1] = Symbol.intern(null, "&");
    arrayOfObject109[2] = Symbol.intern(null, "args");
    arrayOfObject108[0] = RT.vector(arrayOfObject109);
    arrayOfObject107[1] = PersistentList.create(Arrays.asList(arrayOfObject108));
    arrayOfObject107[2] = RT.keyword(null, "column");
    arrayOfObject107[3] = Integer.valueOf(1);
    arrayOfObject107[4] = RT.keyword(null, "added");
    arrayOfObject107[5] = "1.0";
    arrayOfObject107[6] = RT.keyword(null, "static");
    arrayOfObject107[7] = Boolean.TRUE;
    arrayOfObject107[8] = RT.keyword(null, "doc");
    arrayOfObject107[9] = "Prints formatted output, as per format";
    arrayOfObject107[10] = RT.keyword(null, "line");
    arrayOfObject107[11] = Integer.valueOf(5180);
    arrayOfObject107[12] = RT.keyword(null, "file");
    arrayOfObject107[13] = "clojure/core.clj";
    const__1870 = (AFn)RT.map(arrayOfObject107);
    const__1871 = (Var)RT.var("clojure.core", "gen-class");
    const__1872 = Integer.valueOf(5187);
    Object[] arrayOfObject110 = new Object[8];
    arrayOfObject110[0] = RT.keyword(null, "column");
    arrayOfObject110[1] = Integer.valueOf(1);
    arrayOfObject110[2] = RT.keyword(null, "declared");
    arrayOfObject110[3] = Boolean.TRUE;
    arrayOfObject110[4] = RT.keyword(null, "line");
    arrayOfObject110[5] = Integer.valueOf(5187);
    arrayOfObject110[6] = RT.keyword(null, "file");
    arrayOfObject110[7] = "clojure/core.clj";
    const__1873 = (AFn)RT.map(arrayOfObject110);
    const__1874 = (Var)RT.var("clojure.core", "with-loading-context");
    const__1875 = Integer.valueOf(5189);
    Object[] arrayOfObject111 = new Object[1];
    Object[] arrayOfObject112 = new Object[2];
    arrayOfObject112[0] = Symbol.intern(null, "&");
    arrayOfObject112[1] = Symbol.intern(null, "body");
    arrayOfObject111[0] = RT.vector(arrayOfObject112);
    const__1876 = PersistentList.create(Arrays.asList(arrayOfObject111));
    Object[] arrayOfObject113 = new Object[8];
    arrayOfObject113[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject114 = new Object[1];
    Object[] arrayOfObject115 = new Object[2];
    arrayOfObject115[0] = Symbol.intern(null, "&");
    arrayOfObject115[1] = Symbol.intern(null, "body");
    arrayOfObject114[0] = RT.vector(arrayOfObject115);
    arrayOfObject113[1] = PersistentList.create(Arrays.asList(arrayOfObject114));
    arrayOfObject113[2] = RT.keyword(null, "column");
    arrayOfObject113[3] = Integer.valueOf(1);
    arrayOfObject113[4] = RT.keyword(null, "line");
    arrayOfObject113[5] = Integer.valueOf(5189);
    arrayOfObject113[6] = RT.keyword(null, "file");
    arrayOfObject113[7] = "clojure/core.clj";
    const__1877 = (AFn)RT.map(arrayOfObject113);
    const__1878 = (Var)RT.var("clojure.core", "ns");
    const__1879 = Integer.valueOf(5198);
    Object[] arrayOfObject116 = new Object[1];
    Object[] arrayOfObject117 = new Object[4];
    arrayOfObject117[0] = Symbol.intern(null, "name");
    arrayOfObject117[1] = Symbol.intern(null, "docstring?");
    arrayOfObject117[2] = Symbol.intern(null, "attr-map?");
    arrayOfObject117[3] = Symbol.intern(null, "references*");
    arrayOfObject116[0] = RT.vector(arrayOfObject117);
    IObj localIObj9 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject116));
    Object[] arrayOfObject118 = new Object[4];
    arrayOfObject118[0] = RT.keyword(null, "line");
    arrayOfObject118[1] = Integer.valueOf(5219);
    arrayOfObject118[2] = RT.keyword(null, "column");
    arrayOfObject118[3] = Integer.valueOf(15);
    const__1880 = localIObj9.withMeta((IPersistentMap)RT.map(arrayOfObject118));
    Object[] arrayOfObject119 = new Object[12];
    arrayOfObject119[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject120 = new Object[1];
    Object[] arrayOfObject121 = new Object[4];
    arrayOfObject121[0] = Symbol.intern(null, "name");
    arrayOfObject121[1] = Symbol.intern(null, "docstring?");
    arrayOfObject121[2] = Symbol.intern(null, "attr-map?");
    arrayOfObject121[3] = Symbol.intern(null, "references*");
    arrayOfObject120[0] = RT.vector(arrayOfObject121);
    IObj localIObj10 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject120));
    Object[] arrayOfObject122 = new Object[4];
    arrayOfObject122[0] = RT.keyword(null, "line");
    arrayOfObject122[1] = Integer.valueOf(5219);
    arrayOfObject122[2] = RT.keyword(null, "column");
    arrayOfObject122[3] = Integer.valueOf(15);
    arrayOfObject119[1] = localIObj10.withMeta((IPersistentMap)RT.map(arrayOfObject122));
    arrayOfObject119[2] = RT.keyword(null, "column");
    arrayOfObject119[3] = Integer.valueOf(1);
    arrayOfObject119[4] = RT.keyword(null, "added");
    arrayOfObject119[5] = "1.0";
    arrayOfObject119[6] = RT.keyword(null, "doc");
    arrayOfObject119[7] = "Sets *ns* to the namespace named by name (unevaluated), creating it\n  if needed.  references can be zero or more of: (:refer-clojure ...)\n  (:require ...) (:use ...) (:import ...) (:load ...) (:gen-class)\n  with the syntax of refer-clojure/require/use/import/load/gen-class\n  respectively, except the arguments are unevaluated and need not be\n  quoted. (:gen-class ...), when supplied, defaults to :name\n  corresponding to the ns name, :main true, :impl-ns same as ns, and\n  :init-impl-ns true. All options of gen-class are\n  supported. The :gen-class directive is ignored when not\n  compiling. If :gen-class is not supplied, when compiled only an\n  nsname__init.class will be generated. If :refer-clojure is not used, a\n  default (refer 'clojure) is used.  Use of ns is preferred to\n  individual calls to in-ns/require/use/import:\n\n  (ns foo.bar\n    (:refer-clojure :exclude [ancestors printf])\n    (:require (clojure.contrib sql combinatorics))\n    (:use (my.lib this that))\n    (:import (java.util Date Timer Random)\n             (java.sql Connection Statement)))";
    arrayOfObject119[8] = RT.keyword(null, "line");
    arrayOfObject119[9] = Integer.valueOf(5198);
    arrayOfObject119[10] = RT.keyword(null, "file");
    arrayOfObject119[11] = "clojure/core.clj";
    const__1881 = (AFn)RT.map(arrayOfObject119);
    const__1882 = (Var)RT.var("clojure.core", "refer-clojure");
    const__1883 = Integer.valueOf(5254);
    Object[] arrayOfObject123 = new Object[1];
    Object[] arrayOfObject124 = new Object[2];
    arrayOfObject124[0] = Symbol.intern(null, "&");
    arrayOfObject124[1] = Symbol.intern(null, "filters");
    arrayOfObject123[0] = RT.vector(arrayOfObject124);
    const__1884 = PersistentList.create(Arrays.asList(arrayOfObject123));
    Object[] arrayOfObject125 = new Object[12];
    arrayOfObject125[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject126 = new Object[1];
    Object[] arrayOfObject127 = new Object[2];
    arrayOfObject127[0] = Symbol.intern(null, "&");
    arrayOfObject127[1] = Symbol.intern(null, "filters");
    arrayOfObject126[0] = RT.vector(arrayOfObject127);
    arrayOfObject125[1] = PersistentList.create(Arrays.asList(arrayOfObject126));
    arrayOfObject125[2] = RT.keyword(null, "column");
    arrayOfObject125[3] = Integer.valueOf(1);
    arrayOfObject125[4] = RT.keyword(null, "added");
    arrayOfObject125[5] = "1.0";
    arrayOfObject125[6] = RT.keyword(null, "doc");
    arrayOfObject125[7] = "Same as (refer 'clojure.core <filters>)";
    arrayOfObject125[8] = RT.keyword(null, "line");
    arrayOfObject125[9] = Integer.valueOf(5254);
    arrayOfObject125[10] = RT.keyword(null, "file");
    arrayOfObject125[11] = "clojure/core.clj";
    const__1885 = (AFn)RT.map(arrayOfObject125);
    const__1886 = (Var)RT.var("clojure.core", "defonce");
    const__1887 = Integer.valueOf(5260);
    Object[] arrayOfObject128 = new Object[1];
    Object[] arrayOfObject129 = new Object[2];
    arrayOfObject129[0] = Symbol.intern(null, "name");
    arrayOfObject129[1] = Symbol.intern(null, "expr");
    arrayOfObject128[0] = RT.vector(arrayOfObject129);
    const__1888 = PersistentList.create(Arrays.asList(arrayOfObject128));
    Object[] arrayOfObject130 = new Object[12];
    arrayOfObject130[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject131 = new Object[1];
    Object[] arrayOfObject132 = new Object[2];
    arrayOfObject132[0] = Symbol.intern(null, "name");
    arrayOfObject132[1] = Symbol.intern(null, "expr");
    arrayOfObject131[0] = RT.vector(arrayOfObject132);
    arrayOfObject130[1] = PersistentList.create(Arrays.asList(arrayOfObject131));
    arrayOfObject130[2] = RT.keyword(null, "column");
    arrayOfObject130[3] = Integer.valueOf(1);
    arrayOfObject130[4] = RT.keyword(null, "added");
    arrayOfObject130[5] = "1.0";
    arrayOfObject130[6] = RT.keyword(null, "doc");
    arrayOfObject130[7] = "defs name to have the root value of the expr iff the named var has no root value,\n  else expr is unevaluated";
    arrayOfObject130[8] = RT.keyword(null, "line");
    arrayOfObject130[9] = Integer.valueOf(5260);
    arrayOfObject130[10] = RT.keyword(null, "file");
    arrayOfObject130[11] = "clojure/core.clj";
    const__1889 = (AFn)RT.map(arrayOfObject130);
    const__1890 = (Var)RT.var("clojure.core", "throw-if");
    const__1891 = Integer.valueOf(5286);
    Object[] arrayOfObject133 = new Object[1];
    Object[] arrayOfObject134 = new Object[4];
    arrayOfObject134[0] = Symbol.intern(null, "pred");
    arrayOfObject134[1] = Symbol.intern(null, "fmt");
    arrayOfObject134[2] = Symbol.intern(null, "&");
    arrayOfObject134[3] = Symbol.intern(null, "args");
    arrayOfObject133[0] = RT.vector(arrayOfObject134);
    const__1892 = PersistentList.create(Arrays.asList(arrayOfObject133));
    Object[] arrayOfObject135 = new Object[12];
    arrayOfObject135[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject136 = new Object[1];
    Object[] arrayOfObject137 = new Object[4];
    arrayOfObject137[0] = Symbol.intern(null, "pred");
    arrayOfObject137[1] = Symbol.intern(null, "fmt");
    arrayOfObject137[2] = Symbol.intern(null, "&");
    arrayOfObject137[3] = Symbol.intern(null, "args");
    arrayOfObject136[0] = RT.vector(arrayOfObject137);
    arrayOfObject135[1] = PersistentList.create(Arrays.asList(arrayOfObject136));
    arrayOfObject135[2] = RT.keyword(null, "column");
    arrayOfObject135[3] = Integer.valueOf(1);
    arrayOfObject135[4] = RT.keyword(null, "private");
    arrayOfObject135[5] = Boolean.TRUE;
    arrayOfObject135[6] = RT.keyword(null, "doc");
    arrayOfObject135[7] = "Throws an exception with a message if pred is true";
    arrayOfObject135[8] = RT.keyword(null, "line");
    arrayOfObject135[9] = Integer.valueOf(5286);
    arrayOfObject135[10] = RT.keyword(null, "file");
    arrayOfObject135[11] = "clojure/core.clj";
    const__1893 = (AFn)RT.map(arrayOfObject135);
    const__1894 = (Var)RT.var("clojure.core", "libspec?");
    const__1895 = Integer.valueOf(5298);
    Object[] arrayOfObject138 = new Object[1];
    Object[] arrayOfObject139 = new Object[1];
    arrayOfObject139[0] = Symbol.intern(null, "x");
    arrayOfObject138[0] = RT.vector(arrayOfObject139);
    const__1896 = PersistentList.create(Arrays.asList(arrayOfObject138));
    Object[] arrayOfObject140 = new Object[12];
    arrayOfObject140[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject141 = new Object[1];
    Object[] arrayOfObject142 = new Object[1];
    arrayOfObject142[0] = Symbol.intern(null, "x");
    arrayOfObject141[0] = RT.vector(arrayOfObject142);
    arrayOfObject140[1] = PersistentList.create(Arrays.asList(arrayOfObject141));
    arrayOfObject140[2] = RT.keyword(null, "column");
    arrayOfObject140[3] = Integer.valueOf(1);
    arrayOfObject140[4] = RT.keyword(null, "private");
    arrayOfObject140[5] = Boolean.TRUE;
    arrayOfObject140[6] = RT.keyword(null, "doc");
    arrayOfObject140[7] = "Returns true if x is a libspec";
    arrayOfObject140[8] = RT.keyword(null, "line");
    arrayOfObject140[9] = Integer.valueOf(5298);
    arrayOfObject140[10] = RT.keyword(null, "file");
    arrayOfObject140[11] = "clojure/core.clj";
    const__1897 = (AFn)RT.map(arrayOfObject140);
    const__1898 = (Var)RT.var("clojure.core", "prependss");
    const__1899 = Integer.valueOf(5307);
  }

  public static void __init19()
  {
    Object[] arrayOfObject1 = new Object[1];
    Object[] arrayOfObject2 = new Object[2];
    arrayOfObject2[0] = Symbol.intern(null, "x");
    arrayOfObject2[1] = Symbol.intern(null, "coll");
    arrayOfObject1[0] = RT.vector(arrayOfObject2);
    const__1900 = PersistentList.create(Arrays.asList(arrayOfObject1));
    Object[] arrayOfObject3 = new Object[12];
    arrayOfObject3[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject4 = new Object[1];
    Object[] arrayOfObject5 = new Object[2];
    arrayOfObject5[0] = Symbol.intern(null, "x");
    arrayOfObject5[1] = Symbol.intern(null, "coll");
    arrayOfObject4[0] = RT.vector(arrayOfObject5);
    arrayOfObject3[1] = PersistentList.create(Arrays.asList(arrayOfObject4));
    arrayOfObject3[2] = RT.keyword(null, "column");
    arrayOfObject3[3] = Integer.valueOf(1);
    arrayOfObject3[4] = RT.keyword(null, "private");
    arrayOfObject3[5] = Boolean.TRUE;
    arrayOfObject3[6] = RT.keyword(null, "doc");
    arrayOfObject3[7] = "Prepends a symbol or a seq to coll";
    arrayOfObject3[8] = RT.keyword(null, "line");
    arrayOfObject3[9] = Integer.valueOf(5307);
    arrayOfObject3[10] = RT.keyword(null, "file");
    arrayOfObject3[11] = "clojure/core.clj";
    const__1901 = (AFn)RT.map(arrayOfObject3);
    const__1902 = (Var)RT.var("clojure.core", "root-resource");
    const__1903 = Integer.valueOf(5314);
    Object[] arrayOfObject6 = new Object[1];
    Object[] arrayOfObject7 = new Object[1];
    arrayOfObject7[0] = Symbol.intern(null, "lib");
    arrayOfObject6[0] = RT.vector(arrayOfObject7);
    const__1904 = PersistentList.create(Arrays.asList(arrayOfObject6));
    Object[] arrayOfObject8 = new Object[14];
    arrayOfObject8[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject9 = new Object[1];
    Object[] arrayOfObject10 = new Object[1];
    arrayOfObject10[0] = Symbol.intern(null, "lib");
    arrayOfObject9[0] = RT.vector(arrayOfObject10);
    arrayOfObject8[1] = PersistentList.create(Arrays.asList(arrayOfObject9));
    arrayOfObject8[2] = RT.keyword(null, "column");
    arrayOfObject8[3] = Integer.valueOf(1);
    arrayOfObject8[4] = RT.keyword(null, "private");
    arrayOfObject8[5] = Boolean.TRUE;
    arrayOfObject8[6] = RT.keyword(null, "doc");
    arrayOfObject8[7] = "Returns the root directory path for a lib";
    arrayOfObject8[8] = RT.keyword(null, "line");
    arrayOfObject8[9] = Integer.valueOf(5314);
    arrayOfObject8[10] = RT.keyword(null, "file");
    arrayOfObject8[11] = "clojure/core.clj";
    arrayOfObject8[12] = RT.keyword(null, "tag");
    arrayOfObject8[13] = Class.forName("java.lang.String");
    const__1905 = (AFn)RT.map(arrayOfObject8);
    const__1906 = (Var)RT.var("clojure.core", "root-directory");
    const__1907 = Integer.valueOf(5323);
    Object[] arrayOfObject11 = new Object[1];
    Object[] arrayOfObject12 = new Object[1];
    arrayOfObject12[0] = Symbol.intern(null, "lib");
    arrayOfObject11[0] = RT.vector(arrayOfObject12);
    const__1908 = PersistentList.create(Arrays.asList(arrayOfObject11));
    Object[] arrayOfObject13 = new Object[12];
    arrayOfObject13[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject14 = new Object[1];
    Object[] arrayOfObject15 = new Object[1];
    arrayOfObject15[0] = Symbol.intern(null, "lib");
    arrayOfObject14[0] = RT.vector(arrayOfObject15);
    arrayOfObject13[1] = PersistentList.create(Arrays.asList(arrayOfObject14));
    arrayOfObject13[2] = RT.keyword(null, "column");
    arrayOfObject13[3] = Integer.valueOf(1);
    arrayOfObject13[4] = RT.keyword(null, "private");
    arrayOfObject13[5] = Boolean.TRUE;
    arrayOfObject13[6] = RT.keyword(null, "doc");
    arrayOfObject13[7] = "Returns the root resource path for a lib";
    arrayOfObject13[8] = RT.keyword(null, "line");
    arrayOfObject13[9] = Integer.valueOf(5323);
    arrayOfObject13[10] = RT.keyword(null, "file");
    arrayOfObject13[11] = "clojure/core.clj";
    const__1909 = (AFn)RT.map(arrayOfObject13);
    const__1910 = (Var)RT.var("clojure.core", "load");
    const__1911 = Integer.valueOf(5329);
    Object[] arrayOfObject16 = new Object[8];
    arrayOfObject16[0] = RT.keyword(null, "column");
    arrayOfObject16[1] = Integer.valueOf(1);
    arrayOfObject16[2] = RT.keyword(null, "declared");
    arrayOfObject16[3] = Boolean.TRUE;
    arrayOfObject16[4] = RT.keyword(null, "line");
    arrayOfObject16[5] = Integer.valueOf(5329);
    arrayOfObject16[6] = RT.keyword(null, "file");
    arrayOfObject16[7] = "clojure/core.clj";
    const__1912 = (AFn)RT.map(arrayOfObject16);
    const__1913 = (Var)RT.var("clojure.core", "load-one");
    const__1914 = Integer.valueOf(5331);
    Object[] arrayOfObject17 = new Object[1];
    Object[] arrayOfObject18 = new Object[3];
    arrayOfObject18[0] = Symbol.intern(null, "lib");
    arrayOfObject18[1] = Symbol.intern(null, "need-ns");
    arrayOfObject18[2] = Symbol.intern(null, "require");
    arrayOfObject17[0] = RT.vector(arrayOfObject18);
    const__1915 = PersistentList.create(Arrays.asList(arrayOfObject17));
    Object[] arrayOfObject19 = new Object[12];
    arrayOfObject19[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject20 = new Object[1];
    Object[] arrayOfObject21 = new Object[3];
    arrayOfObject21[0] = Symbol.intern(null, "lib");
    arrayOfObject21[1] = Symbol.intern(null, "need-ns");
    arrayOfObject21[2] = Symbol.intern(null, "require");
    arrayOfObject20[0] = RT.vector(arrayOfObject21);
    arrayOfObject19[1] = PersistentList.create(Arrays.asList(arrayOfObject20));
    arrayOfObject19[2] = RT.keyword(null, "column");
    arrayOfObject19[3] = Integer.valueOf(1);
    arrayOfObject19[4] = RT.keyword(null, "private");
    arrayOfObject19[5] = Boolean.TRUE;
    arrayOfObject19[6] = RT.keyword(null, "doc");
    arrayOfObject19[7] = "Loads a lib given its name. If need-ns, ensures that the associated\n  namespace exists after loading. If require, records the load so any\n  duplicate loads can be skipped.";
    arrayOfObject19[8] = RT.keyword(null, "line");
    arrayOfObject19[9] = Integer.valueOf(5331);
    arrayOfObject19[10] = RT.keyword(null, "file");
    arrayOfObject19[11] = "clojure/core.clj";
    const__1916 = (AFn)RT.map(arrayOfObject19);
    const__1917 = (Var)RT.var("clojure.core", "load-all");
    const__1918 = Integer.valueOf(5344);
    Object[] arrayOfObject22 = new Object[1];
    Object[] arrayOfObject23 = new Object[3];
    arrayOfObject23[0] = Symbol.intern(null, "lib");
    arrayOfObject23[1] = Symbol.intern(null, "need-ns");
    arrayOfObject23[2] = Symbol.intern(null, "require");
    arrayOfObject22[0] = RT.vector(arrayOfObject23);
    const__1919 = PersistentList.create(Arrays.asList(arrayOfObject22));
    Object[] arrayOfObject24 = new Object[12];
    arrayOfObject24[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject25 = new Object[1];
    Object[] arrayOfObject26 = new Object[3];
    arrayOfObject26[0] = Symbol.intern(null, "lib");
    arrayOfObject26[1] = Symbol.intern(null, "need-ns");
    arrayOfObject26[2] = Symbol.intern(null, "require");
    arrayOfObject25[0] = RT.vector(arrayOfObject26);
    arrayOfObject24[1] = PersistentList.create(Arrays.asList(arrayOfObject25));
    arrayOfObject24[2] = RT.keyword(null, "column");
    arrayOfObject24[3] = Integer.valueOf(1);
    arrayOfObject24[4] = RT.keyword(null, "private");
    arrayOfObject24[5] = Boolean.TRUE;
    arrayOfObject24[6] = RT.keyword(null, "doc");
    arrayOfObject24[7] = "Loads a lib given its name and forces a load of any libs it directly or\n  indirectly loads. If need-ns, ensures that the associated namespace\n  exists after loading. If require, records the load so any duplicate loads\n  can be skipped.";
    arrayOfObject24[8] = RT.keyword(null, "line");
    arrayOfObject24[9] = Integer.valueOf(5344);
    arrayOfObject24[10] = RT.keyword(null, "file");
    arrayOfObject24[11] = "clojure/core.clj";
    const__1920 = (AFn)RT.map(arrayOfObject24);
    const__1921 = (Var)RT.var("clojure.core", "load-lib");
    const__1922 = Integer.valueOf(5356);
    Object[] arrayOfObject27 = new Object[1];
    Object[] arrayOfObject28 = new Object[4];
    arrayOfObject28[0] = Symbol.intern(null, "prefix");
    arrayOfObject28[1] = Symbol.intern(null, "lib");
    arrayOfObject28[2] = Symbol.intern(null, "&");
    arrayOfObject28[3] = Symbol.intern(null, "options");
    arrayOfObject27[0] = RT.vector(arrayOfObject28);
    const__1923 = PersistentList.create(Arrays.asList(arrayOfObject27));
    Object[] arrayOfObject29 = new Object[12];
    arrayOfObject29[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject30 = new Object[1];
    Object[] arrayOfObject31 = new Object[4];
    arrayOfObject31[0] = Symbol.intern(null, "prefix");
    arrayOfObject31[1] = Symbol.intern(null, "lib");
    arrayOfObject31[2] = Symbol.intern(null, "&");
    arrayOfObject31[3] = Symbol.intern(null, "options");
    arrayOfObject30[0] = RT.vector(arrayOfObject31);
    arrayOfObject29[1] = PersistentList.create(Arrays.asList(arrayOfObject30));
    arrayOfObject29[2] = RT.keyword(null, "column");
    arrayOfObject29[3] = Integer.valueOf(1);
    arrayOfObject29[4] = RT.keyword(null, "private");
    arrayOfObject29[5] = Boolean.TRUE;
    arrayOfObject29[6] = RT.keyword(null, "doc");
    arrayOfObject29[7] = "Loads a lib with options";
    arrayOfObject29[8] = RT.keyword(null, "line");
    arrayOfObject29[9] = Integer.valueOf(5356);
    arrayOfObject29[10] = RT.keyword(null, "file");
    arrayOfObject29[11] = "clojure/core.clj";
    const__1924 = (AFn)RT.map(arrayOfObject29);
    const__1925 = (Var)RT.var("clojure.core", "load-libs");
    const__1926 = Integer.valueOf(5396);
    Object[] arrayOfObject32 = new Object[1];
    Object[] arrayOfObject33 = new Object[2];
    arrayOfObject33[0] = Symbol.intern(null, "&");
    arrayOfObject33[1] = Symbol.intern(null, "args");
    arrayOfObject32[0] = RT.vector(arrayOfObject33);
    const__1927 = PersistentList.create(Arrays.asList(arrayOfObject32));
    Object[] arrayOfObject34 = new Object[12];
    arrayOfObject34[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject35 = new Object[1];
    Object[] arrayOfObject36 = new Object[2];
    arrayOfObject36[0] = Symbol.intern(null, "&");
    arrayOfObject36[1] = Symbol.intern(null, "args");
    arrayOfObject35[0] = RT.vector(arrayOfObject36);
    arrayOfObject34[1] = PersistentList.create(Arrays.asList(arrayOfObject35));
    arrayOfObject34[2] = RT.keyword(null, "column");
    arrayOfObject34[3] = Integer.valueOf(1);
    arrayOfObject34[4] = RT.keyword(null, "private");
    arrayOfObject34[5] = Boolean.TRUE;
    arrayOfObject34[6] = RT.keyword(null, "doc");
    arrayOfObject34[7] = "Loads libs, interpreting libspecs, prefix lists, and flags for\n  forwarding to load-lib";
    arrayOfObject34[8] = RT.keyword(null, "line");
    arrayOfObject34[9] = Integer.valueOf(5396);
    arrayOfObject34[10] = RT.keyword(null, "file");
    arrayOfObject34[11] = "clojure/core.clj";
    const__1928 = (AFn)RT.map(arrayOfObject34);
    const__1929 = (Var)RT.var("clojure.core", "check-cyclic-dependency");
    const__1930 = Integer.valueOf(5419);
    Object[] arrayOfObject37 = new Object[1];
    Object[] arrayOfObject38 = new Object[1];
    arrayOfObject38[0] = Symbol.intern(null, "path");
    arrayOfObject37[0] = RT.vector(arrayOfObject38);
    const__1931 = PersistentList.create(Arrays.asList(arrayOfObject37));
    Object[] arrayOfObject39 = new Object[12];
    arrayOfObject39[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject40 = new Object[1];
    Object[] arrayOfObject41 = new Object[1];
    arrayOfObject41[0] = Symbol.intern(null, "path");
    arrayOfObject40[0] = RT.vector(arrayOfObject41);
    arrayOfObject39[1] = PersistentList.create(Arrays.asList(arrayOfObject40));
    arrayOfObject39[2] = RT.keyword(null, "column");
    arrayOfObject39[3] = Integer.valueOf(1);
    arrayOfObject39[4] = RT.keyword(null, "private");
    arrayOfObject39[5] = Boolean.TRUE;
    arrayOfObject39[6] = RT.keyword(null, "doc");
    arrayOfObject39[7] = "Detects and rejects non-trivial cyclic load dependencies. The\n  exception message shows the dependency chain with the cycle\n  highlighted. Ignores the trivial case of a file attempting to load\n  itself because that can occur when a gen-class'd class loads its\n  implementation.";
    arrayOfObject39[8] = RT.keyword(null, "line");
    arrayOfObject39[9] = Integer.valueOf(5419);
    arrayOfObject39[10] = RT.keyword(null, "file");
    arrayOfObject39[11] = "clojure/core.clj";
    const__1932 = (AFn)RT.map(arrayOfObject39);
    const__1933 = (Var)RT.var("clojure.core", "require");
    const__1934 = Integer.valueOf(5434);
    Object[] arrayOfObject42 = new Object[1];
    Object[] arrayOfObject43 = new Object[2];
    arrayOfObject43[0] = Symbol.intern(null, "&");
    arrayOfObject43[1] = Symbol.intern(null, "args");
    arrayOfObject42[0] = RT.vector(arrayOfObject43);
    const__1935 = PersistentList.create(Arrays.asList(arrayOfObject42));
    Object[] arrayOfObject44 = new Object[12];
    arrayOfObject44[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject45 = new Object[1];
    Object[] arrayOfObject46 = new Object[2];
    arrayOfObject46[0] = Symbol.intern(null, "&");
    arrayOfObject46[1] = Symbol.intern(null, "args");
    arrayOfObject45[0] = RT.vector(arrayOfObject46);
    arrayOfObject44[1] = PersistentList.create(Arrays.asList(arrayOfObject45));
    arrayOfObject44[2] = RT.keyword(null, "column");
    arrayOfObject44[3] = Integer.valueOf(1);
    arrayOfObject44[4] = RT.keyword(null, "added");
    arrayOfObject44[5] = "1.0";
    arrayOfObject44[6] = RT.keyword(null, "doc");
    arrayOfObject44[7] = "Loads libs, skipping any that are already loaded. Each argument is\n  either a libspec that identifies a lib, a prefix list that identifies\n  multiple libs whose names share a common prefix, or a flag that modifies\n  how all the identified libs are loaded. Use :require in the ns macro\n  in preference to calling this directly.\n\n  Libs\n\n  A 'lib' is a named set of resources in classpath whose contents define a\n  library of Clojure code. Lib names are symbols and each lib is associated\n  with a Clojure namespace and a Java package that share its name. A lib's\n  name also locates its root directory within classpath using Java's\n  package name to classpath-relative path mapping. All resources in a lib\n  should be contained in the directory structure under its root directory.\n  All definitions a lib makes should be in its associated namespace.\n\n  'require loads a lib by loading its root resource. The root resource path\n  is derived from the lib name in the following manner:\n  Consider a lib named by the symbol 'x.y.z; it has the root directory\n  <classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj. The root\n  resource should contain code to create the lib's namespace (usually by using\n  the ns macro) and load any additional lib resources.\n\n  Libspecs\n\n  A libspec is a lib name or a vector containing a lib name followed by\n  options expressed as sequential keywords and arguments.\n\n  Recognized options:\n  :as takes a symbol as its argument and makes that symbol an alias to the\n    lib's namespace in the current namespace.\n  :refer takes a list of symbols to refer from the namespace or the :all\n    keyword to bring in all public vars.\n\n  Prefix Lists\n\n  It's common for Clojure code to depend on several libs whose names have\n  the same prefix. When specifying libs, prefix lists can be used to reduce\n  repetition. A prefix list contains the shared prefix followed by libspecs\n  with the shared prefix removed from the lib names. After removing the\n  prefix, the names that remain must not contain any periods.\n\n  Flags\n\n  A flag is a keyword.\n  Recognized flags: :reload, :reload-all, :verbose\n  :reload forces loading of all the identified libs even if they are\n    already loaded\n  :reload-all implies :reload and also forces loading of all libs that the\n    identified libs directly or indirectly load via require or use\n  :verbose triggers printing information about each load, alias, and refer\n\n  Example:\n\n  The following would load the libraries clojure.zip and clojure.set\n  abbreviated as 's'.\n\n  (require '(clojure zip [set :as s]))";
    arrayOfObject44[8] = RT.keyword(null, "line");
    arrayOfObject44[9] = Integer.valueOf(5434);
    arrayOfObject44[10] = RT.keyword(null, "file");
    arrayOfObject44[11] = "clojure/core.clj";
    const__1936 = (AFn)RT.map(arrayOfObject44);
    const__1937 = (Var)RT.var("clojure.core", "use");
    const__1938 = Integer.valueOf(5498);
    Object[] arrayOfObject47 = new Object[1];
    Object[] arrayOfObject48 = new Object[2];
    arrayOfObject48[0] = Symbol.intern(null, "&");
    arrayOfObject48[1] = Symbol.intern(null, "args");
    arrayOfObject47[0] = RT.vector(arrayOfObject48);
    const__1939 = PersistentList.create(Arrays.asList(arrayOfObject47));
    Object[] arrayOfObject49 = new Object[12];
    arrayOfObject49[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject50 = new Object[1];
    Object[] arrayOfObject51 = new Object[2];
    arrayOfObject51[0] = Symbol.intern(null, "&");
    arrayOfObject51[1] = Symbol.intern(null, "args");
    arrayOfObject50[0] = RT.vector(arrayOfObject51);
    arrayOfObject49[1] = PersistentList.create(Arrays.asList(arrayOfObject50));
    arrayOfObject49[2] = RT.keyword(null, "column");
    arrayOfObject49[3] = Integer.valueOf(1);
    arrayOfObject49[4] = RT.keyword(null, "added");
    arrayOfObject49[5] = "1.0";
    arrayOfObject49[6] = RT.keyword(null, "doc");
    arrayOfObject49[7] = "Like 'require, but also refers to each lib's namespace using\n  clojure.core/refer. Use :use in the ns macro in preference to calling\n  this directly.\n\n  'use accepts additional options in libspecs: :exclude, :only, :rename.\n  The arguments and semantics for :exclude, :only, and :rename are the same\n  as those documented for clojure.core/refer.";
    arrayOfObject49[8] = RT.keyword(null, "line");
    arrayOfObject49[9] = Integer.valueOf(5498);
    arrayOfObject49[10] = RT.keyword(null, "file");
    arrayOfObject49[11] = "clojure/core.clj";
    const__1940 = (AFn)RT.map(arrayOfObject49);
    const__1941 = (Var)RT.var("clojure.core", "loaded-libs");
    const__1942 = Integer.valueOf(5509);
    Object[] arrayOfObject52 = new Object[1];
    arrayOfObject52[0] = RT.vector(new Object[0]);
    const__1943 = PersistentList.create(Arrays.asList(arrayOfObject52));
    Object[] arrayOfObject53 = new Object[12];
    arrayOfObject53[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject54 = new Object[1];
    arrayOfObject54[0] = RT.vector(new Object[0]);
    arrayOfObject53[1] = PersistentList.create(Arrays.asList(arrayOfObject54));
    arrayOfObject53[2] = RT.keyword(null, "column");
    arrayOfObject53[3] = Integer.valueOf(1);
    arrayOfObject53[4] = RT.keyword(null, "added");
    arrayOfObject53[5] = "1.0";
    arrayOfObject53[6] = RT.keyword(null, "doc");
    arrayOfObject53[7] = "Returns a sorted set of symbols naming the currently loaded libs";
    arrayOfObject53[8] = RT.keyword(null, "line");
    arrayOfObject53[9] = Integer.valueOf(5509);
    arrayOfObject53[10] = RT.keyword(null, "file");
    arrayOfObject53[11] = "clojure/core.clj";
    const__1944 = (AFn)RT.map(arrayOfObject53);
    const__1945 = Integer.valueOf(5514);
    Object[] arrayOfObject55 = new Object[1];
    Object[] arrayOfObject56 = new Object[2];
    arrayOfObject56[0] = Symbol.intern(null, "&");
    arrayOfObject56[1] = Symbol.intern(null, "paths");
    arrayOfObject55[0] = RT.vector(arrayOfObject56);
    const__1946 = PersistentList.create(Arrays.asList(arrayOfObject55));
    Object[] arrayOfObject57 = new Object[12];
    arrayOfObject57[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject58 = new Object[1];
    Object[] arrayOfObject59 = new Object[2];
    arrayOfObject59[0] = Symbol.intern(null, "&");
    arrayOfObject59[1] = Symbol.intern(null, "paths");
    arrayOfObject58[0] = RT.vector(arrayOfObject59);
    arrayOfObject57[1] = PersistentList.create(Arrays.asList(arrayOfObject58));
    arrayOfObject57[2] = RT.keyword(null, "column");
    arrayOfObject57[3] = Integer.valueOf(1);
    arrayOfObject57[4] = RT.keyword(null, "added");
    arrayOfObject57[5] = "1.0";
    arrayOfObject57[6] = RT.keyword(null, "doc");
    arrayOfObject57[7] = "Loads Clojure code from resources in classpath. A path is interpreted as\n  classpath-relative if it begins with a slash or relative to the root\n  directory for the current namespace otherwise.";
    arrayOfObject57[8] = RT.keyword(null, "line");
    arrayOfObject57[9] = Integer.valueOf(5514);
    arrayOfObject57[10] = RT.keyword(null, "file");
    arrayOfObject57[11] = "clojure/core.clj";
    const__1947 = (AFn)RT.map(arrayOfObject57);
    const__1948 = (Var)RT.var("clojure.core", "compile");
    const__1949 = Integer.valueOf(5532);
    Object[] arrayOfObject60 = new Object[1];
    Object[] arrayOfObject61 = new Object[1];
    arrayOfObject61[0] = Symbol.intern(null, "lib");
    arrayOfObject60[0] = RT.vector(arrayOfObject61);
    const__1950 = PersistentList.create(Arrays.asList(arrayOfObject60));
    Object[] arrayOfObject62 = new Object[12];
    arrayOfObject62[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject63 = new Object[1];
    Object[] arrayOfObject64 = new Object[1];
    arrayOfObject64[0] = Symbol.intern(null, "lib");
    arrayOfObject63[0] = RT.vector(arrayOfObject64);
    arrayOfObject62[1] = PersistentList.create(Arrays.asList(arrayOfObject63));
    arrayOfObject62[2] = RT.keyword(null, "column");
    arrayOfObject62[3] = Integer.valueOf(1);
    arrayOfObject62[4] = RT.keyword(null, "added");
    arrayOfObject62[5] = "1.0";
    arrayOfObject62[6] = RT.keyword(null, "doc");
    arrayOfObject62[7] = "Compiles the namespace named by the symbol lib into a set of\n  classfiles. The source for the lib must be in a proper\n  classpath-relative directory. The output files will go into the\n  directory specified by *compile-path*, and that directory too must\n  be in the classpath.";
    arrayOfObject62[8] = RT.keyword(null, "line");
    arrayOfObject62[9] = Integer.valueOf(5532);
    arrayOfObject62[10] = RT.keyword(null, "file");
    arrayOfObject62[11] = "clojure/core.clj";
    const__1951 = (AFn)RT.map(arrayOfObject62);
    const__1952 = (Var)RT.var("clojure.core", "get-in");
    const__1953 = Integer.valueOf(5546);
    Object[] arrayOfObject65 = new Object[2];
    Object[] arrayOfObject66 = new Object[2];
    arrayOfObject66[0] = Symbol.intern(null, "m");
    arrayOfObject66[1] = Symbol.intern(null, "ks");
    arrayOfObject65[0] = RT.vector(arrayOfObject66);
    Object[] arrayOfObject67 = new Object[3];
    arrayOfObject67[0] = Symbol.intern(null, "m");
    arrayOfObject67[1] = Symbol.intern(null, "ks");
    arrayOfObject67[2] = Symbol.intern(null, "not-found");
    arrayOfObject65[1] = RT.vector(arrayOfObject67);
    const__1954 = PersistentList.create(Arrays.asList(arrayOfObject65));
    Object[] arrayOfObject68 = new Object[14];
    arrayOfObject68[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject69 = new Object[2];
    Object[] arrayOfObject70 = new Object[2];
    arrayOfObject70[0] = Symbol.intern(null, "m");
    arrayOfObject70[1] = Symbol.intern(null, "ks");
    arrayOfObject69[0] = RT.vector(arrayOfObject70);
    Object[] arrayOfObject71 = new Object[3];
    arrayOfObject71[0] = Symbol.intern(null, "m");
    arrayOfObject71[1] = Symbol.intern(null, "ks");
    arrayOfObject71[2] = Symbol.intern(null, "not-found");
    arrayOfObject69[1] = RT.vector(arrayOfObject71);
    arrayOfObject68[1] = PersistentList.create(Arrays.asList(arrayOfObject69));
    arrayOfObject68[2] = RT.keyword(null, "column");
    arrayOfObject68[3] = Integer.valueOf(1);
    arrayOfObject68[4] = RT.keyword(null, "added");
    arrayOfObject68[5] = "1.2";
    arrayOfObject68[6] = RT.keyword(null, "static");
    arrayOfObject68[7] = Boolean.TRUE;
    arrayOfObject68[8] = RT.keyword(null, "doc");
    arrayOfObject68[9] = "Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key\n  is not present, or the not-found value if supplied.";
    arrayOfObject68[10] = RT.keyword(null, "line");
    arrayOfObject68[11] = Integer.valueOf(5546);
    arrayOfObject68[12] = RT.keyword(null, "file");
    arrayOfObject68[13] = "clojure/core.clj";
    const__1955 = (AFn)RT.map(arrayOfObject68);
    const__1956 = (Var)RT.var("clojure.core", "assoc-in");
    const__1957 = Integer.valueOf(5565);
    Object[] arrayOfObject72 = new Object[1];
    Object[] arrayOfObject73 = new Object[3];
    arrayOfObject73[0] = Symbol.intern(null, "m");
    Object[] arrayOfObject74 = new Object[3];
    arrayOfObject74[0] = Symbol.intern(null, "k");
    arrayOfObject74[1] = Symbol.intern(null, "&");
    arrayOfObject74[2] = Symbol.intern(null, "ks");
    arrayOfObject73[1] = RT.vector(arrayOfObject74);
    arrayOfObject73[2] = Symbol.intern(null, "v");
    arrayOfObject72[0] = RT.vector(arrayOfObject73);
    const__1958 = PersistentList.create(Arrays.asList(arrayOfObject72));
    Object[] arrayOfObject75 = new Object[14];
    arrayOfObject75[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject76 = new Object[1];
    Object[] arrayOfObject77 = new Object[3];
    arrayOfObject77[0] = Symbol.intern(null, "m");
    Object[] arrayOfObject78 = new Object[3];
    arrayOfObject78[0] = Symbol.intern(null, "k");
    arrayOfObject78[1] = Symbol.intern(null, "&");
    arrayOfObject78[2] = Symbol.intern(null, "ks");
    arrayOfObject77[1] = RT.vector(arrayOfObject78);
    arrayOfObject77[2] = Symbol.intern(null, "v");
    arrayOfObject76[0] = RT.vector(arrayOfObject77);
    arrayOfObject75[1] = PersistentList.create(Arrays.asList(arrayOfObject76));
    arrayOfObject75[2] = RT.keyword(null, "column");
    arrayOfObject75[3] = Integer.valueOf(1);
    arrayOfObject75[4] = RT.keyword(null, "added");
    arrayOfObject75[5] = "1.0";
    arrayOfObject75[6] = RT.keyword(null, "static");
    arrayOfObject75[7] = Boolean.TRUE;
    arrayOfObject75[8] = RT.keyword(null, "doc");
    arrayOfObject75[9] = "Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created.";
    arrayOfObject75[10] = RT.keyword(null, "line");
    arrayOfObject75[11] = Integer.valueOf(5565);
    arrayOfObject75[12] = RT.keyword(null, "file");
    arrayOfObject75[13] = "clojure/core.clj";
    const__1959 = (AFn)RT.map(arrayOfObject75);
    const__1960 = (Var)RT.var("clojure.core", "update-in");
    const__1961 = Integer.valueOf(5576);
    Object[] arrayOfObject79 = new Object[1];
    Object[] arrayOfObject80 = new Object[5];
    arrayOfObject80[0] = Symbol.intern(null, "m");
    Object[] arrayOfObject81 = new Object[3];
    arrayOfObject81[0] = Symbol.intern(null, "k");
    arrayOfObject81[1] = Symbol.intern(null, "&");
    arrayOfObject81[2] = Symbol.intern(null, "ks");
    arrayOfObject80[1] = RT.vector(arrayOfObject81);
    arrayOfObject80[2] = Symbol.intern(null, "f");
    arrayOfObject80[3] = Symbol.intern(null, "&");
    arrayOfObject80[4] = Symbol.intern(null, "args");
    arrayOfObject79[0] = RT.vector(arrayOfObject80);
    const__1962 = PersistentList.create(Arrays.asList(arrayOfObject79));
    Object[] arrayOfObject82 = new Object[14];
    arrayOfObject82[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject83 = new Object[1];
    Object[] arrayOfObject84 = new Object[5];
    arrayOfObject84[0] = Symbol.intern(null, "m");
    Object[] arrayOfObject85 = new Object[3];
    arrayOfObject85[0] = Symbol.intern(null, "k");
    arrayOfObject85[1] = Symbol.intern(null, "&");
    arrayOfObject85[2] = Symbol.intern(null, "ks");
    arrayOfObject84[1] = RT.vector(arrayOfObject85);
    arrayOfObject84[2] = Symbol.intern(null, "f");
    arrayOfObject84[3] = Symbol.intern(null, "&");
    arrayOfObject84[4] = Symbol.intern(null, "args");
    arrayOfObject83[0] = RT.vector(arrayOfObject84);
    arrayOfObject82[1] = PersistentList.create(Arrays.asList(arrayOfObject83));
    arrayOfObject82[2] = RT.keyword(null, "column");
    arrayOfObject82[3] = Integer.valueOf(1);
    arrayOfObject82[4] = RT.keyword(null, "added");
    arrayOfObject82[5] = "1.0";
    arrayOfObject82[6] = RT.keyword(null, "static");
    arrayOfObject82[7] = Boolean.TRUE;
    arrayOfObject82[8] = RT.keyword(null, "doc");
    arrayOfObject82[9] = "'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.";
    arrayOfObject82[10] = RT.keyword(null, "line");
    arrayOfObject82[11] = Integer.valueOf(5576);
    arrayOfObject82[12] = RT.keyword(null, "file");
    arrayOfObject82[13] = "clojure/core.clj";
    const__1963 = (AFn)RT.map(arrayOfObject82);
    const__1964 = (Var)RT.var("clojure.core", "empty?");
    const__1965 = Integer.valueOf(5590);
    Object[] arrayOfObject86 = new Object[1];
    Object[] arrayOfObject87 = new Object[1];
    arrayOfObject87[0] = Symbol.intern(null, "coll");
    arrayOfObject86[0] = RT.vector(arrayOfObject87);
    const__1966 = PersistentList.create(Arrays.asList(arrayOfObject86));
    Object[] arrayOfObject88 = new Object[14];
    arrayOfObject88[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject89 = new Object[1];
    Object[] arrayOfObject90 = new Object[1];
    arrayOfObject90[0] = Symbol.intern(null, "coll");
    arrayOfObject89[0] = RT.vector(arrayOfObject90);
    arrayOfObject88[1] = PersistentList.create(Arrays.asList(arrayOfObject89));
    arrayOfObject88[2] = RT.keyword(null, "column");
    arrayOfObject88[3] = Integer.valueOf(1);
    arrayOfObject88[4] = RT.keyword(null, "added");
    arrayOfObject88[5] = "1.0";
    arrayOfObject88[6] = RT.keyword(null, "static");
    arrayOfObject88[7] = Boolean.TRUE;
    arrayOfObject88[8] = RT.keyword(null, "doc");
    arrayOfObject88[9] = "Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))";
    arrayOfObject88[10] = RT.keyword(null, "line");
    arrayOfObject88[11] = Integer.valueOf(5590);
    arrayOfObject88[12] = RT.keyword(null, "file");
    arrayOfObject88[13] = "clojure/core.clj";
    const__1967 = (AFn)RT.map(arrayOfObject88);
    const__1968 = (Var)RT.var("clojure.core", "coll?");
    const__1969 = Integer.valueOf(5597);
    Object[] arrayOfObject91 = new Object[1];
    Object[] arrayOfObject92 = new Object[1];
    arrayOfObject92[0] = Symbol.intern(null, "x");
    arrayOfObject91[0] = RT.vector(arrayOfObject92);
    const__1970 = PersistentList.create(Arrays.asList(arrayOfObject91));
    Object[] arrayOfObject93 = new Object[14];
    arrayOfObject93[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject94 = new Object[1];
    Object[] arrayOfObject95 = new Object[1];
    arrayOfObject95[0] = Symbol.intern(null, "x");
    arrayOfObject94[0] = RT.vector(arrayOfObject95);
    arrayOfObject93[1] = PersistentList.create(Arrays.asList(arrayOfObject94));
    arrayOfObject93[2] = RT.keyword(null, "column");
    arrayOfObject93[3] = Integer.valueOf(1);
    arrayOfObject93[4] = RT.keyword(null, "added");
    arrayOfObject93[5] = "1.0";
    arrayOfObject93[6] = RT.keyword(null, "static");
    arrayOfObject93[7] = Boolean.TRUE;
    arrayOfObject93[8] = RT.keyword(null, "doc");
    arrayOfObject93[9] = "Returns true if x implements IPersistentCollection";
    arrayOfObject93[10] = RT.keyword(null, "line");
    arrayOfObject93[11] = Integer.valueOf(5597);
    arrayOfObject93[12] = RT.keyword(null, "file");
    arrayOfObject93[13] = "clojure/core.clj";
    const__1971 = (AFn)RT.map(arrayOfObject93);
    const__1972 = (Var)RT.var("clojure.core", "list?");
    const__1973 = Integer.valueOf(5603);
    Object[] arrayOfObject96 = new Object[1];
    Object[] arrayOfObject97 = new Object[1];
    arrayOfObject97[0] = Symbol.intern(null, "x");
    arrayOfObject96[0] = RT.vector(arrayOfObject97);
    const__1974 = PersistentList.create(Arrays.asList(arrayOfObject96));
    Object[] arrayOfObject98 = new Object[14];
    arrayOfObject98[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject99 = new Object[1];
    Object[] arrayOfObject100 = new Object[1];
    arrayOfObject100[0] = Symbol.intern(null, "x");
    arrayOfObject99[0] = RT.vector(arrayOfObject100);
    arrayOfObject98[1] = PersistentList.create(Arrays.asList(arrayOfObject99));
    arrayOfObject98[2] = RT.keyword(null, "column");
    arrayOfObject98[3] = Integer.valueOf(1);
    arrayOfObject98[4] = RT.keyword(null, "added");
    arrayOfObject98[5] = "1.0";
    arrayOfObject98[6] = RT.keyword(null, "static");
    arrayOfObject98[7] = Boolean.TRUE;
    arrayOfObject98[8] = RT.keyword(null, "doc");
    arrayOfObject98[9] = "Returns true if x implements IPersistentList";
    arrayOfObject98[10] = RT.keyword(null, "line");
    arrayOfObject98[11] = Integer.valueOf(5603);
    arrayOfObject98[12] = RT.keyword(null, "file");
    arrayOfObject98[13] = "clojure/core.clj";
    const__1975 = (AFn)RT.map(arrayOfObject98);
    const__1976 = (Var)RT.var("clojure.core", "set?");
    const__1977 = Integer.valueOf(5609);
    Object[] arrayOfObject101 = new Object[1];
    Object[] arrayOfObject102 = new Object[1];
    arrayOfObject102[0] = Symbol.intern(null, "x");
    arrayOfObject101[0] = RT.vector(arrayOfObject102);
    const__1978 = PersistentList.create(Arrays.asList(arrayOfObject101));
    Object[] arrayOfObject103 = new Object[14];
    arrayOfObject103[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject104 = new Object[1];
    Object[] arrayOfObject105 = new Object[1];
    arrayOfObject105[0] = Symbol.intern(null, "x");
    arrayOfObject104[0] = RT.vector(arrayOfObject105);
    arrayOfObject103[1] = PersistentList.create(Arrays.asList(arrayOfObject104));
    arrayOfObject103[2] = RT.keyword(null, "column");
    arrayOfObject103[3] = Integer.valueOf(1);
    arrayOfObject103[4] = RT.keyword(null, "added");
    arrayOfObject103[5] = "1.0";
    arrayOfObject103[6] = RT.keyword(null, "static");
    arrayOfObject103[7] = Boolean.TRUE;
    arrayOfObject103[8] = RT.keyword(null, "doc");
    arrayOfObject103[9] = "Returns true if x implements IPersistentSet";
    arrayOfObject103[10] = RT.keyword(null, "line");
    arrayOfObject103[11] = Integer.valueOf(5609);
    arrayOfObject103[12] = RT.keyword(null, "file");
    arrayOfObject103[13] = "clojure/core.clj";
    const__1979 = (AFn)RT.map(arrayOfObject103);
    const__1980 = (Var)RT.var("clojure.core", "ifn?");
    const__1981 = Integer.valueOf(5615);
    Object[] arrayOfObject106 = new Object[1];
    Object[] arrayOfObject107 = new Object[1];
    arrayOfObject107[0] = Symbol.intern(null, "x");
    arrayOfObject106[0] = RT.vector(arrayOfObject107);
    const__1982 = PersistentList.create(Arrays.asList(arrayOfObject106));
    Object[] arrayOfObject108 = new Object[14];
    arrayOfObject108[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject109 = new Object[1];
    Object[] arrayOfObject110 = new Object[1];
    arrayOfObject110[0] = Symbol.intern(null, "x");
    arrayOfObject109[0] = RT.vector(arrayOfObject110);
    arrayOfObject108[1] = PersistentList.create(Arrays.asList(arrayOfObject109));
    arrayOfObject108[2] = RT.keyword(null, "column");
    arrayOfObject108[3] = Integer.valueOf(1);
    arrayOfObject108[4] = RT.keyword(null, "added");
    arrayOfObject108[5] = "1.0";
    arrayOfObject108[6] = RT.keyword(null, "static");
    arrayOfObject108[7] = Boolean.TRUE;
    arrayOfObject108[8] = RT.keyword(null, "doc");
    arrayOfObject108[9] = "Returns true if x implements IFn. Note that many data structures\n  (e.g. sets and maps) implement IFn";
    arrayOfObject108[10] = RT.keyword(null, "line");
    arrayOfObject108[11] = Integer.valueOf(5615);
    arrayOfObject108[12] = RT.keyword(null, "file");
    arrayOfObject108[13] = "clojure/core.clj";
    const__1983 = (AFn)RT.map(arrayOfObject108);
    const__1984 = (Var)RT.var("clojure.core", "fn?");
    const__1985 = Integer.valueOf(5622);
    Object[] arrayOfObject111 = new Object[1];
    Object[] arrayOfObject112 = new Object[1];
    arrayOfObject112[0] = Symbol.intern(null, "x");
    arrayOfObject111[0] = RT.vector(arrayOfObject112);
    const__1986 = PersistentList.create(Arrays.asList(arrayOfObject111));
    Object[] arrayOfObject113 = new Object[14];
    arrayOfObject113[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject114 = new Object[1];
    Object[] arrayOfObject115 = new Object[1];
    arrayOfObject115[0] = Symbol.intern(null, "x");
    arrayOfObject114[0] = RT.vector(arrayOfObject115);
    arrayOfObject113[1] = PersistentList.create(Arrays.asList(arrayOfObject114));
    arrayOfObject113[2] = RT.keyword(null, "column");
    arrayOfObject113[3] = Integer.valueOf(1);
    arrayOfObject113[4] = RT.keyword(null, "added");
    arrayOfObject113[5] = "1.0";
    arrayOfObject113[6] = RT.keyword(null, "static");
    arrayOfObject113[7] = Boolean.TRUE;
    arrayOfObject113[8] = RT.keyword(null, "doc");
    arrayOfObject113[9] = "Returns true if x implements Fn, i.e. is an object created via fn.";
    arrayOfObject113[10] = RT.keyword(null, "line");
    arrayOfObject113[11] = Integer.valueOf(5622);
    arrayOfObject113[12] = RT.keyword(null, "file");
    arrayOfObject113[13] = "clojure/core.clj";
    const__1987 = (AFn)RT.map(arrayOfObject113);
    const__1988 = (Var)RT.var("clojure.core", "associative?");
    const__1989 = Integer.valueOf(5629);
    Object[] arrayOfObject116 = new Object[1];
    Object[] arrayOfObject117 = new Object[1];
    arrayOfObject117[0] = Symbol.intern(null, "coll");
    arrayOfObject116[0] = RT.vector(arrayOfObject117);
    const__1990 = PersistentList.create(Arrays.asList(arrayOfObject116));
    Object[] arrayOfObject118 = new Object[14];
    arrayOfObject118[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject119 = new Object[1];
    Object[] arrayOfObject120 = new Object[1];
    arrayOfObject120[0] = Symbol.intern(null, "coll");
    arrayOfObject119[0] = RT.vector(arrayOfObject120);
    arrayOfObject118[1] = PersistentList.create(Arrays.asList(arrayOfObject119));
    arrayOfObject118[2] = RT.keyword(null, "column");
    arrayOfObject118[3] = Integer.valueOf(1);
    arrayOfObject118[4] = RT.keyword(null, "added");
    arrayOfObject118[5] = "1.0";
    arrayOfObject118[6] = RT.keyword(null, "static");
    arrayOfObject118[7] = Boolean.TRUE;
    arrayOfObject118[8] = RT.keyword(null, "doc");
    arrayOfObject118[9] = "Returns true if coll implements Associative";
    arrayOfObject118[10] = RT.keyword(null, "line");
    arrayOfObject118[11] = Integer.valueOf(5629);
    arrayOfObject118[12] = RT.keyword(null, "file");
    arrayOfObject118[13] = "clojure/core.clj";
    const__1991 = (AFn)RT.map(arrayOfObject118);
    const__1992 = (Var)RT.var("clojure.core", "sequential?");
    const__1993 = Integer.valueOf(5635);
    Object[] arrayOfObject121 = new Object[1];
    Object[] arrayOfObject122 = new Object[1];
    arrayOfObject122[0] = Symbol.intern(null, "coll");
    arrayOfObject121[0] = RT.vector(arrayOfObject122);
    const__1994 = PersistentList.create(Arrays.asList(arrayOfObject121));
    Object[] arrayOfObject123 = new Object[14];
    arrayOfObject123[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject124 = new Object[1];
    Object[] arrayOfObject125 = new Object[1];
    arrayOfObject125[0] = Symbol.intern(null, "coll");
    arrayOfObject124[0] = RT.vector(arrayOfObject125);
    arrayOfObject123[1] = PersistentList.create(Arrays.asList(arrayOfObject124));
    arrayOfObject123[2] = RT.keyword(null, "column");
    arrayOfObject123[3] = Integer.valueOf(1);
    arrayOfObject123[4] = RT.keyword(null, "added");
    arrayOfObject123[5] = "1.0";
    arrayOfObject123[6] = RT.keyword(null, "static");
    arrayOfObject123[7] = Boolean.TRUE;
    arrayOfObject123[8] = RT.keyword(null, "doc");
    arrayOfObject123[9] = "Returns true if coll implements Sequential";
    arrayOfObject123[10] = RT.keyword(null, "line");
    arrayOfObject123[11] = Integer.valueOf(5635);
    arrayOfObject123[12] = RT.keyword(null, "file");
    arrayOfObject123[13] = "clojure/core.clj";
    const__1995 = (AFn)RT.map(arrayOfObject123);
    const__1996 = (Var)RT.var("clojure.core", "sorted?");
    const__1997 = Integer.valueOf(5641);
    Object[] arrayOfObject126 = new Object[1];
    Object[] arrayOfObject127 = new Object[1];
    arrayOfObject127[0] = Symbol.intern(null, "coll");
    arrayOfObject126[0] = RT.vector(arrayOfObject127);
    const__1998 = PersistentList.create(Arrays.asList(arrayOfObject126));
    Object[] arrayOfObject128 = new Object[14];
    arrayOfObject128[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject129 = new Object[1];
    Object[] arrayOfObject130 = new Object[1];
    arrayOfObject130[0] = Symbol.intern(null, "coll");
    arrayOfObject129[0] = RT.vector(arrayOfObject130);
    arrayOfObject128[1] = PersistentList.create(Arrays.asList(arrayOfObject129));
    arrayOfObject128[2] = RT.keyword(null, "column");
    arrayOfObject128[3] = Integer.valueOf(1);
    arrayOfObject128[4] = RT.keyword(null, "added");
    arrayOfObject128[5] = "1.0";
    arrayOfObject128[6] = RT.keyword(null, "static");
    arrayOfObject128[7] = Boolean.TRUE;
    arrayOfObject128[8] = RT.keyword(null, "doc");
    arrayOfObject128[9] = "Returns true if coll implements Sorted";
    arrayOfObject128[10] = RT.keyword(null, "line");
    arrayOfObject128[11] = Integer.valueOf(5641);
    arrayOfObject128[12] = RT.keyword(null, "file");
    arrayOfObject128[13] = "clojure/core.clj";
    const__1999 = (AFn)RT.map(arrayOfObject128);
  }

  public static void __init2()
  {
    Object[] arrayOfObject1 = new Object[1];
    Object[] arrayOfObject2 = new Object[1];
    arrayOfObject2[0] = Symbol.intern(null, "x");
    arrayOfObject1[0] = RT.vector(arrayOfObject2);
    const__200 = PersistentList.create(Arrays.asList(arrayOfObject1));
    Object[] arrayOfObject3 = new Object[16];
    arrayOfObject3[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject4 = new Object[1];
    Object[] arrayOfObject5 = new Object[1];
    arrayOfObject5[0] = Symbol.intern(null, "x");
    arrayOfObject4[0] = RT.vector(arrayOfObject5);
    arrayOfObject3[1] = PersistentList.create(Arrays.asList(arrayOfObject4));
    arrayOfObject3[2] = RT.keyword(null, "column");
    arrayOfObject3[3] = Integer.valueOf(1);
    arrayOfObject3[4] = RT.keyword(null, "added");
    arrayOfObject3[5] = "1.0";
    arrayOfObject3[6] = RT.keyword(null, "static");
    arrayOfObject3[7] = Boolean.TRUE;
    arrayOfObject3[8] = RT.keyword(null, "doc");
    arrayOfObject3[9] = "Returns true if x is logical false, false otherwise.";
    arrayOfObject3[10] = RT.keyword(null, "line");
    arrayOfObject3[11] = Integer.valueOf(497);
    arrayOfObject3[12] = RT.keyword(null, "file");
    arrayOfObject3[13] = "clojure/core.clj";
    arrayOfObject3[14] = RT.keyword(null, "tag");
    arrayOfObject3[15] = Class.forName("java.lang.Boolean");
    const__201 = (AFn)RT.map(arrayOfObject3);
    const__202 = (Var)RT.var("clojure.core", "str");
    const__203 = Integer.valueOf(504);
    Object[] arrayOfObject6 = new Object[3];
    IObj localIObj1 = (IObj)RT.vector(new Object[0]);
    Object[] arrayOfObject7 = new Object[2];
    arrayOfObject7[0] = RT.keyword(null, "tag");
    arrayOfObject7[1] = Symbol.intern(null, "String");
    arrayOfObject6[0] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject7));
    Object[] arrayOfObject8 = new Object[1];
    IObj localIObj2 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject9 = new Object[2];
    arrayOfObject9[0] = RT.keyword(null, "tag");
    arrayOfObject9[1] = Symbol.intern(null, "Object");
    arrayOfObject8[0] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject9));
    IObj localIObj3 = (IObj)RT.vector(arrayOfObject8);
    Object[] arrayOfObject10 = new Object[2];
    arrayOfObject10[0] = RT.keyword(null, "tag");
    arrayOfObject10[1] = Symbol.intern(null, "String");
    arrayOfObject6[1] = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject10));
    Object[] arrayOfObject11 = new Object[3];
    arrayOfObject11[0] = Symbol.intern(null, "x");
    arrayOfObject11[1] = Symbol.intern(null, "&");
    arrayOfObject11[2] = Symbol.intern(null, "ys");
    IObj localIObj4 = (IObj)RT.vector(arrayOfObject11);
    Object[] arrayOfObject12 = new Object[2];
    arrayOfObject12[0] = RT.keyword(null, "tag");
    arrayOfObject12[1] = Symbol.intern(null, "String");
    arrayOfObject6[2] = localIObj4.withMeta((IPersistentMap)RT.map(arrayOfObject12));
    const__204 = PersistentList.create(Arrays.asList(arrayOfObject6));
    const__205 = Class.forName("java.lang.String");
    Object[] arrayOfObject13 = new Object[16];
    arrayOfObject13[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject14 = new Object[3];
    IObj localIObj5 = (IObj)RT.vector(new Object[0]);
    Object[] arrayOfObject15 = new Object[2];
    arrayOfObject15[0] = RT.keyword(null, "tag");
    arrayOfObject15[1] = Symbol.intern(null, "String");
    arrayOfObject14[0] = localIObj5.withMeta((IPersistentMap)RT.map(arrayOfObject15));
    Object[] arrayOfObject16 = new Object[1];
    IObj localIObj6 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject17 = new Object[2];
    arrayOfObject17[0] = RT.keyword(null, "tag");
    arrayOfObject17[1] = Symbol.intern(null, "Object");
    arrayOfObject16[0] = localIObj6.withMeta((IPersistentMap)RT.map(arrayOfObject17));
    IObj localIObj7 = (IObj)RT.vector(arrayOfObject16);
    Object[] arrayOfObject18 = new Object[2];
    arrayOfObject18[0] = RT.keyword(null, "tag");
    arrayOfObject18[1] = Symbol.intern(null, "String");
    arrayOfObject14[1] = localIObj7.withMeta((IPersistentMap)RT.map(arrayOfObject18));
    Object[] arrayOfObject19 = new Object[3];
    arrayOfObject19[0] = Symbol.intern(null, "x");
    arrayOfObject19[1] = Symbol.intern(null, "&");
    arrayOfObject19[2] = Symbol.intern(null, "ys");
    IObj localIObj8 = (IObj)RT.vector(arrayOfObject19);
    Object[] arrayOfObject20 = new Object[2];
    arrayOfObject20[0] = RT.keyword(null, "tag");
    arrayOfObject20[1] = Symbol.intern(null, "String");
    arrayOfObject14[2] = localIObj8.withMeta((IPersistentMap)RT.map(arrayOfObject20));
    arrayOfObject13[1] = PersistentList.create(Arrays.asList(arrayOfObject14));
    arrayOfObject13[2] = RT.keyword(null, "column");
    arrayOfObject13[3] = Integer.valueOf(1);
    arrayOfObject13[4] = RT.keyword(null, "added");
    arrayOfObject13[5] = "1.0";
    arrayOfObject13[6] = RT.keyword(null, "static");
    arrayOfObject13[7] = Boolean.TRUE;
    arrayOfObject13[8] = RT.keyword(null, "doc");
    arrayOfObject13[9] = "With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.";
    arrayOfObject13[10] = RT.keyword(null, "line");
    arrayOfObject13[11] = Integer.valueOf(504);
    arrayOfObject13[12] = RT.keyword(null, "file");
    arrayOfObject13[13] = "clojure/core.clj";
    arrayOfObject13[14] = RT.keyword(null, "tag");
    arrayOfObject13[15] = Class.forName("java.lang.String");
    const__206 = (AFn)RT.map(arrayOfObject13);
    const__207 = (Var)RT.var("clojure.core", "symbol?");
    const__208 = Integer.valueOf(522);
    Object[] arrayOfObject21 = new Object[1];
    Object[] arrayOfObject22 = new Object[1];
    arrayOfObject22[0] = Symbol.intern(null, "x");
    arrayOfObject21[0] = RT.vector(arrayOfObject22);
    const__209 = PersistentList.create(Arrays.asList(arrayOfObject21));
    Object[] arrayOfObject23 = new Object[14];
    arrayOfObject23[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject24 = new Object[1];
    Object[] arrayOfObject25 = new Object[1];
    arrayOfObject25[0] = Symbol.intern(null, "x");
    arrayOfObject24[0] = RT.vector(arrayOfObject25);
    arrayOfObject23[1] = PersistentList.create(Arrays.asList(arrayOfObject24));
    arrayOfObject23[2] = RT.keyword(null, "column");
    arrayOfObject23[3] = Integer.valueOf(1);
    arrayOfObject23[4] = RT.keyword(null, "added");
    arrayOfObject23[5] = "1.0";
    arrayOfObject23[6] = RT.keyword(null, "static");
    arrayOfObject23[7] = Boolean.TRUE;
    arrayOfObject23[8] = RT.keyword(null, "doc");
    arrayOfObject23[9] = "Return true if x is a Symbol";
    arrayOfObject23[10] = RT.keyword(null, "line");
    arrayOfObject23[11] = Integer.valueOf(522);
    arrayOfObject23[12] = RT.keyword(null, "file");
    arrayOfObject23[13] = "clojure/core.clj";
    const__210 = (AFn)RT.map(arrayOfObject23);
    const__211 = (Var)RT.var("clojure.core", "keyword?");
    const__212 = Integer.valueOf(528);
    Object[] arrayOfObject26 = new Object[1];
    Object[] arrayOfObject27 = new Object[1];
    arrayOfObject27[0] = Symbol.intern(null, "x");
    arrayOfObject26[0] = RT.vector(arrayOfObject27);
    const__213 = PersistentList.create(Arrays.asList(arrayOfObject26));
    Object[] arrayOfObject28 = new Object[14];
    arrayOfObject28[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject29 = new Object[1];
    Object[] arrayOfObject30 = new Object[1];
    arrayOfObject30[0] = Symbol.intern(null, "x");
    arrayOfObject29[0] = RT.vector(arrayOfObject30);
    arrayOfObject28[1] = PersistentList.create(Arrays.asList(arrayOfObject29));
    arrayOfObject28[2] = RT.keyword(null, "column");
    arrayOfObject28[3] = Integer.valueOf(1);
    arrayOfObject28[4] = RT.keyword(null, "added");
    arrayOfObject28[5] = "1.0";
    arrayOfObject28[6] = RT.keyword(null, "static");
    arrayOfObject28[7] = Boolean.TRUE;
    arrayOfObject28[8] = RT.keyword(null, "doc");
    arrayOfObject28[9] = "Return true if x is a Keyword";
    arrayOfObject28[10] = RT.keyword(null, "line");
    arrayOfObject28[11] = Integer.valueOf(528);
    arrayOfObject28[12] = RT.keyword(null, "file");
    arrayOfObject28[13] = "clojure/core.clj";
    const__214 = (AFn)RT.map(arrayOfObject28);
    const__215 = (Var)RT.var("clojure.core", "symbol");
    const__216 = Integer.valueOf(534);
    Object[] arrayOfObject31 = new Object[2];
    Object[] arrayOfObject32 = new Object[1];
    arrayOfObject32[0] = Symbol.intern(null, "name");
    arrayOfObject31[0] = RT.vector(arrayOfObject32);
    Object[] arrayOfObject33 = new Object[2];
    arrayOfObject33[0] = Symbol.intern(null, "ns");
    arrayOfObject33[1] = Symbol.intern(null, "name");
    arrayOfObject31[1] = RT.vector(arrayOfObject33);
    const__217 = PersistentList.create(Arrays.asList(arrayOfObject31));
    const__218 = Class.forName("clojure.lang.Symbol");
    Object[] arrayOfObject34 = new Object[16];
    arrayOfObject34[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject35 = new Object[2];
    Object[] arrayOfObject36 = new Object[1];
    arrayOfObject36[0] = Symbol.intern(null, "name");
    arrayOfObject35[0] = RT.vector(arrayOfObject36);
    Object[] arrayOfObject37 = new Object[2];
    arrayOfObject37[0] = Symbol.intern(null, "ns");
    arrayOfObject37[1] = Symbol.intern(null, "name");
    arrayOfObject35[1] = RT.vector(arrayOfObject37);
    arrayOfObject34[1] = PersistentList.create(Arrays.asList(arrayOfObject35));
    arrayOfObject34[2] = RT.keyword(null, "column");
    arrayOfObject34[3] = Integer.valueOf(1);
    arrayOfObject34[4] = RT.keyword(null, "added");
    arrayOfObject34[5] = "1.0";
    arrayOfObject34[6] = RT.keyword(null, "static");
    arrayOfObject34[7] = Boolean.TRUE;
    arrayOfObject34[8] = RT.keyword(null, "doc");
    arrayOfObject34[9] = "Returns a Symbol with the given namespace and name.";
    arrayOfObject34[10] = RT.keyword(null, "line");
    arrayOfObject34[11] = Integer.valueOf(534);
    arrayOfObject34[12] = RT.keyword(null, "file");
    arrayOfObject34[13] = "clojure/core.clj";
    arrayOfObject34[14] = RT.keyword(null, "tag");
    arrayOfObject34[15] = Class.forName("clojure.lang.Symbol");
    const__219 = (AFn)RT.map(arrayOfObject34);
    const__220 = (Var)RT.var("clojure.core", "gensym");
    const__221 = Integer.valueOf(542);
    Object[] arrayOfObject38 = new Object[2];
    arrayOfObject38[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject39 = new Object[1];
    arrayOfObject39[0] = Symbol.intern(null, "prefix-string");
    arrayOfObject38[1] = RT.vector(arrayOfObject39);
    const__222 = PersistentList.create(Arrays.asList(arrayOfObject38));
    Object[] arrayOfObject40 = new Object[14];
    arrayOfObject40[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject41 = new Object[2];
    arrayOfObject41[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject42 = new Object[1];
    arrayOfObject42[0] = Symbol.intern(null, "prefix-string");
    arrayOfObject41[1] = RT.vector(arrayOfObject42);
    arrayOfObject40[1] = PersistentList.create(Arrays.asList(arrayOfObject41));
    arrayOfObject40[2] = RT.keyword(null, "column");
    arrayOfObject40[3] = Integer.valueOf(1);
    arrayOfObject40[4] = RT.keyword(null, "added");
    arrayOfObject40[5] = "1.0";
    arrayOfObject40[6] = RT.keyword(null, "static");
    arrayOfObject40[7] = Boolean.TRUE;
    arrayOfObject40[8] = RT.keyword(null, "doc");
    arrayOfObject40[9] = "Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.";
    arrayOfObject40[10] = RT.keyword(null, "line");
    arrayOfObject40[11] = Integer.valueOf(542);
    arrayOfObject40[12] = RT.keyword(null, "file");
    arrayOfObject40[13] = "clojure/core.clj";
    const__223 = (AFn)RT.map(arrayOfObject40);
    const__224 = (Var)RT.var("clojure.core", "cond");
    const__225 = Integer.valueOf(551);
    Object[] arrayOfObject43 = new Object[1];
    Object[] arrayOfObject44 = new Object[2];
    arrayOfObject44[0] = Symbol.intern(null, "&");
    arrayOfObject44[1] = Symbol.intern(null, "clauses");
    arrayOfObject43[0] = RT.vector(arrayOfObject44);
    const__226 = PersistentList.create(Arrays.asList(arrayOfObject43));
    Object[] arrayOfObject45 = new Object[12];
    arrayOfObject45[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject46 = new Object[1];
    Object[] arrayOfObject47 = new Object[2];
    arrayOfObject47[0] = Symbol.intern(null, "&");
    arrayOfObject47[1] = Symbol.intern(null, "clauses");
    arrayOfObject46[0] = RT.vector(arrayOfObject47);
    arrayOfObject45[1] = PersistentList.create(Arrays.asList(arrayOfObject46));
    arrayOfObject45[2] = RT.keyword(null, "column");
    arrayOfObject45[3] = Integer.valueOf(1);
    arrayOfObject45[4] = RT.keyword(null, "added");
    arrayOfObject45[5] = "1.0";
    arrayOfObject45[6] = RT.keyword(null, "doc");
    arrayOfObject45[7] = "Takes a set of test/expr pairs. It evaluates each test one at a\n  time.  If a test returns logical true, cond evaluates and returns\n  the value of the corresponding expr and doesn't evaluate any of the\n  other tests or exprs. (cond) returns nil.";
    arrayOfObject45[8] = RT.keyword(null, "line");
    arrayOfObject45[9] = Integer.valueOf(551);
    arrayOfObject45[10] = RT.keyword(null, "file");
    arrayOfObject45[11] = "clojure/core.clj";
    const__227 = (AFn)RT.map(arrayOfObject45);
    const__228 = (Var)RT.var("clojure.core", "keyword");
    const__229 = Integer.valueOf(566);
    Object[] arrayOfObject48 = new Object[2];
    Object[] arrayOfObject49 = new Object[1];
    arrayOfObject49[0] = Symbol.intern(null, "name");
    arrayOfObject48[0] = RT.vector(arrayOfObject49);
    Object[] arrayOfObject50 = new Object[2];
    arrayOfObject50[0] = Symbol.intern(null, "ns");
    arrayOfObject50[1] = Symbol.intern(null, "name");
    arrayOfObject48[1] = RT.vector(arrayOfObject50);
    const__230 = PersistentList.create(Arrays.asList(arrayOfObject48));
    const__231 = Class.forName("clojure.lang.Keyword");
    Object[] arrayOfObject51 = new Object[16];
    arrayOfObject51[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject52 = new Object[2];
    Object[] arrayOfObject53 = new Object[1];
    arrayOfObject53[0] = Symbol.intern(null, "name");
    arrayOfObject52[0] = RT.vector(arrayOfObject53);
    Object[] arrayOfObject54 = new Object[2];
    arrayOfObject54[0] = Symbol.intern(null, "ns");
    arrayOfObject54[1] = Symbol.intern(null, "name");
    arrayOfObject52[1] = RT.vector(arrayOfObject54);
    arrayOfObject51[1] = PersistentList.create(Arrays.asList(arrayOfObject52));
    arrayOfObject51[2] = RT.keyword(null, "column");
    arrayOfObject51[3] = Integer.valueOf(1);
    arrayOfObject51[4] = RT.keyword(null, "added");
    arrayOfObject51[5] = "1.0";
    arrayOfObject51[6] = RT.keyword(null, "static");
    arrayOfObject51[7] = Boolean.TRUE;
    arrayOfObject51[8] = RT.keyword(null, "doc");
    arrayOfObject51[9] = "Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.";
    arrayOfObject51[10] = RT.keyword(null, "line");
    arrayOfObject51[11] = Integer.valueOf(566);
    arrayOfObject51[12] = RT.keyword(null, "file");
    arrayOfObject51[13] = "clojure/core.clj";
    arrayOfObject51[14] = RT.keyword(null, "tag");
    arrayOfObject51[15] = Class.forName("clojure.lang.Keyword");
    const__232 = (AFn)RT.map(arrayOfObject51);
    const__233 = (Var)RT.var("clojure.core", "find-keyword");
    const__234 = Integer.valueOf(577);
    Object[] arrayOfObject55 = new Object[2];
    Object[] arrayOfObject56 = new Object[1];
    arrayOfObject56[0] = Symbol.intern(null, "name");
    arrayOfObject55[0] = RT.vector(arrayOfObject56);
    Object[] arrayOfObject57 = new Object[2];
    arrayOfObject57[0] = Symbol.intern(null, "ns");
    arrayOfObject57[1] = Symbol.intern(null, "name");
    arrayOfObject55[1] = RT.vector(arrayOfObject57);
    const__235 = PersistentList.create(Arrays.asList(arrayOfObject55));
    Object[] arrayOfObject58 = new Object[16];
    arrayOfObject58[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject59 = new Object[2];
    Object[] arrayOfObject60 = new Object[1];
    arrayOfObject60[0] = Symbol.intern(null, "name");
    arrayOfObject59[0] = RT.vector(arrayOfObject60);
    Object[] arrayOfObject61 = new Object[2];
    arrayOfObject61[0] = Symbol.intern(null, "ns");
    arrayOfObject61[1] = Symbol.intern(null, "name");
    arrayOfObject59[1] = RT.vector(arrayOfObject61);
    arrayOfObject58[1] = PersistentList.create(Arrays.asList(arrayOfObject59));
    arrayOfObject58[2] = RT.keyword(null, "column");
    arrayOfObject58[3] = Integer.valueOf(1);
    arrayOfObject58[4] = RT.keyword(null, "added");
    arrayOfObject58[5] = "1.3";
    arrayOfObject58[6] = RT.keyword(null, "static");
    arrayOfObject58[7] = Boolean.TRUE;
    arrayOfObject58[8] = RT.keyword(null, "doc");
    arrayOfObject58[9] = "Returns a Keyword with the given namespace and name if one already\n  exists.  This function will not intern a new keyword. If the keyword\n  has not already been interned, it will return nil.  Do not use :\n  in the keyword strings, it will be added automatically.";
    arrayOfObject58[10] = RT.keyword(null, "line");
    arrayOfObject58[11] = Integer.valueOf(577);
    arrayOfObject58[12] = RT.keyword(null, "file");
    arrayOfObject58[13] = "clojure/core.clj";
    arrayOfObject58[14] = RT.keyword(null, "tag");
    arrayOfObject58[15] = Class.forName("clojure.lang.Keyword");
    const__236 = (AFn)RT.map(arrayOfObject58);
    const__237 = (Var)RT.var("clojure.core", "spread");
    const__238 = Integer.valueOf(591);
    Object[] arrayOfObject62 = new Object[1];
    Object[] arrayOfObject63 = new Object[1];
    arrayOfObject63[0] = Symbol.intern(null, "arglist");
    arrayOfObject62[0] = RT.vector(arrayOfObject63);
    const__239 = PersistentList.create(Arrays.asList(arrayOfObject62));
    Object[] arrayOfObject64 = new Object[12];
    arrayOfObject64[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject65 = new Object[1];
    Object[] arrayOfObject66 = new Object[1];
    arrayOfObject66[0] = Symbol.intern(null, "arglist");
    arrayOfObject65[0] = RT.vector(arrayOfObject66);
    arrayOfObject64[1] = PersistentList.create(Arrays.asList(arrayOfObject65));
    arrayOfObject64[2] = RT.keyword(null, "column");
    arrayOfObject64[3] = Integer.valueOf(1);
    arrayOfObject64[4] = RT.keyword(null, "private");
    arrayOfObject64[5] = Boolean.TRUE;
    arrayOfObject64[6] = RT.keyword(null, "static");
    arrayOfObject64[7] = Boolean.TRUE;
    arrayOfObject64[8] = RT.keyword(null, "line");
    arrayOfObject64[9] = Integer.valueOf(591);
    arrayOfObject64[10] = RT.keyword(null, "file");
    arrayOfObject64[11] = "clojure/core.clj";
    const__240 = (AFn)RT.map(arrayOfObject64);
    const__241 = (Var)RT.var("clojure.core", "list*");
    const__242 = Integer.valueOf(600);
    Object[] arrayOfObject67 = new Object[5];
    Object[] arrayOfObject68 = new Object[1];
    arrayOfObject68[0] = Symbol.intern(null, "args");
    arrayOfObject67[0] = RT.vector(arrayOfObject68);
    Object[] arrayOfObject69 = new Object[2];
    arrayOfObject69[0] = Symbol.intern(null, "a");
    arrayOfObject69[1] = Symbol.intern(null, "args");
    arrayOfObject67[1] = RT.vector(arrayOfObject69);
    Object[] arrayOfObject70 = new Object[3];
    arrayOfObject70[0] = Symbol.intern(null, "a");
    arrayOfObject70[1] = Symbol.intern(null, "b");
    arrayOfObject70[2] = Symbol.intern(null, "args");
    arrayOfObject67[2] = RT.vector(arrayOfObject70);
    Object[] arrayOfObject71 = new Object[4];
    arrayOfObject71[0] = Symbol.intern(null, "a");
    arrayOfObject71[1] = Symbol.intern(null, "b");
    arrayOfObject71[2] = Symbol.intern(null, "c");
    arrayOfObject71[3] = Symbol.intern(null, "args");
    arrayOfObject67[3] = RT.vector(arrayOfObject71);
    Object[] arrayOfObject72 = new Object[6];
    arrayOfObject72[0] = Symbol.intern(null, "a");
    arrayOfObject72[1] = Symbol.intern(null, "b");
    arrayOfObject72[2] = Symbol.intern(null, "c");
    arrayOfObject72[3] = Symbol.intern(null, "d");
    arrayOfObject72[4] = Symbol.intern(null, "&");
    arrayOfObject72[5] = Symbol.intern(null, "more");
    arrayOfObject67[4] = RT.vector(arrayOfObject72);
    const__243 = PersistentList.create(Arrays.asList(arrayOfObject67));
    Object[] arrayOfObject73 = new Object[14];
    arrayOfObject73[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject74 = new Object[5];
    Object[] arrayOfObject75 = new Object[1];
    arrayOfObject75[0] = Symbol.intern(null, "args");
    arrayOfObject74[0] = RT.vector(arrayOfObject75);
    Object[] arrayOfObject76 = new Object[2];
    arrayOfObject76[0] = Symbol.intern(null, "a");
    arrayOfObject76[1] = Symbol.intern(null, "args");
    arrayOfObject74[1] = RT.vector(arrayOfObject76);
    Object[] arrayOfObject77 = new Object[3];
    arrayOfObject77[0] = Symbol.intern(null, "a");
    arrayOfObject77[1] = Symbol.intern(null, "b");
    arrayOfObject77[2] = Symbol.intern(null, "args");
    arrayOfObject74[2] = RT.vector(arrayOfObject77);
    Object[] arrayOfObject78 = new Object[4];
    arrayOfObject78[0] = Symbol.intern(null, "a");
    arrayOfObject78[1] = Symbol.intern(null, "b");
    arrayOfObject78[2] = Symbol.intern(null, "c");
    arrayOfObject78[3] = Symbol.intern(null, "args");
    arrayOfObject74[3] = RT.vector(arrayOfObject78);
    Object[] arrayOfObject79 = new Object[6];
    arrayOfObject79[0] = Symbol.intern(null, "a");
    arrayOfObject79[1] = Symbol.intern(null, "b");
    arrayOfObject79[2] = Symbol.intern(null, "c");
    arrayOfObject79[3] = Symbol.intern(null, "d");
    arrayOfObject79[4] = Symbol.intern(null, "&");
    arrayOfObject79[5] = Symbol.intern(null, "more");
    arrayOfObject74[4] = RT.vector(arrayOfObject79);
    arrayOfObject73[1] = PersistentList.create(Arrays.asList(arrayOfObject74));
    arrayOfObject73[2] = RT.keyword(null, "column");
    arrayOfObject73[3] = Integer.valueOf(1);
    arrayOfObject73[4] = RT.keyword(null, "added");
    arrayOfObject73[5] = "1.0";
    arrayOfObject73[6] = RT.keyword(null, "static");
    arrayOfObject73[7] = Boolean.TRUE;
    arrayOfObject73[8] = RT.keyword(null, "doc");
    arrayOfObject73[9] = "Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.";
    arrayOfObject73[10] = RT.keyword(null, "line");
    arrayOfObject73[11] = Integer.valueOf(600);
    arrayOfObject73[12] = RT.keyword(null, "file");
    arrayOfObject73[13] = "clojure/core.clj";
    const__244 = (AFn)RT.map(arrayOfObject73);
    const__245 = (Var)RT.var("clojure.core", "apply");
    const__246 = Integer.valueOf(612);
    Object[] arrayOfObject80 = new Object[5];
    Object[] arrayOfObject81 = new Object[2];
    IObj localIObj9 = (IObj)Symbol.intern(null, "f");
    Object[] arrayOfObject82 = new Object[2];
    arrayOfObject82[0] = RT.keyword(null, "tag");
    arrayOfObject82[1] = Symbol.intern(null, "clojure.lang.IFn");
    arrayOfObject81[0] = localIObj9.withMeta((IPersistentMap)RT.map(arrayOfObject82));
    arrayOfObject81[1] = Symbol.intern(null, "args");
    arrayOfObject80[0] = RT.vector(arrayOfObject81);
    Object[] arrayOfObject83 = new Object[3];
    IObj localIObj10 = (IObj)Symbol.intern(null, "f");
    Object[] arrayOfObject84 = new Object[2];
    arrayOfObject84[0] = RT.keyword(null, "tag");
    arrayOfObject84[1] = Symbol.intern(null, "clojure.lang.IFn");
    arrayOfObject83[0] = localIObj10.withMeta((IPersistentMap)RT.map(arrayOfObject84));
    arrayOfObject83[1] = Symbol.intern(null, "x");
    arrayOfObject83[2] = Symbol.intern(null, "args");
    arrayOfObject80[1] = RT.vector(arrayOfObject83);
    Object[] arrayOfObject85 = new Object[4];
    IObj localIObj11 = (IObj)Symbol.intern(null, "f");
    Object[] arrayOfObject86 = new Object[2];
    arrayOfObject86[0] = RT.keyword(null, "tag");
    arrayOfObject86[1] = Symbol.intern(null, "clojure.lang.IFn");
    arrayOfObject85[0] = localIObj11.withMeta((IPersistentMap)RT.map(arrayOfObject86));
    arrayOfObject85[1] = Symbol.intern(null, "x");
    arrayOfObject85[2] = Symbol.intern(null, "y");
    arrayOfObject85[3] = Symbol.intern(null, "args");
    arrayOfObject80[2] = RT.vector(arrayOfObject85);
    Object[] arrayOfObject87 = new Object[5];
    IObj localIObj12 = (IObj)Symbol.intern(null, "f");
    Object[] arrayOfObject88 = new Object[2];
    arrayOfObject88[0] = RT.keyword(null, "tag");
    arrayOfObject88[1] = Symbol.intern(null, "clojure.lang.IFn");
    arrayOfObject87[0] = localIObj12.withMeta((IPersistentMap)RT.map(arrayOfObject88));
    arrayOfObject87[1] = Symbol.intern(null, "x");
    arrayOfObject87[2] = Symbol.intern(null, "y");
    arrayOfObject87[3] = Symbol.intern(null, "z");
    arrayOfObject87[4] = Symbol.intern(null, "args");
    arrayOfObject80[3] = RT.vector(arrayOfObject87);
    Object[] arrayOfObject89 = new Object[7];
    IObj localIObj13 = (IObj)Symbol.intern(null, "f");
    Object[] arrayOfObject90 = new Object[2];
    arrayOfObject90[0] = RT.keyword(null, "tag");
    arrayOfObject90[1] = Symbol.intern(null, "clojure.lang.IFn");
    arrayOfObject89[0] = localIObj13.withMeta((IPersistentMap)RT.map(arrayOfObject90));
    arrayOfObject89[1] = Symbol.intern(null, "a");
    arrayOfObject89[2] = Symbol.intern(null, "b");
    arrayOfObject89[3] = Symbol.intern(null, "c");
    arrayOfObject89[4] = Symbol.intern(null, "d");
    arrayOfObject89[5] = Symbol.intern(null, "&");
    arrayOfObject89[6] = Symbol.intern(null, "args");
    arrayOfObject80[4] = RT.vector(arrayOfObject89);
    const__247 = PersistentList.create(Arrays.asList(arrayOfObject80));
    Object[] arrayOfObject91 = new Object[14];
    arrayOfObject91[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject92 = new Object[5];
    Object[] arrayOfObject93 = new Object[2];
    IObj localIObj14 = (IObj)Symbol.intern(null, "f");
    Object[] arrayOfObject94 = new Object[2];
    arrayOfObject94[0] = RT.keyword(null, "tag");
    arrayOfObject94[1] = Symbol.intern(null, "clojure.lang.IFn");
    arrayOfObject93[0] = localIObj14.withMeta((IPersistentMap)RT.map(arrayOfObject94));
    arrayOfObject93[1] = Symbol.intern(null, "args");
    arrayOfObject92[0] = RT.vector(arrayOfObject93);
    Object[] arrayOfObject95 = new Object[3];
    IObj localIObj15 = (IObj)Symbol.intern(null, "f");
    Object[] arrayOfObject96 = new Object[2];
    arrayOfObject96[0] = RT.keyword(null, "tag");
    arrayOfObject96[1] = Symbol.intern(null, "clojure.lang.IFn");
    arrayOfObject95[0] = localIObj15.withMeta((IPersistentMap)RT.map(arrayOfObject96));
    arrayOfObject95[1] = Symbol.intern(null, "x");
    arrayOfObject95[2] = Symbol.intern(null, "args");
    arrayOfObject92[1] = RT.vector(arrayOfObject95);
    Object[] arrayOfObject97 = new Object[4];
    IObj localIObj16 = (IObj)Symbol.intern(null, "f");
    Object[] arrayOfObject98 = new Object[2];
    arrayOfObject98[0] = RT.keyword(null, "tag");
    arrayOfObject98[1] = Symbol.intern(null, "clojure.lang.IFn");
    arrayOfObject97[0] = localIObj16.withMeta((IPersistentMap)RT.map(arrayOfObject98));
    arrayOfObject97[1] = Symbol.intern(null, "x");
    arrayOfObject97[2] = Symbol.intern(null, "y");
    arrayOfObject97[3] = Symbol.intern(null, "args");
    arrayOfObject92[2] = RT.vector(arrayOfObject97);
    Object[] arrayOfObject99 = new Object[5];
    IObj localIObj17 = (IObj)Symbol.intern(null, "f");
    Object[] arrayOfObject100 = new Object[2];
    arrayOfObject100[0] = RT.keyword(null, "tag");
    arrayOfObject100[1] = Symbol.intern(null, "clojure.lang.IFn");
    arrayOfObject99[0] = localIObj17.withMeta((IPersistentMap)RT.map(arrayOfObject100));
    arrayOfObject99[1] = Symbol.intern(null, "x");
    arrayOfObject99[2] = Symbol.intern(null, "y");
    arrayOfObject99[3] = Symbol.intern(null, "z");
    arrayOfObject99[4] = Symbol.intern(null, "args");
    arrayOfObject92[3] = RT.vector(arrayOfObject99);
    Object[] arrayOfObject101 = new Object[7];
    IObj localIObj18 = (IObj)Symbol.intern(null, "f");
    Object[] arrayOfObject102 = new Object[2];
    arrayOfObject102[0] = RT.keyword(null, "tag");
    arrayOfObject102[1] = Symbol.intern(null, "clojure.lang.IFn");
    arrayOfObject101[0] = localIObj18.withMeta((IPersistentMap)RT.map(arrayOfObject102));
    arrayOfObject101[1] = Symbol.intern(null, "a");
    arrayOfObject101[2] = Symbol.intern(null, "b");
    arrayOfObject101[3] = Symbol.intern(null, "c");
    arrayOfObject101[4] = Symbol.intern(null, "d");
    arrayOfObject101[5] = Symbol.intern(null, "&");
    arrayOfObject101[6] = Symbol.intern(null, "args");
    arrayOfObject92[4] = RT.vector(arrayOfObject101);
    arrayOfObject91[1] = PersistentList.create(Arrays.asList(arrayOfObject92));
    arrayOfObject91[2] = RT.keyword(null, "column");
    arrayOfObject91[3] = Integer.valueOf(1);
    arrayOfObject91[4] = RT.keyword(null, "added");
    arrayOfObject91[5] = "1.0";
    arrayOfObject91[6] = RT.keyword(null, "static");
    arrayOfObject91[7] = Boolean.TRUE;
    arrayOfObject91[8] = RT.keyword(null, "doc");
    arrayOfObject91[9] = "Applies fn f to the argument list formed by prepending intervening arguments to args.";
    arrayOfObject91[10] = RT.keyword(null, "line");
    arrayOfObject91[11] = Integer.valueOf(612);
    arrayOfObject91[12] = RT.keyword(null, "file");
    arrayOfObject91[13] = "clojure/core.clj";
    const__248 = (AFn)RT.map(arrayOfObject91);
    const__249 = (Var)RT.var("clojure.core", "vary-meta");
    const__250 = Integer.valueOf(627);
    Object[] arrayOfObject103 = new Object[1];
    Object[] arrayOfObject104 = new Object[4];
    arrayOfObject104[0] = Symbol.intern(null, "obj");
    arrayOfObject104[1] = Symbol.intern(null, "f");
    arrayOfObject104[2] = Symbol.intern(null, "&");
    arrayOfObject104[3] = Symbol.intern(null, "args");
    arrayOfObject103[0] = RT.vector(arrayOfObject104);
    const__251 = PersistentList.create(Arrays.asList(arrayOfObject103));
    Object[] arrayOfObject105 = new Object[14];
    arrayOfObject105[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject106 = new Object[1];
    Object[] arrayOfObject107 = new Object[4];
    arrayOfObject107[0] = Symbol.intern(null, "obj");
    arrayOfObject107[1] = Symbol.intern(null, "f");
    arrayOfObject107[2] = Symbol.intern(null, "&");
    arrayOfObject107[3] = Symbol.intern(null, "args");
    arrayOfObject106[0] = RT.vector(arrayOfObject107);
    arrayOfObject105[1] = PersistentList.create(Arrays.asList(arrayOfObject106));
    arrayOfObject105[2] = RT.keyword(null, "column");
    arrayOfObject105[3] = Integer.valueOf(1);
    arrayOfObject105[4] = RT.keyword(null, "added");
    arrayOfObject105[5] = "1.0";
    arrayOfObject105[6] = RT.keyword(null, "static");
    arrayOfObject105[7] = Boolean.TRUE;
    arrayOfObject105[8] = RT.keyword(null, "doc");
    arrayOfObject105[9] = "Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.";
    arrayOfObject105[10] = RT.keyword(null, "line");
    arrayOfObject105[11] = Integer.valueOf(627);
    arrayOfObject105[12] = RT.keyword(null, "file");
    arrayOfObject105[13] = "clojure/core.clj";
    const__252 = (AFn)RT.map(arrayOfObject105);
    const__253 = (Var)RT.var("clojure.core", "lazy-seq");
    const__254 = Integer.valueOf(635);
    Object[] arrayOfObject108 = new Object[1];
    Object[] arrayOfObject109 = new Object[2];
    arrayOfObject109[0] = Symbol.intern(null, "&");
    arrayOfObject109[1] = Symbol.intern(null, "body");
    arrayOfObject108[0] = RT.vector(arrayOfObject109);
    const__255 = PersistentList.create(Arrays.asList(arrayOfObject108));
    Object[] arrayOfObject110 = new Object[12];
    arrayOfObject110[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject111 = new Object[1];
    Object[] arrayOfObject112 = new Object[2];
    arrayOfObject112[0] = Symbol.intern(null, "&");
    arrayOfObject112[1] = Symbol.intern(null, "body");
    arrayOfObject111[0] = RT.vector(arrayOfObject112);
    arrayOfObject110[1] = PersistentList.create(Arrays.asList(arrayOfObject111));
    arrayOfObject110[2] = RT.keyword(null, "column");
    arrayOfObject110[3] = Integer.valueOf(1);
    arrayOfObject110[4] = RT.keyword(null, "added");
    arrayOfObject110[5] = "1.0";
    arrayOfObject110[6] = RT.keyword(null, "doc");
    arrayOfObject110[7] = "Takes a body of expressions that returns an ISeq or nil, and yields\n  a Seqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls. See also - realized?";
    arrayOfObject110[8] = RT.keyword(null, "line");
    arrayOfObject110[9] = Integer.valueOf(635);
    arrayOfObject110[10] = RT.keyword(null, "file");
    arrayOfObject110[11] = "clojure/core.clj";
    const__256 = (AFn)RT.map(arrayOfObject110);
    const__257 = (Var)RT.var("clojure.core", "chunk-buffer");
    const__258 = Integer.valueOf(644);
    Object[] arrayOfObject113 = new Object[1];
    Object[] arrayOfObject114 = new Object[1];
    arrayOfObject114[0] = Symbol.intern(null, "capacity");
    IObj localIObj19 = (IObj)RT.vector(arrayOfObject114);
    Object[] arrayOfObject115 = new Object[2];
    arrayOfObject115[0] = RT.keyword(null, "tag");
    arrayOfObject115[1] = Symbol.intern(null, "clojure.lang.ChunkBuffer");
    arrayOfObject113[0] = localIObj19.withMeta((IPersistentMap)RT.map(arrayOfObject115));
    const__259 = PersistentList.create(Arrays.asList(arrayOfObject113));
    const__260 = Class.forName("clojure.lang.ChunkBuffer");
    Object[] arrayOfObject116 = new Object[12];
    arrayOfObject116[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject117 = new Object[1];
    Object[] arrayOfObject118 = new Object[1];
    arrayOfObject118[0] = Symbol.intern(null, "capacity");
    IObj localIObj20 = (IObj)RT.vector(arrayOfObject118);
    Object[] arrayOfObject119 = new Object[2];
    arrayOfObject119[0] = RT.keyword(null, "tag");
    arrayOfObject119[1] = Symbol.intern(null, "clojure.lang.ChunkBuffer");
    arrayOfObject117[0] = localIObj20.withMeta((IPersistentMap)RT.map(arrayOfObject119));
    arrayOfObject116[1] = PersistentList.create(Arrays.asList(arrayOfObject117));
    arrayOfObject116[2] = RT.keyword(null, "column");
    arrayOfObject116[3] = Integer.valueOf(1);
    arrayOfObject116[4] = RT.keyword(null, "static");
    arrayOfObject116[5] = Boolean.TRUE;
    arrayOfObject116[6] = RT.keyword(null, "line");
    arrayOfObject116[7] = Integer.valueOf(644);
    arrayOfObject116[8] = RT.keyword(null, "file");
    arrayOfObject116[9] = "clojure/core.clj";
    arrayOfObject116[10] = RT.keyword(null, "tag");
    arrayOfObject116[11] = Class.forName("clojure.lang.ChunkBuffer");
    const__261 = (AFn)RT.map(arrayOfObject116);
    const__262 = (Var)RT.var("clojure.core", "chunk-append");
    const__263 = Integer.valueOf(647);
    Object[] arrayOfObject120 = new Object[1];
    Object[] arrayOfObject121 = new Object[2];
    IObj localIObj21 = (IObj)Symbol.intern(null, "b");
    Object[] arrayOfObject122 = new Object[2];
    arrayOfObject122[0] = RT.keyword(null, "tag");
    arrayOfObject122[1] = Symbol.intern(null, "clojure.lang.ChunkBuffer");
    arrayOfObject121[0] = localIObj21.withMeta((IPersistentMap)RT.map(arrayOfObject122));
    arrayOfObject121[1] = Symbol.intern(null, "x");
    arrayOfObject120[0] = RT.vector(arrayOfObject121);
    const__264 = PersistentList.create(Arrays.asList(arrayOfObject120));
    Object[] arrayOfObject123 = new Object[10];
    arrayOfObject123[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject124 = new Object[1];
    Object[] arrayOfObject125 = new Object[2];
    IObj localIObj22 = (IObj)Symbol.intern(null, "b");
    Object[] arrayOfObject126 = new Object[2];
    arrayOfObject126[0] = RT.keyword(null, "tag");
    arrayOfObject126[1] = Symbol.intern(null, "clojure.lang.ChunkBuffer");
    arrayOfObject125[0] = localIObj22.withMeta((IPersistentMap)RT.map(arrayOfObject126));
    arrayOfObject125[1] = Symbol.intern(null, "x");
    arrayOfObject124[0] = RT.vector(arrayOfObject125);
    arrayOfObject123[1] = PersistentList.create(Arrays.asList(arrayOfObject124));
    arrayOfObject123[2] = RT.keyword(null, "column");
    arrayOfObject123[3] = Integer.valueOf(1);
    arrayOfObject123[4] = RT.keyword(null, "static");
    arrayOfObject123[5] = Boolean.TRUE;
    arrayOfObject123[6] = RT.keyword(null, "line");
    arrayOfObject123[7] = Integer.valueOf(647);
    arrayOfObject123[8] = RT.keyword(null, "file");
    arrayOfObject123[9] = "clojure/core.clj";
    const__265 = (AFn)RT.map(arrayOfObject123);
    const__266 = (Var)RT.var("clojure.core", "chunk");
    const__267 = Integer.valueOf(650);
    Object[] arrayOfObject127 = new Object[1];
    Object[] arrayOfObject128 = new Object[1];
    IObj localIObj23 = (IObj)Symbol.intern(null, "b");
    Object[] arrayOfObject129 = new Object[2];
    arrayOfObject129[0] = RT.keyword(null, "tag");
    arrayOfObject129[1] = Symbol.intern(null, "clojure.lang.ChunkBuffer");
    arrayOfObject128[0] = localIObj23.withMeta((IPersistentMap)RT.map(arrayOfObject129));
    arrayOfObject127[0] = RT.vector(arrayOfObject128);
    const__268 = PersistentList.create(Arrays.asList(arrayOfObject127));
    const__269 = Class.forName("clojure.lang.IChunk");
    Object[] arrayOfObject130 = new Object[12];
    arrayOfObject130[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject131 = new Object[1];
    Object[] arrayOfObject132 = new Object[1];
    IObj localIObj24 = (IObj)Symbol.intern(null, "b");
    Object[] arrayOfObject133 = new Object[2];
    arrayOfObject133[0] = RT.keyword(null, "tag");
    arrayOfObject133[1] = Symbol.intern(null, "clojure.lang.ChunkBuffer");
    arrayOfObject132[0] = localIObj24.withMeta((IPersistentMap)RT.map(arrayOfObject133));
    arrayOfObject131[0] = RT.vector(arrayOfObject132);
    arrayOfObject130[1] = PersistentList.create(Arrays.asList(arrayOfObject131));
    arrayOfObject130[2] = RT.keyword(null, "column");
    arrayOfObject130[3] = Integer.valueOf(1);
    arrayOfObject130[4] = RT.keyword(null, "static");
    arrayOfObject130[5] = Boolean.TRUE;
    arrayOfObject130[6] = RT.keyword(null, "line");
    arrayOfObject130[7] = Integer.valueOf(650);
    arrayOfObject130[8] = RT.keyword(null, "file");
    arrayOfObject130[9] = "clojure/core.clj";
    arrayOfObject130[10] = RT.keyword(null, "tag");
    arrayOfObject130[11] = Class.forName("clojure.lang.IChunk");
    const__270 = (AFn)RT.map(arrayOfObject130);
    const__271 = (Var)RT.var("clojure.core", "chunk-first");
    const__272 = Integer.valueOf(653);
    Object[] arrayOfObject134 = new Object[1];
    Object[] arrayOfObject135 = new Object[1];
    IObj localIObj25 = (IObj)Symbol.intern(null, "s");
    Object[] arrayOfObject136 = new Object[2];
    arrayOfObject136[0] = RT.keyword(null, "tag");
    arrayOfObject136[1] = Symbol.intern(null, "clojure.lang.IChunkedSeq");
    arrayOfObject135[0] = localIObj25.withMeta((IPersistentMap)RT.map(arrayOfObject136));
    IObj localIObj26 = (IObj)RT.vector(arrayOfObject135);
    Object[] arrayOfObject137 = new Object[2];
    arrayOfObject137[0] = RT.keyword(null, "tag");
    arrayOfObject137[1] = Symbol.intern(null, "clojure.lang.IChunk");
    arrayOfObject134[0] = localIObj26.withMeta((IPersistentMap)RT.map(arrayOfObject137));
    const__273 = PersistentList.create(Arrays.asList(arrayOfObject134));
    Object[] arrayOfObject138 = new Object[12];
    arrayOfObject138[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject139 = new Object[1];
    Object[] arrayOfObject140 = new Object[1];
    IObj localIObj27 = (IObj)Symbol.intern(null, "s");
    Object[] arrayOfObject141 = new Object[2];
    arrayOfObject141[0] = RT.keyword(null, "tag");
    arrayOfObject141[1] = Symbol.intern(null, "clojure.lang.IChunkedSeq");
    arrayOfObject140[0] = localIObj27.withMeta((IPersistentMap)RT.map(arrayOfObject141));
    IObj localIObj28 = (IObj)RT.vector(arrayOfObject140);
    Object[] arrayOfObject142 = new Object[2];
    arrayOfObject142[0] = RT.keyword(null, "tag");
    arrayOfObject142[1] = Symbol.intern(null, "clojure.lang.IChunk");
    arrayOfObject139[0] = localIObj28.withMeta((IPersistentMap)RT.map(arrayOfObject142));
    arrayOfObject138[1] = PersistentList.create(Arrays.asList(arrayOfObject139));
    arrayOfObject138[2] = RT.keyword(null, "column");
    arrayOfObject138[3] = Integer.valueOf(1);
    arrayOfObject138[4] = RT.keyword(null, "static");
    arrayOfObject138[5] = Boolean.TRUE;
    arrayOfObject138[6] = RT.keyword(null, "line");
    arrayOfObject138[7] = Integer.valueOf(653);
    arrayOfObject138[8] = RT.keyword(null, "file");
    arrayOfObject138[9] = "clojure/core.clj";
    arrayOfObject138[10] = RT.keyword(null, "tag");
    arrayOfObject138[11] = Class.forName("clojure.lang.IChunk");
    const__274 = (AFn)RT.map(arrayOfObject138);
    const__275 = (Var)RT.var("clojure.core", "chunk-rest");
    const__276 = Integer.valueOf(656);
    Object[] arrayOfObject143 = new Object[1];
    Object[] arrayOfObject144 = new Object[1];
    IObj localIObj29 = (IObj)Symbol.intern(null, "s");
    Object[] arrayOfObject145 = new Object[2];
    arrayOfObject145[0] = RT.keyword(null, "tag");
    arrayOfObject145[1] = Symbol.intern(null, "clojure.lang.IChunkedSeq");
    arrayOfObject144[0] = localIObj29.withMeta((IPersistentMap)RT.map(arrayOfObject145));
    IObj localIObj30 = (IObj)RT.vector(arrayOfObject144);
    Object[] arrayOfObject146 = new Object[2];
    arrayOfObject146[0] = RT.keyword(null, "tag");
    arrayOfObject146[1] = Symbol.intern(null, "clojure.lang.ISeq");
    arrayOfObject143[0] = localIObj30.withMeta((IPersistentMap)RT.map(arrayOfObject146));
    const__277 = PersistentList.create(Arrays.asList(arrayOfObject143));
    Object[] arrayOfObject147 = new Object[12];
    arrayOfObject147[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject148 = new Object[1];
    Object[] arrayOfObject149 = new Object[1];
    IObj localIObj31 = (IObj)Symbol.intern(null, "s");
    Object[] arrayOfObject150 = new Object[2];
    arrayOfObject150[0] = RT.keyword(null, "tag");
    arrayOfObject150[1] = Symbol.intern(null, "clojure.lang.IChunkedSeq");
    arrayOfObject149[0] = localIObj31.withMeta((IPersistentMap)RT.map(arrayOfObject150));
    IObj localIObj32 = (IObj)RT.vector(arrayOfObject149);
    Object[] arrayOfObject151 = new Object[2];
    arrayOfObject151[0] = RT.keyword(null, "tag");
    arrayOfObject151[1] = Symbol.intern(null, "clojure.lang.ISeq");
    arrayOfObject148[0] = localIObj32.withMeta((IPersistentMap)RT.map(arrayOfObject151));
    arrayOfObject147[1] = PersistentList.create(Arrays.asList(arrayOfObject148));
    arrayOfObject147[2] = RT.keyword(null, "column");
    arrayOfObject147[3] = Integer.valueOf(1);
    arrayOfObject147[4] = RT.keyword(null, "static");
    arrayOfObject147[5] = Boolean.TRUE;
    arrayOfObject147[6] = RT.keyword(null, "line");
    arrayOfObject147[7] = Integer.valueOf(656);
    arrayOfObject147[8] = RT.keyword(null, "file");
    arrayOfObject147[9] = "clojure/core.clj";
    arrayOfObject147[10] = RT.keyword(null, "tag");
    arrayOfObject147[11] = Class.forName("clojure.lang.ISeq");
    const__278 = (AFn)RT.map(arrayOfObject147);
    const__279 = (Var)RT.var("clojure.core", "chunk-next");
    const__280 = Integer.valueOf(659);
    Object[] arrayOfObject152 = new Object[1];
    Object[] arrayOfObject153 = new Object[1];
    IObj localIObj33 = (IObj)Symbol.intern(null, "s");
    Object[] arrayOfObject154 = new Object[2];
    arrayOfObject154[0] = RT.keyword(null, "tag");
    arrayOfObject154[1] = Symbol.intern(null, "clojure.lang.IChunkedSeq");
    arrayOfObject153[0] = localIObj33.withMeta((IPersistentMap)RT.map(arrayOfObject154));
    IObj localIObj34 = (IObj)RT.vector(arrayOfObject153);
    Object[] arrayOfObject155 = new Object[2];
    arrayOfObject155[0] = RT.keyword(null, "tag");
    arrayOfObject155[1] = Symbol.intern(null, "clojure.lang.ISeq");
    arrayOfObject152[0] = localIObj34.withMeta((IPersistentMap)RT.map(arrayOfObject155));
    const__281 = PersistentList.create(Arrays.asList(arrayOfObject152));
    Object[] arrayOfObject156 = new Object[12];
    arrayOfObject156[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject157 = new Object[1];
    Object[] arrayOfObject158 = new Object[1];
    IObj localIObj35 = (IObj)Symbol.intern(null, "s");
    Object[] arrayOfObject159 = new Object[2];
    arrayOfObject159[0] = RT.keyword(null, "tag");
    arrayOfObject159[1] = Symbol.intern(null, "clojure.lang.IChunkedSeq");
    arrayOfObject158[0] = localIObj35.withMeta((IPersistentMap)RT.map(arrayOfObject159));
    IObj localIObj36 = (IObj)RT.vector(arrayOfObject158);
    Object[] arrayOfObject160 = new Object[2];
    arrayOfObject160[0] = RT.keyword(null, "tag");
    arrayOfObject160[1] = Symbol.intern(null, "clojure.lang.ISeq");
    arrayOfObject157[0] = localIObj36.withMeta((IPersistentMap)RT.map(arrayOfObject160));
    arrayOfObject156[1] = PersistentList.create(Arrays.asList(arrayOfObject157));
    arrayOfObject156[2] = RT.keyword(null, "column");
    arrayOfObject156[3] = Integer.valueOf(1);
    arrayOfObject156[4] = RT.keyword(null, "static");
    arrayOfObject156[5] = Boolean.TRUE;
    arrayOfObject156[6] = RT.keyword(null, "line");
    arrayOfObject156[7] = Integer.valueOf(659);
    arrayOfObject156[8] = RT.keyword(null, "file");
    arrayOfObject156[9] = "clojure/core.clj";
    arrayOfObject156[10] = RT.keyword(null, "tag");
    arrayOfObject156[11] = Class.forName("clojure.lang.ISeq");
    const__282 = (AFn)RT.map(arrayOfObject156);
    const__283 = (Var)RT.var("clojure.core", "chunk-cons");
    const__284 = Integer.valueOf(662);
    Object[] arrayOfObject161 = new Object[1];
    Object[] arrayOfObject162 = new Object[2];
    arrayOfObject162[0] = Symbol.intern(null, "chunk");
    arrayOfObject162[1] = Symbol.intern(null, "rest");
    arrayOfObject161[0] = RT.vector(arrayOfObject162);
    const__285 = PersistentList.create(Arrays.asList(arrayOfObject161));
    Object[] arrayOfObject163 = new Object[10];
    arrayOfObject163[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject164 = new Object[1];
    Object[] arrayOfObject165 = new Object[2];
    arrayOfObject165[0] = Symbol.intern(null, "chunk");
    arrayOfObject165[1] = Symbol.intern(null, "rest");
    arrayOfObject164[0] = RT.vector(arrayOfObject165);
    arrayOfObject163[1] = PersistentList.create(Arrays.asList(arrayOfObject164));
    arrayOfObject163[2] = RT.keyword(null, "column");
    arrayOfObject163[3] = Integer.valueOf(1);
    arrayOfObject163[4] = RT.keyword(null, "static");
    arrayOfObject163[5] = Boolean.TRUE;
    arrayOfObject163[6] = RT.keyword(null, "line");
    arrayOfObject163[7] = Integer.valueOf(662);
    arrayOfObject163[8] = RT.keyword(null, "file");
    arrayOfObject163[9] = "clojure/core.clj";
    const__286 = (AFn)RT.map(arrayOfObject163);
    const__287 = (Var)RT.var("clojure.core", "chunked-seq?");
    const__288 = Integer.valueOf(667);
    Object[] arrayOfObject166 = new Object[1];
    Object[] arrayOfObject167 = new Object[1];
    arrayOfObject167[0] = Symbol.intern(null, "s");
    arrayOfObject166[0] = RT.vector(arrayOfObject167);
    const__289 = PersistentList.create(Arrays.asList(arrayOfObject166));
    Object[] arrayOfObject168 = new Object[10];
    arrayOfObject168[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject169 = new Object[1];
    Object[] arrayOfObject170 = new Object[1];
    arrayOfObject170[0] = Symbol.intern(null, "s");
    arrayOfObject169[0] = RT.vector(arrayOfObject170);
    arrayOfObject168[1] = PersistentList.create(Arrays.asList(arrayOfObject169));
    arrayOfObject168[2] = RT.keyword(null, "column");
    arrayOfObject168[3] = Integer.valueOf(1);
    arrayOfObject168[4] = RT.keyword(null, "static");
    arrayOfObject168[5] = Boolean.TRUE;
    arrayOfObject168[6] = RT.keyword(null, "line");
    arrayOfObject168[7] = Integer.valueOf(667);
    arrayOfObject168[8] = RT.keyword(null, "file");
    arrayOfObject168[9] = "clojure/core.clj";
    const__290 = (AFn)RT.map(arrayOfObject168);
    const__291 = (Var)RT.var("clojure.core", "concat");
    const__292 = Integer.valueOf(670);
    Object[] arrayOfObject171 = new Object[4];
    arrayOfObject171[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject172 = new Object[1];
    arrayOfObject172[0] = Symbol.intern(null, "x");
    arrayOfObject171[1] = RT.vector(arrayOfObject172);
    Object[] arrayOfObject173 = new Object[2];
    arrayOfObject173[0] = Symbol.intern(null, "x");
    arrayOfObject173[1] = Symbol.intern(null, "y");
    arrayOfObject171[2] = RT.vector(arrayOfObject173);
    Object[] arrayOfObject174 = new Object[4];
    arrayOfObject174[0] = Symbol.intern(null, "x");
    arrayOfObject174[1] = Symbol.intern(null, "y");
    arrayOfObject174[2] = Symbol.intern(null, "&");
    arrayOfObject174[3] = Symbol.intern(null, "zs");
    arrayOfObject171[3] = RT.vector(arrayOfObject174);
    const__293 = PersistentList.create(Arrays.asList(arrayOfObject171));
    Object[] arrayOfObject175 = new Object[14];
    arrayOfObject175[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject176 = new Object[4];
    arrayOfObject176[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject177 = new Object[1];
    arrayOfObject177[0] = Symbol.intern(null, "x");
    arrayOfObject176[1] = RT.vector(arrayOfObject177);
    Object[] arrayOfObject178 = new Object[2];
    arrayOfObject178[0] = Symbol.intern(null, "x");
    arrayOfObject178[1] = Symbol.intern(null, "y");
    arrayOfObject176[2] = RT.vector(arrayOfObject178);
    Object[] arrayOfObject179 = new Object[4];
    arrayOfObject179[0] = Symbol.intern(null, "x");
    arrayOfObject179[1] = Symbol.intern(null, "y");
    arrayOfObject179[2] = Symbol.intern(null, "&");
    arrayOfObject179[3] = Symbol.intern(null, "zs");
    arrayOfObject176[3] = RT.vector(arrayOfObject179);
    arrayOfObject175[1] = PersistentList.create(Arrays.asList(arrayOfObject176));
    arrayOfObject175[2] = RT.keyword(null, "column");
    arrayOfObject175[3] = Integer.valueOf(1);
    arrayOfObject175[4] = RT.keyword(null, "added");
    arrayOfObject175[5] = "1.0";
    arrayOfObject175[6] = RT.keyword(null, "static");
    arrayOfObject175[7] = Boolean.TRUE;
    arrayOfObject175[8] = RT.keyword(null, "doc");
    arrayOfObject175[9] = "Returns a lazy seq representing the concatenation of the elements in the supplied colls.";
    arrayOfObject175[10] = RT.keyword(null, "line");
    arrayOfObject175[11] = Integer.valueOf(670);
    arrayOfObject175[12] = RT.keyword(null, "file");
    arrayOfObject175[13] = "clojure/core.clj";
    const__294 = (AFn)RT.map(arrayOfObject175);
    const__295 = (Var)RT.var("clojure.core", "delay");
    const__296 = Integer.valueOf(698);
    Object[] arrayOfObject180 = new Object[1];
    Object[] arrayOfObject181 = new Object[2];
    arrayOfObject181[0] = Symbol.intern(null, "&");
    arrayOfObject181[1] = Symbol.intern(null, "body");
    arrayOfObject180[0] = RT.vector(arrayOfObject181);
    const__297 = PersistentList.create(Arrays.asList(arrayOfObject180));
    Object[] arrayOfObject182 = new Object[12];
    arrayOfObject182[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject183 = new Object[1];
    Object[] arrayOfObject184 = new Object[2];
    arrayOfObject184[0] = Symbol.intern(null, "&");
    arrayOfObject184[1] = Symbol.intern(null, "body");
    arrayOfObject183[0] = RT.vector(arrayOfObject184);
    arrayOfObject182[1] = PersistentList.create(Arrays.asList(arrayOfObject183));
    arrayOfObject182[2] = RT.keyword(null, "column");
    arrayOfObject182[3] = Integer.valueOf(1);
    arrayOfObject182[4] = RT.keyword(null, "added");
    arrayOfObject182[5] = "1.0";
    arrayOfObject182[6] = RT.keyword(null, "doc");
    arrayOfObject182[7] = "Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls. See also - realized?";
    arrayOfObject182[8] = RT.keyword(null, "line");
    arrayOfObject182[9] = Integer.valueOf(698);
    arrayOfObject182[10] = RT.keyword(null, "file");
    arrayOfObject182[11] = "clojure/core.clj";
    const__298 = (AFn)RT.map(arrayOfObject182);
    const__299 = (Var)RT.var("clojure.core", "delay?");
  }

  public static void __init20()
  {
    const__2000 = (Var)RT.var("clojure.core", "counted?");
    const__2001 = Integer.valueOf(5647);
    Object[] arrayOfObject1 = new Object[1];
    Object[] arrayOfObject2 = new Object[1];
    arrayOfObject2[0] = Symbol.intern(null, "coll");
    arrayOfObject1[0] = RT.vector(arrayOfObject2);
    const__2002 = PersistentList.create(Arrays.asList(arrayOfObject1));
    Object[] arrayOfObject3 = new Object[14];
    arrayOfObject3[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject4 = new Object[1];
    Object[] arrayOfObject5 = new Object[1];
    arrayOfObject5[0] = Symbol.intern(null, "coll");
    arrayOfObject4[0] = RT.vector(arrayOfObject5);
    arrayOfObject3[1] = PersistentList.create(Arrays.asList(arrayOfObject4));
    arrayOfObject3[2] = RT.keyword(null, "column");
    arrayOfObject3[3] = Integer.valueOf(1);
    arrayOfObject3[4] = RT.keyword(null, "added");
    arrayOfObject3[5] = "1.0";
    arrayOfObject3[6] = RT.keyword(null, "static");
    arrayOfObject3[7] = Boolean.TRUE;
    arrayOfObject3[8] = RT.keyword(null, "doc");
    arrayOfObject3[9] = "Returns true if coll implements count in constant time";
    arrayOfObject3[10] = RT.keyword(null, "line");
    arrayOfObject3[11] = Integer.valueOf(5647);
    arrayOfObject3[12] = RT.keyword(null, "file");
    arrayOfObject3[13] = "clojure/core.clj";
    const__2003 = (AFn)RT.map(arrayOfObject3);
    const__2004 = (Var)RT.var("clojure.core", "reversible?");
    const__2005 = Integer.valueOf(5653);
    Object[] arrayOfObject6 = new Object[1];
    Object[] arrayOfObject7 = new Object[1];
    arrayOfObject7[0] = Symbol.intern(null, "coll");
    arrayOfObject6[0] = RT.vector(arrayOfObject7);
    const__2006 = PersistentList.create(Arrays.asList(arrayOfObject6));
    Object[] arrayOfObject8 = new Object[14];
    arrayOfObject8[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject9 = new Object[1];
    Object[] arrayOfObject10 = new Object[1];
    arrayOfObject10[0] = Symbol.intern(null, "coll");
    arrayOfObject9[0] = RT.vector(arrayOfObject10);
    arrayOfObject8[1] = PersistentList.create(Arrays.asList(arrayOfObject9));
    arrayOfObject8[2] = RT.keyword(null, "column");
    arrayOfObject8[3] = Integer.valueOf(1);
    arrayOfObject8[4] = RT.keyword(null, "added");
    arrayOfObject8[5] = "1.0";
    arrayOfObject8[6] = RT.keyword(null, "static");
    arrayOfObject8[7] = Boolean.TRUE;
    arrayOfObject8[8] = RT.keyword(null, "doc");
    arrayOfObject8[9] = "Returns true if coll implements Reversible";
    arrayOfObject8[10] = RT.keyword(null, "line");
    arrayOfObject8[11] = Integer.valueOf(5653);
    arrayOfObject8[12] = RT.keyword(null, "file");
    arrayOfObject8[13] = "clojure/core.clj";
    const__2007 = (AFn)RT.map(arrayOfObject8);
    const__2008 = (Var)RT.var("clojure.core", "*1");
    const__2009 = Integer.valueOf(5659);
    Object[] arrayOfObject11 = new Object[12];
    arrayOfObject11[0] = RT.keyword(null, "dynamic");
    arrayOfObject11[1] = Boolean.TRUE;
    arrayOfObject11[2] = RT.keyword(null, "column");
    arrayOfObject11[3] = Integer.valueOf(1);
    arrayOfObject11[4] = RT.keyword(null, "added");
    arrayOfObject11[5] = "1.0";
    arrayOfObject11[6] = RT.keyword(null, "doc");
    arrayOfObject11[7] = "bound in a repl thread to the most recent value printed";
    arrayOfObject11[8] = RT.keyword(null, "line");
    arrayOfObject11[9] = Integer.valueOf(5659);
    arrayOfObject11[10] = RT.keyword(null, "file");
    arrayOfObject11[11] = "clojure/core.clj";
    const__2010 = (AFn)RT.map(arrayOfObject11);
    const__2011 = (Var)RT.var("clojure.core", "*2");
    const__2012 = Integer.valueOf(5664);
    Object[] arrayOfObject12 = new Object[12];
    arrayOfObject12[0] = RT.keyword(null, "dynamic");
    arrayOfObject12[1] = Boolean.TRUE;
    arrayOfObject12[2] = RT.keyword(null, "column");
    arrayOfObject12[3] = Integer.valueOf(1);
    arrayOfObject12[4] = RT.keyword(null, "added");
    arrayOfObject12[5] = "1.0";
    arrayOfObject12[6] = RT.keyword(null, "doc");
    arrayOfObject12[7] = "bound in a repl thread to the second most recent value printed";
    arrayOfObject12[8] = RT.keyword(null, "line");
    arrayOfObject12[9] = Integer.valueOf(5664);
    arrayOfObject12[10] = RT.keyword(null, "file");
    arrayOfObject12[11] = "clojure/core.clj";
    const__2013 = (AFn)RT.map(arrayOfObject12);
    const__2014 = (Var)RT.var("clojure.core", "*3");
    const__2015 = Integer.valueOf(5669);
    Object[] arrayOfObject13 = new Object[12];
    arrayOfObject13[0] = RT.keyword(null, "dynamic");
    arrayOfObject13[1] = Boolean.TRUE;
    arrayOfObject13[2] = RT.keyword(null, "column");
    arrayOfObject13[3] = Integer.valueOf(1);
    arrayOfObject13[4] = RT.keyword(null, "added");
    arrayOfObject13[5] = "1.0";
    arrayOfObject13[6] = RT.keyword(null, "doc");
    arrayOfObject13[7] = "bound in a repl thread to the third most recent value printed";
    arrayOfObject13[8] = RT.keyword(null, "line");
    arrayOfObject13[9] = Integer.valueOf(5669);
    arrayOfObject13[10] = RT.keyword(null, "file");
    arrayOfObject13[11] = "clojure/core.clj";
    const__2016 = (AFn)RT.map(arrayOfObject13);
    const__2017 = (Var)RT.var("clojure.core", "*e");
    const__2018 = Integer.valueOf(5674);
    Object[] arrayOfObject14 = new Object[12];
    arrayOfObject14[0] = RT.keyword(null, "dynamic");
    arrayOfObject14[1] = Boolean.TRUE;
    arrayOfObject14[2] = RT.keyword(null, "column");
    arrayOfObject14[3] = Integer.valueOf(1);
    arrayOfObject14[4] = RT.keyword(null, "added");
    arrayOfObject14[5] = "1.0";
    arrayOfObject14[6] = RT.keyword(null, "doc");
    arrayOfObject14[7] = "bound in a repl thread to the most recent exception caught by the repl";
    arrayOfObject14[8] = RT.keyword(null, "line");
    arrayOfObject14[9] = Integer.valueOf(5674);
    arrayOfObject14[10] = RT.keyword(null, "file");
    arrayOfObject14[11] = "clojure/core.clj";
    const__2019 = (AFn)RT.map(arrayOfObject14);
    const__2020 = (Var)RT.var("clojure.core", "trampoline");
    const__2021 = Integer.valueOf(5679);
    Object[] arrayOfObject15 = new Object[2];
    Object[] arrayOfObject16 = new Object[1];
    arrayOfObject16[0] = Symbol.intern(null, "f");
    arrayOfObject15[0] = RT.vector(arrayOfObject16);
    Object[] arrayOfObject17 = new Object[3];
    arrayOfObject17[0] = Symbol.intern(null, "f");
    arrayOfObject17[1] = Symbol.intern(null, "&");
    arrayOfObject17[2] = Symbol.intern(null, "args");
    arrayOfObject15[1] = RT.vector(arrayOfObject17);
    const__2022 = PersistentList.create(Arrays.asList(arrayOfObject15));
    Object[] arrayOfObject18 = new Object[14];
    arrayOfObject18[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject19 = new Object[2];
    Object[] arrayOfObject20 = new Object[1];
    arrayOfObject20[0] = Symbol.intern(null, "f");
    arrayOfObject19[0] = RT.vector(arrayOfObject20);
    Object[] arrayOfObject21 = new Object[3];
    arrayOfObject21[0] = Symbol.intern(null, "f");
    arrayOfObject21[1] = Symbol.intern(null, "&");
    arrayOfObject21[2] = Symbol.intern(null, "args");
    arrayOfObject19[1] = RT.vector(arrayOfObject21);
    arrayOfObject18[1] = PersistentList.create(Arrays.asList(arrayOfObject19));
    arrayOfObject18[2] = RT.keyword(null, "column");
    arrayOfObject18[3] = Integer.valueOf(1);
    arrayOfObject18[4] = RT.keyword(null, "added");
    arrayOfObject18[5] = "1.0";
    arrayOfObject18[6] = RT.keyword(null, "static");
    arrayOfObject18[7] = Boolean.TRUE;
    arrayOfObject18[8] = RT.keyword(null, "doc");
    arrayOfObject18[9] = "trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.";
    arrayOfObject18[10] = RT.keyword(null, "line");
    arrayOfObject18[11] = Integer.valueOf(5679);
    arrayOfObject18[12] = RT.keyword(null, "file");
    arrayOfObject18[13] = "clojure/core.clj";
    const__2023 = (AFn)RT.map(arrayOfObject18);
    const__2024 = (Var)RT.var("clojure.core", "intern");
    const__2025 = Integer.valueOf(5697);
    Object[] arrayOfObject22 = new Object[2];
    Object[] arrayOfObject23 = new Object[2];
    arrayOfObject23[0] = Symbol.intern(null, "ns");
    IObj localIObj1 = (IObj)Symbol.intern(null, "name");
    Object[] arrayOfObject24 = new Object[2];
    arrayOfObject24[0] = RT.keyword(null, "tag");
    arrayOfObject24[1] = Symbol.intern(null, "clojure.lang.Symbol");
    arrayOfObject23[1] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject24));
    arrayOfObject22[0] = RT.vector(arrayOfObject23);
    Object[] arrayOfObject25 = new Object[3];
    arrayOfObject25[0] = Symbol.intern(null, "ns");
    arrayOfObject25[1] = Symbol.intern(null, "name");
    arrayOfObject25[2] = Symbol.intern(null, "val");
    arrayOfObject22[1] = RT.vector(arrayOfObject25);
    const__2026 = PersistentList.create(Arrays.asList(arrayOfObject22));
    Object[] arrayOfObject26 = new Object[14];
    arrayOfObject26[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject27 = new Object[2];
    Object[] arrayOfObject28 = new Object[2];
    arrayOfObject28[0] = Symbol.intern(null, "ns");
    IObj localIObj2 = (IObj)Symbol.intern(null, "name");
    Object[] arrayOfObject29 = new Object[2];
    arrayOfObject29[0] = RT.keyword(null, "tag");
    arrayOfObject29[1] = Symbol.intern(null, "clojure.lang.Symbol");
    arrayOfObject28[1] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject29));
    arrayOfObject27[0] = RT.vector(arrayOfObject28);
    Object[] arrayOfObject30 = new Object[3];
    arrayOfObject30[0] = Symbol.intern(null, "ns");
    arrayOfObject30[1] = Symbol.intern(null, "name");
    arrayOfObject30[2] = Symbol.intern(null, "val");
    arrayOfObject27[1] = RT.vector(arrayOfObject30);
    arrayOfObject26[1] = PersistentList.create(Arrays.asList(arrayOfObject27));
    arrayOfObject26[2] = RT.keyword(null, "column");
    arrayOfObject26[3] = Integer.valueOf(1);
    arrayOfObject26[4] = RT.keyword(null, "added");
    arrayOfObject26[5] = "1.0";
    arrayOfObject26[6] = RT.keyword(null, "static");
    arrayOfObject26[7] = Boolean.TRUE;
    arrayOfObject26[8] = RT.keyword(null, "doc");
    arrayOfObject26[9] = "Finds or creates a var named by the symbol name in the namespace\n  ns (which can be a symbol or a namespace), setting its root binding\n  to val if supplied. The namespace must exist. The var will adopt any\n  metadata from the name symbol.  Returns the var.";
    arrayOfObject26[10] = RT.keyword(null, "line");
    arrayOfObject26[11] = Integer.valueOf(5697);
    arrayOfObject26[12] = RT.keyword(null, "file");
    arrayOfObject26[13] = "clojure/core.clj";
    const__2027 = (AFn)RT.map(arrayOfObject26);
    const__2028 = (Var)RT.var("clojure.core", "while");
    const__2029 = Integer.valueOf(5713);
    Object[] arrayOfObject31 = new Object[1];
    Object[] arrayOfObject32 = new Object[3];
    arrayOfObject32[0] = Symbol.intern(null, "test");
    arrayOfObject32[1] = Symbol.intern(null, "&");
    arrayOfObject32[2] = Symbol.intern(null, "body");
    arrayOfObject31[0] = RT.vector(arrayOfObject32);
    const__2030 = PersistentList.create(Arrays.asList(arrayOfObject31));
    Object[] arrayOfObject33 = new Object[12];
    arrayOfObject33[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject34 = new Object[1];
    Object[] arrayOfObject35 = new Object[3];
    arrayOfObject35[0] = Symbol.intern(null, "test");
    arrayOfObject35[1] = Symbol.intern(null, "&");
    arrayOfObject35[2] = Symbol.intern(null, "body");
    arrayOfObject34[0] = RT.vector(arrayOfObject35);
    arrayOfObject33[1] = PersistentList.create(Arrays.asList(arrayOfObject34));
    arrayOfObject33[2] = RT.keyword(null, "column");
    arrayOfObject33[3] = Integer.valueOf(1);
    arrayOfObject33[4] = RT.keyword(null, "added");
    arrayOfObject33[5] = "1.0";
    arrayOfObject33[6] = RT.keyword(null, "doc");
    arrayOfObject33[7] = "Repeatedly executes body while test expression is true. Presumes\n  some side-effect will cause test to become false/nil. Returns nil";
    arrayOfObject33[8] = RT.keyword(null, "line");
    arrayOfObject33[9] = Integer.valueOf(5713);
    arrayOfObject33[10] = RT.keyword(null, "file");
    arrayOfObject33[11] = "clojure/core.clj";
    const__2031 = (AFn)RT.map(arrayOfObject33);
    const__2032 = (Var)RT.var("clojure.core", "memoize");
    const__2033 = Integer.valueOf(5723);
    Object[] arrayOfObject36 = new Object[1];
    Object[] arrayOfObject37 = new Object[1];
    arrayOfObject37[0] = Symbol.intern(null, "f");
    arrayOfObject36[0] = RT.vector(arrayOfObject37);
    const__2034 = PersistentList.create(Arrays.asList(arrayOfObject36));
    Object[] arrayOfObject38 = new Object[14];
    arrayOfObject38[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject39 = new Object[1];
    Object[] arrayOfObject40 = new Object[1];
    arrayOfObject40[0] = Symbol.intern(null, "f");
    arrayOfObject39[0] = RT.vector(arrayOfObject40);
    arrayOfObject38[1] = PersistentList.create(Arrays.asList(arrayOfObject39));
    arrayOfObject38[2] = RT.keyword(null, "column");
    arrayOfObject38[3] = Integer.valueOf(1);
    arrayOfObject38[4] = RT.keyword(null, "added");
    arrayOfObject38[5] = "1.0";
    arrayOfObject38[6] = RT.keyword(null, "static");
    arrayOfObject38[7] = Boolean.TRUE;
    arrayOfObject38[8] = RT.keyword(null, "doc");
    arrayOfObject38[9] = "Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use.";
    arrayOfObject38[10] = RT.keyword(null, "line");
    arrayOfObject38[11] = Integer.valueOf(5723);
    arrayOfObject38[12] = RT.keyword(null, "file");
    arrayOfObject38[13] = "clojure/core.clj";
    const__2035 = (AFn)RT.map(arrayOfObject38);
    const__2036 = (Var)RT.var("clojure.core", "condp");
    const__2037 = Integer.valueOf(5739);
    Object[] arrayOfObject41 = new Object[1];
    Object[] arrayOfObject42 = new Object[4];
    arrayOfObject42[0] = Symbol.intern(null, "pred");
    arrayOfObject42[1] = Symbol.intern(null, "expr");
    arrayOfObject42[2] = Symbol.intern(null, "&");
    arrayOfObject42[3] = Symbol.intern(null, "clauses");
    arrayOfObject41[0] = RT.vector(arrayOfObject42);
    const__2038 = PersistentList.create(Arrays.asList(arrayOfObject41));
    Object[] arrayOfObject43 = new Object[12];
    arrayOfObject43[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject44 = new Object[1];
    Object[] arrayOfObject45 = new Object[4];
    arrayOfObject45[0] = Symbol.intern(null, "pred");
    arrayOfObject45[1] = Symbol.intern(null, "expr");
    arrayOfObject45[2] = Symbol.intern(null, "&");
    arrayOfObject45[3] = Symbol.intern(null, "clauses");
    arrayOfObject44[0] = RT.vector(arrayOfObject45);
    arrayOfObject43[1] = PersistentList.create(Arrays.asList(arrayOfObject44));
    arrayOfObject43[2] = RT.keyword(null, "column");
    arrayOfObject43[3] = Integer.valueOf(1);
    arrayOfObject43[4] = RT.keyword(null, "added");
    arrayOfObject43[5] = "1.0";
    arrayOfObject43[6] = RT.keyword(null, "doc");
    arrayOfObject43[7] = "Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an\n  IllegalArgumentException is thrown.";
    arrayOfObject43[8] = RT.keyword(null, "line");
    arrayOfObject43[9] = Integer.valueOf(5739);
    arrayOfObject43[10] = RT.keyword(null, "file");
    arrayOfObject43[11] = "clojure/core.clj";
    const__2039 = (AFn)RT.map(arrayOfObject43);
    const__2040 = (Var)RT.var("clojure.core", "*agent*");
    const__2041 = (Var)RT.var("clojure.core", "load-file");
    const__2042 = (Var)RT.var("clojure.core", "add-doc-and-meta");
    const__2043 = Integer.valueOf(5787);
    Object[] arrayOfObject46 = new Object[1];
    Object[] arrayOfObject47 = new Object[3];
    arrayOfObject47[0] = Symbol.intern(null, "name");
    arrayOfObject47[1] = Symbol.intern(null, "docstring");
    arrayOfObject47[2] = Symbol.intern(null, "meta");
    arrayOfObject46[0] = RT.vector(arrayOfObject47);
    const__2044 = PersistentList.create(Arrays.asList(arrayOfObject46));
    Object[] arrayOfObject48 = new Object[10];
    arrayOfObject48[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject49 = new Object[1];
    Object[] arrayOfObject50 = new Object[3];
    arrayOfObject50[0] = Symbol.intern(null, "name");
    arrayOfObject50[1] = Symbol.intern(null, "docstring");
    arrayOfObject50[2] = Symbol.intern(null, "meta");
    arrayOfObject49[0] = RT.vector(arrayOfObject50);
    arrayOfObject48[1] = PersistentList.create(Arrays.asList(arrayOfObject49));
    arrayOfObject48[2] = RT.keyword(null, "column");
    arrayOfObject48[3] = Integer.valueOf(1);
    arrayOfObject48[4] = RT.keyword(null, "private");
    arrayOfObject48[5] = Boolean.TRUE;
    arrayOfObject48[6] = RT.keyword(null, "line");
    arrayOfObject48[7] = Integer.valueOf(5787);
    arrayOfObject48[8] = RT.keyword(null, "file");
    arrayOfObject48[9] = "clojure/core.clj";
    const__2045 = (AFn)RT.map(arrayOfObject48);
    const__2046 = (Var)RT.var("clojure.core", "*file*");
    Object[] arrayOfObject51 = new Object[2];
    arrayOfObject51[0] = RT.keyword(null, "added");
    arrayOfObject51[1] = "1.0";
    const__2047 = (AFn)RT.map(arrayOfObject51);
    const__2048 = (Var)RT.var("clojure.core", "*command-line-args*");
    Object[] arrayOfObject52 = new Object[2];
    arrayOfObject52[0] = RT.keyword(null, "added");
    arrayOfObject52[1] = "1.0";
    const__2049 = (AFn)RT.map(arrayOfObject52);
    const__2050 = (Var)RT.var("clojure.core", "*warn-on-reflection*");
    Object[] arrayOfObject53 = new Object[2];
    arrayOfObject53[0] = RT.keyword(null, "added");
    arrayOfObject53[1] = "1.0";
    const__2051 = (AFn)RT.map(arrayOfObject53);
    const__2052 = (Var)RT.var("clojure.core", "*compile-path*");
    Object[] arrayOfObject54 = new Object[2];
    arrayOfObject54[0] = RT.keyword(null, "added");
    arrayOfObject54[1] = "1.0";
    const__2053 = (AFn)RT.map(arrayOfObject54);
    const__2054 = (Var)RT.var("clojure.core", "*compile-files*");
    Object[] arrayOfObject55 = new Object[2];
    arrayOfObject55[0] = RT.keyword(null, "added");
    arrayOfObject55[1] = "1.0";
    const__2055 = (AFn)RT.map(arrayOfObject55);
    const__2056 = (Var)RT.var("clojure.core", "*unchecked-math*");
    Object[] arrayOfObject56 = new Object[2];
    arrayOfObject56[0] = RT.keyword(null, "added");
    arrayOfObject56[1] = "1.3";
    const__2057 = (AFn)RT.map(arrayOfObject56);
    const__2058 = (Var)RT.var("clojure.core", "*compiler-options*");
    Object[] arrayOfObject57 = new Object[2];
    arrayOfObject57[0] = RT.keyword(null, "added");
    arrayOfObject57[1] = "1.4";
    const__2059 = (AFn)RT.map(arrayOfObject57);
    const__2060 = (Var)RT.var("clojure.core", "*ns*");
    Object[] arrayOfObject58 = new Object[2];
    arrayOfObject58[0] = RT.keyword(null, "added");
    arrayOfObject58[1] = "1.0";
    const__2061 = (AFn)RT.map(arrayOfObject58);
    const__2062 = (Var)RT.var("clojure.core", "*in*");
    Object[] arrayOfObject59 = new Object[2];
    arrayOfObject59[0] = RT.keyword(null, "added");
    arrayOfObject59[1] = "1.0";
    const__2063 = (AFn)RT.map(arrayOfObject59);
    const__2064 = (Var)RT.var("clojure.core", "*out*");
    Object[] arrayOfObject60 = new Object[2];
    arrayOfObject60[0] = RT.keyword(null, "added");
    arrayOfObject60[1] = "1.0";
    const__2065 = (AFn)RT.map(arrayOfObject60);
    const__2066 = (Var)RT.var("clojure.core", "*err*");
    Object[] arrayOfObject61 = new Object[2];
    arrayOfObject61[0] = RT.keyword(null, "added");
    arrayOfObject61[1] = "1.0";
    const__2067 = (AFn)RT.map(arrayOfObject61);
    const__2068 = (Var)RT.var("clojure.core", "*flush-on-newline*");
    Object[] arrayOfObject62 = new Object[2];
    arrayOfObject62[0] = RT.keyword(null, "added");
    arrayOfObject62[1] = "1.0";
    const__2069 = (AFn)RT.map(arrayOfObject62);
    const__2070 = (Var)RT.var("clojure.core", "*print-meta*");
    Object[] arrayOfObject63 = new Object[2];
    arrayOfObject63[0] = RT.keyword(null, "added");
    arrayOfObject63[1] = "1.0";
    const__2071 = (AFn)RT.map(arrayOfObject63);
    const__2072 = (Var)RT.var("clojure.core", "*print-dup*");
    Object[] arrayOfObject64 = new Object[2];
    arrayOfObject64[0] = RT.keyword(null, "added");
    arrayOfObject64[1] = "1.0";
    const__2073 = (AFn)RT.map(arrayOfObject64);
    const__2074 = (Var)RT.var("clojure.core", "*print-readably*");
    Object[] arrayOfObject65 = new Object[2];
    arrayOfObject65[0] = RT.keyword(null, "added");
    arrayOfObject65[1] = "1.0";
    const__2075 = (AFn)RT.map(arrayOfObject65);
    const__2076 = (Var)RT.var("clojure.core", "*read-eval*");
    Object[] arrayOfObject66 = new Object[2];
    arrayOfObject66[0] = RT.keyword(null, "added");
    arrayOfObject66[1] = "1.0";
    const__2077 = (AFn)RT.map(arrayOfObject66);
    const__2078 = (Var)RT.var("clojure.core", "future?");
    const__2079 = Integer.valueOf(5909);
    Object[] arrayOfObject67 = new Object[1];
    Object[] arrayOfObject68 = new Object[1];
    arrayOfObject68[0] = Symbol.intern(null, "x");
    arrayOfObject67[0] = RT.vector(arrayOfObject68);
    const__2080 = PersistentList.create(Arrays.asList(arrayOfObject67));
    Object[] arrayOfObject69 = new Object[14];
    arrayOfObject69[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject70 = new Object[1];
    Object[] arrayOfObject71 = new Object[1];
    arrayOfObject71[0] = Symbol.intern(null, "x");
    arrayOfObject70[0] = RT.vector(arrayOfObject71);
    arrayOfObject69[1] = PersistentList.create(Arrays.asList(arrayOfObject70));
    arrayOfObject69[2] = RT.keyword(null, "column");
    arrayOfObject69[3] = Integer.valueOf(1);
    arrayOfObject69[4] = RT.keyword(null, "added");
    arrayOfObject69[5] = "1.1";
    arrayOfObject69[6] = RT.keyword(null, "static");
    arrayOfObject69[7] = Boolean.TRUE;
    arrayOfObject69[8] = RT.keyword(null, "doc");
    arrayOfObject69[9] = "Returns true if x is a future";
    arrayOfObject69[10] = RT.keyword(null, "line");
    arrayOfObject69[11] = Integer.valueOf(5909);
    arrayOfObject69[12] = RT.keyword(null, "file");
    arrayOfObject69[13] = "clojure/core.clj";
    const__2081 = (AFn)RT.map(arrayOfObject69);
    const__2082 = (Var)RT.var("clojure.core", "future-done?");
    const__2083 = Integer.valueOf(5915);
    Object[] arrayOfObject72 = new Object[1];
    Object[] arrayOfObject73 = new Object[1];
    IObj localIObj3 = (IObj)Symbol.intern(null, "f");
    Object[] arrayOfObject74 = new Object[2];
    arrayOfObject74[0] = RT.keyword(null, "tag");
    arrayOfObject74[1] = Symbol.intern(null, "java.util.concurrent.Future");
    arrayOfObject73[0] = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject74));
    arrayOfObject72[0] = RT.vector(arrayOfObject73);
    const__2084 = PersistentList.create(Arrays.asList(arrayOfObject72));
    Object[] arrayOfObject75 = new Object[14];
    arrayOfObject75[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject76 = new Object[1];
    Object[] arrayOfObject77 = new Object[1];
    IObj localIObj4 = (IObj)Symbol.intern(null, "f");
    Object[] arrayOfObject78 = new Object[2];
    arrayOfObject78[0] = RT.keyword(null, "tag");
    arrayOfObject78[1] = Symbol.intern(null, "java.util.concurrent.Future");
    arrayOfObject77[0] = localIObj4.withMeta((IPersistentMap)RT.map(arrayOfObject78));
    arrayOfObject76[0] = RT.vector(arrayOfObject77);
    arrayOfObject75[1] = PersistentList.create(Arrays.asList(arrayOfObject76));
    arrayOfObject75[2] = RT.keyword(null, "column");
    arrayOfObject75[3] = Integer.valueOf(1);
    arrayOfObject75[4] = RT.keyword(null, "added");
    arrayOfObject75[5] = "1.1";
    arrayOfObject75[6] = RT.keyword(null, "static");
    arrayOfObject75[7] = Boolean.TRUE;
    arrayOfObject75[8] = RT.keyword(null, "doc");
    arrayOfObject75[9] = "Returns true if future f is done";
    arrayOfObject75[10] = RT.keyword(null, "line");
    arrayOfObject75[11] = Integer.valueOf(5915);
    arrayOfObject75[12] = RT.keyword(null, "file");
    arrayOfObject75[13] = "clojure/core.clj";
    const__2085 = (AFn)RT.map(arrayOfObject75);
    const__2086 = (Var)RT.var("clojure.core", "letfn");
    const__2087 = Integer.valueOf(5922);
    Object[] arrayOfObject79 = new Object[1];
    Object[] arrayOfObject80 = new Object[3];
    arrayOfObject80[0] = Symbol.intern(null, "fnspecs");
    arrayOfObject80[1] = Symbol.intern(null, "&");
    arrayOfObject80[2] = Symbol.intern(null, "body");
    arrayOfObject79[0] = RT.vector(arrayOfObject80);
    const__2088 = PersistentList.create(Arrays.asList(arrayOfObject79));
    const__2089 = (Keyword)RT.keyword(null, "url");
    Object[] arrayOfObject81 = new Object[1];
    Object[] arrayOfObject82 = new Object[3];
    arrayOfObject82[0] = Symbol.intern(null, "letfn");
    Object[] arrayOfObject83 = new Object[1];
    arrayOfObject83[0] = Symbol.intern(null, "fnspecs*");
    arrayOfObject82[1] = RT.vector(arrayOfObject83);
    arrayOfObject82[2] = Symbol.intern(null, "exprs*");
    IObj localIObj5 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject82));
    Object[] arrayOfObject84 = new Object[4];
    arrayOfObject84[0] = RT.keyword(null, "line");
    arrayOfObject84[1] = Integer.valueOf(5928);
    arrayOfObject84[2] = RT.keyword(null, "column");
    arrayOfObject84[3] = Integer.valueOf(27);
    arrayOfObject81[0] = localIObj5.withMeta((IPersistentMap)RT.map(arrayOfObject84));
    const__2090 = (AFn)RT.vector(arrayOfObject81);
    Object[] arrayOfObject85 = new Object[18];
    arrayOfObject85[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject86 = new Object[1];
    Object[] arrayOfObject87 = new Object[3];
    arrayOfObject87[0] = Symbol.intern(null, "fnspecs");
    arrayOfObject87[1] = Symbol.intern(null, "&");
    arrayOfObject87[2] = Symbol.intern(null, "body");
    arrayOfObject86[0] = RT.vector(arrayOfObject87);
    arrayOfObject85[1] = PersistentList.create(Arrays.asList(arrayOfObject86));
    arrayOfObject85[2] = RT.keyword(null, "forms");
    Object[] arrayOfObject88 = new Object[1];
    Object[] arrayOfObject89 = new Object[3];
    arrayOfObject89[0] = Symbol.intern(null, "letfn");
    Object[] arrayOfObject90 = new Object[1];
    arrayOfObject90[0] = Symbol.intern(null, "fnspecs*");
    arrayOfObject89[1] = RT.vector(arrayOfObject90);
    arrayOfObject89[2] = Symbol.intern(null, "exprs*");
    IObj localIObj6 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject89));
    Object[] arrayOfObject91 = new Object[4];
    arrayOfObject91[0] = RT.keyword(null, "line");
    arrayOfObject91[1] = Integer.valueOf(5928);
    arrayOfObject91[2] = RT.keyword(null, "column");
    arrayOfObject91[3] = Integer.valueOf(27);
    arrayOfObject88[0] = localIObj6.withMeta((IPersistentMap)RT.map(arrayOfObject91));
    arrayOfObject85[3] = RT.vector(arrayOfObject88);
    arrayOfObject85[4] = RT.keyword(null, "special-form");
    arrayOfObject85[5] = Boolean.TRUE;
    arrayOfObject85[6] = RT.keyword(null, "column");
    arrayOfObject85[7] = Integer.valueOf(1);
    arrayOfObject85[8] = RT.keyword(null, "added");
    arrayOfObject85[9] = "1.0";
    arrayOfObject85[10] = RT.keyword(null, "url");
    arrayOfObject85[11] = null;
    arrayOfObject85[12] = RT.keyword(null, "doc");
    arrayOfObject85[13] = "fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\n  Takes a vector of function specs and a body, and generates a set of\n  bindings of functions to their names. All of the names are available\n  in all of the definitions of the functions, as well as the body.";
    arrayOfObject85[14] = RT.keyword(null, "line");
    arrayOfObject85[15] = Integer.valueOf(5922);
    arrayOfObject85[16] = RT.keyword(null, "file");
    arrayOfObject85[17] = "clojure/core.clj";
    const__2091 = (AFn)RT.map(arrayOfObject85);
    const__2092 = (Var)RT.var("clojure.core", "fnil");
    const__2093 = Integer.valueOf(5935);
    Object[] arrayOfObject92 = new Object[3];
    Object[] arrayOfObject93 = new Object[2];
    arrayOfObject93[0] = Symbol.intern(null, "f");
    arrayOfObject93[1] = Symbol.intern(null, "x");
    arrayOfObject92[0] = RT.vector(arrayOfObject93);
    Object[] arrayOfObject94 = new Object[3];
    arrayOfObject94[0] = Symbol.intern(null, "f");
    arrayOfObject94[1] = Symbol.intern(null, "x");
    arrayOfObject94[2] = Symbol.intern(null, "y");
    arrayOfObject92[1] = RT.vector(arrayOfObject94);
    Object[] arrayOfObject95 = new Object[4];
    arrayOfObject95[0] = Symbol.intern(null, "f");
    arrayOfObject95[1] = Symbol.intern(null, "x");
    arrayOfObject95[2] = Symbol.intern(null, "y");
    arrayOfObject95[3] = Symbol.intern(null, "z");
    arrayOfObject92[2] = RT.vector(arrayOfObject95);
    const__2094 = PersistentList.create(Arrays.asList(arrayOfObject92));
    Object[] arrayOfObject96 = new Object[14];
    arrayOfObject96[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject97 = new Object[3];
    Object[] arrayOfObject98 = new Object[2];
    arrayOfObject98[0] = Symbol.intern(null, "f");
    arrayOfObject98[1] = Symbol.intern(null, "x");
    arrayOfObject97[0] = RT.vector(arrayOfObject98);
    Object[] arrayOfObject99 = new Object[3];
    arrayOfObject99[0] = Symbol.intern(null, "f");
    arrayOfObject99[1] = Symbol.intern(null, "x");
    arrayOfObject99[2] = Symbol.intern(null, "y");
    arrayOfObject97[1] = RT.vector(arrayOfObject99);
    Object[] arrayOfObject100 = new Object[4];
    arrayOfObject100[0] = Symbol.intern(null, "f");
    arrayOfObject100[1] = Symbol.intern(null, "x");
    arrayOfObject100[2] = Symbol.intern(null, "y");
    arrayOfObject100[3] = Symbol.intern(null, "z");
    arrayOfObject97[2] = RT.vector(arrayOfObject100);
    arrayOfObject96[1] = PersistentList.create(Arrays.asList(arrayOfObject97));
    arrayOfObject96[2] = RT.keyword(null, "column");
    arrayOfObject96[3] = Integer.valueOf(1);
    arrayOfObject96[4] = RT.keyword(null, "added");
    arrayOfObject96[5] = "1.2";
    arrayOfObject96[6] = RT.keyword(null, "static");
    arrayOfObject96[7] = Boolean.TRUE;
    arrayOfObject96[8] = RT.keyword(null, "doc");
    arrayOfObject96[9] = "Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.";
    arrayOfObject96[10] = RT.keyword(null, "line");
    arrayOfObject96[11] = Integer.valueOf(5935);
    arrayOfObject96[12] = RT.keyword(null, "file");
    arrayOfObject96[13] = "clojure/core.clj";
    const__2095 = (AFn)RT.map(arrayOfObject96);
    const__2096 = (Var)RT.var("clojure.core", "shift-mask");
    const__2097 = Integer.valueOf(5962);
    Object[] arrayOfObject101 = new Object[1];
    Object[] arrayOfObject102 = new Object[3];
    arrayOfObject102[0] = Symbol.intern(null, "shift");
    arrayOfObject102[1] = Symbol.intern(null, "mask");
    arrayOfObject102[2] = Symbol.intern(null, "x");
    arrayOfObject101[0] = RT.vector(arrayOfObject102);
    const__2098 = PersistentList.create(Arrays.asList(arrayOfObject101));
    Object[] arrayOfObject103 = new Object[10];
    arrayOfObject103[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject104 = new Object[1];
    Object[] arrayOfObject105 = new Object[3];
    arrayOfObject105[0] = Symbol.intern(null, "shift");
    arrayOfObject105[1] = Symbol.intern(null, "mask");
    arrayOfObject105[2] = Symbol.intern(null, "x");
    arrayOfObject104[0] = RT.vector(arrayOfObject105);
    arrayOfObject103[1] = PersistentList.create(Arrays.asList(arrayOfObject104));
    arrayOfObject103[2] = RT.keyword(null, "column");
    arrayOfObject103[3] = Integer.valueOf(1);
    arrayOfObject103[4] = RT.keyword(null, "private");
    arrayOfObject103[5] = Boolean.TRUE;
    arrayOfObject103[6] = RT.keyword(null, "line");
    arrayOfObject103[7] = Integer.valueOf(5962);
    arrayOfObject103[8] = RT.keyword(null, "file");
    arrayOfObject103[9] = "clojure/core.clj";
    const__2099 = (AFn)RT.map(arrayOfObject103);
  }

  public static void __init21()
  {
    const__2100 = (Var)RT.var("clojure.core", "max-mask-bits");
    const__2101 = Integer.valueOf(5965);
    Object[] arrayOfObject1 = new Object[8];
    arrayOfObject1[0] = RT.keyword(null, "column");
    arrayOfObject1[1] = Integer.valueOf(1);
    arrayOfObject1[2] = RT.keyword(null, "private");
    arrayOfObject1[3] = Boolean.TRUE;
    arrayOfObject1[4] = RT.keyword(null, "line");
    arrayOfObject1[5] = Integer.valueOf(5965);
    arrayOfObject1[6] = RT.keyword(null, "file");
    arrayOfObject1[7] = "clojure/core.clj";
    const__2102 = (AFn)RT.map(arrayOfObject1);
    const__2103 = Long.valueOf(13L);
    const__2104 = (Var)RT.var("clojure.core", "max-switch-table-size");
    const__2105 = Integer.valueOf(5966);
    Object[] arrayOfObject2 = new Object[8];
    arrayOfObject2[0] = RT.keyword(null, "column");
    arrayOfObject2[1] = Integer.valueOf(1);
    arrayOfObject2[2] = RT.keyword(null, "private");
    arrayOfObject2[3] = Boolean.TRUE;
    arrayOfObject2[4] = RT.keyword(null, "line");
    arrayOfObject2[5] = Integer.valueOf(5966);
    arrayOfObject2[6] = RT.keyword(null, "file");
    arrayOfObject2[7] = "clojure/core.clj";
    const__2106 = (AFn)RT.map(arrayOfObject2);
    const__2107 = (Var)RT.var("clojure.core", "maybe-min-hash");
    const__2108 = Integer.valueOf(5968);
    Object[] arrayOfObject3 = new Object[1];
    Object[] arrayOfObject4 = new Object[1];
    arrayOfObject4[0] = Symbol.intern(null, "hashes");
    arrayOfObject3[0] = RT.vector(arrayOfObject4);
    const__2109 = PersistentList.create(Arrays.asList(arrayOfObject3));
    Object[] arrayOfObject5 = new Object[12];
    arrayOfObject5[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject6 = new Object[1];
    Object[] arrayOfObject7 = new Object[1];
    arrayOfObject7[0] = Symbol.intern(null, "hashes");
    arrayOfObject6[0] = RT.vector(arrayOfObject7);
    arrayOfObject5[1] = PersistentList.create(Arrays.asList(arrayOfObject6));
    arrayOfObject5[2] = RT.keyword(null, "column");
    arrayOfObject5[3] = Integer.valueOf(1);
    arrayOfObject5[4] = RT.keyword(null, "private");
    arrayOfObject5[5] = Boolean.TRUE;
    arrayOfObject5[6] = RT.keyword(null, "doc");
    arrayOfObject5[7] = "takes a collection of hashes and returns [shift mask] or nil if none found";
    arrayOfObject5[8] = RT.keyword(null, "line");
    arrayOfObject5[9] = Integer.valueOf(5968);
    arrayOfObject5[10] = RT.keyword(null, "file");
    arrayOfObject5[11] = "clojure/core.clj";
    const__2110 = (AFn)RT.map(arrayOfObject5);
    const__2111 = (Var)RT.var("clojure.core", "case-map");
    const__2112 = Integer.valueOf(5978);
    Object[] arrayOfObject8 = new Object[1];
    Object[] arrayOfObject9 = new Object[4];
    arrayOfObject9[0] = Symbol.intern(null, "case-f");
    arrayOfObject9[1] = Symbol.intern(null, "test-f");
    arrayOfObject9[2] = Symbol.intern(null, "tests");
    arrayOfObject9[3] = Symbol.intern(null, "thens");
    arrayOfObject8[0] = RT.vector(arrayOfObject9);
    const__2113 = PersistentList.create(Arrays.asList(arrayOfObject8));
    Object[] arrayOfObject10 = new Object[12];
    arrayOfObject10[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject11 = new Object[1];
    Object[] arrayOfObject12 = new Object[4];
    arrayOfObject12[0] = Symbol.intern(null, "case-f");
    arrayOfObject12[1] = Symbol.intern(null, "test-f");
    arrayOfObject12[2] = Symbol.intern(null, "tests");
    arrayOfObject12[3] = Symbol.intern(null, "thens");
    arrayOfObject11[0] = RT.vector(arrayOfObject12);
    arrayOfObject10[1] = PersistentList.create(Arrays.asList(arrayOfObject11));
    arrayOfObject10[2] = RT.keyword(null, "column");
    arrayOfObject10[3] = Integer.valueOf(1);
    arrayOfObject10[4] = RT.keyword(null, "private");
    arrayOfObject10[5] = Boolean.TRUE;
    arrayOfObject10[6] = RT.keyword(null, "doc");
    arrayOfObject10[7] = "Transforms a sequence of test constants and a corresponding sequence of then\n  expressions into a sorted map to be consumed by case*. The form of the map\n  entries are {(case-f test) [(test-f test) then]}.";
    arrayOfObject10[8] = RT.keyword(null, "line");
    arrayOfObject10[9] = Integer.valueOf(5978);
    arrayOfObject10[10] = RT.keyword(null, "file");
    arrayOfObject10[11] = "clojure/core.clj";
    const__2114 = (AFn)RT.map(arrayOfObject10);
    const__2115 = (Var)RT.var("clojure.core", "fits-table?");
    const__2116 = Integer.valueOf(5989);
    Object[] arrayOfObject13 = new Object[1];
    Object[] arrayOfObject14 = new Object[1];
    arrayOfObject14[0] = Symbol.intern(null, "ints");
    arrayOfObject13[0] = RT.vector(arrayOfObject14);
    const__2117 = PersistentList.create(Arrays.asList(arrayOfObject13));
    Object[] arrayOfObject15 = new Object[12];
    arrayOfObject15[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject16 = new Object[1];
    Object[] arrayOfObject17 = new Object[1];
    arrayOfObject17[0] = Symbol.intern(null, "ints");
    arrayOfObject16[0] = RT.vector(arrayOfObject17);
    arrayOfObject15[1] = PersistentList.create(Arrays.asList(arrayOfObject16));
    arrayOfObject15[2] = RT.keyword(null, "column");
    arrayOfObject15[3] = Integer.valueOf(1);
    arrayOfObject15[4] = RT.keyword(null, "private");
    arrayOfObject15[5] = Boolean.TRUE;
    arrayOfObject15[6] = RT.keyword(null, "doc");
    arrayOfObject15[7] = "Returns true if the collection of ints can fit within the\n  max-table-switch-size, false otherwise.";
    arrayOfObject15[8] = RT.keyword(null, "line");
    arrayOfObject15[9] = Integer.valueOf(5989);
    arrayOfObject15[10] = RT.keyword(null, "file");
    arrayOfObject15[11] = "clojure/core.clj";
    const__2118 = (AFn)RT.map(arrayOfObject15);
    const__2119 = (Var)RT.var("clojure.core", "prep-ints");
    const__2120 = Integer.valueOf(5995);
    Object[] arrayOfObject18 = new Object[1];
    Object[] arrayOfObject19 = new Object[2];
    arrayOfObject19[0] = Symbol.intern(null, "tests");
    arrayOfObject19[1] = Symbol.intern(null, "thens");
    arrayOfObject18[0] = RT.vector(arrayOfObject19);
    const__2121 = PersistentList.create(Arrays.asList(arrayOfObject18));
    Object[] arrayOfObject20 = new Object[12];
    arrayOfObject20[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject21 = new Object[1];
    Object[] arrayOfObject22 = new Object[2];
    arrayOfObject22[0] = Symbol.intern(null, "tests");
    arrayOfObject22[1] = Symbol.intern(null, "thens");
    arrayOfObject21[0] = RT.vector(arrayOfObject22);
    arrayOfObject20[1] = PersistentList.create(Arrays.asList(arrayOfObject21));
    arrayOfObject20[2] = RT.keyword(null, "column");
    arrayOfObject20[3] = Integer.valueOf(1);
    arrayOfObject20[4] = RT.keyword(null, "private");
    arrayOfObject20[5] = Boolean.TRUE;
    arrayOfObject20[6] = RT.keyword(null, "doc");
    arrayOfObject20[7] = "Takes a sequence of int-sized test constants and a corresponding sequence of\n  then expressions. Returns a tuple of [shift mask case-map switch-type] where\n  case-map is a map of int case values to [test then] tuples, and switch-type\n  is either :sparse or :compact.";
    arrayOfObject20[8] = RT.keyword(null, "line");
    arrayOfObject20[9] = Integer.valueOf(5995);
    arrayOfObject20[10] = RT.keyword(null, "file");
    arrayOfObject20[11] = "clojure/core.clj";
    const__2122 = (AFn)RT.map(arrayOfObject20);
    const__2123 = (Var)RT.var("clojure.core", "merge-hash-collisions");
    const__2124 = Integer.valueOf(6011);
    Object[] arrayOfObject23 = new Object[1];
    Object[] arrayOfObject24 = new Object[4];
    arrayOfObject24[0] = Symbol.intern(null, "expr-sym");
    arrayOfObject24[1] = Symbol.intern(null, "default");
    arrayOfObject24[2] = Symbol.intern(null, "tests");
    arrayOfObject24[3] = Symbol.intern(null, "thens");
    arrayOfObject23[0] = RT.vector(arrayOfObject24);
    const__2125 = PersistentList.create(Arrays.asList(arrayOfObject23));
    Object[] arrayOfObject25 = new Object[12];
    arrayOfObject25[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject26 = new Object[1];
    Object[] arrayOfObject27 = new Object[4];
    arrayOfObject27[0] = Symbol.intern(null, "expr-sym");
    arrayOfObject27[1] = Symbol.intern(null, "default");
    arrayOfObject27[2] = Symbol.intern(null, "tests");
    arrayOfObject27[3] = Symbol.intern(null, "thens");
    arrayOfObject26[0] = RT.vector(arrayOfObject27);
    arrayOfObject25[1] = PersistentList.create(Arrays.asList(arrayOfObject26));
    arrayOfObject25[2] = RT.keyword(null, "column");
    arrayOfObject25[3] = Integer.valueOf(1);
    arrayOfObject25[4] = RT.keyword(null, "private");
    arrayOfObject25[5] = Boolean.TRUE;
    arrayOfObject25[6] = RT.keyword(null, "doc");
    arrayOfObject25[7] = "Takes a case expression, default expression, and a sequence of test constants\n  and a corresponding sequence of then expressions. Returns a tuple of\n  [tests thens skip-check-set] where no tests have the same hash. Each set of\n  input test constants with the same hash is replaced with a single test\n  constant (the case int), and their respective thens are combined into:\n  (condp = expr\n    test-1 then-1\n    ...\n    test-n then-n\n    default).\n  The skip-check is a set of case ints for which post-switch equivalence\n  checking must not be done (the cases holding the above condp thens).";
    arrayOfObject25[8] = RT.keyword(null, "line");
    arrayOfObject25[9] = Integer.valueOf(6011);
    arrayOfObject25[10] = RT.keyword(null, "file");
    arrayOfObject25[11] = "clojure/core.clj";
    const__2126 = (AFn)RT.map(arrayOfObject25);
    const__2127 = (Var)RT.var("clojure.core", "prep-hashes");
    const__2128 = Integer.valueOf(6047);
    Object[] arrayOfObject28 = new Object[1];
    Object[] arrayOfObject29 = new Object[4];
    arrayOfObject29[0] = Symbol.intern(null, "expr-sym");
    arrayOfObject29[1] = Symbol.intern(null, "default");
    arrayOfObject29[2] = Symbol.intern(null, "tests");
    arrayOfObject29[3] = Symbol.intern(null, "thens");
    arrayOfObject28[0] = RT.vector(arrayOfObject29);
    const__2129 = PersistentList.create(Arrays.asList(arrayOfObject28));
    Object[] arrayOfObject30 = new Object[12];
    arrayOfObject30[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject31 = new Object[1];
    Object[] arrayOfObject32 = new Object[4];
    arrayOfObject32[0] = Symbol.intern(null, "expr-sym");
    arrayOfObject32[1] = Symbol.intern(null, "default");
    arrayOfObject32[2] = Symbol.intern(null, "tests");
    arrayOfObject32[3] = Symbol.intern(null, "thens");
    arrayOfObject31[0] = RT.vector(arrayOfObject32);
    arrayOfObject30[1] = PersistentList.create(Arrays.asList(arrayOfObject31));
    arrayOfObject30[2] = RT.keyword(null, "column");
    arrayOfObject30[3] = Integer.valueOf(1);
    arrayOfObject30[4] = RT.keyword(null, "private");
    arrayOfObject30[5] = Boolean.TRUE;
    arrayOfObject30[6] = RT.keyword(null, "doc");
    arrayOfObject30[7] = "Takes a sequence of test constants and a corresponding sequence of then\n  expressions. Returns a tuple of [shift mask case-map switch-type skip-check]\n  where case-map is a map of int case values to [test then] tuples, switch-type\n  is either :sparse or :compact, and skip-check is a set of case ints for which\n  post-switch equivalence checking must not be done (occurs with hash\n  collisions).";
    arrayOfObject30[8] = RT.keyword(null, "line");
    arrayOfObject30[9] = Integer.valueOf(6047);
    arrayOfObject30[10] = RT.keyword(null, "file");
    arrayOfObject30[11] = "clojure/core.clj";
    const__2130 = (AFn)RT.map(arrayOfObject30);
    const__2131 = (Var)RT.var("clojure.core", "case");
    const__2132 = Integer.valueOf(6075);
    Object[] arrayOfObject33 = new Object[1];
    Object[] arrayOfObject34 = new Object[3];
    arrayOfObject34[0] = Symbol.intern(null, "e");
    arrayOfObject34[1] = Symbol.intern(null, "&");
    arrayOfObject34[2] = Symbol.intern(null, "clauses");
    arrayOfObject33[0] = RT.vector(arrayOfObject34);
    const__2133 = PersistentList.create(Arrays.asList(arrayOfObject33));
    Object[] arrayOfObject35 = new Object[12];
    arrayOfObject35[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject36 = new Object[1];
    Object[] arrayOfObject37 = new Object[3];
    arrayOfObject37[0] = Symbol.intern(null, "e");
    arrayOfObject37[1] = Symbol.intern(null, "&");
    arrayOfObject37[2] = Symbol.intern(null, "clauses");
    arrayOfObject36[0] = RT.vector(arrayOfObject37);
    arrayOfObject35[1] = PersistentList.create(Arrays.asList(arrayOfObject36));
    arrayOfObject35[2] = RT.keyword(null, "column");
    arrayOfObject35[3] = Integer.valueOf(1);
    arrayOfObject35[4] = RT.keyword(null, "added");
    arrayOfObject35[5] = "1.2";
    arrayOfObject35[6] = RT.keyword(null, "doc");
    arrayOfObject35[7] = "Takes an expression, and a set of clauses.\n\n  Each clause can take the form of either:\n\n  test-constant result-expr\n\n  (test-constant1 ... test-constantN)  result-expr\n\n  The test-constants are not evaluated. They must be compile-time\n  literals, and need not be quoted.  If the expression is equal to a\n  test-constant, the corresponding result-expr is returned. A single\n  default expression can follow the clauses, and its value will be\n  returned if no clause matches. If no default expression is provided\n  and no clause matches, an IllegalArgumentException is thrown.\n\n  Unlike cond and condp, case does a constant-time dispatch, the\n  clauses are not considered sequentially.  All manner of constant\n  expressions are acceptable in case, including numbers, strings,\n  symbols, keywords, and (Clojure) composites thereof. Note that since\n  lists are used to group multiple constants that map to the same\n  expression, a vector can be used to match a list if needed. The\n  test-constants need not be all of the same type.";
    arrayOfObject35[8] = RT.keyword(null, "line");
    arrayOfObject35[9] = Integer.valueOf(6075);
    arrayOfObject35[10] = RT.keyword(null, "file");
    arrayOfObject35[11] = "clojure/core.clj";
    const__2134 = (AFn)RT.map(arrayOfObject35);
    const__2135 = (Var)RT.var("clojure.core", "reduced");
    const__2136 = Integer.valueOf(6139);
    Object[] arrayOfObject38 = new Object[1];
    Object[] arrayOfObject39 = new Object[1];
    arrayOfObject39[0] = Symbol.intern(null, "x");
    arrayOfObject38[0] = RT.vector(arrayOfObject39);
    const__2137 = PersistentList.create(Arrays.asList(arrayOfObject38));
    Object[] arrayOfObject40 = new Object[12];
    arrayOfObject40[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject41 = new Object[1];
    Object[] arrayOfObject42 = new Object[1];
    arrayOfObject42[0] = Symbol.intern(null, "x");
    arrayOfObject41[0] = RT.vector(arrayOfObject42);
    arrayOfObject40[1] = PersistentList.create(Arrays.asList(arrayOfObject41));
    arrayOfObject40[2] = RT.keyword(null, "column");
    arrayOfObject40[3] = Integer.valueOf(1);
    arrayOfObject40[4] = RT.keyword(null, "added");
    arrayOfObject40[5] = "1.5";
    arrayOfObject40[6] = RT.keyword(null, "doc");
    arrayOfObject40[7] = "Wraps x in a way such that a reduce will terminate with the value x";
    arrayOfObject40[8] = RT.keyword(null, "line");
    arrayOfObject40[9] = Integer.valueOf(6139);
    arrayOfObject40[10] = RT.keyword(null, "file");
    arrayOfObject40[11] = "clojure/core.clj";
    const__2138 = (AFn)RT.map(arrayOfObject40);
    const__2139 = (Var)RT.var("clojure.core", "reduced?");
    const__2140 = Integer.valueOf(6145);
    Object[] arrayOfObject43 = new Object[1];
    Object[] arrayOfObject44 = new Object[1];
    arrayOfObject44[0] = Symbol.intern(null, "x");
    arrayOfObject43[0] = RT.vector(arrayOfObject44);
    const__2141 = PersistentList.create(Arrays.asList(arrayOfObject43));
    Object[] arrayOfObject45 = new Object[1];
    arrayOfObject45[0] = Long.valueOf(1L);
    const__2142 = (AFn)PersistentHashSet.create(arrayOfObject45);
    const__2143 = (AFn)Symbol.intern(null, "clojure.core");
    const__2144 = (Var)RT.var("clojure.core", "reduce");
    const__2145 = Integer.valueOf(6163);
    Object[] arrayOfObject46 = new Object[2];
    Object[] arrayOfObject47 = new Object[2];
    arrayOfObject47[0] = Symbol.intern(null, "f");
    arrayOfObject47[1] = Symbol.intern(null, "coll");
    arrayOfObject46[0] = RT.vector(arrayOfObject47);
    Object[] arrayOfObject48 = new Object[3];
    arrayOfObject48[0] = Symbol.intern(null, "f");
    arrayOfObject48[1] = Symbol.intern(null, "val");
    arrayOfObject48[2] = Symbol.intern(null, "coll");
    arrayOfObject46[1] = RT.vector(arrayOfObject48);
    const__2146 = PersistentList.create(Arrays.asList(arrayOfObject46));
    Object[] arrayOfObject49 = new Object[12];
    arrayOfObject49[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject50 = new Object[2];
    Object[] arrayOfObject51 = new Object[2];
    arrayOfObject51[0] = Symbol.intern(null, "f");
    arrayOfObject51[1] = Symbol.intern(null, "coll");
    arrayOfObject50[0] = RT.vector(arrayOfObject51);
    Object[] arrayOfObject52 = new Object[3];
    arrayOfObject52[0] = Symbol.intern(null, "f");
    arrayOfObject52[1] = Symbol.intern(null, "val");
    arrayOfObject52[2] = Symbol.intern(null, "coll");
    arrayOfObject50[1] = RT.vector(arrayOfObject52);
    arrayOfObject49[1] = PersistentList.create(Arrays.asList(arrayOfObject50));
    arrayOfObject49[2] = RT.keyword(null, "column");
    arrayOfObject49[3] = Integer.valueOf(1);
    arrayOfObject49[4] = RT.keyword(null, "added");
    arrayOfObject49[5] = "1.0";
    arrayOfObject49[6] = RT.keyword(null, "doc");
    arrayOfObject49[7] = "f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.";
    arrayOfObject49[8] = RT.keyword(null, "line");
    arrayOfObject49[9] = Integer.valueOf(6163);
    arrayOfObject49[10] = RT.keyword(null, "file");
    arrayOfObject49[11] = "clojure/core.clj";
    const__2147 = (AFn)RT.map(arrayOfObject49);
    const__2148 = (Var)RT.var("clojure.core", "extend");
    const__2149 = Class.forName("clojure.lang.PersistentVector");
    const__2150 = (Var)RT.var("clojure.core.protocols", "IKVReduce");
    const__2151 = (Keyword)RT.keyword(null, "kv-reduce");
    const__2152 = Class.forName("clojure.lang.PersistentTreeMap");
    const__2153 = Class.forName("clojure.lang.PersistentArrayMap");
    const__2154 = Class.forName("clojure.lang.PersistentHashMap");
    const__2155 = Class.forName("clojure.lang.IPersistentMap");
    const__2156 = (Var)RT.var("clojure.core", "reduce-kv");
    const__2157 = Integer.valueOf(6211);
    Object[] arrayOfObject53 = new Object[1];
    Object[] arrayOfObject54 = new Object[3];
    arrayOfObject54[0] = Symbol.intern(null, "f");
    arrayOfObject54[1] = Symbol.intern(null, "init");
    arrayOfObject54[2] = Symbol.intern(null, "coll");
    arrayOfObject53[0] = RT.vector(arrayOfObject54);
    const__2158 = PersistentList.create(Arrays.asList(arrayOfObject53));
    Object[] arrayOfObject55 = new Object[12];
    arrayOfObject55[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject56 = new Object[1];
    Object[] arrayOfObject57 = new Object[3];
    arrayOfObject57[0] = Symbol.intern(null, "f");
    arrayOfObject57[1] = Symbol.intern(null, "init");
    arrayOfObject57[2] = Symbol.intern(null, "coll");
    arrayOfObject56[0] = RT.vector(arrayOfObject57);
    arrayOfObject55[1] = PersistentList.create(Arrays.asList(arrayOfObject56));
    arrayOfObject55[2] = RT.keyword(null, "column");
    arrayOfObject55[3] = Integer.valueOf(1);
    arrayOfObject55[4] = RT.keyword(null, "added");
    arrayOfObject55[5] = "1.4";
    arrayOfObject55[6] = RT.keyword(null, "doc");
    arrayOfObject55[7] = "Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals.";
    arrayOfObject55[8] = RT.keyword(null, "line");
    arrayOfObject55[9] = Integer.valueOf(6211);
    arrayOfObject55[10] = RT.keyword(null, "file");
    arrayOfObject55[11] = "clojure/core.clj";
    const__2159 = (AFn)RT.map(arrayOfObject55);
    const__2160 = (Var)RT.var("clojure.core", "into");
    const__2161 = Integer.valueOf(6222);
    Object[] arrayOfObject58 = new Object[1];
    Object[] arrayOfObject59 = new Object[2];
    arrayOfObject59[0] = Symbol.intern(null, "to");
    arrayOfObject59[1] = Symbol.intern(null, "from");
    arrayOfObject58[0] = RT.vector(arrayOfObject59);
    const__2162 = PersistentList.create(Arrays.asList(arrayOfObject58));
    Object[] arrayOfObject60 = new Object[14];
    arrayOfObject60[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject61 = new Object[1];
    Object[] arrayOfObject62 = new Object[2];
    arrayOfObject62[0] = Symbol.intern(null, "to");
    arrayOfObject62[1] = Symbol.intern(null, "from");
    arrayOfObject61[0] = RT.vector(arrayOfObject62);
    arrayOfObject60[1] = PersistentList.create(Arrays.asList(arrayOfObject61));
    arrayOfObject60[2] = RT.keyword(null, "column");
    arrayOfObject60[3] = Integer.valueOf(1);
    arrayOfObject60[4] = RT.keyword(null, "added");
    arrayOfObject60[5] = "1.0";
    arrayOfObject60[6] = RT.keyword(null, "static");
    arrayOfObject60[7] = Boolean.TRUE;
    arrayOfObject60[8] = RT.keyword(null, "doc");
    arrayOfObject60[9] = "Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined.";
    arrayOfObject60[10] = RT.keyword(null, "line");
    arrayOfObject60[11] = Integer.valueOf(6222);
    arrayOfObject60[12] = RT.keyword(null, "file");
    arrayOfObject60[13] = "clojure/core.clj";
    const__2163 = (AFn)RT.map(arrayOfObject60);
    const__2164 = (Var)RT.var("clojure.core", "mapv");
    const__2165 = Integer.valueOf(6232);
    Object[] arrayOfObject63 = new Object[4];
    Object[] arrayOfObject64 = new Object[2];
    arrayOfObject64[0] = Symbol.intern(null, "f");
    arrayOfObject64[1] = Symbol.intern(null, "coll");
    arrayOfObject63[0] = RT.vector(arrayOfObject64);
    Object[] arrayOfObject65 = new Object[3];
    arrayOfObject65[0] = Symbol.intern(null, "f");
    arrayOfObject65[1] = Symbol.intern(null, "c1");
    arrayOfObject65[2] = Symbol.intern(null, "c2");
    arrayOfObject63[1] = RT.vector(arrayOfObject65);
    Object[] arrayOfObject66 = new Object[4];
    arrayOfObject66[0] = Symbol.intern(null, "f");
    arrayOfObject66[1] = Symbol.intern(null, "c1");
    arrayOfObject66[2] = Symbol.intern(null, "c2");
    arrayOfObject66[3] = Symbol.intern(null, "c3");
    arrayOfObject63[2] = RT.vector(arrayOfObject66);
    Object[] arrayOfObject67 = new Object[6];
    arrayOfObject67[0] = Symbol.intern(null, "f");
    arrayOfObject67[1] = Symbol.intern(null, "c1");
    arrayOfObject67[2] = Symbol.intern(null, "c2");
    arrayOfObject67[3] = Symbol.intern(null, "c3");
    arrayOfObject67[4] = Symbol.intern(null, "&");
    arrayOfObject67[5] = Symbol.intern(null, "colls");
    arrayOfObject63[3] = RT.vector(arrayOfObject67);
    const__2166 = PersistentList.create(Arrays.asList(arrayOfObject63));
    Object[] arrayOfObject68 = new Object[14];
    arrayOfObject68[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject69 = new Object[4];
    Object[] arrayOfObject70 = new Object[2];
    arrayOfObject70[0] = Symbol.intern(null, "f");
    arrayOfObject70[1] = Symbol.intern(null, "coll");
    arrayOfObject69[0] = RT.vector(arrayOfObject70);
    Object[] arrayOfObject71 = new Object[3];
    arrayOfObject71[0] = Symbol.intern(null, "f");
    arrayOfObject71[1] = Symbol.intern(null, "c1");
    arrayOfObject71[2] = Symbol.intern(null, "c2");
    arrayOfObject69[1] = RT.vector(arrayOfObject71);
    Object[] arrayOfObject72 = new Object[4];
    arrayOfObject72[0] = Symbol.intern(null, "f");
    arrayOfObject72[1] = Symbol.intern(null, "c1");
    arrayOfObject72[2] = Symbol.intern(null, "c2");
    arrayOfObject72[3] = Symbol.intern(null, "c3");
    arrayOfObject69[2] = RT.vector(arrayOfObject72);
    Object[] arrayOfObject73 = new Object[6];
    arrayOfObject73[0] = Symbol.intern(null, "f");
    arrayOfObject73[1] = Symbol.intern(null, "c1");
    arrayOfObject73[2] = Symbol.intern(null, "c2");
    arrayOfObject73[3] = Symbol.intern(null, "c3");
    arrayOfObject73[4] = Symbol.intern(null, "&");
    arrayOfObject73[5] = Symbol.intern(null, "colls");
    arrayOfObject69[3] = RT.vector(arrayOfObject73);
    arrayOfObject68[1] = PersistentList.create(Arrays.asList(arrayOfObject69));
    arrayOfObject68[2] = RT.keyword(null, "column");
    arrayOfObject68[3] = Integer.valueOf(1);
    arrayOfObject68[4] = RT.keyword(null, "added");
    arrayOfObject68[5] = "1.4";
    arrayOfObject68[6] = RT.keyword(null, "static");
    arrayOfObject68[7] = Boolean.TRUE;
    arrayOfObject68[8] = RT.keyword(null, "doc");
    arrayOfObject68[9] = "Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.";
    arrayOfObject68[10] = RT.keyword(null, "line");
    arrayOfObject68[11] = Integer.valueOf(6232);
    arrayOfObject68[12] = RT.keyword(null, "file");
    arrayOfObject68[13] = "clojure/core.clj";
    const__2167 = (AFn)RT.map(arrayOfObject68);
    const__2168 = (Var)RT.var("clojure.core", "filterv");
    const__2169 = Integer.valueOf(6250);
    Object[] arrayOfObject74 = new Object[1];
    Object[] arrayOfObject75 = new Object[2];
    arrayOfObject75[0] = Symbol.intern(null, "pred");
    arrayOfObject75[1] = Symbol.intern(null, "coll");
    arrayOfObject74[0] = RT.vector(arrayOfObject75);
    const__2170 = PersistentList.create(Arrays.asList(arrayOfObject74));
    Object[] arrayOfObject76 = new Object[14];
    arrayOfObject76[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject77 = new Object[1];
    Object[] arrayOfObject78 = new Object[2];
    arrayOfObject78[0] = Symbol.intern(null, "pred");
    arrayOfObject78[1] = Symbol.intern(null, "coll");
    arrayOfObject77[0] = RT.vector(arrayOfObject78);
    arrayOfObject76[1] = PersistentList.create(Arrays.asList(arrayOfObject77));
    arrayOfObject76[2] = RT.keyword(null, "column");
    arrayOfObject76[3] = Integer.valueOf(1);
    arrayOfObject76[4] = RT.keyword(null, "added");
    arrayOfObject76[5] = "1.4";
    arrayOfObject76[6] = RT.keyword(null, "static");
    arrayOfObject76[7] = Boolean.TRUE;
    arrayOfObject76[8] = RT.keyword(null, "doc");
    arrayOfObject76[9] = "Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.";
    arrayOfObject76[10] = RT.keyword(null, "line");
    arrayOfObject76[11] = Integer.valueOf(6250);
    arrayOfObject76[12] = RT.keyword(null, "file");
    arrayOfObject76[13] = "clojure/core.clj";
    const__2171 = (AFn)RT.map(arrayOfObject76);
    Object[] arrayOfObject79 = new Object[3];
    arrayOfObject79[0] = Symbol.intern(null, "clojure.java.io");
    arrayOfObject79[1] = RT.keyword(null, "as");
    arrayOfObject79[2] = Symbol.intern(null, "jio");
    const__2172 = (AFn)RT.vector(arrayOfObject79);
    const__2173 = (Var)RT.var("clojure.core", "normalize-slurp-opts");
    const__2174 = Integer.valueOf(6263);
    Object[] arrayOfObject80 = new Object[1];
    Object[] arrayOfObject81 = new Object[1];
    arrayOfObject81[0] = Symbol.intern(null, "opts");
    arrayOfObject80[0] = RT.vector(arrayOfObject81);
    const__2175 = PersistentList.create(Arrays.asList(arrayOfObject80));
    Object[] arrayOfObject82 = new Object[10];
    arrayOfObject82[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject83 = new Object[1];
    Object[] arrayOfObject84 = new Object[1];
    arrayOfObject84[0] = Symbol.intern(null, "opts");
    arrayOfObject83[0] = RT.vector(arrayOfObject84);
    arrayOfObject82[1] = PersistentList.create(Arrays.asList(arrayOfObject83));
    arrayOfObject82[2] = RT.keyword(null, "column");
    arrayOfObject82[3] = Integer.valueOf(1);
    arrayOfObject82[4] = RT.keyword(null, "private");
    arrayOfObject82[5] = Boolean.TRUE;
    arrayOfObject82[6] = RT.keyword(null, "line");
    arrayOfObject82[7] = Integer.valueOf(6263);
    arrayOfObject82[8] = RT.keyword(null, "file");
    arrayOfObject82[9] = "clojure/core.clj";
    const__2176 = (AFn)RT.map(arrayOfObject82);
    const__2177 = (Var)RT.var("clojure.core", "slurp");
    const__2178 = Integer.valueOf(6271);
    Object[] arrayOfObject85 = new Object[1];
    Object[] arrayOfObject86 = new Object[3];
    arrayOfObject86[0] = Symbol.intern(null, "f");
    arrayOfObject86[1] = Symbol.intern(null, "&");
    arrayOfObject86[2] = Symbol.intern(null, "opts");
    arrayOfObject85[0] = RT.vector(arrayOfObject86);
    const__2179 = PersistentList.create(Arrays.asList(arrayOfObject85));
    Object[] arrayOfObject87 = new Object[12];
    arrayOfObject87[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject88 = new Object[1];
    Object[] arrayOfObject89 = new Object[3];
    arrayOfObject89[0] = Symbol.intern(null, "f");
    arrayOfObject89[1] = Symbol.intern(null, "&");
    arrayOfObject89[2] = Symbol.intern(null, "opts");
    arrayOfObject88[0] = RT.vector(arrayOfObject89);
    arrayOfObject87[1] = PersistentList.create(Arrays.asList(arrayOfObject88));
    arrayOfObject87[2] = RT.keyword(null, "column");
    arrayOfObject87[3] = Integer.valueOf(1);
    arrayOfObject87[4] = RT.keyword(null, "added");
    arrayOfObject87[5] = "1.0";
    arrayOfObject87[6] = RT.keyword(null, "doc");
    arrayOfObject87[7] = "Opens a reader on f and reads all its contents, returning a string.\n  See clojure.java.io/reader for a complete list of supported arguments.";
    arrayOfObject87[8] = RT.keyword(null, "line");
    arrayOfObject87[9] = Integer.valueOf(6271);
    arrayOfObject87[10] = RT.keyword(null, "file");
    arrayOfObject87[11] = "clojure/core.clj";
    const__2180 = (AFn)RT.map(arrayOfObject87);
    const__2181 = (Var)RT.var("clojure.core", "spit");
    const__2182 = Integer.valueOf(6286);
    Object[] arrayOfObject90 = new Object[1];
    Object[] arrayOfObject91 = new Object[4];
    arrayOfObject91[0] = Symbol.intern(null, "f");
    arrayOfObject91[1] = Symbol.intern(null, "content");
    arrayOfObject91[2] = Symbol.intern(null, "&");
    arrayOfObject91[3] = Symbol.intern(null, "options");
    arrayOfObject90[0] = RT.vector(arrayOfObject91);
    const__2183 = PersistentList.create(Arrays.asList(arrayOfObject90));
    Object[] arrayOfObject92 = new Object[12];
    arrayOfObject92[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject93 = new Object[1];
    Object[] arrayOfObject94 = new Object[4];
    arrayOfObject94[0] = Symbol.intern(null, "f");
    arrayOfObject94[1] = Symbol.intern(null, "content");
    arrayOfObject94[2] = Symbol.intern(null, "&");
    arrayOfObject94[3] = Symbol.intern(null, "options");
    arrayOfObject93[0] = RT.vector(arrayOfObject94);
    arrayOfObject92[1] = PersistentList.create(Arrays.asList(arrayOfObject93));
    arrayOfObject92[2] = RT.keyword(null, "column");
    arrayOfObject92[3] = Integer.valueOf(1);
    arrayOfObject92[4] = RT.keyword(null, "added");
    arrayOfObject92[5] = "1.2";
    arrayOfObject92[6] = RT.keyword(null, "doc");
    arrayOfObject92[7] = "Opposite of slurp.  Opens f with writer, writes content, then\n  closes f. Options passed to clojure.java.io/writer.";
    arrayOfObject92[8] = RT.keyword(null, "line");
    arrayOfObject92[9] = Integer.valueOf(6286);
    arrayOfObject92[10] = RT.keyword(null, "file");
    arrayOfObject92[11] = "clojure/core.clj";
    const__2184 = (AFn)RT.map(arrayOfObject92);
    const__2185 = (Var)RT.var("clojure.core", "future-call");
    const__2186 = Integer.valueOf(6295);
    Object[] arrayOfObject95 = new Object[1];
    Object[] arrayOfObject96 = new Object[1];
    arrayOfObject96[0] = Symbol.intern(null, "f");
    arrayOfObject95[0] = RT.vector(arrayOfObject96);
    const__2187 = PersistentList.create(Arrays.asList(arrayOfObject95));
    Object[] arrayOfObject97 = new Object[14];
    arrayOfObject97[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject98 = new Object[1];
    Object[] arrayOfObject99 = new Object[1];
    arrayOfObject99[0] = Symbol.intern(null, "f");
    arrayOfObject98[0] = RT.vector(arrayOfObject99);
    arrayOfObject97[1] = PersistentList.create(Arrays.asList(arrayOfObject98));
    arrayOfObject97[2] = RT.keyword(null, "column");
    arrayOfObject97[3] = Integer.valueOf(1);
    arrayOfObject97[4] = RT.keyword(null, "added");
    arrayOfObject97[5] = "1.1";
    arrayOfObject97[6] = RT.keyword(null, "static");
    arrayOfObject97[7] = Boolean.TRUE;
    arrayOfObject97[8] = RT.keyword(null, "doc");
    arrayOfObject97[9] = "Takes a function of no args and yields a future object that will\n  invoke the function in another thread, and will cache the result and\n  return it on all subsequent calls to deref/@. If the computation has\n  not yet finished, calls to deref/@ will block, unless the variant\n  of deref with timeout is used. See also - realized?.";
    arrayOfObject97[10] = RT.keyword(null, "line");
    arrayOfObject97[11] = Integer.valueOf(6295);
    arrayOfObject97[12] = RT.keyword(null, "file");
    arrayOfObject97[13] = "clojure/core.clj";
    const__2188 = (AFn)RT.map(arrayOfObject97);
    const__2189 = (Var)RT.var("clojure.core", "future");
    const__2190 = Integer.valueOf(6322);
    Object[] arrayOfObject100 = new Object[1];
    Object[] arrayOfObject101 = new Object[2];
    arrayOfObject101[0] = Symbol.intern(null, "&");
    arrayOfObject101[1] = Symbol.intern(null, "body");
    arrayOfObject100[0] = RT.vector(arrayOfObject101);
    const__2191 = PersistentList.create(Arrays.asList(arrayOfObject100));
    Object[] arrayOfObject102 = new Object[12];
    arrayOfObject102[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject103 = new Object[1];
    Object[] arrayOfObject104 = new Object[2];
    arrayOfObject104[0] = Symbol.intern(null, "&");
    arrayOfObject104[1] = Symbol.intern(null, "body");
    arrayOfObject103[0] = RT.vector(arrayOfObject104);
    arrayOfObject102[1] = PersistentList.create(Arrays.asList(arrayOfObject103));
    arrayOfObject102[2] = RT.keyword(null, "column");
    arrayOfObject102[3] = Integer.valueOf(1);
    arrayOfObject102[4] = RT.keyword(null, "added");
    arrayOfObject102[5] = "1.1";
    arrayOfObject102[6] = RT.keyword(null, "doc");
    arrayOfObject102[7] = "Takes a body of expressions and yields a future object that will\n  invoke the body in another thread, and will cache the result and\n  return it on all subsequent calls to deref/@. If the computation has\n  not yet finished, calls to deref/@ will block, unless the variant of\n  deref with timeout is used. See also - realized?.";
    arrayOfObject102[8] = RT.keyword(null, "line");
    arrayOfObject102[9] = Integer.valueOf(6322);
    arrayOfObject102[10] = RT.keyword(null, "file");
    arrayOfObject102[11] = "clojure/core.clj";
    const__2192 = (AFn)RT.map(arrayOfObject102);
    const__2193 = (Var)RT.var("clojure.core", "future-cancel");
    const__2194 = Integer.valueOf(6332);
    Object[] arrayOfObject105 = new Object[1];
    Object[] arrayOfObject106 = new Object[1];
    IObj localIObj1 = (IObj)Symbol.intern(null, "f");
    Object[] arrayOfObject107 = new Object[2];
    arrayOfObject107[0] = RT.keyword(null, "tag");
    arrayOfObject107[1] = Symbol.intern(null, "java.util.concurrent.Future");
    arrayOfObject106[0] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject107));
    arrayOfObject105[0] = RT.vector(arrayOfObject106);
    const__2195 = PersistentList.create(Arrays.asList(arrayOfObject105));
    Object[] arrayOfObject108 = new Object[14];
    arrayOfObject108[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject109 = new Object[1];
    Object[] arrayOfObject110 = new Object[1];
    IObj localIObj2 = (IObj)Symbol.intern(null, "f");
    Object[] arrayOfObject111 = new Object[2];
    arrayOfObject111[0] = RT.keyword(null, "tag");
    arrayOfObject111[1] = Symbol.intern(null, "java.util.concurrent.Future");
    arrayOfObject110[0] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject111));
    arrayOfObject109[0] = RT.vector(arrayOfObject110);
    arrayOfObject108[1] = PersistentList.create(Arrays.asList(arrayOfObject109));
    arrayOfObject108[2] = RT.keyword(null, "column");
    arrayOfObject108[3] = Integer.valueOf(1);
    arrayOfObject108[4] = RT.keyword(null, "added");
    arrayOfObject108[5] = "1.1";
    arrayOfObject108[6] = RT.keyword(null, "static");
    arrayOfObject108[7] = Boolean.TRUE;
    arrayOfObject108[8] = RT.keyword(null, "doc");
    arrayOfObject108[9] = "Cancels the future, if possible.";
    arrayOfObject108[10] = RT.keyword(null, "line");
    arrayOfObject108[11] = Integer.valueOf(6332);
    arrayOfObject108[12] = RT.keyword(null, "file");
    arrayOfObject108[13] = "clojure/core.clj";
    const__2196 = (AFn)RT.map(arrayOfObject108);
    const__2197 = (Var)RT.var("clojure.core", "future-cancelled?");
    const__2198 = Integer.valueOf(6338);
    Object[] arrayOfObject112 = new Object[1];
    Object[] arrayOfObject113 = new Object[1];
    IObj localIObj3 = (IObj)Symbol.intern(null, "f");
    Object[] arrayOfObject114 = new Object[2];
    arrayOfObject114[0] = RT.keyword(null, "tag");
    arrayOfObject114[1] = Symbol.intern(null, "java.util.concurrent.Future");
    arrayOfObject113[0] = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject114));
    arrayOfObject112[0] = RT.vector(arrayOfObject113);
    const__2199 = PersistentList.create(Arrays.asList(arrayOfObject112));
  }

  public static void __init22()
  {
    Object[] arrayOfObject1 = new Object[14];
    arrayOfObject1[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject2 = new Object[1];
    Object[] arrayOfObject3 = new Object[1];
    IObj localIObj1 = (IObj)Symbol.intern(null, "f");
    Object[] arrayOfObject4 = new Object[2];
    arrayOfObject4[0] = RT.keyword(null, "tag");
    arrayOfObject4[1] = Symbol.intern(null, "java.util.concurrent.Future");
    arrayOfObject3[0] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject4));
    arrayOfObject2[0] = RT.vector(arrayOfObject3);
    arrayOfObject1[1] = PersistentList.create(Arrays.asList(arrayOfObject2));
    arrayOfObject1[2] = RT.keyword(null, "column");
    arrayOfObject1[3] = Integer.valueOf(1);
    arrayOfObject1[4] = RT.keyword(null, "added");
    arrayOfObject1[5] = "1.1";
    arrayOfObject1[6] = RT.keyword(null, "static");
    arrayOfObject1[7] = Boolean.TRUE;
    arrayOfObject1[8] = RT.keyword(null, "doc");
    arrayOfObject1[9] = "Returns true if future f is cancelled";
    arrayOfObject1[10] = RT.keyword(null, "line");
    arrayOfObject1[11] = Integer.valueOf(6338);
    arrayOfObject1[12] = RT.keyword(null, "file");
    arrayOfObject1[13] = "clojure/core.clj";
    const__2200 = (AFn)RT.map(arrayOfObject1);
    const__2201 = (Var)RT.var("clojure.core", "pmap");
    const__2202 = Integer.valueOf(6344);
    Object[] arrayOfObject5 = new Object[2];
    Object[] arrayOfObject6 = new Object[2];
    arrayOfObject6[0] = Symbol.intern(null, "f");
    arrayOfObject6[1] = Symbol.intern(null, "coll");
    arrayOfObject5[0] = RT.vector(arrayOfObject6);
    Object[] arrayOfObject7 = new Object[4];
    arrayOfObject7[0] = Symbol.intern(null, "f");
    arrayOfObject7[1] = Symbol.intern(null, "coll");
    arrayOfObject7[2] = Symbol.intern(null, "&");
    arrayOfObject7[3] = Symbol.intern(null, "colls");
    arrayOfObject5[1] = RT.vector(arrayOfObject7);
    const__2203 = PersistentList.create(Arrays.asList(arrayOfObject5));
    Object[] arrayOfObject8 = new Object[14];
    arrayOfObject8[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject9 = new Object[2];
    Object[] arrayOfObject10 = new Object[2];
    arrayOfObject10[0] = Symbol.intern(null, "f");
    arrayOfObject10[1] = Symbol.intern(null, "coll");
    arrayOfObject9[0] = RT.vector(arrayOfObject10);
    Object[] arrayOfObject11 = new Object[4];
    arrayOfObject11[0] = Symbol.intern(null, "f");
    arrayOfObject11[1] = Symbol.intern(null, "coll");
    arrayOfObject11[2] = Symbol.intern(null, "&");
    arrayOfObject11[3] = Symbol.intern(null, "colls");
    arrayOfObject9[1] = RT.vector(arrayOfObject11);
    arrayOfObject8[1] = PersistentList.create(Arrays.asList(arrayOfObject9));
    arrayOfObject8[2] = RT.keyword(null, "column");
    arrayOfObject8[3] = Integer.valueOf(1);
    arrayOfObject8[4] = RT.keyword(null, "added");
    arrayOfObject8[5] = "1.0";
    arrayOfObject8[6] = RT.keyword(null, "static");
    arrayOfObject8[7] = Boolean.TRUE;
    arrayOfObject8[8] = RT.keyword(null, "doc");
    arrayOfObject8[9] = "Like map, except f is applied in parallel. Semi-lazy in that the\n  parallel computation stays ahead of the consumption, but doesn't\n  realize the entire result unless required. Only useful for\n  computationally intensive functions where the time of f dominates\n  the coordination overhead.";
    arrayOfObject8[10] = RT.keyword(null, "line");
    arrayOfObject8[11] = Integer.valueOf(6344);
    arrayOfObject8[12] = RT.keyword(null, "file");
    arrayOfObject8[13] = "clojure/core.clj";
    const__2204 = (AFn)RT.map(arrayOfObject8);
    const__2205 = (Var)RT.var("clojure.core", "pcalls");
    const__2206 = Integer.valueOf(6369);
    Object[] arrayOfObject12 = new Object[1];
    Object[] arrayOfObject13 = new Object[2];
    arrayOfObject13[0] = Symbol.intern(null, "&");
    arrayOfObject13[1] = Symbol.intern(null, "fns");
    arrayOfObject12[0] = RT.vector(arrayOfObject13);
    const__2207 = PersistentList.create(Arrays.asList(arrayOfObject12));
    Object[] arrayOfObject14 = new Object[14];
    arrayOfObject14[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject15 = new Object[1];
    Object[] arrayOfObject16 = new Object[2];
    arrayOfObject16[0] = Symbol.intern(null, "&");
    arrayOfObject16[1] = Symbol.intern(null, "fns");
    arrayOfObject15[0] = RT.vector(arrayOfObject16);
    arrayOfObject14[1] = PersistentList.create(Arrays.asList(arrayOfObject15));
    arrayOfObject14[2] = RT.keyword(null, "column");
    arrayOfObject14[3] = Integer.valueOf(1);
    arrayOfObject14[4] = RT.keyword(null, "added");
    arrayOfObject14[5] = "1.0";
    arrayOfObject14[6] = RT.keyword(null, "static");
    arrayOfObject14[7] = Boolean.TRUE;
    arrayOfObject14[8] = RT.keyword(null, "doc");
    arrayOfObject14[9] = "Executes the no-arg fns in parallel, returning a lazy sequence of\n  their values";
    arrayOfObject14[10] = RT.keyword(null, "line");
    arrayOfObject14[11] = Integer.valueOf(6369);
    arrayOfObject14[12] = RT.keyword(null, "file");
    arrayOfObject14[13] = "clojure/core.clj";
    const__2208 = (AFn)RT.map(arrayOfObject14);
    const__2209 = (Var)RT.var("clojure.core", "pvalues");
    const__2210 = Integer.valueOf(6376);
    Object[] arrayOfObject17 = new Object[1];
    Object[] arrayOfObject18 = new Object[2];
    arrayOfObject18[0] = Symbol.intern(null, "&");
    arrayOfObject18[1] = Symbol.intern(null, "exprs");
    arrayOfObject17[0] = RT.vector(arrayOfObject18);
    const__2211 = PersistentList.create(Arrays.asList(arrayOfObject17));
    Object[] arrayOfObject19 = new Object[14];
    arrayOfObject19[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject20 = new Object[1];
    Object[] arrayOfObject21 = new Object[2];
    arrayOfObject21[0] = Symbol.intern(null, "&");
    arrayOfObject21[1] = Symbol.intern(null, "exprs");
    arrayOfObject20[0] = RT.vector(arrayOfObject21);
    arrayOfObject19[1] = PersistentList.create(Arrays.asList(arrayOfObject20));
    arrayOfObject19[2] = RT.keyword(null, "column");
    arrayOfObject19[3] = Integer.valueOf(1);
    arrayOfObject19[4] = RT.keyword(null, "added");
    arrayOfObject19[5] = "1.0";
    arrayOfObject19[6] = RT.keyword(null, "static");
    arrayOfObject19[7] = Boolean.TRUE;
    arrayOfObject19[8] = RT.keyword(null, "doc");
    arrayOfObject19[9] = "Returns a lazy sequence of the values of the exprs, which are\n  evaluated in parallel";
    arrayOfObject19[10] = RT.keyword(null, "line");
    arrayOfObject19[11] = Integer.valueOf(6376);
    arrayOfObject19[12] = RT.keyword(null, "file");
    arrayOfObject19[13] = "clojure/core.clj";
    const__2212 = (AFn)RT.map(arrayOfObject19);
    const__2213 = (Var)RT.var("clojure.core", "*clojure-version*");
    Object[] arrayOfObject22 = new Object[2];
    arrayOfObject22[0] = RT.keyword(null, "added");
    arrayOfObject22[1] = "1.0";
    const__2214 = (AFn)RT.map(arrayOfObject22);
    const__2215 = (Var)RT.var("clojure.core", "clojure-version");
    const__2216 = Integer.valueOf(6413);
    Object[] arrayOfObject23 = new Object[1];
    arrayOfObject23[0] = RT.vector(new Object[0]);
    const__2217 = PersistentList.create(Arrays.asList(arrayOfObject23));
    Object[] arrayOfObject24 = new Object[12];
    arrayOfObject24[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject25 = new Object[1];
    arrayOfObject25[0] = RT.vector(new Object[0]);
    arrayOfObject24[1] = PersistentList.create(Arrays.asList(arrayOfObject25));
    arrayOfObject24[2] = RT.keyword(null, "column");
    arrayOfObject24[3] = Integer.valueOf(1);
    arrayOfObject24[4] = RT.keyword(null, "added");
    arrayOfObject24[5] = "1.0";
    arrayOfObject24[6] = RT.keyword(null, "doc");
    arrayOfObject24[7] = "Returns clojure version as a printable string.";
    arrayOfObject24[8] = RT.keyword(null, "line");
    arrayOfObject24[9] = Integer.valueOf(6413);
    arrayOfObject24[10] = RT.keyword(null, "file");
    arrayOfObject24[11] = "clojure/core.clj";
    const__2218 = (AFn)RT.map(arrayOfObject24);
    const__2219 = (Var)RT.var("clojure.core", "promise");
    const__2220 = Integer.valueOf(6428);
    Object[] arrayOfObject26 = new Object[1];
    arrayOfObject26[0] = RT.vector(new Object[0]);
    const__2221 = PersistentList.create(Arrays.asList(arrayOfObject26));
    Object[] arrayOfObject27 = new Object[14];
    arrayOfObject27[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject28 = new Object[1];
    arrayOfObject28[0] = RT.vector(new Object[0]);
    arrayOfObject27[1] = PersistentList.create(Arrays.asList(arrayOfObject28));
    arrayOfObject27[2] = RT.keyword(null, "column");
    arrayOfObject27[3] = Integer.valueOf(1);
    arrayOfObject27[4] = RT.keyword(null, "added");
    arrayOfObject27[5] = "1.1";
    arrayOfObject27[6] = RT.keyword(null, "static");
    arrayOfObject27[7] = Boolean.TRUE;
    arrayOfObject27[8] = RT.keyword(null, "doc");
    arrayOfObject27[9] = "Alpha - subject to change.\n  Returns a promise object that can be read with deref/@, and set,\n  once only, with deliver. Calls to deref/@ prior to delivery will\n  block, unless the variant of deref with timeout is used. All\n  subsequent derefs will return the same delivered value without\n  blocking. See also - realized?.";
    arrayOfObject27[10] = RT.keyword(null, "line");
    arrayOfObject27[11] = Integer.valueOf(6428);
    arrayOfObject27[12] = RT.keyword(null, "file");
    arrayOfObject27[13] = "clojure/core.clj";
    const__2222 = (AFn)RT.map(arrayOfObject27);
    const__2223 = (Var)RT.var("clojure.core", "deliver");
    const__2224 = Integer.valueOf(6460);
    Object[] arrayOfObject29 = new Object[1];
    Object[] arrayOfObject30 = new Object[2];
    arrayOfObject30[0] = Symbol.intern(null, "promise");
    arrayOfObject30[1] = Symbol.intern(null, "val");
    arrayOfObject29[0] = RT.vector(arrayOfObject30);
    const__2225 = PersistentList.create(Arrays.asList(arrayOfObject29));
    Object[] arrayOfObject31 = new Object[14];
    arrayOfObject31[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject32 = new Object[1];
    Object[] arrayOfObject33 = new Object[2];
    arrayOfObject33[0] = Symbol.intern(null, "promise");
    arrayOfObject33[1] = Symbol.intern(null, "val");
    arrayOfObject32[0] = RT.vector(arrayOfObject33);
    arrayOfObject31[1] = PersistentList.create(Arrays.asList(arrayOfObject32));
    arrayOfObject31[2] = RT.keyword(null, "column");
    arrayOfObject31[3] = Integer.valueOf(1);
    arrayOfObject31[4] = RT.keyword(null, "added");
    arrayOfObject31[5] = "1.1";
    arrayOfObject31[6] = RT.keyword(null, "static");
    arrayOfObject31[7] = Boolean.TRUE;
    arrayOfObject31[8] = RT.keyword(null, "doc");
    arrayOfObject31[9] = "Alpha - subject to change.\n  Delivers the supplied value to the promise, releasing any pending\n  derefs. A subsequent call to deliver on a promise will have no effect.";
    arrayOfObject31[10] = RT.keyword(null, "line");
    arrayOfObject31[11] = Integer.valueOf(6460);
    arrayOfObject31[12] = RT.keyword(null, "file");
    arrayOfObject31[13] = "clojure/core.clj";
    const__2226 = (AFn)RT.map(arrayOfObject31);
    const__2227 = Integer.valueOf(6470);
    Object[] arrayOfObject34 = new Object[1];
    Object[] arrayOfObject35 = new Object[1];
    arrayOfObject35[0] = Symbol.intern(null, "x");
    arrayOfObject34[0] = RT.vector(arrayOfObject35);
    const__2228 = PersistentList.create(Arrays.asList(arrayOfObject34));
    Object[] arrayOfObject36 = new Object[14];
    arrayOfObject36[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject37 = new Object[1];
    Object[] arrayOfObject38 = new Object[1];
    arrayOfObject38[0] = Symbol.intern(null, "x");
    arrayOfObject37[0] = RT.vector(arrayOfObject38);
    arrayOfObject36[1] = PersistentList.create(Arrays.asList(arrayOfObject37));
    arrayOfObject36[2] = RT.keyword(null, "column");
    arrayOfObject36[3] = Integer.valueOf(1);
    arrayOfObject36[4] = RT.keyword(null, "added");
    arrayOfObject36[5] = "1.2";
    arrayOfObject36[6] = RT.keyword(null, "static");
    arrayOfObject36[7] = Boolean.TRUE;
    arrayOfObject36[8] = RT.keyword(null, "doc");
    arrayOfObject36[9] = "Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns an empty sequence.";
    arrayOfObject36[10] = RT.keyword(null, "line");
    arrayOfObject36[11] = Integer.valueOf(6470);
    arrayOfObject36[12] = RT.keyword(null, "file");
    arrayOfObject36[13] = "clojure/core.clj";
    const__2229 = (AFn)RT.map(arrayOfObject36);
    const__2230 = (Var)RT.var("clojure.core", "group-by");
    const__2231 = Integer.valueOf(6480);
    Object[] arrayOfObject39 = new Object[1];
    Object[] arrayOfObject40 = new Object[2];
    arrayOfObject40[0] = Symbol.intern(null, "f");
    arrayOfObject40[1] = Symbol.intern(null, "coll");
    arrayOfObject39[0] = RT.vector(arrayOfObject40);
    const__2232 = PersistentList.create(Arrays.asList(arrayOfObject39));
    Object[] arrayOfObject41 = new Object[14];
    arrayOfObject41[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject42 = new Object[1];
    Object[] arrayOfObject43 = new Object[2];
    arrayOfObject43[0] = Symbol.intern(null, "f");
    arrayOfObject43[1] = Symbol.intern(null, "coll");
    arrayOfObject42[0] = RT.vector(arrayOfObject43);
    arrayOfObject41[1] = PersistentList.create(Arrays.asList(arrayOfObject42));
    arrayOfObject41[2] = RT.keyword(null, "column");
    arrayOfObject41[3] = Integer.valueOf(1);
    arrayOfObject41[4] = RT.keyword(null, "added");
    arrayOfObject41[5] = "1.2";
    arrayOfObject41[6] = RT.keyword(null, "static");
    arrayOfObject41[7] = Boolean.TRUE;
    arrayOfObject41[8] = RT.keyword(null, "doc");
    arrayOfObject41[9] = "Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll.";
    arrayOfObject41[10] = RT.keyword(null, "line");
    arrayOfObject41[11] = Integer.valueOf(6480);
    arrayOfObject41[12] = RT.keyword(null, "file");
    arrayOfObject41[13] = "clojure/core.clj";
    const__2233 = (AFn)RT.map(arrayOfObject41);
    const__2234 = (Var)RT.var("clojure.core", "partition-by");
    const__2235 = Integer.valueOf(6494);
    Object[] arrayOfObject44 = new Object[1];
    Object[] arrayOfObject45 = new Object[2];
    arrayOfObject45[0] = Symbol.intern(null, "f");
    arrayOfObject45[1] = Symbol.intern(null, "coll");
    arrayOfObject44[0] = RT.vector(arrayOfObject45);
    const__2236 = PersistentList.create(Arrays.asList(arrayOfObject44));
    Object[] arrayOfObject46 = new Object[14];
    arrayOfObject46[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject47 = new Object[1];
    Object[] arrayOfObject48 = new Object[2];
    arrayOfObject48[0] = Symbol.intern(null, "f");
    arrayOfObject48[1] = Symbol.intern(null, "coll");
    arrayOfObject47[0] = RT.vector(arrayOfObject48);
    arrayOfObject46[1] = PersistentList.create(Arrays.asList(arrayOfObject47));
    arrayOfObject46[2] = RT.keyword(null, "column");
    arrayOfObject46[3] = Integer.valueOf(1);
    arrayOfObject46[4] = RT.keyword(null, "added");
    arrayOfObject46[5] = "1.2";
    arrayOfObject46[6] = RT.keyword(null, "static");
    arrayOfObject46[7] = Boolean.TRUE;
    arrayOfObject46[8] = RT.keyword(null, "doc");
    arrayOfObject46[9] = "Applies f to each value in coll, splitting it each time f returns\n   a new value.  Returns a lazy seq of partitions.";
    arrayOfObject46[10] = RT.keyword(null, "line");
    arrayOfObject46[11] = Integer.valueOf(6494);
    arrayOfObject46[12] = RT.keyword(null, "file");
    arrayOfObject46[13] = "clojure/core.clj";
    const__2237 = (AFn)RT.map(arrayOfObject46);
    const__2238 = (Var)RT.var("clojure.core", "frequencies");
    const__2239 = Integer.valueOf(6507);
    Object[] arrayOfObject49 = new Object[1];
    Object[] arrayOfObject50 = new Object[1];
    arrayOfObject50[0] = Symbol.intern(null, "coll");
    arrayOfObject49[0] = RT.vector(arrayOfObject50);
    const__2240 = PersistentList.create(Arrays.asList(arrayOfObject49));
    Object[] arrayOfObject51 = new Object[14];
    arrayOfObject51[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject52 = new Object[1];
    Object[] arrayOfObject53 = new Object[1];
    arrayOfObject53[0] = Symbol.intern(null, "coll");
    arrayOfObject52[0] = RT.vector(arrayOfObject53);
    arrayOfObject51[1] = PersistentList.create(Arrays.asList(arrayOfObject52));
    arrayOfObject51[2] = RT.keyword(null, "column");
    arrayOfObject51[3] = Integer.valueOf(1);
    arrayOfObject51[4] = RT.keyword(null, "added");
    arrayOfObject51[5] = "1.2";
    arrayOfObject51[6] = RT.keyword(null, "static");
    arrayOfObject51[7] = Boolean.TRUE;
    arrayOfObject51[8] = RT.keyword(null, "doc");
    arrayOfObject51[9] = "Returns a map from distinct items in coll to the number of times\n  they appear.";
    arrayOfObject51[10] = RT.keyword(null, "line");
    arrayOfObject51[11] = Integer.valueOf(6507);
    arrayOfObject51[12] = RT.keyword(null, "file");
    arrayOfObject51[13] = "clojure/core.clj";
    const__2241 = (AFn)RT.map(arrayOfObject51);
    const__2242 = (Var)RT.var("clojure.core", "reductions");
    const__2243 = Integer.valueOf(6518);
    Object[] arrayOfObject54 = new Object[2];
    Object[] arrayOfObject55 = new Object[2];
    arrayOfObject55[0] = Symbol.intern(null, "f");
    arrayOfObject55[1] = Symbol.intern(null, "coll");
    arrayOfObject54[0] = RT.vector(arrayOfObject55);
    Object[] arrayOfObject56 = new Object[3];
    arrayOfObject56[0] = Symbol.intern(null, "f");
    arrayOfObject56[1] = Symbol.intern(null, "init");
    arrayOfObject56[2] = Symbol.intern(null, "coll");
    arrayOfObject54[1] = RT.vector(arrayOfObject56);
    const__2244 = PersistentList.create(Arrays.asList(arrayOfObject54));
    Object[] arrayOfObject57 = new Object[12];
    arrayOfObject57[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject58 = new Object[2];
    Object[] arrayOfObject59 = new Object[2];
    arrayOfObject59[0] = Symbol.intern(null, "f");
    arrayOfObject59[1] = Symbol.intern(null, "coll");
    arrayOfObject58[0] = RT.vector(arrayOfObject59);
    Object[] arrayOfObject60 = new Object[3];
    arrayOfObject60[0] = Symbol.intern(null, "f");
    arrayOfObject60[1] = Symbol.intern(null, "init");
    arrayOfObject60[2] = Symbol.intern(null, "coll");
    arrayOfObject58[1] = RT.vector(arrayOfObject60);
    arrayOfObject57[1] = PersistentList.create(Arrays.asList(arrayOfObject58));
    arrayOfObject57[2] = RT.keyword(null, "column");
    arrayOfObject57[3] = Integer.valueOf(1);
    arrayOfObject57[4] = RT.keyword(null, "added");
    arrayOfObject57[5] = "1.2";
    arrayOfObject57[6] = RT.keyword(null, "doc");
    arrayOfObject57[7] = "Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.";
    arrayOfObject57[8] = RT.keyword(null, "line");
    arrayOfObject57[9] = Integer.valueOf(6518);
    arrayOfObject57[10] = RT.keyword(null, "file");
    arrayOfObject57[11] = "clojure/core.clj";
    const__2245 = (AFn)RT.map(arrayOfObject57);
    const__2246 = (Var)RT.var("clojure.core", "rand-nth");
    const__2247 = Integer.valueOf(6533);
    Object[] arrayOfObject61 = new Object[1];
    Object[] arrayOfObject62 = new Object[1];
    arrayOfObject62[0] = Symbol.intern(null, "coll");
    arrayOfObject61[0] = RT.vector(arrayOfObject62);
    const__2248 = PersistentList.create(Arrays.asList(arrayOfObject61));
    Object[] arrayOfObject63 = new Object[14];
    arrayOfObject63[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject64 = new Object[1];
    Object[] arrayOfObject65 = new Object[1];
    arrayOfObject65[0] = Symbol.intern(null, "coll");
    arrayOfObject64[0] = RT.vector(arrayOfObject65);
    arrayOfObject63[1] = PersistentList.create(Arrays.asList(arrayOfObject64));
    arrayOfObject63[2] = RT.keyword(null, "column");
    arrayOfObject63[3] = Integer.valueOf(1);
    arrayOfObject63[4] = RT.keyword(null, "added");
    arrayOfObject63[5] = "1.2";
    arrayOfObject63[6] = RT.keyword(null, "static");
    arrayOfObject63[7] = Boolean.TRUE;
    arrayOfObject63[8] = RT.keyword(null, "doc");
    arrayOfObject63[9] = "Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection.";
    arrayOfObject63[10] = RT.keyword(null, "line");
    arrayOfObject63[11] = Integer.valueOf(6533);
    arrayOfObject63[12] = RT.keyword(null, "file");
    arrayOfObject63[13] = "clojure/core.clj";
    const__2249 = (AFn)RT.map(arrayOfObject63);
    const__2250 = (Var)RT.var("clojure.core", "partition-all");
    const__2251 = Integer.valueOf(6542);
    Object[] arrayOfObject66 = new Object[2];
    Object[] arrayOfObject67 = new Object[2];
    arrayOfObject67[0] = Symbol.intern(null, "n");
    arrayOfObject67[1] = Symbol.intern(null, "coll");
    arrayOfObject66[0] = RT.vector(arrayOfObject67);
    Object[] arrayOfObject68 = new Object[3];
    arrayOfObject68[0] = Symbol.intern(null, "n");
    arrayOfObject68[1] = Symbol.intern(null, "step");
    arrayOfObject68[2] = Symbol.intern(null, "coll");
    arrayOfObject66[1] = RT.vector(arrayOfObject68);
    const__2252 = PersistentList.create(Arrays.asList(arrayOfObject66));
    Object[] arrayOfObject69 = new Object[14];
    arrayOfObject69[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject70 = new Object[2];
    Object[] arrayOfObject71 = new Object[2];
    arrayOfObject71[0] = Symbol.intern(null, "n");
    arrayOfObject71[1] = Symbol.intern(null, "coll");
    arrayOfObject70[0] = RT.vector(arrayOfObject71);
    Object[] arrayOfObject72 = new Object[3];
    arrayOfObject72[0] = Symbol.intern(null, "n");
    arrayOfObject72[1] = Symbol.intern(null, "step");
    arrayOfObject72[2] = Symbol.intern(null, "coll");
    arrayOfObject70[1] = RT.vector(arrayOfObject72);
    arrayOfObject69[1] = PersistentList.create(Arrays.asList(arrayOfObject70));
    arrayOfObject69[2] = RT.keyword(null, "column");
    arrayOfObject69[3] = Integer.valueOf(1);
    arrayOfObject69[4] = RT.keyword(null, "added");
    arrayOfObject69[5] = "1.2";
    arrayOfObject69[6] = RT.keyword(null, "static");
    arrayOfObject69[7] = Boolean.TRUE;
    arrayOfObject69[8] = RT.keyword(null, "doc");
    arrayOfObject69[9] = "Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.";
    arrayOfObject69[10] = RT.keyword(null, "line");
    arrayOfObject69[11] = Integer.valueOf(6542);
    arrayOfObject69[12] = RT.keyword(null, "file");
    arrayOfObject69[13] = "clojure/core.clj";
    const__2253 = (AFn)RT.map(arrayOfObject69);
    const__2254 = (Var)RT.var("clojure.core", "shuffle");
    const__2255 = Integer.valueOf(6555);
    Object[] arrayOfObject73 = new Object[1];
    Object[] arrayOfObject74 = new Object[1];
    IObj localIObj2 = (IObj)Symbol.intern(null, "coll");
    Object[] arrayOfObject75 = new Object[2];
    arrayOfObject75[0] = RT.keyword(null, "tag");
    arrayOfObject75[1] = Symbol.intern(null, "java.util.Collection");
    arrayOfObject74[0] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject75));
    arrayOfObject73[0] = RT.vector(arrayOfObject74);
    const__2256 = PersistentList.create(Arrays.asList(arrayOfObject73));
    Object[] arrayOfObject76 = new Object[14];
    arrayOfObject76[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject77 = new Object[1];
    Object[] arrayOfObject78 = new Object[1];
    IObj localIObj3 = (IObj)Symbol.intern(null, "coll");
    Object[] arrayOfObject79 = new Object[2];
    arrayOfObject79[0] = RT.keyword(null, "tag");
    arrayOfObject79[1] = Symbol.intern(null, "java.util.Collection");
    arrayOfObject78[0] = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject79));
    arrayOfObject77[0] = RT.vector(arrayOfObject78);
    arrayOfObject76[1] = PersistentList.create(Arrays.asList(arrayOfObject77));
    arrayOfObject76[2] = RT.keyword(null, "column");
    arrayOfObject76[3] = Integer.valueOf(1);
    arrayOfObject76[4] = RT.keyword(null, "added");
    arrayOfObject76[5] = "1.2";
    arrayOfObject76[6] = RT.keyword(null, "static");
    arrayOfObject76[7] = Boolean.TRUE;
    arrayOfObject76[8] = RT.keyword(null, "doc");
    arrayOfObject76[9] = "Return a random permutation of coll";
    arrayOfObject76[10] = RT.keyword(null, "line");
    arrayOfObject76[11] = Integer.valueOf(6555);
    arrayOfObject76[12] = RT.keyword(null, "file");
    arrayOfObject76[13] = "clojure/core.clj";
    const__2257 = (AFn)RT.map(arrayOfObject76);
    const__2258 = (Var)RT.var("clojure.core", "map-indexed");
    const__2259 = Integer.valueOf(6564);
    Object[] arrayOfObject80 = new Object[1];
    Object[] arrayOfObject81 = new Object[2];
    arrayOfObject81[0] = Symbol.intern(null, "f");
    arrayOfObject81[1] = Symbol.intern(null, "coll");
    arrayOfObject80[0] = RT.vector(arrayOfObject81);
    const__2260 = PersistentList.create(Arrays.asList(arrayOfObject80));
    Object[] arrayOfObject82 = new Object[14];
    arrayOfObject82[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject83 = new Object[1];
    Object[] arrayOfObject84 = new Object[2];
    arrayOfObject84[0] = Symbol.intern(null, "f");
    arrayOfObject84[1] = Symbol.intern(null, "coll");
    arrayOfObject83[0] = RT.vector(arrayOfObject84);
    arrayOfObject82[1] = PersistentList.create(Arrays.asList(arrayOfObject83));
    arrayOfObject82[2] = RT.keyword(null, "column");
    arrayOfObject82[3] = Integer.valueOf(1);
    arrayOfObject82[4] = RT.keyword(null, "added");
    arrayOfObject82[5] = "1.2";
    arrayOfObject82[6] = RT.keyword(null, "static");
    arrayOfObject82[7] = Boolean.TRUE;
    arrayOfObject82[8] = RT.keyword(null, "doc");
    arrayOfObject82[9] = "Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item.";
    arrayOfObject82[10] = RT.keyword(null, "line");
    arrayOfObject82[11] = Integer.valueOf(6564);
    arrayOfObject82[12] = RT.keyword(null, "file");
    arrayOfObject82[13] = "clojure/core.clj";
    const__2261 = (AFn)RT.map(arrayOfObject82);
    const__2262 = (Var)RT.var("clojure.core", "keep");
    const__2263 = Integer.valueOf(6585);
    Object[] arrayOfObject85 = new Object[1];
    Object[] arrayOfObject86 = new Object[2];
    arrayOfObject86[0] = Symbol.intern(null, "f");
    arrayOfObject86[1] = Symbol.intern(null, "coll");
    arrayOfObject85[0] = RT.vector(arrayOfObject86);
    const__2264 = PersistentList.create(Arrays.asList(arrayOfObject85));
    Object[] arrayOfObject87 = new Object[14];
    arrayOfObject87[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject88 = new Object[1];
    Object[] arrayOfObject89 = new Object[2];
    arrayOfObject89[0] = Symbol.intern(null, "f");
    arrayOfObject89[1] = Symbol.intern(null, "coll");
    arrayOfObject88[0] = RT.vector(arrayOfObject89);
    arrayOfObject87[1] = PersistentList.create(Arrays.asList(arrayOfObject88));
    arrayOfObject87[2] = RT.keyword(null, "column");
    arrayOfObject87[3] = Integer.valueOf(1);
    arrayOfObject87[4] = RT.keyword(null, "added");
    arrayOfObject87[5] = "1.2";
    arrayOfObject87[6] = RT.keyword(null, "static");
    arrayOfObject87[7] = Boolean.TRUE;
    arrayOfObject87[8] = RT.keyword(null, "doc");
    arrayOfObject87[9] = "Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.";
    arrayOfObject87[10] = RT.keyword(null, "line");
    arrayOfObject87[11] = Integer.valueOf(6585);
    arrayOfObject87[12] = RT.keyword(null, "file");
    arrayOfObject87[13] = "clojure/core.clj";
    const__2265 = (AFn)RT.map(arrayOfObject87);
    const__2266 = (Var)RT.var("clojure.core", "keep-indexed");
    const__2267 = Integer.valueOf(6608);
    Object[] arrayOfObject90 = new Object[1];
    Object[] arrayOfObject91 = new Object[2];
    arrayOfObject91[0] = Symbol.intern(null, "f");
    arrayOfObject91[1] = Symbol.intern(null, "coll");
    arrayOfObject90[0] = RT.vector(arrayOfObject91);
    const__2268 = PersistentList.create(Arrays.asList(arrayOfObject90));
    Object[] arrayOfObject92 = new Object[14];
    arrayOfObject92[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject93 = new Object[1];
    Object[] arrayOfObject94 = new Object[2];
    arrayOfObject94[0] = Symbol.intern(null, "f");
    arrayOfObject94[1] = Symbol.intern(null, "coll");
    arrayOfObject93[0] = RT.vector(arrayOfObject94);
    arrayOfObject92[1] = PersistentList.create(Arrays.asList(arrayOfObject93));
    arrayOfObject92[2] = RT.keyword(null, "column");
    arrayOfObject92[3] = Integer.valueOf(1);
    arrayOfObject92[4] = RT.keyword(null, "added");
    arrayOfObject92[5] = "1.2";
    arrayOfObject92[6] = RT.keyword(null, "static");
    arrayOfObject92[7] = Boolean.TRUE;
    arrayOfObject92[8] = RT.keyword(null, "doc");
    arrayOfObject92[9] = "Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.";
    arrayOfObject92[10] = RT.keyword(null, "line");
    arrayOfObject92[11] = Integer.valueOf(6608);
    arrayOfObject92[12] = RT.keyword(null, "file");
    arrayOfObject92[13] = "clojure/core.clj";
    const__2269 = (AFn)RT.map(arrayOfObject92);
    const__2270 = (Var)RT.var("clojure.core", "every-pred");
    const__2271 = Integer.valueOf(6633);
    Object[] arrayOfObject95 = new Object[4];
    Object[] arrayOfObject96 = new Object[1];
    arrayOfObject96[0] = Symbol.intern(null, "p");
    arrayOfObject95[0] = RT.vector(arrayOfObject96);
    Object[] arrayOfObject97 = new Object[2];
    arrayOfObject97[0] = Symbol.intern(null, "p1");
    arrayOfObject97[1] = Symbol.intern(null, "p2");
    arrayOfObject95[1] = RT.vector(arrayOfObject97);
    Object[] arrayOfObject98 = new Object[3];
    arrayOfObject98[0] = Symbol.intern(null, "p1");
    arrayOfObject98[1] = Symbol.intern(null, "p2");
    arrayOfObject98[2] = Symbol.intern(null, "p3");
    arrayOfObject95[2] = RT.vector(arrayOfObject98);
    Object[] arrayOfObject99 = new Object[5];
    arrayOfObject99[0] = Symbol.intern(null, "p1");
    arrayOfObject99[1] = Symbol.intern(null, "p2");
    arrayOfObject99[2] = Symbol.intern(null, "p3");
    arrayOfObject99[3] = Symbol.intern(null, "&");
    arrayOfObject99[4] = Symbol.intern(null, "ps");
    arrayOfObject95[3] = RT.vector(arrayOfObject99);
    const__2272 = PersistentList.create(Arrays.asList(arrayOfObject95));
    Object[] arrayOfObject100 = new Object[12];
    arrayOfObject100[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject101 = new Object[4];
    Object[] arrayOfObject102 = new Object[1];
    arrayOfObject102[0] = Symbol.intern(null, "p");
    arrayOfObject101[0] = RT.vector(arrayOfObject102);
    Object[] arrayOfObject103 = new Object[2];
    arrayOfObject103[0] = Symbol.intern(null, "p1");
    arrayOfObject103[1] = Symbol.intern(null, "p2");
    arrayOfObject101[1] = RT.vector(arrayOfObject103);
    Object[] arrayOfObject104 = new Object[3];
    arrayOfObject104[0] = Symbol.intern(null, "p1");
    arrayOfObject104[1] = Symbol.intern(null, "p2");
    arrayOfObject104[2] = Symbol.intern(null, "p3");
    arrayOfObject101[2] = RT.vector(arrayOfObject104);
    Object[] arrayOfObject105 = new Object[5];
    arrayOfObject105[0] = Symbol.intern(null, "p1");
    arrayOfObject105[1] = Symbol.intern(null, "p2");
    arrayOfObject105[2] = Symbol.intern(null, "p3");
    arrayOfObject105[3] = Symbol.intern(null, "&");
    arrayOfObject105[4] = Symbol.intern(null, "ps");
    arrayOfObject101[3] = RT.vector(arrayOfObject105);
    arrayOfObject100[1] = PersistentList.create(Arrays.asList(arrayOfObject101));
    arrayOfObject100[2] = RT.keyword(null, "column");
    arrayOfObject100[3] = Integer.valueOf(1);
    arrayOfObject100[4] = RT.keyword(null, "added");
    arrayOfObject100[5] = "1.3";
    arrayOfObject100[6] = RT.keyword(null, "doc");
    arrayOfObject100[7] = "Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.";
    arrayOfObject100[8] = RT.keyword(null, "line");
    arrayOfObject100[9] = Integer.valueOf(6633);
    arrayOfObject100[10] = RT.keyword(null, "file");
    arrayOfObject100[11] = "clojure/core.clj";
    const__2273 = (AFn)RT.map(arrayOfObject100);
    const__2274 = (Var)RT.var("clojure.core", "some-fn");
    const__2275 = Integer.valueOf(6673);
    Object[] arrayOfObject106 = new Object[4];
    Object[] arrayOfObject107 = new Object[1];
    arrayOfObject107[0] = Symbol.intern(null, "p");
    arrayOfObject106[0] = RT.vector(arrayOfObject107);
    Object[] arrayOfObject108 = new Object[2];
    arrayOfObject108[0] = Symbol.intern(null, "p1");
    arrayOfObject108[1] = Symbol.intern(null, "p2");
    arrayOfObject106[1] = RT.vector(arrayOfObject108);
    Object[] arrayOfObject109 = new Object[3];
    arrayOfObject109[0] = Symbol.intern(null, "p1");
    arrayOfObject109[1] = Symbol.intern(null, "p2");
    arrayOfObject109[2] = Symbol.intern(null, "p3");
    arrayOfObject106[2] = RT.vector(arrayOfObject109);
    Object[] arrayOfObject110 = new Object[5];
    arrayOfObject110[0] = Symbol.intern(null, "p1");
    arrayOfObject110[1] = Symbol.intern(null, "p2");
    arrayOfObject110[2] = Symbol.intern(null, "p3");
    arrayOfObject110[3] = Symbol.intern(null, "&");
    arrayOfObject110[4] = Symbol.intern(null, "ps");
    arrayOfObject106[3] = RT.vector(arrayOfObject110);
    const__2276 = PersistentList.create(Arrays.asList(arrayOfObject106));
    Object[] arrayOfObject111 = new Object[12];
    arrayOfObject111[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject112 = new Object[4];
    Object[] arrayOfObject113 = new Object[1];
    arrayOfObject113[0] = Symbol.intern(null, "p");
    arrayOfObject112[0] = RT.vector(arrayOfObject113);
    Object[] arrayOfObject114 = new Object[2];
    arrayOfObject114[0] = Symbol.intern(null, "p1");
    arrayOfObject114[1] = Symbol.intern(null, "p2");
    arrayOfObject112[1] = RT.vector(arrayOfObject114);
    Object[] arrayOfObject115 = new Object[3];
    arrayOfObject115[0] = Symbol.intern(null, "p1");
    arrayOfObject115[1] = Symbol.intern(null, "p2");
    arrayOfObject115[2] = Symbol.intern(null, "p3");
    arrayOfObject112[2] = RT.vector(arrayOfObject115);
    Object[] arrayOfObject116 = new Object[5];
    arrayOfObject116[0] = Symbol.intern(null, "p1");
    arrayOfObject116[1] = Symbol.intern(null, "p2");
    arrayOfObject116[2] = Symbol.intern(null, "p3");
    arrayOfObject116[3] = Symbol.intern(null, "&");
    arrayOfObject116[4] = Symbol.intern(null, "ps");
    arrayOfObject112[3] = RT.vector(arrayOfObject116);
    arrayOfObject111[1] = PersistentList.create(Arrays.asList(arrayOfObject112));
    arrayOfObject111[2] = RT.keyword(null, "column");
    arrayOfObject111[3] = Integer.valueOf(1);
    arrayOfObject111[4] = RT.keyword(null, "added");
    arrayOfObject111[5] = "1.3";
    arrayOfObject111[6] = RT.keyword(null, "doc");
    arrayOfObject111[7] = "Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.";
    arrayOfObject111[8] = RT.keyword(null, "line");
    arrayOfObject111[9] = Integer.valueOf(6673);
    arrayOfObject111[10] = RT.keyword(null, "file");
    arrayOfObject111[11] = "clojure/core.clj";
    const__2277 = (AFn)RT.map(arrayOfObject111);
    const__2278 = Integer.valueOf(6713);
    Object[] arrayOfObject117 = new Object[1];
    Object[] arrayOfObject118 = new Object[1];
    arrayOfObject118[0] = Symbol.intern(null, "fdecl");
    arrayOfObject117[0] = RT.vector(arrayOfObject118);
    const__2279 = PersistentList.create(Arrays.asList(arrayOfObject117));
    Object[] arrayOfObject119 = new Object[14];
    arrayOfObject119[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject120 = new Object[1];
    Object[] arrayOfObject121 = new Object[1];
    arrayOfObject121[0] = Symbol.intern(null, "fdecl");
    arrayOfObject120[0] = RT.vector(arrayOfObject121);
    arrayOfObject119[1] = PersistentList.create(Arrays.asList(arrayOfObject120));
    arrayOfObject119[2] = RT.keyword(null, "dynamic");
    arrayOfObject119[3] = Boolean.TRUE;
    arrayOfObject119[4] = RT.keyword(null, "column");
    arrayOfObject119[5] = Integer.valueOf(1);
    arrayOfObject119[6] = RT.keyword(null, "private");
    arrayOfObject119[7] = Boolean.TRUE;
    arrayOfObject119[8] = RT.keyword(null, "doc");
    arrayOfObject119[9] = "A good fdecl looks like (([a] ...) ([a b] ...)) near the end of defn.";
    arrayOfObject119[10] = RT.keyword(null, "line");
    arrayOfObject119[11] = Integer.valueOf(6713);
    arrayOfObject119[12] = RT.keyword(null, "file");
    arrayOfObject119[13] = "clojure/core.clj";
    const__2280 = (AFn)RT.map(arrayOfObject119);
    const__2281 = (Var)RT.var("clojure.core", "with-redefs-fn");
    const__2282 = Integer.valueOf(6735);
    Object[] arrayOfObject122 = new Object[1];
    Object[] arrayOfObject123 = new Object[2];
    arrayOfObject123[0] = Symbol.intern(null, "binding-map");
    arrayOfObject123[1] = Symbol.intern(null, "func");
    arrayOfObject122[0] = RT.vector(arrayOfObject123);
    const__2283 = PersistentList.create(Arrays.asList(arrayOfObject122));
    Object[] arrayOfObject124 = new Object[12];
    arrayOfObject124[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject125 = new Object[1];
    Object[] arrayOfObject126 = new Object[2];
    arrayOfObject126[0] = Symbol.intern(null, "binding-map");
    arrayOfObject126[1] = Symbol.intern(null, "func");
    arrayOfObject125[0] = RT.vector(arrayOfObject126);
    arrayOfObject124[1] = PersistentList.create(Arrays.asList(arrayOfObject125));
    arrayOfObject124[2] = RT.keyword(null, "column");
    arrayOfObject124[3] = Integer.valueOf(1);
    arrayOfObject124[4] = RT.keyword(null, "added");
    arrayOfObject124[5] = "1.3";
    arrayOfObject124[6] = RT.keyword(null, "doc");
    arrayOfObject124[7] = "Temporarily redefines Vars during a call to func.  Each val of\n  binding-map will replace the root value of its key which must be\n  a Var.  After func is called with no args, the root values of all\n  the Vars will be set back to their old values.  These temporary\n  changes will be visible in all threads.  Useful for mocking out\n  functions during testing.";
    arrayOfObject124[8] = RT.keyword(null, "line");
    arrayOfObject124[9] = Integer.valueOf(6735);
    arrayOfObject124[10] = RT.keyword(null, "file");
    arrayOfObject124[11] = "clojure/core.clj";
    const__2284 = (AFn)RT.map(arrayOfObject124);
    const__2285 = (Var)RT.var("clojure.core", "with-redefs");
    const__2286 = Integer.valueOf(6755);
    Object[] arrayOfObject127 = new Object[1];
    Object[] arrayOfObject128 = new Object[3];
    arrayOfObject128[0] = Symbol.intern(null, "bindings");
    arrayOfObject128[1] = Symbol.intern(null, "&");
    arrayOfObject128[2] = Symbol.intern(null, "body");
    arrayOfObject127[0] = RT.vector(arrayOfObject128);
    const__2287 = PersistentList.create(Arrays.asList(arrayOfObject127));
    Object[] arrayOfObject129 = new Object[12];
    arrayOfObject129[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject130 = new Object[1];
    Object[] arrayOfObject131 = new Object[3];
    arrayOfObject131[0] = Symbol.intern(null, "bindings");
    arrayOfObject131[1] = Symbol.intern(null, "&");
    arrayOfObject131[2] = Symbol.intern(null, "body");
    arrayOfObject130[0] = RT.vector(arrayOfObject131);
    arrayOfObject129[1] = PersistentList.create(Arrays.asList(arrayOfObject130));
    arrayOfObject129[2] = RT.keyword(null, "column");
    arrayOfObject129[3] = Integer.valueOf(1);
    arrayOfObject129[4] = RT.keyword(null, "added");
    arrayOfObject129[5] = "1.3";
    arrayOfObject129[6] = RT.keyword(null, "doc");
    arrayOfObject129[7] = "binding => var-symbol temp-value-expr\n\n  Temporarily redefines Vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its Var.  After the body is\n  executed, the root values of all the Vars will be set back to their\n  old values.  These temporary changes will be visible in all threads.\n  Useful for mocking out functions during testing.";
    arrayOfObject129[8] = RT.keyword(null, "line");
    arrayOfObject129[9] = Integer.valueOf(6755);
    arrayOfObject129[10] = RT.keyword(null, "file");
    arrayOfObject129[11] = "clojure/core.clj";
    const__2288 = (AFn)RT.map(arrayOfObject129);
    const__2289 = (Var)RT.var("clojure.core", "realized?");
    const__2290 = Integer.valueOf(6770);
    Object[] arrayOfObject132 = new Object[1];
    Object[] arrayOfObject133 = new Object[1];
    IObj localIObj4 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject134 = new Object[2];
    arrayOfObject134[0] = RT.keyword(null, "tag");
    arrayOfObject134[1] = Symbol.intern(null, "clojure.lang.IPending");
    arrayOfObject133[0] = localIObj4.withMeta((IPersistentMap)RT.map(arrayOfObject134));
    arrayOfObject132[0] = RT.vector(arrayOfObject133);
    const__2291 = PersistentList.create(Arrays.asList(arrayOfObject132));
    Object[] arrayOfObject135 = new Object[12];
    arrayOfObject135[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject136 = new Object[1];
    Object[] arrayOfObject137 = new Object[1];
    IObj localIObj5 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject138 = new Object[2];
    arrayOfObject138[0] = RT.keyword(null, "tag");
    arrayOfObject138[1] = Symbol.intern(null, "clojure.lang.IPending");
    arrayOfObject137[0] = localIObj5.withMeta((IPersistentMap)RT.map(arrayOfObject138));
    arrayOfObject136[0] = RT.vector(arrayOfObject137);
    arrayOfObject135[1] = PersistentList.create(Arrays.asList(arrayOfObject136));
    arrayOfObject135[2] = RT.keyword(null, "column");
    arrayOfObject135[3] = Integer.valueOf(1);
    arrayOfObject135[4] = RT.keyword(null, "added");
    arrayOfObject135[5] = "1.3";
    arrayOfObject135[6] = RT.keyword(null, "doc");
    arrayOfObject135[7] = "Returns true if a value has been produced for a promise, delay, future or lazy sequence.";
    arrayOfObject135[8] = RT.keyword(null, "line");
    arrayOfObject135[9] = Integer.valueOf(6770);
    arrayOfObject135[10] = RT.keyword(null, "file");
    arrayOfObject135[11] = "clojure/core.clj";
    const__2292 = (AFn)RT.map(arrayOfObject135);
    const__2293 = (Var)RT.var("clojure.core", "cond->");
    const__2294 = Integer.valueOf(6775);
    Object[] arrayOfObject139 = new Object[1];
    Object[] arrayOfObject140 = new Object[3];
    arrayOfObject140[0] = Symbol.intern(null, "expr");
    arrayOfObject140[1] = Symbol.intern(null, "&");
    arrayOfObject140[2] = Symbol.intern(null, "clauses");
    arrayOfObject139[0] = RT.vector(arrayOfObject140);
    const__2295 = PersistentList.create(Arrays.asList(arrayOfObject139));
    Object[] arrayOfObject141 = new Object[12];
    arrayOfObject141[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject142 = new Object[1];
    Object[] arrayOfObject143 = new Object[3];
    arrayOfObject143[0] = Symbol.intern(null, "expr");
    arrayOfObject143[1] = Symbol.intern(null, "&");
    arrayOfObject143[2] = Symbol.intern(null, "clauses");
    arrayOfObject142[0] = RT.vector(arrayOfObject143);
    arrayOfObject141[1] = PersistentList.create(Arrays.asList(arrayOfObject142));
    arrayOfObject141[2] = RT.keyword(null, "column");
    arrayOfObject141[3] = Integer.valueOf(1);
    arrayOfObject141[4] = RT.keyword(null, "added");
    arrayOfObject141[5] = "1.5";
    arrayOfObject141[6] = RT.keyword(null, "doc");
    arrayOfObject141[7] = "Takes an expression and a set of test/form pairs. Threads expr (via ->)\n  through each form for which the corresponding test\n  expression is true. Note that, unlike cond branching, cond-> threading does\n  not short circuit after the first true test expression.";
    arrayOfObject141[8] = RT.keyword(null, "line");
    arrayOfObject141[9] = Integer.valueOf(6775);
    arrayOfObject141[10] = RT.keyword(null, "file");
    arrayOfObject141[11] = "clojure/core.clj";
    const__2296 = (AFn)RT.map(arrayOfObject141);
    const__2297 = (Var)RT.var("clojure.core", "cond->>");
    const__2298 = Integer.valueOf(6789);
    Object[] arrayOfObject144 = new Object[1];
    Object[] arrayOfObject145 = new Object[3];
    arrayOfObject145[0] = Symbol.intern(null, "expr");
    arrayOfObject145[1] = Symbol.intern(null, "&");
    arrayOfObject145[2] = Symbol.intern(null, "clauses");
    arrayOfObject144[0] = RT.vector(arrayOfObject145);
    const__2299 = PersistentList.create(Arrays.asList(arrayOfObject144));
  }

  public static void __init23()
  {
    Object[] arrayOfObject1 = new Object[12];
    arrayOfObject1[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject2 = new Object[1];
    Object[] arrayOfObject3 = new Object[3];
    arrayOfObject3[0] = Symbol.intern(null, "expr");
    arrayOfObject3[1] = Symbol.intern(null, "&");
    arrayOfObject3[2] = Symbol.intern(null, "clauses");
    arrayOfObject2[0] = RT.vector(arrayOfObject3);
    arrayOfObject1[1] = PersistentList.create(Arrays.asList(arrayOfObject2));
    arrayOfObject1[2] = RT.keyword(null, "column");
    arrayOfObject1[3] = Integer.valueOf(1);
    arrayOfObject1[4] = RT.keyword(null, "added");
    arrayOfObject1[5] = "1.5";
    arrayOfObject1[6] = RT.keyword(null, "doc");
    arrayOfObject1[7] = "Takes an expression and a set of test/form pairs. Threads expr (via ->>)\n  through each form for which the corresponding test expression\n  is true.  Note that, unlike cond branching, cond->> threading does not short circuit\n  after the first true test expression.";
    arrayOfObject1[8] = RT.keyword(null, "line");
    arrayOfObject1[9] = Integer.valueOf(6789);
    arrayOfObject1[10] = RT.keyword(null, "file");
    arrayOfObject1[11] = "clojure/core.clj";
    const__2300 = (AFn)RT.map(arrayOfObject1);
    const__2301 = (Var)RT.var("clojure.core", "as->");
    const__2302 = Integer.valueOf(6803);
    Object[] arrayOfObject4 = new Object[1];
    Object[] arrayOfObject5 = new Object[4];
    arrayOfObject5[0] = Symbol.intern(null, "expr");
    arrayOfObject5[1] = Symbol.intern(null, "name");
    arrayOfObject5[2] = Symbol.intern(null, "&");
    arrayOfObject5[3] = Symbol.intern(null, "forms");
    arrayOfObject4[0] = RT.vector(arrayOfObject5);
    const__2303 = PersistentList.create(Arrays.asList(arrayOfObject4));
    Object[] arrayOfObject6 = new Object[12];
    arrayOfObject6[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject7 = new Object[1];
    Object[] arrayOfObject8 = new Object[4];
    arrayOfObject8[0] = Symbol.intern(null, "expr");
    arrayOfObject8[1] = Symbol.intern(null, "name");
    arrayOfObject8[2] = Symbol.intern(null, "&");
    arrayOfObject8[3] = Symbol.intern(null, "forms");
    arrayOfObject7[0] = RT.vector(arrayOfObject8);
    arrayOfObject6[1] = PersistentList.create(Arrays.asList(arrayOfObject7));
    arrayOfObject6[2] = RT.keyword(null, "column");
    arrayOfObject6[3] = Integer.valueOf(1);
    arrayOfObject6[4] = RT.keyword(null, "added");
    arrayOfObject6[5] = "1.5";
    arrayOfObject6[6] = RT.keyword(null, "doc");
    arrayOfObject6[7] = "Binds name to expr, evaluates the first form in the lexical context\n  of that binding, then binds name to that result, repeating for each\n  successive form, returning the result of the last form.";
    arrayOfObject6[8] = RT.keyword(null, "line");
    arrayOfObject6[9] = Integer.valueOf(6803);
    arrayOfObject6[10] = RT.keyword(null, "file");
    arrayOfObject6[11] = "clojure/core.clj";
    const__2304 = (AFn)RT.map(arrayOfObject6);
    const__2305 = (Var)RT.var("clojure.core", "some->");
    const__2306 = Integer.valueOf(6813);
    Object[] arrayOfObject9 = new Object[1];
    Object[] arrayOfObject10 = new Object[3];
    arrayOfObject10[0] = Symbol.intern(null, "expr");
    arrayOfObject10[1] = Symbol.intern(null, "&");
    arrayOfObject10[2] = Symbol.intern(null, "forms");
    arrayOfObject9[0] = RT.vector(arrayOfObject10);
    const__2307 = PersistentList.create(Arrays.asList(arrayOfObject9));
    Object[] arrayOfObject11 = new Object[12];
    arrayOfObject11[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject12 = new Object[1];
    Object[] arrayOfObject13 = new Object[3];
    arrayOfObject13[0] = Symbol.intern(null, "expr");
    arrayOfObject13[1] = Symbol.intern(null, "&");
    arrayOfObject13[2] = Symbol.intern(null, "forms");
    arrayOfObject12[0] = RT.vector(arrayOfObject13);
    arrayOfObject11[1] = PersistentList.create(Arrays.asList(arrayOfObject12));
    arrayOfObject11[2] = RT.keyword(null, "column");
    arrayOfObject11[3] = Integer.valueOf(1);
    arrayOfObject11[4] = RT.keyword(null, "added");
    arrayOfObject11[5] = "1.5";
    arrayOfObject11[6] = RT.keyword(null, "doc");
    arrayOfObject11[7] = "When expr is not nil, threads it into the first form (via ->),\n  and when that result is not nil, through the next etc";
    arrayOfObject11[8] = RT.keyword(null, "line");
    arrayOfObject11[9] = Integer.valueOf(6813);
    arrayOfObject11[10] = RT.keyword(null, "file");
    arrayOfObject11[11] = "clojure/core.clj";
    const__2308 = (AFn)RT.map(arrayOfObject11);
    const__2309 = (Var)RT.var("clojure.core", "some->>");
    const__2310 = Integer.valueOf(6824);
    Object[] arrayOfObject14 = new Object[1];
    Object[] arrayOfObject15 = new Object[3];
    arrayOfObject15[0] = Symbol.intern(null, "expr");
    arrayOfObject15[1] = Symbol.intern(null, "&");
    arrayOfObject15[2] = Symbol.intern(null, "forms");
    arrayOfObject14[0] = RT.vector(arrayOfObject15);
    const__2311 = PersistentList.create(Arrays.asList(arrayOfObject14));
    Object[] arrayOfObject16 = new Object[12];
    arrayOfObject16[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject17 = new Object[1];
    Object[] arrayOfObject18 = new Object[3];
    arrayOfObject18[0] = Symbol.intern(null, "expr");
    arrayOfObject18[1] = Symbol.intern(null, "&");
    arrayOfObject18[2] = Symbol.intern(null, "forms");
    arrayOfObject17[0] = RT.vector(arrayOfObject18);
    arrayOfObject16[1] = PersistentList.create(Arrays.asList(arrayOfObject17));
    arrayOfObject16[2] = RT.keyword(null, "column");
    arrayOfObject16[3] = Integer.valueOf(1);
    arrayOfObject16[4] = RT.keyword(null, "added");
    arrayOfObject16[5] = "1.5";
    arrayOfObject16[6] = RT.keyword(null, "doc");
    arrayOfObject16[7] = "When expr is not nil, threads it into the first form (via ->>),\n  and when that result is not nil, through the next etc";
    arrayOfObject16[8] = RT.keyword(null, "line");
    arrayOfObject16[9] = Integer.valueOf(6824);
    arrayOfObject16[10] = RT.keyword(null, "file");
    arrayOfObject16[11] = "clojure/core.clj";
    const__2312 = (AFn)RT.map(arrayOfObject16);
    const__2313 = (Var)RT.var("clojure.core", "default-data-readers");
    const__2314 = Integer.valueOf(6837);
    Object[] arrayOfObject19 = new Object[10];
    arrayOfObject19[0] = RT.keyword(null, "column");
    arrayOfObject19[1] = Integer.valueOf(1);
    arrayOfObject19[2] = RT.keyword(null, "added");
    arrayOfObject19[3] = "1.4";
    arrayOfObject19[4] = RT.keyword(null, "doc");
    arrayOfObject19[5] = "Default map of data reader functions provided by Clojure. May be\n  overridden by binding *data-readers*.";
    arrayOfObject19[6] = RT.keyword(null, "line");
    arrayOfObject19[7] = Integer.valueOf(6837);
    arrayOfObject19[8] = RT.keyword(null, "file");
    arrayOfObject19[9] = "clojure/core.clj";
    const__2315 = (AFn)RT.map(arrayOfObject19);
    const__2316 = (AFn)Symbol.intern(null, "inst");
    const__2317 = (Var)RT.var("clojure.instant", "read-instant-date");
    const__2318 = (AFn)Symbol.intern(null, "uuid");
    const__2319 = (Var)RT.var("clojure.uuid", "default-uuid-reader");
    const__2320 = (Var)RT.var("clojure.core", "*data-readers*");
    const__2321 = Integer.valueOf(6843);
    Object[] arrayOfObject20 = new Object[12];
    arrayOfObject20[0] = RT.keyword(null, "dynamic");
    arrayOfObject20[1] = Boolean.TRUE;
    arrayOfObject20[2] = RT.keyword(null, "column");
    arrayOfObject20[3] = Integer.valueOf(1);
    arrayOfObject20[4] = RT.keyword(null, "added");
    arrayOfObject20[5] = "1.4";
    arrayOfObject20[6] = RT.keyword(null, "doc");
    arrayOfObject20[7] = "Map from reader tag symbols to data reader Vars.\n\n  When Clojure starts, it searches for files named 'data_readers.clj'\n  at the root of the classpath. Each such file must contain a literal\n  map of symbols, like this:\n\n      {foo/bar my.project.foo/bar\n       foo/baz my.project/baz}\n\n  The first symbol in each pair is a tag that will be recognized by\n  the Clojure reader. The second symbol in the pair is the\n  fully-qualified name of a Var which will be invoked by the reader to\n  parse the form following the tag. For example, given the\n  data_readers.clj file above, the Clojure reader would parse this\n  form:\n\n      #foo/bar [1 2 3]\n\n  by invoking the Var #'my.project.foo/bar on the vector [1 2 3]. The\n  data reader function is invoked on the form AFTER it has been read\n  as a normal Clojure data structure by the reader.\n\n  Reader tags without namespace qualifiers are reserved for\n  Clojure. Default reader tags are defined in\n  clojure.core/default-data-readers but may be overridden in\n  data_readers.clj or by rebinding this Var.";
    arrayOfObject20[8] = RT.keyword(null, "line");
    arrayOfObject20[9] = Integer.valueOf(6843);
    arrayOfObject20[10] = RT.keyword(null, "file");
    arrayOfObject20[11] = "clojure/core.clj";
    const__2322 = (AFn)RT.map(arrayOfObject20);
    const__2323 = (Var)RT.var("clojure.core", "*default-data-reader-fn*");
    const__2324 = Integer.valueOf(6872);
    Object[] arrayOfObject21 = new Object[12];
    arrayOfObject21[0] = RT.keyword(null, "dynamic");
    arrayOfObject21[1] = Boolean.TRUE;
    arrayOfObject21[2] = RT.keyword(null, "column");
    arrayOfObject21[3] = Integer.valueOf(1);
    arrayOfObject21[4] = RT.keyword(null, "added");
    arrayOfObject21[5] = "1.5";
    arrayOfObject21[6] = RT.keyword(null, "doc");
    arrayOfObject21[7] = "When no data reader is found for a tag and *default-data-reader-fn*\n  is non-nil, it will be called with two arguments,\n  the tag and the value.  If *default-data-reader-fn* is nil (the\n  default), an exception will be thrown for the unknown tag.";
    arrayOfObject21[8] = RT.keyword(null, "line");
    arrayOfObject21[9] = Integer.valueOf(6872);
    arrayOfObject21[10] = RT.keyword(null, "file");
    arrayOfObject21[11] = "clojure/core.clj";
    const__2325 = (AFn)RT.map(arrayOfObject21);
    const__2326 = (Var)RT.var("clojure.core", "data-reader-urls");
    const__2327 = Integer.valueOf(6879);
    Object[] arrayOfObject22 = new Object[1];
    arrayOfObject22[0] = RT.vector(new Object[0]);
    const__2328 = PersistentList.create(Arrays.asList(arrayOfObject22));
    Object[] arrayOfObject23 = new Object[10];
    arrayOfObject23[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject24 = new Object[1];
    arrayOfObject24[0] = RT.vector(new Object[0]);
    arrayOfObject23[1] = PersistentList.create(Arrays.asList(arrayOfObject24));
    arrayOfObject23[2] = RT.keyword(null, "column");
    arrayOfObject23[3] = Integer.valueOf(1);
    arrayOfObject23[4] = RT.keyword(null, "private");
    arrayOfObject23[5] = Boolean.TRUE;
    arrayOfObject23[6] = RT.keyword(null, "line");
    arrayOfObject23[7] = Integer.valueOf(6879);
    arrayOfObject23[8] = RT.keyword(null, "file");
    arrayOfObject23[9] = "clojure/core.clj";
    const__2329 = (AFn)RT.map(arrayOfObject23);
    const__2330 = (Var)RT.var("clojure.core", "data-reader-var");
    const__2331 = Integer.valueOf(6884);
    Object[] arrayOfObject25 = new Object[1];
    Object[] arrayOfObject26 = new Object[1];
    arrayOfObject26[0] = Symbol.intern(null, "sym");
    arrayOfObject25[0] = RT.vector(arrayOfObject26);
    const__2332 = PersistentList.create(Arrays.asList(arrayOfObject25));
    Object[] arrayOfObject27 = new Object[10];
    arrayOfObject27[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject28 = new Object[1];
    Object[] arrayOfObject29 = new Object[1];
    arrayOfObject29[0] = Symbol.intern(null, "sym");
    arrayOfObject28[0] = RT.vector(arrayOfObject29);
    arrayOfObject27[1] = PersistentList.create(Arrays.asList(arrayOfObject28));
    arrayOfObject27[2] = RT.keyword(null, "column");
    arrayOfObject27[3] = Integer.valueOf(1);
    arrayOfObject27[4] = RT.keyword(null, "private");
    arrayOfObject27[5] = Boolean.TRUE;
    arrayOfObject27[6] = RT.keyword(null, "line");
    arrayOfObject27[7] = Integer.valueOf(6884);
    arrayOfObject27[8] = RT.keyword(null, "file");
    arrayOfObject27[9] = "clojure/core.clj";
    const__2333 = (AFn)RT.map(arrayOfObject27);
    const__2334 = (Var)RT.var("clojure.core", "load-data-reader-file");
    const__2335 = Integer.valueOf(6888);
    Object[] arrayOfObject30 = new Object[1];
    Object[] arrayOfObject31 = new Object[2];
    arrayOfObject31[0] = Symbol.intern(null, "mappings");
    IObj localIObj1 = (IObj)Symbol.intern(null, "url");
    Object[] arrayOfObject32 = new Object[2];
    arrayOfObject32[0] = RT.keyword(null, "tag");
    arrayOfObject32[1] = Symbol.intern(null, "java.net.URL");
    arrayOfObject31[1] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject32));
    arrayOfObject30[0] = RT.vector(arrayOfObject31);
    const__2336 = PersistentList.create(Arrays.asList(arrayOfObject30));
    Object[] arrayOfObject33 = new Object[10];
    arrayOfObject33[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject34 = new Object[1];
    Object[] arrayOfObject35 = new Object[2];
    arrayOfObject35[0] = Symbol.intern(null, "mappings");
    IObj localIObj2 = (IObj)Symbol.intern(null, "url");
    Object[] arrayOfObject36 = new Object[2];
    arrayOfObject36[0] = RT.keyword(null, "tag");
    arrayOfObject36[1] = Symbol.intern(null, "java.net.URL");
    arrayOfObject35[1] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject36));
    arrayOfObject34[0] = RT.vector(arrayOfObject35);
    arrayOfObject33[1] = PersistentList.create(Arrays.asList(arrayOfObject34));
    arrayOfObject33[2] = RT.keyword(null, "column");
    arrayOfObject33[3] = Integer.valueOf(1);
    arrayOfObject33[4] = RT.keyword(null, "private");
    arrayOfObject33[5] = Boolean.TRUE;
    arrayOfObject33[6] = RT.keyword(null, "line");
    arrayOfObject33[7] = Integer.valueOf(6888);
    arrayOfObject33[8] = RT.keyword(null, "file");
    arrayOfObject33[9] = "clojure/core.clj";
    const__2337 = (AFn)RT.map(arrayOfObject33);
    const__2338 = (Var)RT.var("clojure.core", "load-data-readers");
    const__2339 = Integer.valueOf(6914);
    Object[] arrayOfObject37 = new Object[1];
    arrayOfObject37[0] = RT.vector(new Object[0]);
    const__2340 = PersistentList.create(Arrays.asList(arrayOfObject37));
    Object[] arrayOfObject38 = new Object[10];
    arrayOfObject38[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject39 = new Object[1];
    arrayOfObject39[0] = RT.vector(new Object[0]);
    arrayOfObject38[1] = PersistentList.create(Arrays.asList(arrayOfObject39));
    arrayOfObject38[2] = RT.keyword(null, "column");
    arrayOfObject38[3] = Integer.valueOf(1);
    arrayOfObject38[4] = RT.keyword(null, "private");
    arrayOfObject38[5] = Boolean.TRUE;
    arrayOfObject38[6] = RT.keyword(null, "line");
    arrayOfObject38[7] = Integer.valueOf(6914);
    arrayOfObject38[8] = RT.keyword(null, "file");
    arrayOfObject38[9] = "clojure/core.clj";
    const__2341 = (AFn)RT.map(arrayOfObject38);
  }

  public static void __init3()
  {
    const__300 = Integer.valueOf(707);
    Object[] arrayOfObject1 = new Object[1];
    Object[] arrayOfObject2 = new Object[1];
    arrayOfObject2[0] = Symbol.intern(null, "x");
    arrayOfObject1[0] = RT.vector(arrayOfObject2);
    const__301 = PersistentList.create(Arrays.asList(arrayOfObject1));
    Object[] arrayOfObject3 = new Object[14];
    arrayOfObject3[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject4 = new Object[1];
    Object[] arrayOfObject5 = new Object[1];
    arrayOfObject5[0] = Symbol.intern(null, "x");
    arrayOfObject4[0] = RT.vector(arrayOfObject5);
    arrayOfObject3[1] = PersistentList.create(Arrays.asList(arrayOfObject4));
    arrayOfObject3[2] = RT.keyword(null, "column");
    arrayOfObject3[3] = Integer.valueOf(1);
    arrayOfObject3[4] = RT.keyword(null, "added");
    arrayOfObject3[5] = "1.0";
    arrayOfObject3[6] = RT.keyword(null, "static");
    arrayOfObject3[7] = Boolean.TRUE;
    arrayOfObject3[8] = RT.keyword(null, "doc");
    arrayOfObject3[9] = "returns true if x is a Delay created with delay";
    arrayOfObject3[10] = RT.keyword(null, "line");
    arrayOfObject3[11] = Integer.valueOf(707);
    arrayOfObject3[12] = RT.keyword(null, "file");
    arrayOfObject3[13] = "clojure/core.clj";
    const__302 = (AFn)RT.map(arrayOfObject3);
    const__303 = (Var)RT.var("clojure.core", "force");
    const__304 = Integer.valueOf(713);
    Object[] arrayOfObject6 = new Object[1];
    Object[] arrayOfObject7 = new Object[1];
    arrayOfObject7[0] = Symbol.intern(null, "x");
    arrayOfObject6[0] = RT.vector(arrayOfObject7);
    const__305 = PersistentList.create(Arrays.asList(arrayOfObject6));
    Object[] arrayOfObject8 = new Object[14];
    arrayOfObject8[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject9 = new Object[1];
    Object[] arrayOfObject10 = new Object[1];
    arrayOfObject10[0] = Symbol.intern(null, "x");
    arrayOfObject9[0] = RT.vector(arrayOfObject10);
    arrayOfObject8[1] = PersistentList.create(Arrays.asList(arrayOfObject9));
    arrayOfObject8[2] = RT.keyword(null, "column");
    arrayOfObject8[3] = Integer.valueOf(1);
    arrayOfObject8[4] = RT.keyword(null, "added");
    arrayOfObject8[5] = "1.0";
    arrayOfObject8[6] = RT.keyword(null, "static");
    arrayOfObject8[7] = Boolean.TRUE;
    arrayOfObject8[8] = RT.keyword(null, "doc");
    arrayOfObject8[9] = "If x is a Delay, returns the (possibly cached) value of its expression, else returns x";
    arrayOfObject8[10] = RT.keyword(null, "line");
    arrayOfObject8[11] = Integer.valueOf(713);
    arrayOfObject8[12] = RT.keyword(null, "file");
    arrayOfObject8[13] = "clojure/core.clj";
    const__306 = (AFn)RT.map(arrayOfObject8);
    const__307 = (Var)RT.var("clojure.core", "if-not");
    const__308 = Integer.valueOf(719);
    Object[] arrayOfObject11 = new Object[2];
    Object[] arrayOfObject12 = new Object[2];
    arrayOfObject12[0] = Symbol.intern(null, "test");
    arrayOfObject12[1] = Symbol.intern(null, "then");
    arrayOfObject11[0] = RT.vector(arrayOfObject12);
    Object[] arrayOfObject13 = new Object[3];
    arrayOfObject13[0] = Symbol.intern(null, "test");
    arrayOfObject13[1] = Symbol.intern(null, "then");
    arrayOfObject13[2] = Symbol.intern(null, "else");
    arrayOfObject11[1] = RT.vector(arrayOfObject13);
    const__309 = PersistentList.create(Arrays.asList(arrayOfObject11));
    Object[] arrayOfObject14 = new Object[12];
    arrayOfObject14[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject15 = new Object[2];
    Object[] arrayOfObject16 = new Object[2];
    arrayOfObject16[0] = Symbol.intern(null, "test");
    arrayOfObject16[1] = Symbol.intern(null, "then");
    arrayOfObject15[0] = RT.vector(arrayOfObject16);
    Object[] arrayOfObject17 = new Object[3];
    arrayOfObject17[0] = Symbol.intern(null, "test");
    arrayOfObject17[1] = Symbol.intern(null, "then");
    arrayOfObject17[2] = Symbol.intern(null, "else");
    arrayOfObject15[1] = RT.vector(arrayOfObject17);
    arrayOfObject14[1] = PersistentList.create(Arrays.asList(arrayOfObject15));
    arrayOfObject14[2] = RT.keyword(null, "column");
    arrayOfObject14[3] = Integer.valueOf(1);
    arrayOfObject14[4] = RT.keyword(null, "added");
    arrayOfObject14[5] = "1.0";
    arrayOfObject14[6] = RT.keyword(null, "doc");
    arrayOfObject14[7] = "Evaluates test. If logical false, evaluates and returns then expr, \n  otherwise else expr, if supplied, else nil.";
    arrayOfObject14[8] = RT.keyword(null, "line");
    arrayOfObject14[9] = Integer.valueOf(719);
    arrayOfObject14[10] = RT.keyword(null, "file");
    arrayOfObject14[11] = "clojure/core.clj";
    const__310 = (AFn)RT.map(arrayOfObject14);
    const__311 = (Var)RT.var("clojure.core", "identical?");
    const__312 = Integer.valueOf(727);
    Object[] arrayOfObject18 = new Object[1];
    Object[] arrayOfObject19 = new Object[2];
    arrayOfObject19[0] = Symbol.intern(null, "x");
    arrayOfObject19[1] = Symbol.intern(null, "y");
    arrayOfObject18[0] = RT.vector(arrayOfObject19);
    const__313 = PersistentList.create(Arrays.asList(arrayOfObject18));
    const__314 = (Keyword)RT.keyword(null, "inline-arities");
    const__315 = Long.valueOf(2L);
    Object[] arrayOfObject20 = new Object[1];
    arrayOfObject20[0] = Long.valueOf(2L);
    const__316 = (AFn)PersistentHashSet.create(arrayOfObject20);
    const__317 = (Var)RT.var("clojure.core", "=");
    const__318 = Integer.valueOf(735);
    Object[] arrayOfObject21 = new Object[3];
    Object[] arrayOfObject22 = new Object[1];
    arrayOfObject22[0] = Symbol.intern(null, "x");
    arrayOfObject21[0] = RT.vector(arrayOfObject22);
    Object[] arrayOfObject23 = new Object[2];
    arrayOfObject23[0] = Symbol.intern(null, "x");
    arrayOfObject23[1] = Symbol.intern(null, "y");
    arrayOfObject21[1] = RT.vector(arrayOfObject23);
    Object[] arrayOfObject24 = new Object[4];
    arrayOfObject24[0] = Symbol.intern(null, "x");
    arrayOfObject24[1] = Symbol.intern(null, "y");
    arrayOfObject24[2] = Symbol.intern(null, "&");
    arrayOfObject24[3] = Symbol.intern(null, "more");
    arrayOfObject21[2] = RT.vector(arrayOfObject24);
    const__319 = PersistentList.create(Arrays.asList(arrayOfObject21));
    Object[] arrayOfObject25 = new Object[1];
    arrayOfObject25[0] = Long.valueOf(2L);
    const__320 = (AFn)PersistentHashSet.create(arrayOfObject25);
    const__321 = (Var)RT.var("clojure.core", "not=");
    const__322 = Integer.valueOf(771);
    Object[] arrayOfObject26 = new Object[3];
    Object[] arrayOfObject27 = new Object[1];
    arrayOfObject27[0] = Symbol.intern(null, "x");
    arrayOfObject26[0] = RT.vector(arrayOfObject27);
    Object[] arrayOfObject28 = new Object[2];
    arrayOfObject28[0] = Symbol.intern(null, "x");
    arrayOfObject28[1] = Symbol.intern(null, "y");
    arrayOfObject26[1] = RT.vector(arrayOfObject28);
    Object[] arrayOfObject29 = new Object[4];
    arrayOfObject29[0] = Symbol.intern(null, "x");
    arrayOfObject29[1] = Symbol.intern(null, "y");
    arrayOfObject29[2] = Symbol.intern(null, "&");
    arrayOfObject29[3] = Symbol.intern(null, "more");
    arrayOfObject26[2] = RT.vector(arrayOfObject29);
    const__323 = PersistentList.create(Arrays.asList(arrayOfObject26));
    Object[] arrayOfObject30 = new Object[16];
    arrayOfObject30[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject31 = new Object[3];
    Object[] arrayOfObject32 = new Object[1];
    arrayOfObject32[0] = Symbol.intern(null, "x");
    arrayOfObject31[0] = RT.vector(arrayOfObject32);
    Object[] arrayOfObject33 = new Object[2];
    arrayOfObject33[0] = Symbol.intern(null, "x");
    arrayOfObject33[1] = Symbol.intern(null, "y");
    arrayOfObject31[1] = RT.vector(arrayOfObject33);
    Object[] arrayOfObject34 = new Object[4];
    arrayOfObject34[0] = Symbol.intern(null, "x");
    arrayOfObject34[1] = Symbol.intern(null, "y");
    arrayOfObject34[2] = Symbol.intern(null, "&");
    arrayOfObject34[3] = Symbol.intern(null, "more");
    arrayOfObject31[2] = RT.vector(arrayOfObject34);
    arrayOfObject30[1] = PersistentList.create(Arrays.asList(arrayOfObject31));
    arrayOfObject30[2] = RT.keyword(null, "column");
    arrayOfObject30[3] = Integer.valueOf(1);
    arrayOfObject30[4] = RT.keyword(null, "added");
    arrayOfObject30[5] = "1.0";
    arrayOfObject30[6] = RT.keyword(null, "static");
    arrayOfObject30[7] = Boolean.TRUE;
    arrayOfObject30[8] = RT.keyword(null, "doc");
    arrayOfObject30[9] = "Same as (not (= obj1 obj2))";
    arrayOfObject30[10] = RT.keyword(null, "line");
    arrayOfObject30[11] = Integer.valueOf(771);
    arrayOfObject30[12] = RT.keyword(null, "file");
    arrayOfObject30[13] = "clojure/core.clj";
    arrayOfObject30[14] = RT.keyword(null, "tag");
    arrayOfObject30[15] = Class.forName("java.lang.Boolean");
    const__324 = (AFn)RT.map(arrayOfObject30);
    const__325 = (Var)RT.var("clojure.core", "compare");
    const__326 = Integer.valueOf(783);
    Object[] arrayOfObject35 = new Object[1];
    Object[] arrayOfObject36 = new Object[2];
    arrayOfObject36[0] = Symbol.intern(null, "x");
    arrayOfObject36[1] = Symbol.intern(null, "y");
    arrayOfObject35[0] = RT.vector(arrayOfObject36);
    const__327 = PersistentList.create(Arrays.asList(arrayOfObject35));
    const__328 = (Var)RT.var("clojure.core", "and");
    const__329 = Integer.valueOf(794);
    Object[] arrayOfObject37 = new Object[3];
    arrayOfObject37[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject38 = new Object[1];
    arrayOfObject38[0] = Symbol.intern(null, "x");
    arrayOfObject37[1] = RT.vector(arrayOfObject38);
    Object[] arrayOfObject39 = new Object[3];
    arrayOfObject39[0] = Symbol.intern(null, "x");
    arrayOfObject39[1] = Symbol.intern(null, "&");
    arrayOfObject39[2] = Symbol.intern(null, "next");
    arrayOfObject37[2] = RT.vector(arrayOfObject39);
    const__330 = PersistentList.create(Arrays.asList(arrayOfObject37));
    Object[] arrayOfObject40 = new Object[12];
    arrayOfObject40[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject41 = new Object[3];
    arrayOfObject41[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject42 = new Object[1];
    arrayOfObject42[0] = Symbol.intern(null, "x");
    arrayOfObject41[1] = RT.vector(arrayOfObject42);
    Object[] arrayOfObject43 = new Object[3];
    arrayOfObject43[0] = Symbol.intern(null, "x");
    arrayOfObject43[1] = Symbol.intern(null, "&");
    arrayOfObject43[2] = Symbol.intern(null, "next");
    arrayOfObject41[2] = RT.vector(arrayOfObject43);
    arrayOfObject40[1] = PersistentList.create(Arrays.asList(arrayOfObject41));
    arrayOfObject40[2] = RT.keyword(null, "column");
    arrayOfObject40[3] = Integer.valueOf(1);
    arrayOfObject40[4] = RT.keyword(null, "added");
    arrayOfObject40[5] = "1.0";
    arrayOfObject40[6] = RT.keyword(null, "doc");
    arrayOfObject40[7] = "Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true.";
    arrayOfObject40[8] = RT.keyword(null, "line");
    arrayOfObject40[9] = Integer.valueOf(794);
    arrayOfObject40[10] = RT.keyword(null, "file");
    arrayOfObject40[11] = "clojure/core.clj";
    const__331 = (AFn)RT.map(arrayOfObject40);
    const__332 = (Var)RT.var("clojure.core", "or");
    const__333 = Integer.valueOf(806);
    Object[] arrayOfObject44 = new Object[3];
    arrayOfObject44[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject45 = new Object[1];
    arrayOfObject45[0] = Symbol.intern(null, "x");
    arrayOfObject44[1] = RT.vector(arrayOfObject45);
    Object[] arrayOfObject46 = new Object[3];
    arrayOfObject46[0] = Symbol.intern(null, "x");
    arrayOfObject46[1] = Symbol.intern(null, "&");
    arrayOfObject46[2] = Symbol.intern(null, "next");
    arrayOfObject44[2] = RT.vector(arrayOfObject46);
    const__334 = PersistentList.create(Arrays.asList(arrayOfObject44));
    Object[] arrayOfObject47 = new Object[12];
    arrayOfObject47[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject48 = new Object[3];
    arrayOfObject48[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject49 = new Object[1];
    arrayOfObject49[0] = Symbol.intern(null, "x");
    arrayOfObject48[1] = RT.vector(arrayOfObject49);
    Object[] arrayOfObject50 = new Object[3];
    arrayOfObject50[0] = Symbol.intern(null, "x");
    arrayOfObject50[1] = Symbol.intern(null, "&");
    arrayOfObject50[2] = Symbol.intern(null, "next");
    arrayOfObject48[2] = RT.vector(arrayOfObject50);
    arrayOfObject47[1] = PersistentList.create(Arrays.asList(arrayOfObject48));
    arrayOfObject47[2] = RT.keyword(null, "column");
    arrayOfObject47[3] = Integer.valueOf(1);
    arrayOfObject47[4] = RT.keyword(null, "added");
    arrayOfObject47[5] = "1.0";
    arrayOfObject47[6] = RT.keyword(null, "doc");
    arrayOfObject47[7] = "Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil.";
    arrayOfObject47[8] = RT.keyword(null, "line");
    arrayOfObject47[9] = Integer.valueOf(806);
    arrayOfObject47[10] = RT.keyword(null, "file");
    arrayOfObject47[11] = "clojure/core.clj";
    const__335 = (AFn)RT.map(arrayOfObject47);
    const__336 = (Var)RT.var("clojure.core", "zero?");
    const__337 = Integer.valueOf(819);
    Object[] arrayOfObject51 = new Object[1];
    Object[] arrayOfObject52 = new Object[1];
    arrayOfObject52[0] = Symbol.intern(null, "x");
    arrayOfObject51[0] = RT.vector(arrayOfObject52);
    const__338 = PersistentList.create(Arrays.asList(arrayOfObject51));
    const__339 = (Var)RT.var("clojure.core", "count");
    const__340 = Integer.valueOf(826);
    Object[] arrayOfObject53 = new Object[1];
    Object[] arrayOfObject54 = new Object[1];
    arrayOfObject54[0] = Symbol.intern(null, "coll");
    arrayOfObject53[0] = RT.vector(arrayOfObject54);
    const__341 = PersistentList.create(Arrays.asList(arrayOfObject53));
    const__342 = (Var)RT.var("clojure.core", "int");
    const__343 = Integer.valueOf(834);
    Object[] arrayOfObject55 = new Object[1];
    Object[] arrayOfObject56 = new Object[1];
    arrayOfObject56[0] = Symbol.intern(null, "x");
    arrayOfObject55[0] = RT.vector(arrayOfObject56);
    const__344 = PersistentList.create(Arrays.asList(arrayOfObject55));
    const__345 = (Var)RT.var("clojure.core", "nth");
    const__346 = Integer.valueOf(841);
    Object[] arrayOfObject57 = new Object[2];
    Object[] arrayOfObject58 = new Object[2];
    arrayOfObject58[0] = Symbol.intern(null, "coll");
    arrayOfObject58[1] = Symbol.intern(null, "index");
    arrayOfObject57[0] = RT.vector(arrayOfObject58);
    Object[] arrayOfObject59 = new Object[3];
    arrayOfObject59[0] = Symbol.intern(null, "coll");
    arrayOfObject59[1] = Symbol.intern(null, "index");
    arrayOfObject59[2] = Symbol.intern(null, "not-found");
    arrayOfObject57[1] = RT.vector(arrayOfObject59);
    const__347 = PersistentList.create(Arrays.asList(arrayOfObject57));
    const__348 = Long.valueOf(3L);
    Object[] arrayOfObject60 = new Object[2];
    arrayOfObject60[0] = Long.valueOf(2L);
    arrayOfObject60[1] = Long.valueOf(3L);
    const__349 = (AFn)PersistentHashSet.create(arrayOfObject60);
    const__350 = (Var)RT.var("clojure.core", "<");
    const__351 = Integer.valueOf(852);
    Object[] arrayOfObject61 = new Object[3];
    Object[] arrayOfObject62 = new Object[1];
    arrayOfObject62[0] = Symbol.intern(null, "x");
    arrayOfObject61[0] = RT.vector(arrayOfObject62);
    Object[] arrayOfObject63 = new Object[2];
    arrayOfObject63[0] = Symbol.intern(null, "x");
    arrayOfObject63[1] = Symbol.intern(null, "y");
    arrayOfObject61[1] = RT.vector(arrayOfObject63);
    Object[] arrayOfObject64 = new Object[4];
    arrayOfObject64[0] = Symbol.intern(null, "x");
    arrayOfObject64[1] = Symbol.intern(null, "y");
    arrayOfObject64[2] = Symbol.intern(null, "&");
    arrayOfObject64[3] = Symbol.intern(null, "more");
    arrayOfObject61[2] = RT.vector(arrayOfObject64);
    const__352 = PersistentList.create(Arrays.asList(arrayOfObject61));
    Object[] arrayOfObject65 = new Object[1];
    arrayOfObject65[0] = Long.valueOf(2L);
    const__353 = (AFn)PersistentHashSet.create(arrayOfObject65);
    const__354 = (Var)RT.var("clojure.core", "inc'");
    const__355 = Integer.valueOf(867);
    Object[] arrayOfObject66 = new Object[1];
    Object[] arrayOfObject67 = new Object[1];
    arrayOfObject67[0] = Symbol.intern(null, "x");
    arrayOfObject66[0] = RT.vector(arrayOfObject67);
    const__356 = PersistentList.create(Arrays.asList(arrayOfObject66));
    const__357 = (Var)RT.var("clojure.core", "inc");
    const__358 = Integer.valueOf(874);
    Object[] arrayOfObject68 = new Object[1];
    Object[] arrayOfObject69 = new Object[1];
    arrayOfObject69[0] = Symbol.intern(null, "x");
    arrayOfObject68[0] = RT.vector(arrayOfObject69);
    const__359 = PersistentList.create(Arrays.asList(arrayOfObject68));
    const__360 = (Var)RT.var("clojure.core", "reduce1");
    const__361 = Integer.valueOf(882);
    Object[] arrayOfObject70 = new Object[2];
    Object[] arrayOfObject71 = new Object[2];
    arrayOfObject71[0] = Symbol.intern(null, "f");
    arrayOfObject71[1] = Symbol.intern(null, "coll");
    arrayOfObject70[0] = RT.vector(arrayOfObject71);
    Object[] arrayOfObject72 = new Object[3];
    arrayOfObject72[0] = Symbol.intern(null, "f");
    arrayOfObject72[1] = Symbol.intern(null, "val");
    arrayOfObject72[2] = Symbol.intern(null, "coll");
    arrayOfObject70[1] = RT.vector(arrayOfObject72);
    const__362 = PersistentList.create(Arrays.asList(arrayOfObject70));
    Object[] arrayOfObject73 = new Object[12];
    arrayOfObject73[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject74 = new Object[2];
    Object[] arrayOfObject75 = new Object[2];
    arrayOfObject75[0] = Symbol.intern(null, "f");
    arrayOfObject75[1] = Symbol.intern(null, "coll");
    arrayOfObject74[0] = RT.vector(arrayOfObject75);
    Object[] arrayOfObject76 = new Object[3];
    arrayOfObject76[0] = Symbol.intern(null, "f");
    arrayOfObject76[1] = Symbol.intern(null, "val");
    arrayOfObject76[2] = Symbol.intern(null, "coll");
    arrayOfObject74[1] = RT.vector(arrayOfObject76);
    arrayOfObject73[1] = PersistentList.create(Arrays.asList(arrayOfObject74));
    arrayOfObject73[2] = RT.keyword(null, "column");
    arrayOfObject73[3] = Integer.valueOf(1);
    arrayOfObject73[4] = RT.keyword(null, "private");
    arrayOfObject73[5] = Boolean.TRUE;
    arrayOfObject73[6] = RT.keyword(null, "static");
    arrayOfObject73[7] = Boolean.TRUE;
    arrayOfObject73[8] = RT.keyword(null, "line");
    arrayOfObject73[9] = Integer.valueOf(882);
    arrayOfObject73[10] = RT.keyword(null, "file");
    arrayOfObject73[11] = "clojure/core.clj";
    const__363 = (AFn)RT.map(arrayOfObject73);
    const__364 = (Var)RT.var("clojure.core", "reverse");
    const__365 = Integer.valueOf(899);
    Object[] arrayOfObject77 = new Object[1];
    Object[] arrayOfObject78 = new Object[1];
    arrayOfObject78[0] = Symbol.intern(null, "coll");
    arrayOfObject77[0] = RT.vector(arrayOfObject78);
    const__366 = PersistentList.create(Arrays.asList(arrayOfObject77));
    Object[] arrayOfObject79 = new Object[14];
    arrayOfObject79[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject80 = new Object[1];
    Object[] arrayOfObject81 = new Object[1];
    arrayOfObject81[0] = Symbol.intern(null, "coll");
    arrayOfObject80[0] = RT.vector(arrayOfObject81);
    arrayOfObject79[1] = PersistentList.create(Arrays.asList(arrayOfObject80));
    arrayOfObject79[2] = RT.keyword(null, "column");
    arrayOfObject79[3] = Integer.valueOf(1);
    arrayOfObject79[4] = RT.keyword(null, "added");
    arrayOfObject79[5] = "1.0";
    arrayOfObject79[6] = RT.keyword(null, "static");
    arrayOfObject79[7] = Boolean.TRUE;
    arrayOfObject79[8] = RT.keyword(null, "doc");
    arrayOfObject79[9] = "Returns a seq of the items in coll in reverse order. Not lazy.";
    arrayOfObject79[10] = RT.keyword(null, "line");
    arrayOfObject79[11] = Integer.valueOf(899);
    arrayOfObject79[12] = RT.keyword(null, "file");
    arrayOfObject79[13] = "clojure/core.clj";
    const__367 = (AFn)RT.map(arrayOfObject79);
    const__368 = (Var)RT.var("clojure.core", "nary-inline");
    const__369 = Integer.valueOf(907);
    Object[] arrayOfObject82 = new Object[2];
    Object[] arrayOfObject83 = new Object[1];
    arrayOfObject83[0] = Symbol.intern(null, "op");
    arrayOfObject82[0] = RT.vector(arrayOfObject83);
    Object[] arrayOfObject84 = new Object[2];
    arrayOfObject84[0] = Symbol.intern(null, "op");
    arrayOfObject84[1] = Symbol.intern(null, "unchecked-op");
    arrayOfObject82[1] = RT.vector(arrayOfObject84);
    const__370 = PersistentList.create(Arrays.asList(arrayOfObject82));
    Object[] arrayOfObject85 = new Object[10];
    arrayOfObject85[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject86 = new Object[2];
    Object[] arrayOfObject87 = new Object[1];
    arrayOfObject87[0] = Symbol.intern(null, "op");
    arrayOfObject86[0] = RT.vector(arrayOfObject87);
    Object[] arrayOfObject88 = new Object[2];
    arrayOfObject88[0] = Symbol.intern(null, "op");
    arrayOfObject88[1] = Symbol.intern(null, "unchecked-op");
    arrayOfObject86[1] = RT.vector(arrayOfObject88);
    arrayOfObject85[1] = PersistentList.create(Arrays.asList(arrayOfObject86));
    arrayOfObject85[2] = RT.keyword(null, "column");
    arrayOfObject85[3] = Integer.valueOf(1);
    arrayOfObject85[4] = RT.keyword(null, "private");
    arrayOfObject85[5] = Boolean.TRUE;
    arrayOfObject85[6] = RT.keyword(null, "line");
    arrayOfObject85[7] = Integer.valueOf(907);
    arrayOfObject85[8] = RT.keyword(null, "file");
    arrayOfObject85[9] = "clojure/core.clj";
    const__371 = (AFn)RT.map(arrayOfObject85);
    const__372 = (Var)RT.var("clojure.core", ">1?");
    const__373 = Integer.valueOf(921);
    Object[] arrayOfObject89 = new Object[1];
    Object[] arrayOfObject90 = new Object[1];
    arrayOfObject90[0] = Symbol.intern(null, "n");
    arrayOfObject89[0] = RT.vector(arrayOfObject90);
    const__374 = PersistentList.create(Arrays.asList(arrayOfObject89));
    Object[] arrayOfObject91 = new Object[10];
    arrayOfObject91[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject92 = new Object[1];
    Object[] arrayOfObject93 = new Object[1];
    arrayOfObject93[0] = Symbol.intern(null, "n");
    arrayOfObject92[0] = RT.vector(arrayOfObject93);
    arrayOfObject91[1] = PersistentList.create(Arrays.asList(arrayOfObject92));
    arrayOfObject91[2] = RT.keyword(null, "column");
    arrayOfObject91[3] = Integer.valueOf(1);
    arrayOfObject91[4] = RT.keyword(null, "private");
    arrayOfObject91[5] = Boolean.TRUE;
    arrayOfObject91[6] = RT.keyword(null, "line");
    arrayOfObject91[7] = Integer.valueOf(921);
    arrayOfObject91[8] = RT.keyword(null, "file");
    arrayOfObject91[9] = "clojure/core.clj";
    const__375 = (AFn)RT.map(arrayOfObject91);
    const__376 = (Var)RT.var("clojure.core", ">0?");
    const__377 = Integer.valueOf(922);
    Object[] arrayOfObject94 = new Object[1];
    Object[] arrayOfObject95 = new Object[1];
    arrayOfObject95[0] = Symbol.intern(null, "n");
    arrayOfObject94[0] = RT.vector(arrayOfObject95);
    const__378 = PersistentList.create(Arrays.asList(arrayOfObject94));
    Object[] arrayOfObject96 = new Object[10];
    arrayOfObject96[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject97 = new Object[1];
    Object[] arrayOfObject98 = new Object[1];
    arrayOfObject98[0] = Symbol.intern(null, "n");
    arrayOfObject97[0] = RT.vector(arrayOfObject98);
    arrayOfObject96[1] = PersistentList.create(Arrays.asList(arrayOfObject97));
    arrayOfObject96[2] = RT.keyword(null, "column");
    arrayOfObject96[3] = Integer.valueOf(1);
    arrayOfObject96[4] = RT.keyword(null, "private");
    arrayOfObject96[5] = Boolean.TRUE;
    arrayOfObject96[6] = RT.keyword(null, "line");
    arrayOfObject96[7] = Integer.valueOf(922);
    arrayOfObject96[8] = RT.keyword(null, "file");
    arrayOfObject96[9] = "clojure/core.clj";
    const__379 = (AFn)RT.map(arrayOfObject96);
    const__380 = (Var)RT.var("clojure.core", "+'");
    const__381 = Integer.valueOf(924);
    Object[] arrayOfObject99 = new Object[4];
    arrayOfObject99[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject100 = new Object[1];
    arrayOfObject100[0] = Symbol.intern(null, "x");
    arrayOfObject99[1] = RT.vector(arrayOfObject100);
    Object[] arrayOfObject101 = new Object[2];
    arrayOfObject101[0] = Symbol.intern(null, "x");
    arrayOfObject101[1] = Symbol.intern(null, "y");
    arrayOfObject99[2] = RT.vector(arrayOfObject101);
    Object[] arrayOfObject102 = new Object[4];
    arrayOfObject102[0] = Symbol.intern(null, "x");
    arrayOfObject102[1] = Symbol.intern(null, "y");
    arrayOfObject102[2] = Symbol.intern(null, "&");
    arrayOfObject102[3] = Symbol.intern(null, "more");
    arrayOfObject99[3] = RT.vector(arrayOfObject102);
    const__382 = PersistentList.create(Arrays.asList(arrayOfObject99));
    const__383 = (AFn)Symbol.intern(null, "addP");
    const__384 = (Var)RT.var("clojure.core", "+");
    const__385 = Integer.valueOf(936);
    Object[] arrayOfObject103 = new Object[4];
    arrayOfObject103[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject104 = new Object[1];
    arrayOfObject104[0] = Symbol.intern(null, "x");
    arrayOfObject103[1] = RT.vector(arrayOfObject104);
    Object[] arrayOfObject105 = new Object[2];
    arrayOfObject105[0] = Symbol.intern(null, "x");
    arrayOfObject105[1] = Symbol.intern(null, "y");
    arrayOfObject103[2] = RT.vector(arrayOfObject105);
    Object[] arrayOfObject106 = new Object[4];
    arrayOfObject106[0] = Symbol.intern(null, "x");
    arrayOfObject106[1] = Symbol.intern(null, "y");
    arrayOfObject106[2] = Symbol.intern(null, "&");
    arrayOfObject106[3] = Symbol.intern(null, "more");
    arrayOfObject103[3] = RT.vector(arrayOfObject106);
    const__386 = PersistentList.create(Arrays.asList(arrayOfObject103));
    const__387 = (AFn)Symbol.intern(null, "add");
    const__388 = (AFn)Symbol.intern(null, "unchecked_add");
    const__389 = (Var)RT.var("clojure.core", "*'");
    const__390 = Integer.valueOf(948);
    Object[] arrayOfObject107 = new Object[4];
    arrayOfObject107[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject108 = new Object[1];
    arrayOfObject108[0] = Symbol.intern(null, "x");
    arrayOfObject107[1] = RT.vector(arrayOfObject108);
    Object[] arrayOfObject109 = new Object[2];
    arrayOfObject109[0] = Symbol.intern(null, "x");
    arrayOfObject109[1] = Symbol.intern(null, "y");
    arrayOfObject107[2] = RT.vector(arrayOfObject109);
    Object[] arrayOfObject110 = new Object[4];
    arrayOfObject110[0] = Symbol.intern(null, "x");
    arrayOfObject110[1] = Symbol.intern(null, "y");
    arrayOfObject110[2] = Symbol.intern(null, "&");
    arrayOfObject110[3] = Symbol.intern(null, "more");
    arrayOfObject107[3] = RT.vector(arrayOfObject110);
    const__391 = PersistentList.create(Arrays.asList(arrayOfObject107));
    const__392 = (AFn)Symbol.intern(null, "multiplyP");
    const__393 = (Var)RT.var("clojure.core", "*");
    const__394 = Integer.valueOf(960);
    Object[] arrayOfObject111 = new Object[4];
    arrayOfObject111[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject112 = new Object[1];
    arrayOfObject112[0] = Symbol.intern(null, "x");
    arrayOfObject111[1] = RT.vector(arrayOfObject112);
    Object[] arrayOfObject113 = new Object[2];
    arrayOfObject113[0] = Symbol.intern(null, "x");
    arrayOfObject113[1] = Symbol.intern(null, "y");
    arrayOfObject111[2] = RT.vector(arrayOfObject113);
    Object[] arrayOfObject114 = new Object[4];
    arrayOfObject114[0] = Symbol.intern(null, "x");
    arrayOfObject114[1] = Symbol.intern(null, "y");
    arrayOfObject114[2] = Symbol.intern(null, "&");
    arrayOfObject114[3] = Symbol.intern(null, "more");
    arrayOfObject111[3] = RT.vector(arrayOfObject114);
    const__395 = PersistentList.create(Arrays.asList(arrayOfObject111));
    const__396 = (AFn)Symbol.intern(null, "multiply");
    const__397 = (AFn)Symbol.intern(null, "unchecked_multiply");
    const__398 = (Var)RT.var("clojure.core", "/");
    const__399 = Integer.valueOf(972);
  }

  public static void __init4()
  {
    Object[] arrayOfObject1 = new Object[3];
    Object[] arrayOfObject2 = new Object[1];
    arrayOfObject2[0] = Symbol.intern(null, "x");
    arrayOfObject1[0] = RT.vector(arrayOfObject2);
    Object[] arrayOfObject3 = new Object[2];
    arrayOfObject3[0] = Symbol.intern(null, "x");
    arrayOfObject3[1] = Symbol.intern(null, "y");
    arrayOfObject1[1] = RT.vector(arrayOfObject3);
    Object[] arrayOfObject4 = new Object[4];
    arrayOfObject4[0] = Symbol.intern(null, "x");
    arrayOfObject4[1] = Symbol.intern(null, "y");
    arrayOfObject4[2] = Symbol.intern(null, "&");
    arrayOfObject4[3] = Symbol.intern(null, "more");
    arrayOfObject1[2] = RT.vector(arrayOfObject4);
    const__400 = PersistentList.create(Arrays.asList(arrayOfObject1));
    const__401 = (AFn)Symbol.intern(null, "divide");
    const__402 = (Var)RT.var("clojure.core", "-'");
    const__403 = Integer.valueOf(983);
    Object[] arrayOfObject5 = new Object[3];
    Object[] arrayOfObject6 = new Object[1];
    arrayOfObject6[0] = Symbol.intern(null, "x");
    arrayOfObject5[0] = RT.vector(arrayOfObject6);
    Object[] arrayOfObject7 = new Object[2];
    arrayOfObject7[0] = Symbol.intern(null, "x");
    arrayOfObject7[1] = Symbol.intern(null, "y");
    arrayOfObject5[1] = RT.vector(arrayOfObject7);
    Object[] arrayOfObject8 = new Object[4];
    arrayOfObject8[0] = Symbol.intern(null, "x");
    arrayOfObject8[1] = Symbol.intern(null, "y");
    arrayOfObject8[2] = Symbol.intern(null, "&");
    arrayOfObject8[3] = Symbol.intern(null, "more");
    arrayOfObject5[2] = RT.vector(arrayOfObject8);
    const__404 = PersistentList.create(Arrays.asList(arrayOfObject5));
    const__405 = (AFn)Symbol.intern(null, "minusP");
    const__406 = (Var)RT.var("clojure.core", "-");
    const__407 = Integer.valueOf(995);
    Object[] arrayOfObject9 = new Object[3];
    Object[] arrayOfObject10 = new Object[1];
    arrayOfObject10[0] = Symbol.intern(null, "x");
    arrayOfObject9[0] = RT.vector(arrayOfObject10);
    Object[] arrayOfObject11 = new Object[2];
    arrayOfObject11[0] = Symbol.intern(null, "x");
    arrayOfObject11[1] = Symbol.intern(null, "y");
    arrayOfObject9[1] = RT.vector(arrayOfObject11);
    Object[] arrayOfObject12 = new Object[4];
    arrayOfObject12[0] = Symbol.intern(null, "x");
    arrayOfObject12[1] = Symbol.intern(null, "y");
    arrayOfObject12[2] = Symbol.intern(null, "&");
    arrayOfObject12[3] = Symbol.intern(null, "more");
    arrayOfObject9[2] = RT.vector(arrayOfObject12);
    const__408 = PersistentList.create(Arrays.asList(arrayOfObject9));
    const__409 = (AFn)Symbol.intern(null, "minus");
    const__410 = (AFn)Symbol.intern(null, "unchecked_minus");
    const__411 = (Var)RT.var("clojure.core", "<=");
    const__412 = Integer.valueOf(1007);
    Object[] arrayOfObject13 = new Object[3];
    Object[] arrayOfObject14 = new Object[1];
    arrayOfObject14[0] = Symbol.intern(null, "x");
    arrayOfObject13[0] = RT.vector(arrayOfObject14);
    Object[] arrayOfObject15 = new Object[2];
    arrayOfObject15[0] = Symbol.intern(null, "x");
    arrayOfObject15[1] = Symbol.intern(null, "y");
    arrayOfObject13[1] = RT.vector(arrayOfObject15);
    Object[] arrayOfObject16 = new Object[4];
    arrayOfObject16[0] = Symbol.intern(null, "x");
    arrayOfObject16[1] = Symbol.intern(null, "y");
    arrayOfObject16[2] = Symbol.intern(null, "&");
    arrayOfObject16[3] = Symbol.intern(null, "more");
    arrayOfObject13[2] = RT.vector(arrayOfObject16);
    const__413 = PersistentList.create(Arrays.asList(arrayOfObject13));
    Object[] arrayOfObject17 = new Object[1];
    arrayOfObject17[0] = Long.valueOf(2L);
    const__414 = (AFn)PersistentHashSet.create(arrayOfObject17);
    const__415 = (Var)RT.var("clojure.core", ">");
    const__416 = Integer.valueOf(1022);
    Object[] arrayOfObject18 = new Object[3];
    Object[] arrayOfObject19 = new Object[1];
    arrayOfObject19[0] = Symbol.intern(null, "x");
    arrayOfObject18[0] = RT.vector(arrayOfObject19);
    Object[] arrayOfObject20 = new Object[2];
    arrayOfObject20[0] = Symbol.intern(null, "x");
    arrayOfObject20[1] = Symbol.intern(null, "y");
    arrayOfObject18[1] = RT.vector(arrayOfObject20);
    Object[] arrayOfObject21 = new Object[4];
    arrayOfObject21[0] = Symbol.intern(null, "x");
    arrayOfObject21[1] = Symbol.intern(null, "y");
    arrayOfObject21[2] = Symbol.intern(null, "&");
    arrayOfObject21[3] = Symbol.intern(null, "more");
    arrayOfObject18[2] = RT.vector(arrayOfObject21);
    const__417 = PersistentList.create(Arrays.asList(arrayOfObject18));
    Object[] arrayOfObject22 = new Object[1];
    arrayOfObject22[0] = Long.valueOf(2L);
    const__418 = (AFn)PersistentHashSet.create(arrayOfObject22);
    const__419 = (Var)RT.var("clojure.core", ">=");
    const__420 = Integer.valueOf(1037);
    Object[] arrayOfObject23 = new Object[3];
    Object[] arrayOfObject24 = new Object[1];
    arrayOfObject24[0] = Symbol.intern(null, "x");
    arrayOfObject23[0] = RT.vector(arrayOfObject24);
    Object[] arrayOfObject25 = new Object[2];
    arrayOfObject25[0] = Symbol.intern(null, "x");
    arrayOfObject25[1] = Symbol.intern(null, "y");
    arrayOfObject23[1] = RT.vector(arrayOfObject25);
    Object[] arrayOfObject26 = new Object[4];
    arrayOfObject26[0] = Symbol.intern(null, "x");
    arrayOfObject26[1] = Symbol.intern(null, "y");
    arrayOfObject26[2] = Symbol.intern(null, "&");
    arrayOfObject26[3] = Symbol.intern(null, "more");
    arrayOfObject23[2] = RT.vector(arrayOfObject26);
    const__421 = PersistentList.create(Arrays.asList(arrayOfObject23));
    Object[] arrayOfObject27 = new Object[1];
    arrayOfObject27[0] = Long.valueOf(2L);
    const__422 = (AFn)PersistentHashSet.create(arrayOfObject27);
    const__423 = (Var)RT.var("clojure.core", "==");
    const__424 = Integer.valueOf(1052);
    Object[] arrayOfObject28 = new Object[3];
    Object[] arrayOfObject29 = new Object[1];
    arrayOfObject29[0] = Symbol.intern(null, "x");
    arrayOfObject28[0] = RT.vector(arrayOfObject29);
    Object[] arrayOfObject30 = new Object[2];
    arrayOfObject30[0] = Symbol.intern(null, "x");
    arrayOfObject30[1] = Symbol.intern(null, "y");
    arrayOfObject28[1] = RT.vector(arrayOfObject30);
    Object[] arrayOfObject31 = new Object[4];
    arrayOfObject31[0] = Symbol.intern(null, "x");
    arrayOfObject31[1] = Symbol.intern(null, "y");
    arrayOfObject31[2] = Symbol.intern(null, "&");
    arrayOfObject31[3] = Symbol.intern(null, "more");
    arrayOfObject28[2] = RT.vector(arrayOfObject31);
    const__425 = PersistentList.create(Arrays.asList(arrayOfObject28));
    Object[] arrayOfObject32 = new Object[1];
    arrayOfObject32[0] = Long.valueOf(2L);
    const__426 = (AFn)PersistentHashSet.create(arrayOfObject32);
    const__427 = (Var)RT.var("clojure.core", "max");
    const__428 = Integer.valueOf(1067);
    Object[] arrayOfObject33 = new Object[3];
    Object[] arrayOfObject34 = new Object[1];
    arrayOfObject34[0] = Symbol.intern(null, "x");
    arrayOfObject33[0] = RT.vector(arrayOfObject34);
    Object[] arrayOfObject35 = new Object[2];
    arrayOfObject35[0] = Symbol.intern(null, "x");
    arrayOfObject35[1] = Symbol.intern(null, "y");
    arrayOfObject33[1] = RT.vector(arrayOfObject35);
    Object[] arrayOfObject36 = new Object[4];
    arrayOfObject36[0] = Symbol.intern(null, "x");
    arrayOfObject36[1] = Symbol.intern(null, "y");
    arrayOfObject36[2] = Symbol.intern(null, "&");
    arrayOfObject36[3] = Symbol.intern(null, "more");
    arrayOfObject33[2] = RT.vector(arrayOfObject36);
    const__429 = PersistentList.create(Arrays.asList(arrayOfObject33));
    const__430 = (AFn)Symbol.intern(null, "max");
    const__431 = (Var)RT.var("clojure.core", "min");
    const__432 = Integer.valueOf(1077);
    Object[] arrayOfObject37 = new Object[3];
    Object[] arrayOfObject38 = new Object[1];
    arrayOfObject38[0] = Symbol.intern(null, "x");
    arrayOfObject37[0] = RT.vector(arrayOfObject38);
    Object[] arrayOfObject39 = new Object[2];
    arrayOfObject39[0] = Symbol.intern(null, "x");
    arrayOfObject39[1] = Symbol.intern(null, "y");
    arrayOfObject37[1] = RT.vector(arrayOfObject39);
    Object[] arrayOfObject40 = new Object[4];
    arrayOfObject40[0] = Symbol.intern(null, "x");
    arrayOfObject40[1] = Symbol.intern(null, "y");
    arrayOfObject40[2] = Symbol.intern(null, "&");
    arrayOfObject40[3] = Symbol.intern(null, "more");
    arrayOfObject37[2] = RT.vector(arrayOfObject40);
    const__433 = PersistentList.create(Arrays.asList(arrayOfObject37));
    const__434 = (AFn)Symbol.intern(null, "min");
    const__435 = (Var)RT.var("clojure.core", "dec'");
    const__436 = Integer.valueOf(1087);
    Object[] arrayOfObject41 = new Object[1];
    Object[] arrayOfObject42 = new Object[1];
    arrayOfObject42[0] = Symbol.intern(null, "x");
    arrayOfObject41[0] = RT.vector(arrayOfObject42);
    const__437 = PersistentList.create(Arrays.asList(arrayOfObject41));
    const__438 = (Var)RT.var("clojure.core", "dec");
    const__439 = Integer.valueOf(1094);
    Object[] arrayOfObject43 = new Object[1];
    Object[] arrayOfObject44 = new Object[1];
    arrayOfObject44[0] = Symbol.intern(null, "x");
    arrayOfObject43[0] = RT.vector(arrayOfObject44);
    const__440 = PersistentList.create(Arrays.asList(arrayOfObject43));
    const__441 = (Var)RT.var("clojure.core", "unchecked-inc-int");
    const__442 = Integer.valueOf(1101);
    Object[] arrayOfObject45 = new Object[1];
    Object[] arrayOfObject46 = new Object[1];
    arrayOfObject46[0] = Symbol.intern(null, "x");
    arrayOfObject45[0] = RT.vector(arrayOfObject46);
    const__443 = PersistentList.create(Arrays.asList(arrayOfObject45));
    const__444 = (Var)RT.var("clojure.core", "unchecked-inc");
    const__445 = Integer.valueOf(1108);
    Object[] arrayOfObject47 = new Object[1];
    Object[] arrayOfObject48 = new Object[1];
    arrayOfObject48[0] = Symbol.intern(null, "x");
    arrayOfObject47[0] = RT.vector(arrayOfObject48);
    const__446 = PersistentList.create(Arrays.asList(arrayOfObject47));
    const__447 = (Var)RT.var("clojure.core", "unchecked-dec-int");
    const__448 = Integer.valueOf(1115);
    Object[] arrayOfObject49 = new Object[1];
    Object[] arrayOfObject50 = new Object[1];
    arrayOfObject50[0] = Symbol.intern(null, "x");
    arrayOfObject49[0] = RT.vector(arrayOfObject50);
    const__449 = PersistentList.create(Arrays.asList(arrayOfObject49));
    const__450 = (Var)RT.var("clojure.core", "unchecked-dec");
    const__451 = Integer.valueOf(1122);
    Object[] arrayOfObject51 = new Object[1];
    Object[] arrayOfObject52 = new Object[1];
    arrayOfObject52[0] = Symbol.intern(null, "x");
    arrayOfObject51[0] = RT.vector(arrayOfObject52);
    const__452 = PersistentList.create(Arrays.asList(arrayOfObject51));
    const__453 = (Var)RT.var("clojure.core", "unchecked-negate-int");
    const__454 = Integer.valueOf(1129);
    Object[] arrayOfObject53 = new Object[1];
    Object[] arrayOfObject54 = new Object[1];
    arrayOfObject54[0] = Symbol.intern(null, "x");
    arrayOfObject53[0] = RT.vector(arrayOfObject54);
    const__455 = PersistentList.create(Arrays.asList(arrayOfObject53));
    const__456 = (Var)RT.var("clojure.core", "unchecked-negate");
    const__457 = Integer.valueOf(1136);
    Object[] arrayOfObject55 = new Object[1];
    Object[] arrayOfObject56 = new Object[1];
    arrayOfObject56[0] = Symbol.intern(null, "x");
    arrayOfObject55[0] = RT.vector(arrayOfObject56);
    const__458 = PersistentList.create(Arrays.asList(arrayOfObject55));
    const__459 = (Var)RT.var("clojure.core", "unchecked-add-int");
    const__460 = Integer.valueOf(1143);
    Object[] arrayOfObject57 = new Object[1];
    Object[] arrayOfObject58 = new Object[2];
    arrayOfObject58[0] = Symbol.intern(null, "x");
    arrayOfObject58[1] = Symbol.intern(null, "y");
    arrayOfObject57[0] = RT.vector(arrayOfObject58);
    const__461 = PersistentList.create(Arrays.asList(arrayOfObject57));
    const__462 = (Var)RT.var("clojure.core", "unchecked-add");
    const__463 = Integer.valueOf(1150);
    Object[] arrayOfObject59 = new Object[1];
    Object[] arrayOfObject60 = new Object[2];
    arrayOfObject60[0] = Symbol.intern(null, "x");
    arrayOfObject60[1] = Symbol.intern(null, "y");
    arrayOfObject59[0] = RT.vector(arrayOfObject60);
    const__464 = PersistentList.create(Arrays.asList(arrayOfObject59));
    const__465 = (Var)RT.var("clojure.core", "unchecked-subtract-int");
    const__466 = Integer.valueOf(1157);
    Object[] arrayOfObject61 = new Object[1];
    Object[] arrayOfObject62 = new Object[2];
    arrayOfObject62[0] = Symbol.intern(null, "x");
    arrayOfObject62[1] = Symbol.intern(null, "y");
    arrayOfObject61[0] = RT.vector(arrayOfObject62);
    const__467 = PersistentList.create(Arrays.asList(arrayOfObject61));
    const__468 = (Var)RT.var("clojure.core", "unchecked-subtract");
    const__469 = Integer.valueOf(1164);
    Object[] arrayOfObject63 = new Object[1];
    Object[] arrayOfObject64 = new Object[2];
    arrayOfObject64[0] = Symbol.intern(null, "x");
    arrayOfObject64[1] = Symbol.intern(null, "y");
    arrayOfObject63[0] = RT.vector(arrayOfObject64);
    const__470 = PersistentList.create(Arrays.asList(arrayOfObject63));
    const__471 = (Var)RT.var("clojure.core", "unchecked-multiply-int");
    const__472 = Integer.valueOf(1171);
    Object[] arrayOfObject65 = new Object[1];
    Object[] arrayOfObject66 = new Object[2];
    arrayOfObject66[0] = Symbol.intern(null, "x");
    arrayOfObject66[1] = Symbol.intern(null, "y");
    arrayOfObject65[0] = RT.vector(arrayOfObject66);
    const__473 = PersistentList.create(Arrays.asList(arrayOfObject65));
    const__474 = (Var)RT.var("clojure.core", "unchecked-multiply");
    const__475 = Integer.valueOf(1178);
    Object[] arrayOfObject67 = new Object[1];
    Object[] arrayOfObject68 = new Object[2];
    arrayOfObject68[0] = Symbol.intern(null, "x");
    arrayOfObject68[1] = Symbol.intern(null, "y");
    arrayOfObject67[0] = RT.vector(arrayOfObject68);
    const__476 = PersistentList.create(Arrays.asList(arrayOfObject67));
    const__477 = (Var)RT.var("clojure.core", "unchecked-divide-int");
    const__478 = Integer.valueOf(1185);
    Object[] arrayOfObject69 = new Object[1];
    Object[] arrayOfObject70 = new Object[2];
    arrayOfObject70[0] = Symbol.intern(null, "x");
    arrayOfObject70[1] = Symbol.intern(null, "y");
    arrayOfObject69[0] = RT.vector(arrayOfObject70);
    const__479 = PersistentList.create(Arrays.asList(arrayOfObject69));
    const__480 = (Var)RT.var("clojure.core", "unchecked-remainder-int");
    const__481 = Integer.valueOf(1192);
    Object[] arrayOfObject71 = new Object[1];
    Object[] arrayOfObject72 = new Object[2];
    arrayOfObject72[0] = Symbol.intern(null, "x");
    arrayOfObject72[1] = Symbol.intern(null, "y");
    arrayOfObject71[0] = RT.vector(arrayOfObject72);
    const__482 = PersistentList.create(Arrays.asList(arrayOfObject71));
    const__483 = (Var)RT.var("clojure.core", "pos?");
    const__484 = Integer.valueOf(1199);
    Object[] arrayOfObject73 = new Object[1];
    Object[] arrayOfObject74 = new Object[1];
    arrayOfObject74[0] = Symbol.intern(null, "x");
    arrayOfObject73[0] = RT.vector(arrayOfObject74);
    const__485 = PersistentList.create(Arrays.asList(arrayOfObject73));
    const__486 = (Var)RT.var("clojure.core", "neg?");
    const__487 = Integer.valueOf(1206);
    Object[] arrayOfObject75 = new Object[1];
    Object[] arrayOfObject76 = new Object[1];
    arrayOfObject76[0] = Symbol.intern(null, "x");
    arrayOfObject75[0] = RT.vector(arrayOfObject76);
    const__488 = PersistentList.create(Arrays.asList(arrayOfObject75));
    const__489 = (Var)RT.var("clojure.core", "quot");
    const__490 = Integer.valueOf(1213);
    Object[] arrayOfObject77 = new Object[1];
    Object[] arrayOfObject78 = new Object[2];
    arrayOfObject78[0] = Symbol.intern(null, "num");
    arrayOfObject78[1] = Symbol.intern(null, "div");
    arrayOfObject77[0] = RT.vector(arrayOfObject78);
    const__491 = PersistentList.create(Arrays.asList(arrayOfObject77));
    const__492 = (Var)RT.var("clojure.core", "rem");
    const__493 = Integer.valueOf(1221);
    Object[] arrayOfObject79 = new Object[1];
    Object[] arrayOfObject80 = new Object[2];
    arrayOfObject80[0] = Symbol.intern(null, "num");
    arrayOfObject80[1] = Symbol.intern(null, "div");
    arrayOfObject79[0] = RT.vector(arrayOfObject80);
    const__494 = PersistentList.create(Arrays.asList(arrayOfObject79));
    const__495 = (Var)RT.var("clojure.core", "rationalize");
    const__496 = Integer.valueOf(1229);
    Object[] arrayOfObject81 = new Object[1];
    Object[] arrayOfObject82 = new Object[1];
    arrayOfObject82[0] = Symbol.intern(null, "num");
    arrayOfObject81[0] = RT.vector(arrayOfObject82);
    const__497 = PersistentList.create(Arrays.asList(arrayOfObject81));
    Object[] arrayOfObject83 = new Object[14];
    arrayOfObject83[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject84 = new Object[1];
    Object[] arrayOfObject85 = new Object[1];
    arrayOfObject85[0] = Symbol.intern(null, "num");
    arrayOfObject84[0] = RT.vector(arrayOfObject85);
    arrayOfObject83[1] = PersistentList.create(Arrays.asList(arrayOfObject84));
    arrayOfObject83[2] = RT.keyword(null, "column");
    arrayOfObject83[3] = Integer.valueOf(1);
    arrayOfObject83[4] = RT.keyword(null, "added");
    arrayOfObject83[5] = "1.0";
    arrayOfObject83[6] = RT.keyword(null, "static");
    arrayOfObject83[7] = Boolean.TRUE;
    arrayOfObject83[8] = RT.keyword(null, "doc");
    arrayOfObject83[9] = "returns the rational value of num";
    arrayOfObject83[10] = RT.keyword(null, "line");
    arrayOfObject83[11] = Integer.valueOf(1229);
    arrayOfObject83[12] = RT.keyword(null, "file");
    arrayOfObject83[13] = "clojure/core.clj";
    const__498 = (AFn)RT.map(arrayOfObject83);
    const__499 = (Var)RT.var("clojure.core", "bit-not");
  }

  public static void __init5()
  {
    const__500 = Integer.valueOf(1238);
    Object[] arrayOfObject1 = new Object[1];
    Object[] arrayOfObject2 = new Object[1];
    arrayOfObject2[0] = Symbol.intern(null, "x");
    arrayOfObject1[0] = RT.vector(arrayOfObject2);
    const__501 = PersistentList.create(Arrays.asList(arrayOfObject1));
    const__502 = (Var)RT.var("clojure.core", "bit-and");
    const__503 = Integer.valueOf(1245);
    Object[] arrayOfObject3 = new Object[2];
    Object[] arrayOfObject4 = new Object[2];
    arrayOfObject4[0] = Symbol.intern(null, "x");
    arrayOfObject4[1] = Symbol.intern(null, "y");
    arrayOfObject3[0] = RT.vector(arrayOfObject4);
    Object[] arrayOfObject5 = new Object[4];
    arrayOfObject5[0] = Symbol.intern(null, "x");
    arrayOfObject5[1] = Symbol.intern(null, "y");
    arrayOfObject5[2] = Symbol.intern(null, "&");
    arrayOfObject5[3] = Symbol.intern(null, "more");
    arrayOfObject3[1] = RT.vector(arrayOfObject5);
    const__504 = PersistentList.create(Arrays.asList(arrayOfObject3));
    const__505 = (AFn)Symbol.intern(null, "and");
    const__506 = (Var)RT.var("clojure.core", "bit-or");
    const__507 = Integer.valueOf(1254);
    Object[] arrayOfObject6 = new Object[2];
    Object[] arrayOfObject7 = new Object[2];
    arrayOfObject7[0] = Symbol.intern(null, "x");
    arrayOfObject7[1] = Symbol.intern(null, "y");
    arrayOfObject6[0] = RT.vector(arrayOfObject7);
    Object[] arrayOfObject8 = new Object[4];
    arrayOfObject8[0] = Symbol.intern(null, "x");
    arrayOfObject8[1] = Symbol.intern(null, "y");
    arrayOfObject8[2] = Symbol.intern(null, "&");
    arrayOfObject8[3] = Symbol.intern(null, "more");
    arrayOfObject6[1] = RT.vector(arrayOfObject8);
    const__508 = PersistentList.create(Arrays.asList(arrayOfObject6));
    const__509 = (AFn)Symbol.intern(null, "or");
    const__510 = (Var)RT.var("clojure.core", "bit-xor");
    const__511 = Integer.valueOf(1263);
    Object[] arrayOfObject9 = new Object[2];
    Object[] arrayOfObject10 = new Object[2];
    arrayOfObject10[0] = Symbol.intern(null, "x");
    arrayOfObject10[1] = Symbol.intern(null, "y");
    arrayOfObject9[0] = RT.vector(arrayOfObject10);
    Object[] arrayOfObject11 = new Object[4];
    arrayOfObject11[0] = Symbol.intern(null, "x");
    arrayOfObject11[1] = Symbol.intern(null, "y");
    arrayOfObject11[2] = Symbol.intern(null, "&");
    arrayOfObject11[3] = Symbol.intern(null, "more");
    arrayOfObject9[1] = RT.vector(arrayOfObject11);
    const__512 = PersistentList.create(Arrays.asList(arrayOfObject9));
    const__513 = (AFn)Symbol.intern(null, "xor");
    const__514 = (Var)RT.var("clojure.core", "bit-and-not");
    const__515 = Integer.valueOf(1272);
    Object[] arrayOfObject12 = new Object[2];
    Object[] arrayOfObject13 = new Object[2];
    arrayOfObject13[0] = Symbol.intern(null, "x");
    arrayOfObject13[1] = Symbol.intern(null, "y");
    arrayOfObject12[0] = RT.vector(arrayOfObject13);
    Object[] arrayOfObject14 = new Object[4];
    arrayOfObject14[0] = Symbol.intern(null, "x");
    arrayOfObject14[1] = Symbol.intern(null, "y");
    arrayOfObject14[2] = Symbol.intern(null, "&");
    arrayOfObject14[3] = Symbol.intern(null, "more");
    arrayOfObject12[1] = RT.vector(arrayOfObject14);
    const__516 = PersistentList.create(Arrays.asList(arrayOfObject12));
    const__517 = (AFn)Symbol.intern(null, "andNot");
    const__518 = (Var)RT.var("clojure.core", "bit-clear");
    const__519 = Integer.valueOf(1283);
    Object[] arrayOfObject15 = new Object[1];
    Object[] arrayOfObject16 = new Object[2];
    arrayOfObject16[0] = Symbol.intern(null, "x");
    arrayOfObject16[1] = Symbol.intern(null, "n");
    arrayOfObject15[0] = RT.vector(arrayOfObject16);
    const__520 = PersistentList.create(Arrays.asList(arrayOfObject15));
    Object[] arrayOfObject17 = new Object[14];
    arrayOfObject17[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject18 = new Object[1];
    Object[] arrayOfObject19 = new Object[2];
    arrayOfObject19[0] = Symbol.intern(null, "x");
    arrayOfObject19[1] = Symbol.intern(null, "n");
    arrayOfObject18[0] = RT.vector(arrayOfObject19);
    arrayOfObject17[1] = PersistentList.create(Arrays.asList(arrayOfObject18));
    arrayOfObject17[2] = RT.keyword(null, "column");
    arrayOfObject17[3] = Integer.valueOf(1);
    arrayOfObject17[4] = RT.keyword(null, "added");
    arrayOfObject17[5] = "1.0";
    arrayOfObject17[6] = RT.keyword(null, "static");
    arrayOfObject17[7] = Boolean.TRUE;
    arrayOfObject17[8] = RT.keyword(null, "doc");
    arrayOfObject17[9] = "Clear bit at index n";
    arrayOfObject17[10] = RT.keyword(null, "line");
    arrayOfObject17[11] = Integer.valueOf(1283);
    arrayOfObject17[12] = RT.keyword(null, "file");
    arrayOfObject17[13] = "clojure/core.clj";
    const__521 = (AFn)RT.map(arrayOfObject17);
    const__522 = (Var)RT.var("clojure.core", "bit-set");
    const__523 = Integer.valueOf(1289);
    Object[] arrayOfObject20 = new Object[1];
    Object[] arrayOfObject21 = new Object[2];
    arrayOfObject21[0] = Symbol.intern(null, "x");
    arrayOfObject21[1] = Symbol.intern(null, "n");
    arrayOfObject20[0] = RT.vector(arrayOfObject21);
    const__524 = PersistentList.create(Arrays.asList(arrayOfObject20));
    Object[] arrayOfObject22 = new Object[14];
    arrayOfObject22[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject23 = new Object[1];
    Object[] arrayOfObject24 = new Object[2];
    arrayOfObject24[0] = Symbol.intern(null, "x");
    arrayOfObject24[1] = Symbol.intern(null, "n");
    arrayOfObject23[0] = RT.vector(arrayOfObject24);
    arrayOfObject22[1] = PersistentList.create(Arrays.asList(arrayOfObject23));
    arrayOfObject22[2] = RT.keyword(null, "column");
    arrayOfObject22[3] = Integer.valueOf(1);
    arrayOfObject22[4] = RT.keyword(null, "added");
    arrayOfObject22[5] = "1.0";
    arrayOfObject22[6] = RT.keyword(null, "static");
    arrayOfObject22[7] = Boolean.TRUE;
    arrayOfObject22[8] = RT.keyword(null, "doc");
    arrayOfObject22[9] = "Set bit at index n";
    arrayOfObject22[10] = RT.keyword(null, "line");
    arrayOfObject22[11] = Integer.valueOf(1289);
    arrayOfObject22[12] = RT.keyword(null, "file");
    arrayOfObject22[13] = "clojure/core.clj";
    const__525 = (AFn)RT.map(arrayOfObject22);
    const__526 = (Var)RT.var("clojure.core", "bit-flip");
    const__527 = Integer.valueOf(1295);
    Object[] arrayOfObject25 = new Object[1];
    Object[] arrayOfObject26 = new Object[2];
    arrayOfObject26[0] = Symbol.intern(null, "x");
    arrayOfObject26[1] = Symbol.intern(null, "n");
    arrayOfObject25[0] = RT.vector(arrayOfObject26);
    const__528 = PersistentList.create(Arrays.asList(arrayOfObject25));
    Object[] arrayOfObject27 = new Object[14];
    arrayOfObject27[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject28 = new Object[1];
    Object[] arrayOfObject29 = new Object[2];
    arrayOfObject29[0] = Symbol.intern(null, "x");
    arrayOfObject29[1] = Symbol.intern(null, "n");
    arrayOfObject28[0] = RT.vector(arrayOfObject29);
    arrayOfObject27[1] = PersistentList.create(Arrays.asList(arrayOfObject28));
    arrayOfObject27[2] = RT.keyword(null, "column");
    arrayOfObject27[3] = Integer.valueOf(1);
    arrayOfObject27[4] = RT.keyword(null, "added");
    arrayOfObject27[5] = "1.0";
    arrayOfObject27[6] = RT.keyword(null, "static");
    arrayOfObject27[7] = Boolean.TRUE;
    arrayOfObject27[8] = RT.keyword(null, "doc");
    arrayOfObject27[9] = "Flip bit at index n";
    arrayOfObject27[10] = RT.keyword(null, "line");
    arrayOfObject27[11] = Integer.valueOf(1295);
    arrayOfObject27[12] = RT.keyword(null, "file");
    arrayOfObject27[13] = "clojure/core.clj";
    const__529 = (AFn)RT.map(arrayOfObject27);
    const__530 = (Var)RT.var("clojure.core", "bit-test");
    const__531 = Integer.valueOf(1301);
    Object[] arrayOfObject30 = new Object[1];
    Object[] arrayOfObject31 = new Object[2];
    arrayOfObject31[0] = Symbol.intern(null, "x");
    arrayOfObject31[1] = Symbol.intern(null, "n");
    arrayOfObject30[0] = RT.vector(arrayOfObject31);
    const__532 = PersistentList.create(Arrays.asList(arrayOfObject30));
    Object[] arrayOfObject32 = new Object[14];
    arrayOfObject32[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject33 = new Object[1];
    Object[] arrayOfObject34 = new Object[2];
    arrayOfObject34[0] = Symbol.intern(null, "x");
    arrayOfObject34[1] = Symbol.intern(null, "n");
    arrayOfObject33[0] = RT.vector(arrayOfObject34);
    arrayOfObject32[1] = PersistentList.create(Arrays.asList(arrayOfObject33));
    arrayOfObject32[2] = RT.keyword(null, "column");
    arrayOfObject32[3] = Integer.valueOf(1);
    arrayOfObject32[4] = RT.keyword(null, "added");
    arrayOfObject32[5] = "1.0";
    arrayOfObject32[6] = RT.keyword(null, "static");
    arrayOfObject32[7] = Boolean.TRUE;
    arrayOfObject32[8] = RT.keyword(null, "doc");
    arrayOfObject32[9] = "Test bit at index n";
    arrayOfObject32[10] = RT.keyword(null, "line");
    arrayOfObject32[11] = Integer.valueOf(1301);
    arrayOfObject32[12] = RT.keyword(null, "file");
    arrayOfObject32[13] = "clojure/core.clj";
    const__533 = (AFn)RT.map(arrayOfObject32);
    const__534 = (Var)RT.var("clojure.core", "bit-shift-left");
    const__535 = Integer.valueOf(1308);
    Object[] arrayOfObject35 = new Object[1];
    Object[] arrayOfObject36 = new Object[2];
    arrayOfObject36[0] = Symbol.intern(null, "x");
    arrayOfObject36[1] = Symbol.intern(null, "n");
    arrayOfObject35[0] = RT.vector(arrayOfObject36);
    const__536 = PersistentList.create(Arrays.asList(arrayOfObject35));
    const__537 = (Var)RT.var("clojure.core", "bit-shift-right");
    const__538 = Integer.valueOf(1314);
    Object[] arrayOfObject37 = new Object[1];
    Object[] arrayOfObject38 = new Object[2];
    arrayOfObject38[0] = Symbol.intern(null, "x");
    arrayOfObject38[1] = Symbol.intern(null, "n");
    arrayOfObject37[0] = RT.vector(arrayOfObject38);
    const__539 = PersistentList.create(Arrays.asList(arrayOfObject37));
    const__540 = (Var)RT.var("clojure.core", "integer?");
    const__541 = Integer.valueOf(1320);
    Object[] arrayOfObject39 = new Object[1];
    Object[] arrayOfObject40 = new Object[1];
    arrayOfObject40[0] = Symbol.intern(null, "n");
    arrayOfObject39[0] = RT.vector(arrayOfObject40);
    const__542 = PersistentList.create(Arrays.asList(arrayOfObject39));
    Object[] arrayOfObject41 = new Object[14];
    arrayOfObject41[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject42 = new Object[1];
    Object[] arrayOfObject43 = new Object[1];
    arrayOfObject43[0] = Symbol.intern(null, "n");
    arrayOfObject42[0] = RT.vector(arrayOfObject43);
    arrayOfObject41[1] = PersistentList.create(Arrays.asList(arrayOfObject42));
    arrayOfObject41[2] = RT.keyword(null, "column");
    arrayOfObject41[3] = Integer.valueOf(1);
    arrayOfObject41[4] = RT.keyword(null, "added");
    arrayOfObject41[5] = "1.0";
    arrayOfObject41[6] = RT.keyword(null, "static");
    arrayOfObject41[7] = Boolean.TRUE;
    arrayOfObject41[8] = RT.keyword(null, "doc");
    arrayOfObject41[9] = "Returns true if n is an integer";
    arrayOfObject41[10] = RT.keyword(null, "line");
    arrayOfObject41[11] = Integer.valueOf(1320);
    arrayOfObject41[12] = RT.keyword(null, "file");
    arrayOfObject41[13] = "clojure/core.clj";
    const__543 = (AFn)RT.map(arrayOfObject41);
    const__544 = (Var)RT.var("clojure.core", "even?");
    const__545 = Integer.valueOf(1332);
    Object[] arrayOfObject44 = new Object[1];
    Object[] arrayOfObject45 = new Object[1];
    arrayOfObject45[0] = Symbol.intern(null, "n");
    arrayOfObject44[0] = RT.vector(arrayOfObject45);
    const__546 = PersistentList.create(Arrays.asList(arrayOfObject44));
    Object[] arrayOfObject46 = new Object[14];
    arrayOfObject46[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject47 = new Object[1];
    Object[] arrayOfObject48 = new Object[1];
    arrayOfObject48[0] = Symbol.intern(null, "n");
    arrayOfObject47[0] = RT.vector(arrayOfObject48);
    arrayOfObject46[1] = PersistentList.create(Arrays.asList(arrayOfObject47));
    arrayOfObject46[2] = RT.keyword(null, "column");
    arrayOfObject46[3] = Integer.valueOf(1);
    arrayOfObject46[4] = RT.keyword(null, "added");
    arrayOfObject46[5] = "1.0";
    arrayOfObject46[6] = RT.keyword(null, "static");
    arrayOfObject46[7] = Boolean.TRUE;
    arrayOfObject46[8] = RT.keyword(null, "doc");
    arrayOfObject46[9] = "Returns true if n is even, throws an exception if n is not an integer";
    arrayOfObject46[10] = RT.keyword(null, "line");
    arrayOfObject46[11] = Integer.valueOf(1332);
    arrayOfObject46[12] = RT.keyword(null, "file");
    arrayOfObject46[13] = "clojure/core.clj";
    const__547 = (AFn)RT.map(arrayOfObject46);
    const__548 = (Var)RT.var("clojure.core", "odd?");
    const__549 = Integer.valueOf(1340);
    Object[] arrayOfObject49 = new Object[1];
    Object[] arrayOfObject50 = new Object[1];
    arrayOfObject50[0] = Symbol.intern(null, "n");
    arrayOfObject49[0] = RT.vector(arrayOfObject50);
    const__550 = PersistentList.create(Arrays.asList(arrayOfObject49));
    Object[] arrayOfObject51 = new Object[14];
    arrayOfObject51[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject52 = new Object[1];
    Object[] arrayOfObject53 = new Object[1];
    arrayOfObject53[0] = Symbol.intern(null, "n");
    arrayOfObject52[0] = RT.vector(arrayOfObject53);
    arrayOfObject51[1] = PersistentList.create(Arrays.asList(arrayOfObject52));
    arrayOfObject51[2] = RT.keyword(null, "column");
    arrayOfObject51[3] = Integer.valueOf(1);
    arrayOfObject51[4] = RT.keyword(null, "added");
    arrayOfObject51[5] = "1.0";
    arrayOfObject51[6] = RT.keyword(null, "static");
    arrayOfObject51[7] = Boolean.TRUE;
    arrayOfObject51[8] = RT.keyword(null, "doc");
    arrayOfObject51[9] = "Returns true if n is odd, throws an exception if n is not an integer";
    arrayOfObject51[10] = RT.keyword(null, "line");
    arrayOfObject51[11] = Integer.valueOf(1340);
    arrayOfObject51[12] = RT.keyword(null, "file");
    arrayOfObject51[13] = "clojure/core.clj";
    const__551 = (AFn)RT.map(arrayOfObject51);
    const__552 = (Var)RT.var("clojure.core", "complement");
    const__553 = Integer.valueOf(1349);
    Object[] arrayOfObject54 = new Object[1];
    Object[] arrayOfObject55 = new Object[1];
    arrayOfObject55[0] = Symbol.intern(null, "f");
    arrayOfObject54[0] = RT.vector(arrayOfObject55);
    const__554 = PersistentList.create(Arrays.asList(arrayOfObject54));
    Object[] arrayOfObject56 = new Object[14];
    arrayOfObject56[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject57 = new Object[1];
    Object[] arrayOfObject58 = new Object[1];
    arrayOfObject58[0] = Symbol.intern(null, "f");
    arrayOfObject57[0] = RT.vector(arrayOfObject58);
    arrayOfObject56[1] = PersistentList.create(Arrays.asList(arrayOfObject57));
    arrayOfObject56[2] = RT.keyword(null, "column");
    arrayOfObject56[3] = Integer.valueOf(1);
    arrayOfObject56[4] = RT.keyword(null, "added");
    arrayOfObject56[5] = "1.0";
    arrayOfObject56[6] = RT.keyword(null, "static");
    arrayOfObject56[7] = Boolean.TRUE;
    arrayOfObject56[8] = RT.keyword(null, "doc");
    arrayOfObject56[9] = "Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value.";
    arrayOfObject56[10] = RT.keyword(null, "line");
    arrayOfObject56[11] = Integer.valueOf(1349);
    arrayOfObject56[12] = RT.keyword(null, "file");
    arrayOfObject56[13] = "clojure/core.clj";
    const__555 = (AFn)RT.map(arrayOfObject56);
    const__556 = (Var)RT.var("clojure.core", "constantly");
    const__557 = Integer.valueOf(1361);
    Object[] arrayOfObject59 = new Object[1];
    Object[] arrayOfObject60 = new Object[1];
    arrayOfObject60[0] = Symbol.intern(null, "x");
    arrayOfObject59[0] = RT.vector(arrayOfObject60);
    const__558 = PersistentList.create(Arrays.asList(arrayOfObject59));
    Object[] arrayOfObject61 = new Object[14];
    arrayOfObject61[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject62 = new Object[1];
    Object[] arrayOfObject63 = new Object[1];
    arrayOfObject63[0] = Symbol.intern(null, "x");
    arrayOfObject62[0] = RT.vector(arrayOfObject63);
    arrayOfObject61[1] = PersistentList.create(Arrays.asList(arrayOfObject62));
    arrayOfObject61[2] = RT.keyword(null, "column");
    arrayOfObject61[3] = Integer.valueOf(1);
    arrayOfObject61[4] = RT.keyword(null, "added");
    arrayOfObject61[5] = "1.0";
    arrayOfObject61[6] = RT.keyword(null, "static");
    arrayOfObject61[7] = Boolean.TRUE;
    arrayOfObject61[8] = RT.keyword(null, "doc");
    arrayOfObject61[9] = "Returns a function that takes any number of arguments and returns x.";
    arrayOfObject61[10] = RT.keyword(null, "line");
    arrayOfObject61[11] = Integer.valueOf(1361);
    arrayOfObject61[12] = RT.keyword(null, "file");
    arrayOfObject61[13] = "clojure/core.clj";
    const__559 = (AFn)RT.map(arrayOfObject61);
    const__560 = (Var)RT.var("clojure.core", "identity");
    const__561 = Integer.valueOf(1367);
    Object[] arrayOfObject64 = new Object[1];
    Object[] arrayOfObject65 = new Object[1];
    arrayOfObject65[0] = Symbol.intern(null, "x");
    arrayOfObject64[0] = RT.vector(arrayOfObject65);
    const__562 = PersistentList.create(Arrays.asList(arrayOfObject64));
    Object[] arrayOfObject66 = new Object[14];
    arrayOfObject66[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject67 = new Object[1];
    Object[] arrayOfObject68 = new Object[1];
    arrayOfObject68[0] = Symbol.intern(null, "x");
    arrayOfObject67[0] = RT.vector(arrayOfObject68);
    arrayOfObject66[1] = PersistentList.create(Arrays.asList(arrayOfObject67));
    arrayOfObject66[2] = RT.keyword(null, "column");
    arrayOfObject66[3] = Integer.valueOf(1);
    arrayOfObject66[4] = RT.keyword(null, "added");
    arrayOfObject66[5] = "1.0";
    arrayOfObject66[6] = RT.keyword(null, "static");
    arrayOfObject66[7] = Boolean.TRUE;
    arrayOfObject66[8] = RT.keyword(null, "doc");
    arrayOfObject66[9] = "Returns its argument.";
    arrayOfObject66[10] = RT.keyword(null, "line");
    arrayOfObject66[11] = Integer.valueOf(1367);
    arrayOfObject66[12] = RT.keyword(null, "file");
    arrayOfObject66[13] = "clojure/core.clj";
    const__563 = (AFn)RT.map(arrayOfObject66);
    const__564 = (Var)RT.var("clojure.core", "peek");
    const__565 = Integer.valueOf(1376);
    Object[] arrayOfObject69 = new Object[1];
    Object[] arrayOfObject70 = new Object[1];
    arrayOfObject70[0] = Symbol.intern(null, "coll");
    arrayOfObject69[0] = RT.vector(arrayOfObject70);
    const__566 = PersistentList.create(Arrays.asList(arrayOfObject69));
    Object[] arrayOfObject71 = new Object[14];
    arrayOfObject71[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject72 = new Object[1];
    Object[] arrayOfObject73 = new Object[1];
    arrayOfObject73[0] = Symbol.intern(null, "coll");
    arrayOfObject72[0] = RT.vector(arrayOfObject73);
    arrayOfObject71[1] = PersistentList.create(Arrays.asList(arrayOfObject72));
    arrayOfObject71[2] = RT.keyword(null, "column");
    arrayOfObject71[3] = Integer.valueOf(1);
    arrayOfObject71[4] = RT.keyword(null, "added");
    arrayOfObject71[5] = "1.0";
    arrayOfObject71[6] = RT.keyword(null, "static");
    arrayOfObject71[7] = Boolean.TRUE;
    arrayOfObject71[8] = RT.keyword(null, "doc");
    arrayOfObject71[9] = "For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.";
    arrayOfObject71[10] = RT.keyword(null, "line");
    arrayOfObject71[11] = Integer.valueOf(1376);
    arrayOfObject71[12] = RT.keyword(null, "file");
    arrayOfObject71[13] = "clojure/core.clj";
    const__567 = (AFn)RT.map(arrayOfObject71);
    const__568 = (Var)RT.var("clojure.core", "pop");
    const__569 = Integer.valueOf(1383);
    Object[] arrayOfObject74 = new Object[1];
    Object[] arrayOfObject75 = new Object[1];
    arrayOfObject75[0] = Symbol.intern(null, "coll");
    arrayOfObject74[0] = RT.vector(arrayOfObject75);
    const__570 = PersistentList.create(Arrays.asList(arrayOfObject74));
    Object[] arrayOfObject76 = new Object[14];
    arrayOfObject76[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject77 = new Object[1];
    Object[] arrayOfObject78 = new Object[1];
    arrayOfObject78[0] = Symbol.intern(null, "coll");
    arrayOfObject77[0] = RT.vector(arrayOfObject78);
    arrayOfObject76[1] = PersistentList.create(Arrays.asList(arrayOfObject77));
    arrayOfObject76[2] = RT.keyword(null, "column");
    arrayOfObject76[3] = Integer.valueOf(1);
    arrayOfObject76[4] = RT.keyword(null, "added");
    arrayOfObject76[5] = "1.0";
    arrayOfObject76[6] = RT.keyword(null, "static");
    arrayOfObject76[7] = Boolean.TRUE;
    arrayOfObject76[8] = RT.keyword(null, "doc");
    arrayOfObject76[9] = "For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item. If\n  the collection is empty, throws an exception.  Note - not the same\n  as next/butlast.";
    arrayOfObject76[10] = RT.keyword(null, "line");
    arrayOfObject76[11] = Integer.valueOf(1383);
    arrayOfObject76[12] = RT.keyword(null, "file");
    arrayOfObject76[13] = "clojure/core.clj";
    const__571 = (AFn)RT.map(arrayOfObject76);
    const__572 = (Var)RT.var("clojure.core", "contains?");
    const__573 = Integer.valueOf(1394);
    Object[] arrayOfObject79 = new Object[1];
    Object[] arrayOfObject80 = new Object[2];
    arrayOfObject80[0] = Symbol.intern(null, "coll");
    arrayOfObject80[1] = Symbol.intern(null, "key");
    arrayOfObject79[0] = RT.vector(arrayOfObject80);
    const__574 = PersistentList.create(Arrays.asList(arrayOfObject79));
    Object[] arrayOfObject81 = new Object[14];
    arrayOfObject81[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject82 = new Object[1];
    Object[] arrayOfObject83 = new Object[2];
    arrayOfObject83[0] = Symbol.intern(null, "coll");
    arrayOfObject83[1] = Symbol.intern(null, "key");
    arrayOfObject82[0] = RT.vector(arrayOfObject83);
    arrayOfObject81[1] = PersistentList.create(Arrays.asList(arrayOfObject82));
    arrayOfObject81[2] = RT.keyword(null, "column");
    arrayOfObject81[3] = Integer.valueOf(1);
    arrayOfObject81[4] = RT.keyword(null, "added");
    arrayOfObject81[5] = "1.0";
    arrayOfObject81[6] = RT.keyword(null, "static");
    arrayOfObject81[7] = Boolean.TRUE;
    arrayOfObject81[8] = RT.keyword(null, "doc");
    arrayOfObject81[9] = "Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and Java arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'.";
    arrayOfObject81[10] = RT.keyword(null, "line");
    arrayOfObject81[11] = Integer.valueOf(1394);
    arrayOfObject81[12] = RT.keyword(null, "file");
    arrayOfObject81[13] = "clojure/core.clj";
    const__575 = (AFn)RT.map(arrayOfObject81);
    const__576 = (Var)RT.var("clojure.core", "get");
    const__577 = Integer.valueOf(1404);
    Object[] arrayOfObject84 = new Object[2];
    Object[] arrayOfObject85 = new Object[2];
    arrayOfObject85[0] = Symbol.intern(null, "map");
    arrayOfObject85[1] = Symbol.intern(null, "key");
    arrayOfObject84[0] = RT.vector(arrayOfObject85);
    Object[] arrayOfObject86 = new Object[3];
    arrayOfObject86[0] = Symbol.intern(null, "map");
    arrayOfObject86[1] = Symbol.intern(null, "key");
    arrayOfObject86[2] = Symbol.intern(null, "not-found");
    arrayOfObject84[1] = RT.vector(arrayOfObject86);
    const__578 = PersistentList.create(Arrays.asList(arrayOfObject84));
    Object[] arrayOfObject87 = new Object[2];
    arrayOfObject87[0] = Long.valueOf(2L);
    arrayOfObject87[1] = Long.valueOf(3L);
    const__579 = (AFn)PersistentHashSet.create(arrayOfObject87);
    const__580 = (Var)RT.var("clojure.core", "dissoc");
    const__581 = Integer.valueOf(1414);
    Object[] arrayOfObject88 = new Object[3];
    Object[] arrayOfObject89 = new Object[1];
    arrayOfObject89[0] = Symbol.intern(null, "map");
    arrayOfObject88[0] = RT.vector(arrayOfObject89);
    Object[] arrayOfObject90 = new Object[2];
    arrayOfObject90[0] = Symbol.intern(null, "map");
    arrayOfObject90[1] = Symbol.intern(null, "key");
    arrayOfObject88[1] = RT.vector(arrayOfObject90);
    Object[] arrayOfObject91 = new Object[4];
    arrayOfObject91[0] = Symbol.intern(null, "map");
    arrayOfObject91[1] = Symbol.intern(null, "key");
    arrayOfObject91[2] = Symbol.intern(null, "&");
    arrayOfObject91[3] = Symbol.intern(null, "ks");
    arrayOfObject88[2] = RT.vector(arrayOfObject91);
    const__582 = PersistentList.create(Arrays.asList(arrayOfObject88));
    Object[] arrayOfObject92 = new Object[14];
    arrayOfObject92[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject93 = new Object[3];
    Object[] arrayOfObject94 = new Object[1];
    arrayOfObject94[0] = Symbol.intern(null, "map");
    arrayOfObject93[0] = RT.vector(arrayOfObject94);
    Object[] arrayOfObject95 = new Object[2];
    arrayOfObject95[0] = Symbol.intern(null, "map");
    arrayOfObject95[1] = Symbol.intern(null, "key");
    arrayOfObject93[1] = RT.vector(arrayOfObject95);
    Object[] arrayOfObject96 = new Object[4];
    arrayOfObject96[0] = Symbol.intern(null, "map");
    arrayOfObject96[1] = Symbol.intern(null, "key");
    arrayOfObject96[2] = Symbol.intern(null, "&");
    arrayOfObject96[3] = Symbol.intern(null, "ks");
    arrayOfObject93[2] = RT.vector(arrayOfObject96);
    arrayOfObject92[1] = PersistentList.create(Arrays.asList(arrayOfObject93));
    arrayOfObject92[2] = RT.keyword(null, "column");
    arrayOfObject92[3] = Integer.valueOf(1);
    arrayOfObject92[4] = RT.keyword(null, "added");
    arrayOfObject92[5] = "1.0";
    arrayOfObject92[6] = RT.keyword(null, "static");
    arrayOfObject92[7] = Boolean.TRUE;
    arrayOfObject92[8] = RT.keyword(null, "doc");
    arrayOfObject92[9] = "dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).";
    arrayOfObject92[10] = RT.keyword(null, "line");
    arrayOfObject92[11] = Integer.valueOf(1414);
    arrayOfObject92[12] = RT.keyword(null, "file");
    arrayOfObject92[13] = "clojure/core.clj";
    const__583 = (AFn)RT.map(arrayOfObject92);
    const__584 = (Var)RT.var("clojure.core", "disj");
    const__585 = Integer.valueOf(1428);
    Object[] arrayOfObject97 = new Object[3];
    Object[] arrayOfObject98 = new Object[1];
    arrayOfObject98[0] = Symbol.intern(null, "set");
    arrayOfObject97[0] = RT.vector(arrayOfObject98);
    Object[] arrayOfObject99 = new Object[2];
    IObj localIObj1 = (IObj)Symbol.intern(null, "set");
    Object[] arrayOfObject100 = new Object[2];
    arrayOfObject100[0] = RT.keyword(null, "tag");
    arrayOfObject100[1] = Symbol.intern(null, "clojure.lang.IPersistentSet");
    arrayOfObject99[0] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject100));
    arrayOfObject99[1] = Symbol.intern(null, "key");
    arrayOfObject97[1] = RT.vector(arrayOfObject99);
    Object[] arrayOfObject101 = new Object[4];
    arrayOfObject101[0] = Symbol.intern(null, "set");
    arrayOfObject101[1] = Symbol.intern(null, "key");
    arrayOfObject101[2] = Symbol.intern(null, "&");
    arrayOfObject101[3] = Symbol.intern(null, "ks");
    arrayOfObject97[2] = RT.vector(arrayOfObject101);
    const__586 = PersistentList.create(Arrays.asList(arrayOfObject97));
    Object[] arrayOfObject102 = new Object[14];
    arrayOfObject102[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject103 = new Object[3];
    Object[] arrayOfObject104 = new Object[1];
    arrayOfObject104[0] = Symbol.intern(null, "set");
    arrayOfObject103[0] = RT.vector(arrayOfObject104);
    Object[] arrayOfObject105 = new Object[2];
    IObj localIObj2 = (IObj)Symbol.intern(null, "set");
    Object[] arrayOfObject106 = new Object[2];
    arrayOfObject106[0] = RT.keyword(null, "tag");
    arrayOfObject106[1] = Symbol.intern(null, "clojure.lang.IPersistentSet");
    arrayOfObject105[0] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject106));
    arrayOfObject105[1] = Symbol.intern(null, "key");
    arrayOfObject103[1] = RT.vector(arrayOfObject105);
    Object[] arrayOfObject107 = new Object[4];
    arrayOfObject107[0] = Symbol.intern(null, "set");
    arrayOfObject107[1] = Symbol.intern(null, "key");
    arrayOfObject107[2] = Symbol.intern(null, "&");
    arrayOfObject107[3] = Symbol.intern(null, "ks");
    arrayOfObject103[2] = RT.vector(arrayOfObject107);
    arrayOfObject102[1] = PersistentList.create(Arrays.asList(arrayOfObject103));
    arrayOfObject102[2] = RT.keyword(null, "column");
    arrayOfObject102[3] = Integer.valueOf(1);
    arrayOfObject102[4] = RT.keyword(null, "added");
    arrayOfObject102[5] = "1.0";
    arrayOfObject102[6] = RT.keyword(null, "static");
    arrayOfObject102[7] = Boolean.TRUE;
    arrayOfObject102[8] = RT.keyword(null, "doc");
    arrayOfObject102[9] = "disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).";
    arrayOfObject102[10] = RT.keyword(null, "line");
    arrayOfObject102[11] = Integer.valueOf(1428);
    arrayOfObject102[12] = RT.keyword(null, "file");
    arrayOfObject102[13] = "clojure/core.clj";
    const__587 = (AFn)RT.map(arrayOfObject102);
    const__588 = (Var)RT.var("clojure.core", "find");
    const__589 = Integer.valueOf(1444);
    Object[] arrayOfObject108 = new Object[1];
    Object[] arrayOfObject109 = new Object[2];
    arrayOfObject109[0] = Symbol.intern(null, "map");
    arrayOfObject109[1] = Symbol.intern(null, "key");
    arrayOfObject108[0] = RT.vector(arrayOfObject109);
    const__590 = PersistentList.create(Arrays.asList(arrayOfObject108));
    Object[] arrayOfObject110 = new Object[14];
    arrayOfObject110[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject111 = new Object[1];
    Object[] arrayOfObject112 = new Object[2];
    arrayOfObject112[0] = Symbol.intern(null, "map");
    arrayOfObject112[1] = Symbol.intern(null, "key");
    arrayOfObject111[0] = RT.vector(arrayOfObject112);
    arrayOfObject110[1] = PersistentList.create(Arrays.asList(arrayOfObject111));
    arrayOfObject110[2] = RT.keyword(null, "column");
    arrayOfObject110[3] = Integer.valueOf(1);
    arrayOfObject110[4] = RT.keyword(null, "added");
    arrayOfObject110[5] = "1.0";
    arrayOfObject110[6] = RT.keyword(null, "static");
    arrayOfObject110[7] = Boolean.TRUE;
    arrayOfObject110[8] = RT.keyword(null, "doc");
    arrayOfObject110[9] = "Returns the map entry for key, or nil if key not present.";
    arrayOfObject110[10] = RT.keyword(null, "line");
    arrayOfObject110[11] = Integer.valueOf(1444);
    arrayOfObject110[12] = RT.keyword(null, "file");
    arrayOfObject110[13] = "clojure/core.clj";
    const__591 = (AFn)RT.map(arrayOfObject110);
    const__592 = (Var)RT.var("clojure.core", "select-keys");
    const__593 = Integer.valueOf(1450);
    Object[] arrayOfObject113 = new Object[1];
    Object[] arrayOfObject114 = new Object[2];
    arrayOfObject114[0] = Symbol.intern(null, "map");
    arrayOfObject114[1] = Symbol.intern(null, "keyseq");
    arrayOfObject113[0] = RT.vector(arrayOfObject114);
    const__594 = PersistentList.create(Arrays.asList(arrayOfObject113));
    Object[] arrayOfObject115 = new Object[14];
    arrayOfObject115[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject116 = new Object[1];
    Object[] arrayOfObject117 = new Object[2];
    arrayOfObject117[0] = Symbol.intern(null, "map");
    arrayOfObject117[1] = Symbol.intern(null, "keyseq");
    arrayOfObject116[0] = RT.vector(arrayOfObject117);
    arrayOfObject115[1] = PersistentList.create(Arrays.asList(arrayOfObject116));
    arrayOfObject115[2] = RT.keyword(null, "column");
    arrayOfObject115[3] = Integer.valueOf(1);
    arrayOfObject115[4] = RT.keyword(null, "added");
    arrayOfObject115[5] = "1.0";
    arrayOfObject115[6] = RT.keyword(null, "static");
    arrayOfObject115[7] = Boolean.TRUE;
    arrayOfObject115[8] = RT.keyword(null, "doc");
    arrayOfObject115[9] = "Returns a map containing only those entries in map whose key is in keys";
    arrayOfObject115[10] = RT.keyword(null, "line");
    arrayOfObject115[11] = Integer.valueOf(1450);
    arrayOfObject115[12] = RT.keyword(null, "file");
    arrayOfObject115[13] = "clojure/core.clj";
    const__595 = (AFn)RT.map(arrayOfObject115);
    const__596 = (Var)RT.var("clojure.core", "keys");
    const__597 = Integer.valueOf(1465);
    Object[] arrayOfObject118 = new Object[1];
    Object[] arrayOfObject119 = new Object[1];
    arrayOfObject119[0] = Symbol.intern(null, "map");
    arrayOfObject118[0] = RT.vector(arrayOfObject119);
    const__598 = PersistentList.create(Arrays.asList(arrayOfObject118));
    Object[] arrayOfObject120 = new Object[14];
    arrayOfObject120[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject121 = new Object[1];
    Object[] arrayOfObject122 = new Object[1];
    arrayOfObject122[0] = Symbol.intern(null, "map");
    arrayOfObject121[0] = RT.vector(arrayOfObject122);
    arrayOfObject120[1] = PersistentList.create(Arrays.asList(arrayOfObject121));
    arrayOfObject120[2] = RT.keyword(null, "column");
    arrayOfObject120[3] = Integer.valueOf(1);
    arrayOfObject120[4] = RT.keyword(null, "added");
    arrayOfObject120[5] = "1.0";
    arrayOfObject120[6] = RT.keyword(null, "static");
    arrayOfObject120[7] = Boolean.TRUE;
    arrayOfObject120[8] = RT.keyword(null, "doc");
    arrayOfObject120[9] = "Returns a sequence of the map's keys.";
    arrayOfObject120[10] = RT.keyword(null, "line");
    arrayOfObject120[11] = Integer.valueOf(1465);
    arrayOfObject120[12] = RT.keyword(null, "file");
    arrayOfObject120[13] = "clojure/core.clj";
    const__599 = (AFn)RT.map(arrayOfObject120);
  }

  public static void __init6()
  {
    const__600 = (Var)RT.var("clojure.core", "vals");
    const__601 = Integer.valueOf(1471);
    Object[] arrayOfObject1 = new Object[1];
    Object[] arrayOfObject2 = new Object[1];
    arrayOfObject2[0] = Symbol.intern(null, "map");
    arrayOfObject1[0] = RT.vector(arrayOfObject2);
    const__602 = PersistentList.create(Arrays.asList(arrayOfObject1));
    Object[] arrayOfObject3 = new Object[14];
    arrayOfObject3[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject4 = new Object[1];
    Object[] arrayOfObject5 = new Object[1];
    arrayOfObject5[0] = Symbol.intern(null, "map");
    arrayOfObject4[0] = RT.vector(arrayOfObject5);
    arrayOfObject3[1] = PersistentList.create(Arrays.asList(arrayOfObject4));
    arrayOfObject3[2] = RT.keyword(null, "column");
    arrayOfObject3[3] = Integer.valueOf(1);
    arrayOfObject3[4] = RT.keyword(null, "added");
    arrayOfObject3[5] = "1.0";
    arrayOfObject3[6] = RT.keyword(null, "static");
    arrayOfObject3[7] = Boolean.TRUE;
    arrayOfObject3[8] = RT.keyword(null, "doc");
    arrayOfObject3[9] = "Returns a sequence of the map's values.";
    arrayOfObject3[10] = RT.keyword(null, "line");
    arrayOfObject3[11] = Integer.valueOf(1471);
    arrayOfObject3[12] = RT.keyword(null, "file");
    arrayOfObject3[13] = "clojure/core.clj";
    const__603 = (AFn)RT.map(arrayOfObject3);
    const__604 = (Var)RT.var("clojure.core", "key");
    const__605 = Integer.valueOf(1477);
    Object[] arrayOfObject6 = new Object[1];
    Object[] arrayOfObject7 = new Object[1];
    IObj localIObj1 = (IObj)Symbol.intern(null, "e");
    Object[] arrayOfObject8 = new Object[2];
    arrayOfObject8[0] = RT.keyword(null, "tag");
    arrayOfObject8[1] = Symbol.intern(null, "java.util.Map$Entry");
    arrayOfObject7[0] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject8));
    arrayOfObject6[0] = RT.vector(arrayOfObject7);
    const__606 = PersistentList.create(Arrays.asList(arrayOfObject6));
    Object[] arrayOfObject9 = new Object[14];
    arrayOfObject9[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject10 = new Object[1];
    Object[] arrayOfObject11 = new Object[1];
    IObj localIObj2 = (IObj)Symbol.intern(null, "e");
    Object[] arrayOfObject12 = new Object[2];
    arrayOfObject12[0] = RT.keyword(null, "tag");
    arrayOfObject12[1] = Symbol.intern(null, "java.util.Map$Entry");
    arrayOfObject11[0] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject12));
    arrayOfObject10[0] = RT.vector(arrayOfObject11);
    arrayOfObject9[1] = PersistentList.create(Arrays.asList(arrayOfObject10));
    arrayOfObject9[2] = RT.keyword(null, "column");
    arrayOfObject9[3] = Integer.valueOf(1);
    arrayOfObject9[4] = RT.keyword(null, "added");
    arrayOfObject9[5] = "1.0";
    arrayOfObject9[6] = RT.keyword(null, "static");
    arrayOfObject9[7] = Boolean.TRUE;
    arrayOfObject9[8] = RT.keyword(null, "doc");
    arrayOfObject9[9] = "Returns the key of the map entry.";
    arrayOfObject9[10] = RT.keyword(null, "line");
    arrayOfObject9[11] = Integer.valueOf(1477);
    arrayOfObject9[12] = RT.keyword(null, "file");
    arrayOfObject9[13] = "clojure/core.clj";
    const__607 = (AFn)RT.map(arrayOfObject9);
    const__608 = (Var)RT.var("clojure.core", "val");
    const__609 = Integer.valueOf(1484);
    Object[] arrayOfObject13 = new Object[1];
    Object[] arrayOfObject14 = new Object[1];
    IObj localIObj3 = (IObj)Symbol.intern(null, "e");
    Object[] arrayOfObject15 = new Object[2];
    arrayOfObject15[0] = RT.keyword(null, "tag");
    arrayOfObject15[1] = Symbol.intern(null, "java.util.Map$Entry");
    arrayOfObject14[0] = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject15));
    arrayOfObject13[0] = RT.vector(arrayOfObject14);
    const__610 = PersistentList.create(Arrays.asList(arrayOfObject13));
    Object[] arrayOfObject16 = new Object[14];
    arrayOfObject16[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject17 = new Object[1];
    Object[] arrayOfObject18 = new Object[1];
    IObj localIObj4 = (IObj)Symbol.intern(null, "e");
    Object[] arrayOfObject19 = new Object[2];
    arrayOfObject19[0] = RT.keyword(null, "tag");
    arrayOfObject19[1] = Symbol.intern(null, "java.util.Map$Entry");
    arrayOfObject18[0] = localIObj4.withMeta((IPersistentMap)RT.map(arrayOfObject19));
    arrayOfObject17[0] = RT.vector(arrayOfObject18);
    arrayOfObject16[1] = PersistentList.create(Arrays.asList(arrayOfObject17));
    arrayOfObject16[2] = RT.keyword(null, "column");
    arrayOfObject16[3] = Integer.valueOf(1);
    arrayOfObject16[4] = RT.keyword(null, "added");
    arrayOfObject16[5] = "1.0";
    arrayOfObject16[6] = RT.keyword(null, "static");
    arrayOfObject16[7] = Boolean.TRUE;
    arrayOfObject16[8] = RT.keyword(null, "doc");
    arrayOfObject16[9] = "Returns the value in the map entry.";
    arrayOfObject16[10] = RT.keyword(null, "line");
    arrayOfObject16[11] = Integer.valueOf(1484);
    arrayOfObject16[12] = RT.keyword(null, "file");
    arrayOfObject16[13] = "clojure/core.clj";
    const__611 = (AFn)RT.map(arrayOfObject16);
    const__612 = (Var)RT.var("clojure.core", "rseq");
    const__613 = Integer.valueOf(1491);
    Object[] arrayOfObject20 = new Object[1];
    Object[] arrayOfObject21 = new Object[1];
    IObj localIObj5 = (IObj)Symbol.intern(null, "rev");
    Object[] arrayOfObject22 = new Object[2];
    arrayOfObject22[0] = RT.keyword(null, "tag");
    arrayOfObject22[1] = Symbol.intern(null, "clojure.lang.Reversible");
    arrayOfObject21[0] = localIObj5.withMeta((IPersistentMap)RT.map(arrayOfObject22));
    arrayOfObject20[0] = RT.vector(arrayOfObject21);
    const__614 = PersistentList.create(Arrays.asList(arrayOfObject20));
    Object[] arrayOfObject23 = new Object[14];
    arrayOfObject23[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject24 = new Object[1];
    Object[] arrayOfObject25 = new Object[1];
    IObj localIObj6 = (IObj)Symbol.intern(null, "rev");
    Object[] arrayOfObject26 = new Object[2];
    arrayOfObject26[0] = RT.keyword(null, "tag");
    arrayOfObject26[1] = Symbol.intern(null, "clojure.lang.Reversible");
    arrayOfObject25[0] = localIObj6.withMeta((IPersistentMap)RT.map(arrayOfObject26));
    arrayOfObject24[0] = RT.vector(arrayOfObject25);
    arrayOfObject23[1] = PersistentList.create(Arrays.asList(arrayOfObject24));
    arrayOfObject23[2] = RT.keyword(null, "column");
    arrayOfObject23[3] = Integer.valueOf(1);
    arrayOfObject23[4] = RT.keyword(null, "added");
    arrayOfObject23[5] = "1.0";
    arrayOfObject23[6] = RT.keyword(null, "static");
    arrayOfObject23[7] = Boolean.TRUE;
    arrayOfObject23[8] = RT.keyword(null, "doc");
    arrayOfObject23[9] = "Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil";
    arrayOfObject23[10] = RT.keyword(null, "line");
    arrayOfObject23[11] = Integer.valueOf(1491);
    arrayOfObject23[12] = RT.keyword(null, "file");
    arrayOfObject23[13] = "clojure/core.clj";
    const__615 = (AFn)RT.map(arrayOfObject23);
    const__616 = (Var)RT.var("clojure.core", "name");
    const__617 = Integer.valueOf(1499);
    Object[] arrayOfObject27 = new Object[1];
    Object[] arrayOfObject28 = new Object[1];
    arrayOfObject28[0] = Symbol.intern(null, "x");
    arrayOfObject27[0] = RT.vector(arrayOfObject28);
    const__618 = PersistentList.create(Arrays.asList(arrayOfObject27));
    Object[] arrayOfObject29 = new Object[16];
    arrayOfObject29[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject30 = new Object[1];
    Object[] arrayOfObject31 = new Object[1];
    arrayOfObject31[0] = Symbol.intern(null, "x");
    arrayOfObject30[0] = RT.vector(arrayOfObject31);
    arrayOfObject29[1] = PersistentList.create(Arrays.asList(arrayOfObject30));
    arrayOfObject29[2] = RT.keyword(null, "column");
    arrayOfObject29[3] = Integer.valueOf(1);
    arrayOfObject29[4] = RT.keyword(null, "added");
    arrayOfObject29[5] = "1.0";
    arrayOfObject29[6] = RT.keyword(null, "static");
    arrayOfObject29[7] = Boolean.TRUE;
    arrayOfObject29[8] = RT.keyword(null, "doc");
    arrayOfObject29[9] = "Returns the name String of a string, symbol or keyword.";
    arrayOfObject29[10] = RT.keyword(null, "line");
    arrayOfObject29[11] = Integer.valueOf(1499);
    arrayOfObject29[12] = RT.keyword(null, "file");
    arrayOfObject29[13] = "clojure/core.clj";
    arrayOfObject29[14] = RT.keyword(null, "tag");
    arrayOfObject29[15] = Class.forName("java.lang.String");
    const__619 = (AFn)RT.map(arrayOfObject29);
    const__620 = (Var)RT.var("clojure.core", "namespace");
    const__621 = Integer.valueOf(1507);
    Object[] arrayOfObject32 = new Object[1];
    Object[] arrayOfObject33 = new Object[1];
    IObj localIObj7 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject34 = new Object[2];
    arrayOfObject34[0] = RT.keyword(null, "tag");
    arrayOfObject34[1] = Symbol.intern(null, "clojure.lang.Named");
    arrayOfObject33[0] = localIObj7.withMeta((IPersistentMap)RT.map(arrayOfObject34));
    arrayOfObject32[0] = RT.vector(arrayOfObject33);
    const__622 = PersistentList.create(Arrays.asList(arrayOfObject32));
    Object[] arrayOfObject35 = new Object[16];
    arrayOfObject35[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject36 = new Object[1];
    Object[] arrayOfObject37 = new Object[1];
    IObj localIObj8 = (IObj)Symbol.intern(null, "x");
    Object[] arrayOfObject38 = new Object[2];
    arrayOfObject38[0] = RT.keyword(null, "tag");
    arrayOfObject38[1] = Symbol.intern(null, "clojure.lang.Named");
    arrayOfObject37[0] = localIObj8.withMeta((IPersistentMap)RT.map(arrayOfObject38));
    arrayOfObject36[0] = RT.vector(arrayOfObject37);
    arrayOfObject35[1] = PersistentList.create(Arrays.asList(arrayOfObject36));
    arrayOfObject35[2] = RT.keyword(null, "column");
    arrayOfObject35[3] = Integer.valueOf(1);
    arrayOfObject35[4] = RT.keyword(null, "added");
    arrayOfObject35[5] = "1.0";
    arrayOfObject35[6] = RT.keyword(null, "static");
    arrayOfObject35[7] = Boolean.TRUE;
    arrayOfObject35[8] = RT.keyword(null, "doc");
    arrayOfObject35[9] = "Returns the namespace String of a symbol or keyword, or nil if not present.";
    arrayOfObject35[10] = RT.keyword(null, "line");
    arrayOfObject35[11] = Integer.valueOf(1507);
    arrayOfObject35[12] = RT.keyword(null, "file");
    arrayOfObject35[13] = "clojure/core.clj";
    arrayOfObject35[14] = RT.keyword(null, "tag");
    arrayOfObject35[15] = Class.forName("java.lang.String");
    const__623 = (AFn)RT.map(arrayOfObject35);
    const__624 = (Var)RT.var("clojure.core", "locking");
    const__625 = Integer.valueOf(1515);
    Object[] arrayOfObject39 = new Object[1];
    Object[] arrayOfObject40 = new Object[3];
    arrayOfObject40[0] = Symbol.intern(null, "x");
    arrayOfObject40[1] = Symbol.intern(null, "&");
    arrayOfObject40[2] = Symbol.intern(null, "body");
    arrayOfObject39[0] = RT.vector(arrayOfObject40);
    const__626 = PersistentList.create(Arrays.asList(arrayOfObject39));
    Object[] arrayOfObject41 = new Object[12];
    arrayOfObject41[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject42 = new Object[1];
    Object[] arrayOfObject43 = new Object[3];
    arrayOfObject43[0] = Symbol.intern(null, "x");
    arrayOfObject43[1] = Symbol.intern(null, "&");
    arrayOfObject43[2] = Symbol.intern(null, "body");
    arrayOfObject42[0] = RT.vector(arrayOfObject43);
    arrayOfObject41[1] = PersistentList.create(Arrays.asList(arrayOfObject42));
    arrayOfObject41[2] = RT.keyword(null, "column");
    arrayOfObject41[3] = Integer.valueOf(1);
    arrayOfObject41[4] = RT.keyword(null, "added");
    arrayOfObject41[5] = "1.0";
    arrayOfObject41[6] = RT.keyword(null, "doc");
    arrayOfObject41[7] = "Executes exprs in an implicit do, while holding the monitor of x.\n  Will release the monitor of x in all circumstances.";
    arrayOfObject41[8] = RT.keyword(null, "line");
    arrayOfObject41[9] = Integer.valueOf(1515);
    arrayOfObject41[10] = RT.keyword(null, "file");
    arrayOfObject41[11] = "clojure/core.clj";
    const__627 = (AFn)RT.map(arrayOfObject41);
    const__628 = (Var)RT.var("clojure.core", "..");
    const__629 = Integer.valueOf(1527);
    Object[] arrayOfObject44 = new Object[2];
    Object[] arrayOfObject45 = new Object[2];
    arrayOfObject45[0] = Symbol.intern(null, "x");
    arrayOfObject45[1] = Symbol.intern(null, "form");
    arrayOfObject44[0] = RT.vector(arrayOfObject45);
    Object[] arrayOfObject46 = new Object[4];
    arrayOfObject46[0] = Symbol.intern(null, "x");
    arrayOfObject46[1] = Symbol.intern(null, "form");
    arrayOfObject46[2] = Symbol.intern(null, "&");
    arrayOfObject46[3] = Symbol.intern(null, "more");
    arrayOfObject44[1] = RT.vector(arrayOfObject46);
    const__630 = PersistentList.create(Arrays.asList(arrayOfObject44));
    Object[] arrayOfObject47 = new Object[12];
    arrayOfObject47[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject48 = new Object[2];
    Object[] arrayOfObject49 = new Object[2];
    arrayOfObject49[0] = Symbol.intern(null, "x");
    arrayOfObject49[1] = Symbol.intern(null, "form");
    arrayOfObject48[0] = RT.vector(arrayOfObject49);
    Object[] arrayOfObject50 = new Object[4];
    arrayOfObject50[0] = Symbol.intern(null, "x");
    arrayOfObject50[1] = Symbol.intern(null, "form");
    arrayOfObject50[2] = Symbol.intern(null, "&");
    arrayOfObject50[3] = Symbol.intern(null, "more");
    arrayOfObject48[1] = RT.vector(arrayOfObject50);
    arrayOfObject47[1] = PersistentList.create(Arrays.asList(arrayOfObject48));
    arrayOfObject47[2] = RT.keyword(null, "column");
    arrayOfObject47[3] = Integer.valueOf(1);
    arrayOfObject47[4] = RT.keyword(null, "added");
    arrayOfObject47[5] = "1.0";
    arrayOfObject47[6] = RT.keyword(null, "doc");
    arrayOfObject47[7] = "form => fieldName-symbol or (instanceMethodName-symbol args*)\n\n  Expands into a member access (.) of the first member on the first\n  argument, followed by the next member on the result, etc. For\n  instance:\n\n  (.. System (getProperties) (get \"os.name\"))\n\n  expands to:\n\n  (. (. System (getProperties)) (get \"os.name\"))\n\n  but is easier to write, read, and understand.";
    arrayOfObject47[8] = RT.keyword(null, "line");
    arrayOfObject47[9] = Integer.valueOf(1527);
    arrayOfObject47[10] = RT.keyword(null, "file");
    arrayOfObject47[11] = "clojure/core.clj";
    const__631 = (AFn)RT.map(arrayOfObject47);
    const__632 = (Var)RT.var("clojure.core", "->");
    const__633 = Integer.valueOf(1545);
    Object[] arrayOfObject51 = new Object[3];
    Object[] arrayOfObject52 = new Object[1];
    arrayOfObject52[0] = Symbol.intern(null, "x");
    arrayOfObject51[0] = RT.vector(arrayOfObject52);
    Object[] arrayOfObject53 = new Object[2];
    arrayOfObject53[0] = Symbol.intern(null, "x");
    arrayOfObject53[1] = Symbol.intern(null, "form");
    arrayOfObject51[1] = RT.vector(arrayOfObject53);
    Object[] arrayOfObject54 = new Object[4];
    arrayOfObject54[0] = Symbol.intern(null, "x");
    arrayOfObject54[1] = Symbol.intern(null, "form");
    arrayOfObject54[2] = Symbol.intern(null, "&");
    arrayOfObject54[3] = Symbol.intern(null, "more");
    arrayOfObject51[2] = RT.vector(arrayOfObject54);
    const__634 = PersistentList.create(Arrays.asList(arrayOfObject51));
    Object[] arrayOfObject55 = new Object[12];
    arrayOfObject55[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject56 = new Object[3];
    Object[] arrayOfObject57 = new Object[1];
    arrayOfObject57[0] = Symbol.intern(null, "x");
    arrayOfObject56[0] = RT.vector(arrayOfObject57);
    Object[] arrayOfObject58 = new Object[2];
    arrayOfObject58[0] = Symbol.intern(null, "x");
    arrayOfObject58[1] = Symbol.intern(null, "form");
    arrayOfObject56[1] = RT.vector(arrayOfObject58);
    Object[] arrayOfObject59 = new Object[4];
    arrayOfObject59[0] = Symbol.intern(null, "x");
    arrayOfObject59[1] = Symbol.intern(null, "form");
    arrayOfObject59[2] = Symbol.intern(null, "&");
    arrayOfObject59[3] = Symbol.intern(null, "more");
    arrayOfObject56[2] = RT.vector(arrayOfObject59);
    arrayOfObject55[1] = PersistentList.create(Arrays.asList(arrayOfObject56));
    arrayOfObject55[2] = RT.keyword(null, "column");
    arrayOfObject55[3] = Integer.valueOf(1);
    arrayOfObject55[4] = RT.keyword(null, "added");
    arrayOfObject55[5] = "1.0";
    arrayOfObject55[6] = RT.keyword(null, "doc");
    arrayOfObject55[7] = "Threads the expr through the forms. Inserts x as the\n  second item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  second item in second form, etc.";
    arrayOfObject55[8] = RT.keyword(null, "line");
    arrayOfObject55[9] = Integer.valueOf(1545);
    arrayOfObject55[10] = RT.keyword(null, "file");
    arrayOfObject55[11] = "clojure/core.clj";
    const__635 = (AFn)RT.map(arrayOfObject55);
    const__636 = (Var)RT.var("clojure.core", "->>");
    const__637 = Integer.valueOf(1557);
    Object[] arrayOfObject60 = new Object[2];
    Object[] arrayOfObject61 = new Object[2];
    arrayOfObject61[0] = Symbol.intern(null, "x");
    arrayOfObject61[1] = Symbol.intern(null, "form");
    arrayOfObject60[0] = RT.vector(arrayOfObject61);
    Object[] arrayOfObject62 = new Object[4];
    arrayOfObject62[0] = Symbol.intern(null, "x");
    arrayOfObject62[1] = Symbol.intern(null, "form");
    arrayOfObject62[2] = Symbol.intern(null, "&");
    arrayOfObject62[3] = Symbol.intern(null, "more");
    arrayOfObject60[1] = RT.vector(arrayOfObject62);
    const__638 = PersistentList.create(Arrays.asList(arrayOfObject60));
    Object[] arrayOfObject63 = new Object[12];
    arrayOfObject63[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject64 = new Object[2];
    Object[] arrayOfObject65 = new Object[2];
    arrayOfObject65[0] = Symbol.intern(null, "x");
    arrayOfObject65[1] = Symbol.intern(null, "form");
    arrayOfObject64[0] = RT.vector(arrayOfObject65);
    Object[] arrayOfObject66 = new Object[4];
    arrayOfObject66[0] = Symbol.intern(null, "x");
    arrayOfObject66[1] = Symbol.intern(null, "form");
    arrayOfObject66[2] = Symbol.intern(null, "&");
    arrayOfObject66[3] = Symbol.intern(null, "more");
    arrayOfObject64[1] = RT.vector(arrayOfObject66);
    arrayOfObject63[1] = PersistentList.create(Arrays.asList(arrayOfObject64));
    arrayOfObject63[2] = RT.keyword(null, "column");
    arrayOfObject63[3] = Integer.valueOf(1);
    arrayOfObject63[4] = RT.keyword(null, "added");
    arrayOfObject63[5] = "1.1";
    arrayOfObject63[6] = RT.keyword(null, "doc");
    arrayOfObject63[7] = "Threads the expr through the forms. Inserts x as the\n  last item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  last item in second form, etc.";
    arrayOfObject63[8] = RT.keyword(null, "line");
    arrayOfObject63[9] = Integer.valueOf(1557);
    arrayOfObject63[10] = RT.keyword(null, "file");
    arrayOfObject63[11] = "clojure/core.clj";
    const__639 = (AFn)RT.map(arrayOfObject63);
    const__640 = (Var)RT.var("clojure.core", "map");
    const__641 = Integer.valueOf(1568);
    Object[] arrayOfObject67 = new Object[6];
    arrayOfObject67[0] = RT.keyword(null, "column");
    arrayOfObject67[1] = Integer.valueOf(1);
    arrayOfObject67[2] = RT.keyword(null, "line");
    arrayOfObject67[3] = Integer.valueOf(1568);
    arrayOfObject67[4] = RT.keyword(null, "file");
    arrayOfObject67[5] = "clojure/core.clj";
    const__642 = (AFn)RT.map(arrayOfObject67);
    const__643 = (Var)RT.var("clojure.core", "check-valid-options");
    const__644 = Integer.valueOf(1570);
    Object[] arrayOfObject68 = new Object[1];
    Object[] arrayOfObject69 = new Object[3];
    arrayOfObject69[0] = Symbol.intern(null, "options");
    arrayOfObject69[1] = Symbol.intern(null, "&");
    arrayOfObject69[2] = Symbol.intern(null, "valid-keys");
    arrayOfObject68[0] = RT.vector(arrayOfObject69);
    const__645 = PersistentList.create(Arrays.asList(arrayOfObject68));
    Object[] arrayOfObject70 = new Object[12];
    arrayOfObject70[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject71 = new Object[1];
    Object[] arrayOfObject72 = new Object[3];
    arrayOfObject72[0] = Symbol.intern(null, "options");
    arrayOfObject72[1] = Symbol.intern(null, "&");
    arrayOfObject72[2] = Symbol.intern(null, "valid-keys");
    arrayOfObject71[0] = RT.vector(arrayOfObject72);
    arrayOfObject70[1] = PersistentList.create(Arrays.asList(arrayOfObject71));
    arrayOfObject70[2] = RT.keyword(null, "column");
    arrayOfObject70[3] = Integer.valueOf(1);
    arrayOfObject70[4] = RT.keyword(null, "private");
    arrayOfObject70[5] = Boolean.TRUE;
    arrayOfObject70[6] = RT.keyword(null, "doc");
    arrayOfObject70[7] = "Throws an exception if the given option map contains keys not listed\n  as valid, else returns nil.";
    arrayOfObject70[8] = RT.keyword(null, "line");
    arrayOfObject70[9] = Integer.valueOf(1570);
    arrayOfObject70[10] = RT.keyword(null, "file");
    arrayOfObject70[11] = "clojure/core.clj";
    const__646 = (AFn)RT.map(arrayOfObject70);
    const__647 = (Var)RT.var("clojure.core", "global-hierarchy");
    const__648 = Integer.valueOf(1582);
    Object[] arrayOfObject73 = new Object[6];
    arrayOfObject73[0] = RT.keyword(null, "column");
    arrayOfObject73[1] = Integer.valueOf(1);
    arrayOfObject73[2] = RT.keyword(null, "line");
    arrayOfObject73[3] = Integer.valueOf(1582);
    arrayOfObject73[4] = RT.keyword(null, "file");
    arrayOfObject73[5] = "clojure/core.clj";
    const__649 = (AFn)RT.map(arrayOfObject73);
    const__650 = (Var)RT.var("clojure.core", "defmulti");
    const__651 = Integer.valueOf(1584);
    Object[] arrayOfObject74 = new Object[1];
    Object[] arrayOfObject75 = new Object[6];
    arrayOfObject75[0] = Symbol.intern(null, "name");
    arrayOfObject75[1] = Symbol.intern(null, "docstring?");
    arrayOfObject75[2] = Symbol.intern(null, "attr-map?");
    arrayOfObject75[3] = Symbol.intern(null, "dispatch-fn");
    arrayOfObject75[4] = Symbol.intern(null, "&");
    arrayOfObject75[5] = Symbol.intern(null, "options");
    arrayOfObject74[0] = RT.vector(arrayOfObject75);
    IObj localIObj9 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject74));
    Object[] arrayOfObject76 = new Object[4];
    arrayOfObject76[0] = RT.keyword(null, "line");
    arrayOfObject76[1] = Integer.valueOf(1592);
    arrayOfObject76[2] = RT.keyword(null, "column");
    arrayOfObject76[3] = Integer.valueOf(15);
    const__652 = localIObj9.withMeta((IPersistentMap)RT.map(arrayOfObject76));
    Object[] arrayOfObject77 = new Object[12];
    arrayOfObject77[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject78 = new Object[1];
    Object[] arrayOfObject79 = new Object[6];
    arrayOfObject79[0] = Symbol.intern(null, "name");
    arrayOfObject79[1] = Symbol.intern(null, "docstring?");
    arrayOfObject79[2] = Symbol.intern(null, "attr-map?");
    arrayOfObject79[3] = Symbol.intern(null, "dispatch-fn");
    arrayOfObject79[4] = Symbol.intern(null, "&");
    arrayOfObject79[5] = Symbol.intern(null, "options");
    arrayOfObject78[0] = RT.vector(arrayOfObject79);
    IObj localIObj10 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject78));
    Object[] arrayOfObject80 = new Object[4];
    arrayOfObject80[0] = RT.keyword(null, "line");
    arrayOfObject80[1] = Integer.valueOf(1592);
    arrayOfObject80[2] = RT.keyword(null, "column");
    arrayOfObject80[3] = Integer.valueOf(15);
    arrayOfObject77[1] = localIObj10.withMeta((IPersistentMap)RT.map(arrayOfObject80));
    arrayOfObject77[2] = RT.keyword(null, "column");
    arrayOfObject77[3] = Integer.valueOf(1);
    arrayOfObject77[4] = RT.keyword(null, "added");
    arrayOfObject77[5] = "1.0";
    arrayOfObject77[6] = RT.keyword(null, "doc");
    arrayOfObject77[7] = "Creates a new multimethod with the associated dispatch function.\n  The docstring and attribute-map are optional.\n\n  Options are key-value pairs and may be one of:\n    :default    the default dispatch value, defaults to :default\n    :hierarchy  the isa? hierarchy to use for dispatching\n                defaults to the global hierarchy";
    arrayOfObject77[8] = RT.keyword(null, "line");
    arrayOfObject77[9] = Integer.valueOf(1584);
    arrayOfObject77[10] = RT.keyword(null, "file");
    arrayOfObject77[11] = "clojure/core.clj";
    const__653 = (AFn)RT.map(arrayOfObject77);
    const__654 = (Var)RT.var("clojure.core", "defmethod");
    const__655 = Integer.valueOf(1626);
    Object[] arrayOfObject81 = new Object[1];
    Object[] arrayOfObject82 = new Object[4];
    arrayOfObject82[0] = Symbol.intern(null, "multifn");
    arrayOfObject82[1] = Symbol.intern(null, "dispatch-val");
    arrayOfObject82[2] = Symbol.intern(null, "&");
    arrayOfObject82[3] = Symbol.intern(null, "fn-tail");
    arrayOfObject81[0] = RT.vector(arrayOfObject82);
    const__656 = PersistentList.create(Arrays.asList(arrayOfObject81));
    Object[] arrayOfObject83 = new Object[12];
    arrayOfObject83[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject84 = new Object[1];
    Object[] arrayOfObject85 = new Object[4];
    arrayOfObject85[0] = Symbol.intern(null, "multifn");
    arrayOfObject85[1] = Symbol.intern(null, "dispatch-val");
    arrayOfObject85[2] = Symbol.intern(null, "&");
    arrayOfObject85[3] = Symbol.intern(null, "fn-tail");
    arrayOfObject84[0] = RT.vector(arrayOfObject85);
    arrayOfObject83[1] = PersistentList.create(Arrays.asList(arrayOfObject84));
    arrayOfObject83[2] = RT.keyword(null, "column");
    arrayOfObject83[3] = Integer.valueOf(1);
    arrayOfObject83[4] = RT.keyword(null, "added");
    arrayOfObject83[5] = "1.0";
    arrayOfObject83[6] = RT.keyword(null, "doc");
    arrayOfObject83[7] = "Creates and installs a new method of multimethod associated with dispatch-value. ";
    arrayOfObject83[8] = RT.keyword(null, "line");
    arrayOfObject83[9] = Integer.valueOf(1626);
    arrayOfObject83[10] = RT.keyword(null, "file");
    arrayOfObject83[11] = "clojure/core.clj";
    const__657 = (AFn)RT.map(arrayOfObject83);
    const__658 = (Var)RT.var("clojure.core", "remove-all-methods");
    const__659 = Integer.valueOf(1632);
    Object[] arrayOfObject86 = new Object[1];
    Object[] arrayOfObject87 = new Object[1];
    IObj localIObj11 = (IObj)Symbol.intern(null, "multifn");
    Object[] arrayOfObject88 = new Object[2];
    arrayOfObject88[0] = RT.keyword(null, "tag");
    arrayOfObject88[1] = Symbol.intern(null, "clojure.lang.MultiFn");
    arrayOfObject87[0] = localIObj11.withMeta((IPersistentMap)RT.map(arrayOfObject88));
    arrayOfObject86[0] = RT.vector(arrayOfObject87);
    const__660 = PersistentList.create(Arrays.asList(arrayOfObject86));
    Object[] arrayOfObject89 = new Object[14];
    arrayOfObject89[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject90 = new Object[1];
    Object[] arrayOfObject91 = new Object[1];
    IObj localIObj12 = (IObj)Symbol.intern(null, "multifn");
    Object[] arrayOfObject92 = new Object[2];
    arrayOfObject92[0] = RT.keyword(null, "tag");
    arrayOfObject92[1] = Symbol.intern(null, "clojure.lang.MultiFn");
    arrayOfObject91[0] = localIObj12.withMeta((IPersistentMap)RT.map(arrayOfObject92));
    arrayOfObject90[0] = RT.vector(arrayOfObject91);
    arrayOfObject89[1] = PersistentList.create(Arrays.asList(arrayOfObject90));
    arrayOfObject89[2] = RT.keyword(null, "column");
    arrayOfObject89[3] = Integer.valueOf(1);
    arrayOfObject89[4] = RT.keyword(null, "added");
    arrayOfObject89[5] = "1.2";
    arrayOfObject89[6] = RT.keyword(null, "static");
    arrayOfObject89[7] = Boolean.TRUE;
    arrayOfObject89[8] = RT.keyword(null, "doc");
    arrayOfObject89[9] = "Removes all of the methods of multimethod.";
    arrayOfObject89[10] = RT.keyword(null, "line");
    arrayOfObject89[11] = Integer.valueOf(1632);
    arrayOfObject89[12] = RT.keyword(null, "file");
    arrayOfObject89[13] = "clojure/core.clj";
    const__661 = (AFn)RT.map(arrayOfObject89);
    const__662 = (Var)RT.var("clojure.core", "remove-method");
    const__663 = Integer.valueOf(1639);
    Object[] arrayOfObject93 = new Object[1];
    Object[] arrayOfObject94 = new Object[2];
    IObj localIObj13 = (IObj)Symbol.intern(null, "multifn");
    Object[] arrayOfObject95 = new Object[2];
    arrayOfObject95[0] = RT.keyword(null, "tag");
    arrayOfObject95[1] = Symbol.intern(null, "clojure.lang.MultiFn");
    arrayOfObject94[0] = localIObj13.withMeta((IPersistentMap)RT.map(arrayOfObject95));
    arrayOfObject94[1] = Symbol.intern(null, "dispatch-val");
    arrayOfObject93[0] = RT.vector(arrayOfObject94);
    const__664 = PersistentList.create(Arrays.asList(arrayOfObject93));
    Object[] arrayOfObject96 = new Object[14];
    arrayOfObject96[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject97 = new Object[1];
    Object[] arrayOfObject98 = new Object[2];
    IObj localIObj14 = (IObj)Symbol.intern(null, "multifn");
    Object[] arrayOfObject99 = new Object[2];
    arrayOfObject99[0] = RT.keyword(null, "tag");
    arrayOfObject99[1] = Symbol.intern(null, "clojure.lang.MultiFn");
    arrayOfObject98[0] = localIObj14.withMeta((IPersistentMap)RT.map(arrayOfObject99));
    arrayOfObject98[1] = Symbol.intern(null, "dispatch-val");
    arrayOfObject97[0] = RT.vector(arrayOfObject98);
    arrayOfObject96[1] = PersistentList.create(Arrays.asList(arrayOfObject97));
    arrayOfObject96[2] = RT.keyword(null, "column");
    arrayOfObject96[3] = Integer.valueOf(1);
    arrayOfObject96[4] = RT.keyword(null, "added");
    arrayOfObject96[5] = "1.0";
    arrayOfObject96[6] = RT.keyword(null, "static");
    arrayOfObject96[7] = Boolean.TRUE;
    arrayOfObject96[8] = RT.keyword(null, "doc");
    arrayOfObject96[9] = "Removes the method of multimethod associated with dispatch-value.";
    arrayOfObject96[10] = RT.keyword(null, "line");
    arrayOfObject96[11] = Integer.valueOf(1639);
    arrayOfObject96[12] = RT.keyword(null, "file");
    arrayOfObject96[13] = "clojure/core.clj";
    const__665 = (AFn)RT.map(arrayOfObject96);
    const__666 = (Var)RT.var("clojure.core", "prefer-method");
    const__667 = Integer.valueOf(1646);
    Object[] arrayOfObject100 = new Object[1];
    Object[] arrayOfObject101 = new Object[3];
    IObj localIObj15 = (IObj)Symbol.intern(null, "multifn");
    Object[] arrayOfObject102 = new Object[2];
    arrayOfObject102[0] = RT.keyword(null, "tag");
    arrayOfObject102[1] = Symbol.intern(null, "clojure.lang.MultiFn");
    arrayOfObject101[0] = localIObj15.withMeta((IPersistentMap)RT.map(arrayOfObject102));
    arrayOfObject101[1] = Symbol.intern(null, "dispatch-val-x");
    arrayOfObject101[2] = Symbol.intern(null, "dispatch-val-y");
    arrayOfObject100[0] = RT.vector(arrayOfObject101);
    const__668 = PersistentList.create(Arrays.asList(arrayOfObject100));
    Object[] arrayOfObject103 = new Object[14];
    arrayOfObject103[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject104 = new Object[1];
    Object[] arrayOfObject105 = new Object[3];
    IObj localIObj16 = (IObj)Symbol.intern(null, "multifn");
    Object[] arrayOfObject106 = new Object[2];
    arrayOfObject106[0] = RT.keyword(null, "tag");
    arrayOfObject106[1] = Symbol.intern(null, "clojure.lang.MultiFn");
    arrayOfObject105[0] = localIObj16.withMeta((IPersistentMap)RT.map(arrayOfObject106));
    arrayOfObject105[1] = Symbol.intern(null, "dispatch-val-x");
    arrayOfObject105[2] = Symbol.intern(null, "dispatch-val-y");
    arrayOfObject104[0] = RT.vector(arrayOfObject105);
    arrayOfObject103[1] = PersistentList.create(Arrays.asList(arrayOfObject104));
    arrayOfObject103[2] = RT.keyword(null, "column");
    arrayOfObject103[3] = Integer.valueOf(1);
    arrayOfObject103[4] = RT.keyword(null, "added");
    arrayOfObject103[5] = "1.0";
    arrayOfObject103[6] = RT.keyword(null, "static");
    arrayOfObject103[7] = Boolean.TRUE;
    arrayOfObject103[8] = RT.keyword(null, "doc");
    arrayOfObject103[9] = "Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y \n   when there is a conflict";
    arrayOfObject103[10] = RT.keyword(null, "line");
    arrayOfObject103[11] = Integer.valueOf(1646);
    arrayOfObject103[12] = RT.keyword(null, "file");
    arrayOfObject103[13] = "clojure/core.clj";
    const__669 = (AFn)RT.map(arrayOfObject103);
    const__670 = (Var)RT.var("clojure.core", "methods");
    const__671 = Integer.valueOf(1654);
    Object[] arrayOfObject107 = new Object[1];
    Object[] arrayOfObject108 = new Object[1];
    IObj localIObj17 = (IObj)Symbol.intern(null, "multifn");
    Object[] arrayOfObject109 = new Object[2];
    arrayOfObject109[0] = RT.keyword(null, "tag");
    arrayOfObject109[1] = Symbol.intern(null, "clojure.lang.MultiFn");
    arrayOfObject108[0] = localIObj17.withMeta((IPersistentMap)RT.map(arrayOfObject109));
    arrayOfObject107[0] = RT.vector(arrayOfObject108);
    const__672 = PersistentList.create(Arrays.asList(arrayOfObject107));
    Object[] arrayOfObject110 = new Object[14];
    arrayOfObject110[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject111 = new Object[1];
    Object[] arrayOfObject112 = new Object[1];
    IObj localIObj18 = (IObj)Symbol.intern(null, "multifn");
    Object[] arrayOfObject113 = new Object[2];
    arrayOfObject113[0] = RT.keyword(null, "tag");
    arrayOfObject113[1] = Symbol.intern(null, "clojure.lang.MultiFn");
    arrayOfObject112[0] = localIObj18.withMeta((IPersistentMap)RT.map(arrayOfObject113));
    arrayOfObject111[0] = RT.vector(arrayOfObject112);
    arrayOfObject110[1] = PersistentList.create(Arrays.asList(arrayOfObject111));
    arrayOfObject110[2] = RT.keyword(null, "column");
    arrayOfObject110[3] = Integer.valueOf(1);
    arrayOfObject110[4] = RT.keyword(null, "added");
    arrayOfObject110[5] = "1.0";
    arrayOfObject110[6] = RT.keyword(null, "static");
    arrayOfObject110[7] = Boolean.TRUE;
    arrayOfObject110[8] = RT.keyword(null, "doc");
    arrayOfObject110[9] = "Given a multimethod, returns a map of dispatch values -> dispatch fns";
    arrayOfObject110[10] = RT.keyword(null, "line");
    arrayOfObject110[11] = Integer.valueOf(1654);
    arrayOfObject110[12] = RT.keyword(null, "file");
    arrayOfObject110[13] = "clojure/core.clj";
    const__673 = (AFn)RT.map(arrayOfObject110);
    const__674 = (Var)RT.var("clojure.core", "get-method");
    const__675 = Integer.valueOf(1660);
    Object[] arrayOfObject114 = new Object[1];
    Object[] arrayOfObject115 = new Object[2];
    IObj localIObj19 = (IObj)Symbol.intern(null, "multifn");
    Object[] arrayOfObject116 = new Object[2];
    arrayOfObject116[0] = RT.keyword(null, "tag");
    arrayOfObject116[1] = Symbol.intern(null, "clojure.lang.MultiFn");
    arrayOfObject115[0] = localIObj19.withMeta((IPersistentMap)RT.map(arrayOfObject116));
    arrayOfObject115[1] = Symbol.intern(null, "dispatch-val");
    arrayOfObject114[0] = RT.vector(arrayOfObject115);
    const__676 = PersistentList.create(Arrays.asList(arrayOfObject114));
    Object[] arrayOfObject117 = new Object[14];
    arrayOfObject117[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject118 = new Object[1];
    Object[] arrayOfObject119 = new Object[2];
    IObj localIObj20 = (IObj)Symbol.intern(null, "multifn");
    Object[] arrayOfObject120 = new Object[2];
    arrayOfObject120[0] = RT.keyword(null, "tag");
    arrayOfObject120[1] = Symbol.intern(null, "clojure.lang.MultiFn");
    arrayOfObject119[0] = localIObj20.withMeta((IPersistentMap)RT.map(arrayOfObject120));
    arrayOfObject119[1] = Symbol.intern(null, "dispatch-val");
    arrayOfObject118[0] = RT.vector(arrayOfObject119);
    arrayOfObject117[1] = PersistentList.create(Arrays.asList(arrayOfObject118));
    arrayOfObject117[2] = RT.keyword(null, "column");
    arrayOfObject117[3] = Integer.valueOf(1);
    arrayOfObject117[4] = RT.keyword(null, "added");
    arrayOfObject117[5] = "1.0";
    arrayOfObject117[6] = RT.keyword(null, "static");
    arrayOfObject117[7] = Boolean.TRUE;
    arrayOfObject117[8] = RT.keyword(null, "doc");
    arrayOfObject117[9] = "Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default";
    arrayOfObject117[10] = RT.keyword(null, "line");
    arrayOfObject117[11] = Integer.valueOf(1660);
    arrayOfObject117[12] = RT.keyword(null, "file");
    arrayOfObject117[13] = "clojure/core.clj";
    const__677 = (AFn)RT.map(arrayOfObject117);
    const__678 = (Var)RT.var("clojure.core", "prefers");
    const__679 = Integer.valueOf(1667);
    Object[] arrayOfObject121 = new Object[1];
    Object[] arrayOfObject122 = new Object[1];
    IObj localIObj21 = (IObj)Symbol.intern(null, "multifn");
    Object[] arrayOfObject123 = new Object[2];
    arrayOfObject123[0] = RT.keyword(null, "tag");
    arrayOfObject123[1] = Symbol.intern(null, "clojure.lang.MultiFn");
    arrayOfObject122[0] = localIObj21.withMeta((IPersistentMap)RT.map(arrayOfObject123));
    arrayOfObject121[0] = RT.vector(arrayOfObject122);
    const__680 = PersistentList.create(Arrays.asList(arrayOfObject121));
    Object[] arrayOfObject124 = new Object[14];
    arrayOfObject124[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject125 = new Object[1];
    Object[] arrayOfObject126 = new Object[1];
    IObj localIObj22 = (IObj)Symbol.intern(null, "multifn");
    Object[] arrayOfObject127 = new Object[2];
    arrayOfObject127[0] = RT.keyword(null, "tag");
    arrayOfObject127[1] = Symbol.intern(null, "clojure.lang.MultiFn");
    arrayOfObject126[0] = localIObj22.withMeta((IPersistentMap)RT.map(arrayOfObject127));
    arrayOfObject125[0] = RT.vector(arrayOfObject126);
    arrayOfObject124[1] = PersistentList.create(Arrays.asList(arrayOfObject125));
    arrayOfObject124[2] = RT.keyword(null, "column");
    arrayOfObject124[3] = Integer.valueOf(1);
    arrayOfObject124[4] = RT.keyword(null, "added");
    arrayOfObject124[5] = "1.0";
    arrayOfObject124[6] = RT.keyword(null, "static");
    arrayOfObject124[7] = Boolean.TRUE;
    arrayOfObject124[8] = RT.keyword(null, "doc");
    arrayOfObject124[9] = "Given a multimethod, returns a map of preferred value -> set of other values";
    arrayOfObject124[10] = RT.keyword(null, "line");
    arrayOfObject124[11] = Integer.valueOf(1667);
    arrayOfObject124[12] = RT.keyword(null, "file");
    arrayOfObject124[13] = "clojure/core.clj";
    const__681 = (AFn)RT.map(arrayOfObject124);
    const__682 = (Var)RT.var("clojure.core", "assert-args");
    const__683 = Integer.valueOf(1675);
    Object[] arrayOfObject128 = new Object[1];
    Object[] arrayOfObject129 = new Object[2];
    arrayOfObject129[0] = Symbol.intern(null, "&");
    arrayOfObject129[1] = Symbol.intern(null, "pairs");
    arrayOfObject128[0] = RT.vector(arrayOfObject129);
    const__684 = PersistentList.create(Arrays.asList(arrayOfObject128));
    Object[] arrayOfObject130 = new Object[10];
    arrayOfObject130[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject131 = new Object[1];
    Object[] arrayOfObject132 = new Object[2];
    arrayOfObject132[0] = Symbol.intern(null, "&");
    arrayOfObject132[1] = Symbol.intern(null, "pairs");
    arrayOfObject131[0] = RT.vector(arrayOfObject132);
    arrayOfObject130[1] = PersistentList.create(Arrays.asList(arrayOfObject131));
    arrayOfObject130[2] = RT.keyword(null, "column");
    arrayOfObject130[3] = Integer.valueOf(1);
    arrayOfObject130[4] = RT.keyword(null, "private");
    arrayOfObject130[5] = Boolean.TRUE;
    arrayOfObject130[6] = RT.keyword(null, "line");
    arrayOfObject130[7] = Integer.valueOf(1675);
    arrayOfObject130[8] = RT.keyword(null, "file");
    arrayOfObject130[9] = "clojure/core.clj";
    const__685 = (AFn)RT.map(arrayOfObject130);
    const__686 = (Var)RT.var("clojure.core", "if-let");
    const__687 = Integer.valueOf(1684);
    Object[] arrayOfObject133 = new Object[2];
    Object[] arrayOfObject134 = new Object[2];
    arrayOfObject134[0] = Symbol.intern(null, "bindings");
    arrayOfObject134[1] = Symbol.intern(null, "then");
    arrayOfObject133[0] = RT.vector(arrayOfObject134);
    Object[] arrayOfObject135 = new Object[5];
    arrayOfObject135[0] = Symbol.intern(null, "bindings");
    arrayOfObject135[1] = Symbol.intern(null, "then");
    arrayOfObject135[2] = Symbol.intern(null, "else");
    arrayOfObject135[3] = Symbol.intern(null, "&");
    arrayOfObject135[4] = Symbol.intern(null, "oldform");
    arrayOfObject133[1] = RT.vector(arrayOfObject135);
    const__688 = PersistentList.create(Arrays.asList(arrayOfObject133));
    Object[] arrayOfObject136 = new Object[12];
    arrayOfObject136[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject137 = new Object[2];
    Object[] arrayOfObject138 = new Object[2];
    arrayOfObject138[0] = Symbol.intern(null, "bindings");
    arrayOfObject138[1] = Symbol.intern(null, "then");
    arrayOfObject137[0] = RT.vector(arrayOfObject138);
    Object[] arrayOfObject139 = new Object[5];
    arrayOfObject139[0] = Symbol.intern(null, "bindings");
    arrayOfObject139[1] = Symbol.intern(null, "then");
    arrayOfObject139[2] = Symbol.intern(null, "else");
    arrayOfObject139[3] = Symbol.intern(null, "&");
    arrayOfObject139[4] = Symbol.intern(null, "oldform");
    arrayOfObject137[1] = RT.vector(arrayOfObject139);
    arrayOfObject136[1] = PersistentList.create(Arrays.asList(arrayOfObject137));
    arrayOfObject136[2] = RT.keyword(null, "column");
    arrayOfObject136[3] = Integer.valueOf(1);
    arrayOfObject136[4] = RT.keyword(null, "added");
    arrayOfObject136[5] = "1.0";
    arrayOfObject136[6] = RT.keyword(null, "doc");
    arrayOfObject136[7] = "bindings => binding-form test\n\n  If test is true, evaluates then with binding-form bound to the value of \n  test, if not, yields else";
    arrayOfObject136[8] = RT.keyword(null, "line");
    arrayOfObject136[9] = Integer.valueOf(1684);
    arrayOfObject136[10] = RT.keyword(null, "file");
    arrayOfObject136[11] = "clojure/core.clj";
    const__689 = (AFn)RT.map(arrayOfObject136);
    const__690 = (Var)RT.var("clojure.core", "when-let");
    const__691 = Integer.valueOf(1704);
    Object[] arrayOfObject140 = new Object[1];
    Object[] arrayOfObject141 = new Object[3];
    arrayOfObject141[0] = Symbol.intern(null, "bindings");
    arrayOfObject141[1] = Symbol.intern(null, "&");
    arrayOfObject141[2] = Symbol.intern(null, "body");
    arrayOfObject140[0] = RT.vector(arrayOfObject141);
    const__692 = PersistentList.create(Arrays.asList(arrayOfObject140));
    Object[] arrayOfObject142 = new Object[12];
    arrayOfObject142[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject143 = new Object[1];
    Object[] arrayOfObject144 = new Object[3];
    arrayOfObject144[0] = Symbol.intern(null, "bindings");
    arrayOfObject144[1] = Symbol.intern(null, "&");
    arrayOfObject144[2] = Symbol.intern(null, "body");
    arrayOfObject143[0] = RT.vector(arrayOfObject144);
    arrayOfObject142[1] = PersistentList.create(Arrays.asList(arrayOfObject143));
    arrayOfObject142[2] = RT.keyword(null, "column");
    arrayOfObject142[3] = Integer.valueOf(1);
    arrayOfObject142[4] = RT.keyword(null, "added");
    arrayOfObject142[5] = "1.0";
    arrayOfObject142[6] = RT.keyword(null, "doc");
    arrayOfObject142[7] = "bindings => binding-form test\n\n  When test is true, evaluates body with binding-form bound to the value of test";
    arrayOfObject142[8] = RT.keyword(null, "line");
    arrayOfObject142[9] = Integer.valueOf(1704);
    arrayOfObject142[10] = RT.keyword(null, "file");
    arrayOfObject142[11] = "clojure/core.clj";
    const__693 = (AFn)RT.map(arrayOfObject142);
    const__694 = (Var)RT.var("clojure.core", "push-thread-bindings");
    const__695 = Integer.valueOf(1719);
    Object[] arrayOfObject145 = new Object[1];
    Object[] arrayOfObject146 = new Object[1];
    arrayOfObject146[0] = Symbol.intern(null, "bindings");
    arrayOfObject145[0] = RT.vector(arrayOfObject146);
    const__696 = PersistentList.create(Arrays.asList(arrayOfObject145));
    Object[] arrayOfObject147 = new Object[14];
    arrayOfObject147[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject148 = new Object[1];
    Object[] arrayOfObject149 = new Object[1];
    arrayOfObject149[0] = Symbol.intern(null, "bindings");
    arrayOfObject148[0] = RT.vector(arrayOfObject149);
    arrayOfObject147[1] = PersistentList.create(Arrays.asList(arrayOfObject148));
    arrayOfObject147[2] = RT.keyword(null, "column");
    arrayOfObject147[3] = Integer.valueOf(1);
    arrayOfObject147[4] = RT.keyword(null, "added");
    arrayOfObject147[5] = "1.1";
    arrayOfObject147[6] = RT.keyword(null, "static");
    arrayOfObject147[7] = Boolean.TRUE;
    arrayOfObject147[8] = RT.keyword(null, "doc");
    arrayOfObject147[9] = "WARNING: This is a low-level function. Prefer high-level macros like\n  binding where ever possible.\n\n  Takes a map of Var/value pairs. Binds each Var to the associated value for\n  the current thread. Each call *MUST* be accompanied by a matching call to\n  pop-thread-bindings wrapped in a try-finally!\n  \n      (push-thread-bindings bindings)\n      (try\n        ...\n        (finally\n          (pop-thread-bindings)))";
    arrayOfObject147[10] = RT.keyword(null, "line");
    arrayOfObject147[11] = Integer.valueOf(1719);
    arrayOfObject147[12] = RT.keyword(null, "file");
    arrayOfObject147[13] = "clojure/core.clj";
    const__697 = (AFn)RT.map(arrayOfObject147);
    const__698 = (Var)RT.var("clojure.core", "pop-thread-bindings");
    const__699 = Integer.valueOf(1737);
  }

  public static void __init7()
  {
    Object[] arrayOfObject1 = new Object[1];
    arrayOfObject1[0] = RT.vector(new Object[0]);
    const__700 = PersistentList.create(Arrays.asList(arrayOfObject1));
    Object[] arrayOfObject2 = new Object[14];
    arrayOfObject2[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject3 = new Object[1];
    arrayOfObject3[0] = RT.vector(new Object[0]);
    arrayOfObject2[1] = PersistentList.create(Arrays.asList(arrayOfObject3));
    arrayOfObject2[2] = RT.keyword(null, "column");
    arrayOfObject2[3] = Integer.valueOf(1);
    arrayOfObject2[4] = RT.keyword(null, "added");
    arrayOfObject2[5] = "1.1";
    arrayOfObject2[6] = RT.keyword(null, "static");
    arrayOfObject2[7] = Boolean.TRUE;
    arrayOfObject2[8] = RT.keyword(null, "doc");
    arrayOfObject2[9] = "Pop one set of bindings pushed with push-binding before. It is an error to\n  pop bindings without pushing before.";
    arrayOfObject2[10] = RT.keyword(null, "line");
    arrayOfObject2[11] = Integer.valueOf(1737);
    arrayOfObject2[12] = RT.keyword(null, "file");
    arrayOfObject2[13] = "clojure/core.clj";
    const__701 = (AFn)RT.map(arrayOfObject2);
    const__702 = (Var)RT.var("clojure.core", "get-thread-bindings");
    const__703 = Integer.valueOf(1745);
    Object[] arrayOfObject4 = new Object[1];
    arrayOfObject4[0] = RT.vector(new Object[0]);
    const__704 = PersistentList.create(Arrays.asList(arrayOfObject4));
    Object[] arrayOfObject5 = new Object[14];
    arrayOfObject5[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject6 = new Object[1];
    arrayOfObject6[0] = RT.vector(new Object[0]);
    arrayOfObject5[1] = PersistentList.create(Arrays.asList(arrayOfObject6));
    arrayOfObject5[2] = RT.keyword(null, "column");
    arrayOfObject5[3] = Integer.valueOf(1);
    arrayOfObject5[4] = RT.keyword(null, "added");
    arrayOfObject5[5] = "1.1";
    arrayOfObject5[6] = RT.keyword(null, "static");
    arrayOfObject5[7] = Boolean.TRUE;
    arrayOfObject5[8] = RT.keyword(null, "doc");
    arrayOfObject5[9] = "Get a map with the Var/value pairs which is currently in effect for the\n  current thread.";
    arrayOfObject5[10] = RT.keyword(null, "line");
    arrayOfObject5[11] = Integer.valueOf(1745);
    arrayOfObject5[12] = RT.keyword(null, "file");
    arrayOfObject5[13] = "clojure/core.clj";
    const__705 = (AFn)RT.map(arrayOfObject5);
    const__706 = (Var)RT.var("clojure.core", "binding");
    const__707 = Integer.valueOf(1753);
    Object[] arrayOfObject7 = new Object[1];
    Object[] arrayOfObject8 = new Object[3];
    arrayOfObject8[0] = Symbol.intern(null, "bindings");
    arrayOfObject8[1] = Symbol.intern(null, "&");
    arrayOfObject8[2] = Symbol.intern(null, "body");
    arrayOfObject7[0] = RT.vector(arrayOfObject8);
    const__708 = PersistentList.create(Arrays.asList(arrayOfObject7));
    Object[] arrayOfObject9 = new Object[12];
    arrayOfObject9[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject10 = new Object[1];
    Object[] arrayOfObject11 = new Object[3];
    arrayOfObject11[0] = Symbol.intern(null, "bindings");
    arrayOfObject11[1] = Symbol.intern(null, "&");
    arrayOfObject11[2] = Symbol.intern(null, "body");
    arrayOfObject10[0] = RT.vector(arrayOfObject11);
    arrayOfObject9[1] = PersistentList.create(Arrays.asList(arrayOfObject10));
    arrayOfObject9[2] = RT.keyword(null, "column");
    arrayOfObject9[3] = Integer.valueOf(1);
    arrayOfObject9[4] = RT.keyword(null, "added");
    arrayOfObject9[5] = "1.0";
    arrayOfObject9[6] = RT.keyword(null, "doc");
    arrayOfObject9[7] = "binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values.";
    arrayOfObject9[8] = RT.keyword(null, "line");
    arrayOfObject9[9] = Integer.valueOf(1753);
    arrayOfObject9[10] = RT.keyword(null, "file");
    arrayOfObject9[11] = "clojure/core.clj";
    const__709 = (AFn)RT.map(arrayOfObject9);
    const__710 = (Var)RT.var("clojure.core", "with-bindings*");
    const__711 = Integer.valueOf(1779);
    Object[] arrayOfObject12 = new Object[1];
    Object[] arrayOfObject13 = new Object[4];
    arrayOfObject13[0] = Symbol.intern(null, "binding-map");
    arrayOfObject13[1] = Symbol.intern(null, "f");
    arrayOfObject13[2] = Symbol.intern(null, "&");
    arrayOfObject13[3] = Symbol.intern(null, "args");
    arrayOfObject12[0] = RT.vector(arrayOfObject13);
    const__712 = PersistentList.create(Arrays.asList(arrayOfObject12));
    Object[] arrayOfObject14 = new Object[14];
    arrayOfObject14[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject15 = new Object[1];
    Object[] arrayOfObject16 = new Object[4];
    arrayOfObject16[0] = Symbol.intern(null, "binding-map");
    arrayOfObject16[1] = Symbol.intern(null, "f");
    arrayOfObject16[2] = Symbol.intern(null, "&");
    arrayOfObject16[3] = Symbol.intern(null, "args");
    arrayOfObject15[0] = RT.vector(arrayOfObject16);
    arrayOfObject14[1] = PersistentList.create(Arrays.asList(arrayOfObject15));
    arrayOfObject14[2] = RT.keyword(null, "column");
    arrayOfObject14[3] = Integer.valueOf(1);
    arrayOfObject14[4] = RT.keyword(null, "added");
    arrayOfObject14[5] = "1.1";
    arrayOfObject14[6] = RT.keyword(null, "static");
    arrayOfObject14[7] = Boolean.TRUE;
    arrayOfObject14[8] = RT.keyword(null, "doc");
    arrayOfObject14[9] = "Takes a map of Var/value pairs. Installs for the given Vars the associated\n  values as thread-local bindings. Then calls f with the supplied arguments.\n  Pops the installed bindings after f returned. Returns whatever f returns.";
    arrayOfObject14[10] = RT.keyword(null, "line");
    arrayOfObject14[11] = Integer.valueOf(1779);
    arrayOfObject14[12] = RT.keyword(null, "file");
    arrayOfObject14[13] = "clojure/core.clj";
    const__713 = (AFn)RT.map(arrayOfObject14);
    const__714 = (Var)RT.var("clojure.core", "with-bindings");
    const__715 = Integer.valueOf(1792);
    Object[] arrayOfObject17 = new Object[1];
    Object[] arrayOfObject18 = new Object[3];
    arrayOfObject18[0] = Symbol.intern(null, "binding-map");
    arrayOfObject18[1] = Symbol.intern(null, "&");
    arrayOfObject18[2] = Symbol.intern(null, "body");
    arrayOfObject17[0] = RT.vector(arrayOfObject18);
    const__716 = PersistentList.create(Arrays.asList(arrayOfObject17));
    Object[] arrayOfObject19 = new Object[12];
    arrayOfObject19[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject20 = new Object[1];
    Object[] arrayOfObject21 = new Object[3];
    arrayOfObject21[0] = Symbol.intern(null, "binding-map");
    arrayOfObject21[1] = Symbol.intern(null, "&");
    arrayOfObject21[2] = Symbol.intern(null, "body");
    arrayOfObject20[0] = RT.vector(arrayOfObject21);
    arrayOfObject19[1] = PersistentList.create(Arrays.asList(arrayOfObject20));
    arrayOfObject19[2] = RT.keyword(null, "column");
    arrayOfObject19[3] = Integer.valueOf(1);
    arrayOfObject19[4] = RT.keyword(null, "added");
    arrayOfObject19[5] = "1.1";
    arrayOfObject19[6] = RT.keyword(null, "doc");
    arrayOfObject19[7] = "Takes a map of Var/value pairs. Installs for the given Vars the associated\n  values as thread-local bindings. The executes body. Pops the installed\n  bindings after body was evaluated. Returns the value of body.";
    arrayOfObject19[8] = RT.keyword(null, "line");
    arrayOfObject19[9] = Integer.valueOf(1792);
    arrayOfObject19[10] = RT.keyword(null, "file");
    arrayOfObject19[11] = "clojure/core.clj";
    const__717 = (AFn)RT.map(arrayOfObject19);
    const__718 = (Var)RT.var("clojure.core", "bound-fn*");
    const__719 = Integer.valueOf(1800);
    Object[] arrayOfObject22 = new Object[1];
    Object[] arrayOfObject23 = new Object[1];
    arrayOfObject23[0] = Symbol.intern(null, "f");
    arrayOfObject22[0] = RT.vector(arrayOfObject23);
    const__720 = PersistentList.create(Arrays.asList(arrayOfObject22));
    Object[] arrayOfObject24 = new Object[14];
    arrayOfObject24[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject25 = new Object[1];
    Object[] arrayOfObject26 = new Object[1];
    arrayOfObject26[0] = Symbol.intern(null, "f");
    arrayOfObject25[0] = RT.vector(arrayOfObject26);
    arrayOfObject24[1] = PersistentList.create(Arrays.asList(arrayOfObject25));
    arrayOfObject24[2] = RT.keyword(null, "column");
    arrayOfObject24[3] = Integer.valueOf(1);
    arrayOfObject24[4] = RT.keyword(null, "added");
    arrayOfObject24[5] = "1.1";
    arrayOfObject24[6] = RT.keyword(null, "static");
    arrayOfObject24[7] = Boolean.TRUE;
    arrayOfObject24[8] = RT.keyword(null, "doc");
    arrayOfObject24[9] = "Returns a function, which will install the same bindings in effect as in\n  the thread at the time bound-fn* was called and then call f with any given\n  arguments. This may be used to define a helper function which runs on a\n  different thread, but needs the same bindings in place.";
    arrayOfObject24[10] = RT.keyword(null, "line");
    arrayOfObject24[11] = Integer.valueOf(1800);
    arrayOfObject24[12] = RT.keyword(null, "file");
    arrayOfObject24[13] = "clojure/core.clj";
    const__721 = (AFn)RT.map(arrayOfObject24);
    const__722 = (Var)RT.var("clojure.core", "bound-fn");
    const__723 = Integer.valueOf(1812);
    Object[] arrayOfObject27 = new Object[1];
    Object[] arrayOfObject28 = new Object[2];
    arrayOfObject28[0] = Symbol.intern(null, "&");
    arrayOfObject28[1] = Symbol.intern(null, "fntail");
    arrayOfObject27[0] = RT.vector(arrayOfObject28);
    const__724 = PersistentList.create(Arrays.asList(arrayOfObject27));
    Object[] arrayOfObject29 = new Object[12];
    arrayOfObject29[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject30 = new Object[1];
    Object[] arrayOfObject31 = new Object[2];
    arrayOfObject31[0] = Symbol.intern(null, "&");
    arrayOfObject31[1] = Symbol.intern(null, "fntail");
    arrayOfObject30[0] = RT.vector(arrayOfObject31);
    arrayOfObject29[1] = PersistentList.create(Arrays.asList(arrayOfObject30));
    arrayOfObject29[2] = RT.keyword(null, "column");
    arrayOfObject29[3] = Integer.valueOf(1);
    arrayOfObject29[4] = RT.keyword(null, "added");
    arrayOfObject29[5] = "1.1";
    arrayOfObject29[6] = RT.keyword(null, "doc");
    arrayOfObject29[7] = "Returns a function defined by the given fntail, which will install the\n  same bindings in effect as in the thread at the time bound-fn was called.\n  This may be used to define a helper function which runs on a different\n  thread, but needs the same bindings in place.";
    arrayOfObject29[8] = RT.keyword(null, "line");
    arrayOfObject29[9] = Integer.valueOf(1812);
    arrayOfObject29[10] = RT.keyword(null, "file");
    arrayOfObject29[11] = "clojure/core.clj";
    const__725 = (AFn)RT.map(arrayOfObject29);
    const__726 = (Var)RT.var("clojure.core", "find-var");
    const__727 = Integer.valueOf(1821);
    Object[] arrayOfObject32 = new Object[1];
    Object[] arrayOfObject33 = new Object[1];
    arrayOfObject33[0] = Symbol.intern(null, "sym");
    arrayOfObject32[0] = RT.vector(arrayOfObject33);
    const__728 = PersistentList.create(Arrays.asList(arrayOfObject32));
    Object[] arrayOfObject34 = new Object[14];
    arrayOfObject34[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject35 = new Object[1];
    Object[] arrayOfObject36 = new Object[1];
    arrayOfObject36[0] = Symbol.intern(null, "sym");
    arrayOfObject35[0] = RT.vector(arrayOfObject36);
    arrayOfObject34[1] = PersistentList.create(Arrays.asList(arrayOfObject35));
    arrayOfObject34[2] = RT.keyword(null, "column");
    arrayOfObject34[3] = Integer.valueOf(1);
    arrayOfObject34[4] = RT.keyword(null, "added");
    arrayOfObject34[5] = "1.0";
    arrayOfObject34[6] = RT.keyword(null, "static");
    arrayOfObject34[7] = Boolean.TRUE;
    arrayOfObject34[8] = RT.keyword(null, "doc");
    arrayOfObject34[9] = "Returns the global var named by the namespace-qualified symbol, or\n  nil if no var with that name.";
    arrayOfObject34[10] = RT.keyword(null, "line");
    arrayOfObject34[11] = Integer.valueOf(1821);
    arrayOfObject34[12] = RT.keyword(null, "file");
    arrayOfObject34[13] = "clojure/core.clj";
    const__729 = (AFn)RT.map(arrayOfObject34);
    const__730 = (Var)RT.var("clojure.core", "binding-conveyor-fn");
    const__731 = Integer.valueOf(1828);
    Object[] arrayOfObject37 = new Object[1];
    Object[] arrayOfObject38 = new Object[1];
    arrayOfObject38[0] = Symbol.intern(null, "f");
    arrayOfObject37[0] = RT.vector(arrayOfObject38);
    const__732 = PersistentList.create(Arrays.asList(arrayOfObject37));
    Object[] arrayOfObject39 = new Object[12];
    arrayOfObject39[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject40 = new Object[1];
    Object[] arrayOfObject41 = new Object[1];
    arrayOfObject41[0] = Symbol.intern(null, "f");
    arrayOfObject40[0] = RT.vector(arrayOfObject41);
    arrayOfObject39[1] = PersistentList.create(Arrays.asList(arrayOfObject40));
    arrayOfObject39[2] = RT.keyword(null, "column");
    arrayOfObject39[3] = Integer.valueOf(1);
    arrayOfObject39[4] = RT.keyword(null, "added");
    arrayOfObject39[5] = "1.3";
    arrayOfObject39[6] = RT.keyword(null, "private");
    arrayOfObject39[7] = Boolean.TRUE;
    arrayOfObject39[8] = RT.keyword(null, "line");
    arrayOfObject39[9] = Integer.valueOf(1828);
    arrayOfObject39[10] = RT.keyword(null, "file");
    arrayOfObject39[11] = "clojure/core.clj";
    const__733 = (AFn)RT.map(arrayOfObject39);
    const__734 = (Var)RT.var("clojure.core", "setup-reference");
    const__735 = Integer.valueOf(1851);
    Object[] arrayOfObject42 = new Object[1];
    Object[] arrayOfObject43 = new Object[2];
    IObj localIObj1 = (IObj)Symbol.intern(null, "r");
    Object[] arrayOfObject44 = new Object[2];
    arrayOfObject44[0] = RT.keyword(null, "tag");
    arrayOfObject44[1] = Symbol.intern(null, "clojure.lang.ARef");
    arrayOfObject43[0] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject44));
    arrayOfObject43[1] = Symbol.intern(null, "options");
    arrayOfObject42[0] = RT.vector(arrayOfObject43);
    const__736 = PersistentList.create(Arrays.asList(arrayOfObject42));
    Object[] arrayOfObject45 = new Object[10];
    arrayOfObject45[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject46 = new Object[1];
    Object[] arrayOfObject47 = new Object[2];
    IObj localIObj2 = (IObj)Symbol.intern(null, "r");
    Object[] arrayOfObject48 = new Object[2];
    arrayOfObject48[0] = RT.keyword(null, "tag");
    arrayOfObject48[1] = Symbol.intern(null, "clojure.lang.ARef");
    arrayOfObject47[0] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject48));
    arrayOfObject47[1] = Symbol.intern(null, "options");
    arrayOfObject46[0] = RT.vector(arrayOfObject47);
    arrayOfObject45[1] = PersistentList.create(Arrays.asList(arrayOfObject46));
    arrayOfObject45[2] = RT.keyword(null, "column");
    arrayOfObject45[3] = Integer.valueOf(1);
    arrayOfObject45[4] = RT.keyword(null, "private");
    arrayOfObject45[5] = Boolean.TRUE;
    arrayOfObject45[6] = RT.keyword(null, "line");
    arrayOfObject45[7] = Integer.valueOf(1851);
    arrayOfObject45[8] = RT.keyword(null, "file");
    arrayOfObject45[9] = "clojure/core.clj";
    const__737 = (AFn)RT.map(arrayOfObject45);
    const__738 = (Var)RT.var("clojure.core", "agent");
    const__739 = Integer.valueOf(1860);
    Object[] arrayOfObject49 = new Object[1];
    Object[] arrayOfObject50 = new Object[3];
    arrayOfObject50[0] = Symbol.intern(null, "state");
    arrayOfObject50[1] = Symbol.intern(null, "&");
    arrayOfObject50[2] = Symbol.intern(null, "options");
    arrayOfObject49[0] = RT.vector(arrayOfObject50);
    const__740 = PersistentList.create(Arrays.asList(arrayOfObject49));
    Object[] arrayOfObject51 = new Object[14];
    arrayOfObject51[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject52 = new Object[1];
    Object[] arrayOfObject53 = new Object[3];
    arrayOfObject53[0] = Symbol.intern(null, "state");
    arrayOfObject53[1] = Symbol.intern(null, "&");
    arrayOfObject53[2] = Symbol.intern(null, "options");
    arrayOfObject52[0] = RT.vector(arrayOfObject53);
    arrayOfObject51[1] = PersistentList.create(Arrays.asList(arrayOfObject52));
    arrayOfObject51[2] = RT.keyword(null, "column");
    arrayOfObject51[3] = Integer.valueOf(1);
    arrayOfObject51[4] = RT.keyword(null, "added");
    arrayOfObject51[5] = "1.0";
    arrayOfObject51[6] = RT.keyword(null, "static");
    arrayOfObject51[7] = Boolean.TRUE;
    arrayOfObject51[8] = RT.keyword(null, "doc");
    arrayOfObject51[9] = "Creates and returns an agent with an initial value of state and\n  zero or more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  :error-handler handler-fn\n\n  :error-mode mode-keyword\n\n  If metadata-map is supplied, it will become the metadata on the\n  agent. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an exception.  handler-fn is called if an\n  action throws an exception or if validate-fn rejects a new state --\n  see set-error-handler! for details.  The mode-keyword may be either\n  :continue (the default if an error-handler is given) or :fail (the\n  default if no error-handler is given) -- see set-error-mode! for\n  details.";
    arrayOfObject51[10] = RT.keyword(null, "line");
    arrayOfObject51[11] = Integer.valueOf(1860);
    arrayOfObject51[12] = RT.keyword(null, "file");
    arrayOfObject51[13] = "clojure/core.clj";
    const__741 = (AFn)RT.map(arrayOfObject51);
    const__742 = (Var)RT.var("clojure.core", "set-agent-send-executor!");
    const__743 = Integer.valueOf(1895);
    Object[] arrayOfObject54 = new Object[1];
    Object[] arrayOfObject55 = new Object[1];
    arrayOfObject55[0] = Symbol.intern(null, "executor");
    arrayOfObject54[0] = RT.vector(arrayOfObject55);
    const__744 = PersistentList.create(Arrays.asList(arrayOfObject54));
    Object[] arrayOfObject56 = new Object[12];
    arrayOfObject56[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject57 = new Object[1];
    Object[] arrayOfObject58 = new Object[1];
    arrayOfObject58[0] = Symbol.intern(null, "executor");
    arrayOfObject57[0] = RT.vector(arrayOfObject58);
    arrayOfObject56[1] = PersistentList.create(Arrays.asList(arrayOfObject57));
    arrayOfObject56[2] = RT.keyword(null, "column");
    arrayOfObject56[3] = Integer.valueOf(1);
    arrayOfObject56[4] = RT.keyword(null, "added");
    arrayOfObject56[5] = "1.5";
    arrayOfObject56[6] = RT.keyword(null, "doc");
    arrayOfObject56[7] = "Sets the ExecutorService to be used by send";
    arrayOfObject56[8] = RT.keyword(null, "line");
    arrayOfObject56[9] = Integer.valueOf(1895);
    arrayOfObject56[10] = RT.keyword(null, "file");
    arrayOfObject56[11] = "clojure/core.clj";
    const__745 = (AFn)RT.map(arrayOfObject56);
    const__746 = (Var)RT.var("clojure.core", "set-agent-send-off-executor!");
    const__747 = Integer.valueOf(1901);
    Object[] arrayOfObject59 = new Object[1];
    Object[] arrayOfObject60 = new Object[1];
    arrayOfObject60[0] = Symbol.intern(null, "executor");
    arrayOfObject59[0] = RT.vector(arrayOfObject60);
    const__748 = PersistentList.create(Arrays.asList(arrayOfObject59));
    Object[] arrayOfObject61 = new Object[12];
    arrayOfObject61[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject62 = new Object[1];
    Object[] arrayOfObject63 = new Object[1];
    arrayOfObject63[0] = Symbol.intern(null, "executor");
    arrayOfObject62[0] = RT.vector(arrayOfObject63);
    arrayOfObject61[1] = PersistentList.create(Arrays.asList(arrayOfObject62));
    arrayOfObject61[2] = RT.keyword(null, "column");
    arrayOfObject61[3] = Integer.valueOf(1);
    arrayOfObject61[4] = RT.keyword(null, "added");
    arrayOfObject61[5] = "1.5";
    arrayOfObject61[6] = RT.keyword(null, "doc");
    arrayOfObject61[7] = "Sets the ExecutorService to be used by send-off";
    arrayOfObject61[8] = RT.keyword(null, "line");
    arrayOfObject61[9] = Integer.valueOf(1901);
    arrayOfObject61[10] = RT.keyword(null, "file");
    arrayOfObject61[11] = "clojure/core.clj";
    const__749 = (AFn)RT.map(arrayOfObject61);
    const__750 = (Var)RT.var("clojure.core", "send-via");
    const__751 = Integer.valueOf(1907);
    Object[] arrayOfObject64 = new Object[1];
    Object[] arrayOfObject65 = new Object[5];
    arrayOfObject65[0] = Symbol.intern(null, "executor");
    IObj localIObj3 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject66 = new Object[2];
    arrayOfObject66[0] = RT.keyword(null, "tag");
    arrayOfObject66[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject65[1] = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject66));
    arrayOfObject65[2] = Symbol.intern(null, "f");
    arrayOfObject65[3] = Symbol.intern(null, "&");
    arrayOfObject65[4] = Symbol.intern(null, "args");
    arrayOfObject64[0] = RT.vector(arrayOfObject65);
    const__752 = PersistentList.create(Arrays.asList(arrayOfObject64));
    Object[] arrayOfObject67 = new Object[12];
    arrayOfObject67[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject68 = new Object[1];
    Object[] arrayOfObject69 = new Object[5];
    arrayOfObject69[0] = Symbol.intern(null, "executor");
    IObj localIObj4 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject70 = new Object[2];
    arrayOfObject70[0] = RT.keyword(null, "tag");
    arrayOfObject70[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject69[1] = localIObj4.withMeta((IPersistentMap)RT.map(arrayOfObject70));
    arrayOfObject69[2] = Symbol.intern(null, "f");
    arrayOfObject69[3] = Symbol.intern(null, "&");
    arrayOfObject69[4] = Symbol.intern(null, "args");
    arrayOfObject68[0] = RT.vector(arrayOfObject69);
    arrayOfObject67[1] = PersistentList.create(Arrays.asList(arrayOfObject68));
    arrayOfObject67[2] = RT.keyword(null, "column");
    arrayOfObject67[3] = Integer.valueOf(1);
    arrayOfObject67[4] = RT.keyword(null, "added");
    arrayOfObject67[5] = "1.5";
    arrayOfObject67[6] = RT.keyword(null, "doc");
    arrayOfObject67[7] = "Dispatch an action to an agent. Returns the agent immediately.\n  Subsequently, in a thread supplied by executor, the state of the agent\n  will be set to the value of:\n\n  (apply action-fn state-of-agent args)";
    arrayOfObject67[8] = RT.keyword(null, "line");
    arrayOfObject67[9] = Integer.valueOf(1907);
    arrayOfObject67[10] = RT.keyword(null, "file");
    arrayOfObject67[11] = "clojure/core.clj";
    const__753 = (AFn)RT.map(arrayOfObject67);
    const__754 = (Var)RT.var("clojure.core", "send");
    const__755 = Integer.valueOf(1917);
    Object[] arrayOfObject71 = new Object[1];
    Object[] arrayOfObject72 = new Object[4];
    IObj localIObj5 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject73 = new Object[2];
    arrayOfObject73[0] = RT.keyword(null, "tag");
    arrayOfObject73[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject72[0] = localIObj5.withMeta((IPersistentMap)RT.map(arrayOfObject73));
    arrayOfObject72[1] = Symbol.intern(null, "f");
    arrayOfObject72[2] = Symbol.intern(null, "&");
    arrayOfObject72[3] = Symbol.intern(null, "args");
    arrayOfObject71[0] = RT.vector(arrayOfObject72);
    const__756 = PersistentList.create(Arrays.asList(arrayOfObject71));
    Object[] arrayOfObject74 = new Object[14];
    arrayOfObject74[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject75 = new Object[1];
    Object[] arrayOfObject76 = new Object[4];
    IObj localIObj6 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject77 = new Object[2];
    arrayOfObject77[0] = RT.keyword(null, "tag");
    arrayOfObject77[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject76[0] = localIObj6.withMeta((IPersistentMap)RT.map(arrayOfObject77));
    arrayOfObject76[1] = Symbol.intern(null, "f");
    arrayOfObject76[2] = Symbol.intern(null, "&");
    arrayOfObject76[3] = Symbol.intern(null, "args");
    arrayOfObject75[0] = RT.vector(arrayOfObject76);
    arrayOfObject74[1] = PersistentList.create(Arrays.asList(arrayOfObject75));
    arrayOfObject74[2] = RT.keyword(null, "column");
    arrayOfObject74[3] = Integer.valueOf(1);
    arrayOfObject74[4] = RT.keyword(null, "added");
    arrayOfObject74[5] = "1.0";
    arrayOfObject74[6] = RT.keyword(null, "static");
    arrayOfObject74[7] = Boolean.TRUE;
    arrayOfObject74[8] = RT.keyword(null, "doc");
    arrayOfObject74[9] = "Dispatch an action to an agent. Returns the agent immediately.\n  Subsequently, in a thread from a thread pool, the state of the agent\n  will be set to the value of:\n\n  (apply action-fn state-of-agent args)";
    arrayOfObject74[10] = RT.keyword(null, "line");
    arrayOfObject74[11] = Integer.valueOf(1917);
    arrayOfObject74[12] = RT.keyword(null, "file");
    arrayOfObject74[13] = "clojure/core.clj";
    const__757 = (AFn)RT.map(arrayOfObject74);
    const__758 = (Var)RT.var("clojure.core", "send-off");
    const__759 = Integer.valueOf(1928);
    Object[] arrayOfObject78 = new Object[1];
    Object[] arrayOfObject79 = new Object[4];
    IObj localIObj7 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject80 = new Object[2];
    arrayOfObject80[0] = RT.keyword(null, "tag");
    arrayOfObject80[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject79[0] = localIObj7.withMeta((IPersistentMap)RT.map(arrayOfObject80));
    arrayOfObject79[1] = Symbol.intern(null, "f");
    arrayOfObject79[2] = Symbol.intern(null, "&");
    arrayOfObject79[3] = Symbol.intern(null, "args");
    arrayOfObject78[0] = RT.vector(arrayOfObject79);
    const__760 = PersistentList.create(Arrays.asList(arrayOfObject78));
    Object[] arrayOfObject81 = new Object[14];
    arrayOfObject81[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject82 = new Object[1];
    Object[] arrayOfObject83 = new Object[4];
    IObj localIObj8 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject84 = new Object[2];
    arrayOfObject84[0] = RT.keyword(null, "tag");
    arrayOfObject84[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject83[0] = localIObj8.withMeta((IPersistentMap)RT.map(arrayOfObject84));
    arrayOfObject83[1] = Symbol.intern(null, "f");
    arrayOfObject83[2] = Symbol.intern(null, "&");
    arrayOfObject83[3] = Symbol.intern(null, "args");
    arrayOfObject82[0] = RT.vector(arrayOfObject83);
    arrayOfObject81[1] = PersistentList.create(Arrays.asList(arrayOfObject82));
    arrayOfObject81[2] = RT.keyword(null, "column");
    arrayOfObject81[3] = Integer.valueOf(1);
    arrayOfObject81[4] = RT.keyword(null, "added");
    arrayOfObject81[5] = "1.0";
    arrayOfObject81[6] = RT.keyword(null, "static");
    arrayOfObject81[7] = Boolean.TRUE;
    arrayOfObject81[8] = RT.keyword(null, "doc");
    arrayOfObject81[9] = "Dispatch a potentially blocking action to an agent. Returns the\n  agent immediately. Subsequently, in a separate thread, the state of\n  the agent will be set to the value of:\n\n  (apply action-fn state-of-agent args)";
    arrayOfObject81[10] = RT.keyword(null, "line");
    arrayOfObject81[11] = Integer.valueOf(1928);
    arrayOfObject81[12] = RT.keyword(null, "file");
    arrayOfObject81[13] = "clojure/core.clj";
    const__761 = (AFn)RT.map(arrayOfObject81);
    const__762 = (Var)RT.var("clojure.core", "release-pending-sends");
    const__763 = Integer.valueOf(1939);
    Object[] arrayOfObject85 = new Object[1];
    arrayOfObject85[0] = RT.vector(new Object[0]);
    const__764 = PersistentList.create(Arrays.asList(arrayOfObject85));
    Object[] arrayOfObject86 = new Object[14];
    arrayOfObject86[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject87 = new Object[1];
    arrayOfObject87[0] = RT.vector(new Object[0]);
    arrayOfObject86[1] = PersistentList.create(Arrays.asList(arrayOfObject87));
    arrayOfObject86[2] = RT.keyword(null, "column");
    arrayOfObject86[3] = Integer.valueOf(1);
    arrayOfObject86[4] = RT.keyword(null, "added");
    arrayOfObject86[5] = "1.0";
    arrayOfObject86[6] = RT.keyword(null, "static");
    arrayOfObject86[7] = Boolean.TRUE;
    arrayOfObject86[8] = RT.keyword(null, "doc");
    arrayOfObject86[9] = "Normally, actions sent directly or indirectly during another action\n  are held until the action completes (changes the agent's\n  state). This function can be used to dispatch any pending sent\n  actions immediately. This has no impact on actions sent during a\n  transaction, which are still held until commit. If no action is\n  occurring, does nothing. Returns the number of actions dispatched.";
    arrayOfObject86[10] = RT.keyword(null, "line");
    arrayOfObject86[11] = Integer.valueOf(1939);
    arrayOfObject86[12] = RT.keyword(null, "file");
    arrayOfObject86[13] = "clojure/core.clj";
    const__765 = (AFn)RT.map(arrayOfObject86);
    const__766 = (Var)RT.var("clojure.core", "add-watch");
    const__767 = Integer.valueOf(1950);
    Object[] arrayOfObject88 = new Object[1];
    Object[] arrayOfObject89 = new Object[3];
    IObj localIObj9 = (IObj)Symbol.intern(null, "reference");
    Object[] arrayOfObject90 = new Object[2];
    arrayOfObject90[0] = RT.keyword(null, "tag");
    arrayOfObject90[1] = Symbol.intern(null, "clojure.lang.IRef");
    arrayOfObject89[0] = localIObj9.withMeta((IPersistentMap)RT.map(arrayOfObject90));
    arrayOfObject89[1] = Symbol.intern(null, "key");
    arrayOfObject89[2] = Symbol.intern(null, "fn");
    arrayOfObject88[0] = RT.vector(arrayOfObject89);
    const__768 = PersistentList.create(Arrays.asList(arrayOfObject88));
    Object[] arrayOfObject91 = new Object[14];
    arrayOfObject91[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject92 = new Object[1];
    Object[] arrayOfObject93 = new Object[3];
    IObj localIObj10 = (IObj)Symbol.intern(null, "reference");
    Object[] arrayOfObject94 = new Object[2];
    arrayOfObject94[0] = RT.keyword(null, "tag");
    arrayOfObject94[1] = Symbol.intern(null, "clojure.lang.IRef");
    arrayOfObject93[0] = localIObj10.withMeta((IPersistentMap)RT.map(arrayOfObject94));
    arrayOfObject93[1] = Symbol.intern(null, "key");
    arrayOfObject93[2] = Symbol.intern(null, "fn");
    arrayOfObject92[0] = RT.vector(arrayOfObject93);
    arrayOfObject91[1] = PersistentList.create(Arrays.asList(arrayOfObject92));
    arrayOfObject91[2] = RT.keyword(null, "column");
    arrayOfObject91[3] = Integer.valueOf(1);
    arrayOfObject91[4] = RT.keyword(null, "added");
    arrayOfObject91[5] = "1.0";
    arrayOfObject91[6] = RT.keyword(null, "static");
    arrayOfObject91[7] = Boolean.TRUE;
    arrayOfObject91[8] = RT.keyword(null, "doc");
    arrayOfObject91[9] = "Alpha - subject to change.\n  Adds a watch function to an agent/atom/var/ref reference. The watch\n  fn must be a fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch fn\n  will be called synchronously, on the agent's thread if an agent,\n  before any pending sends if agent or ref. Note that an atom's or\n  ref's state may have changed again prior to the fn call, so use\n  old/new-state rather than derefing the reference. Note also that watch\n  fns may be called from multiple threads simultaneously. Var watchers\n  are triggered only by root binding changes, not thread-local\n  set!s. Keys must be unique per reference, and can be used to remove\n  the watch with remove-watch, but are otherwise considered opaque by\n  the watch mechanism.";
    arrayOfObject91[10] = RT.keyword(null, "line");
    arrayOfObject91[11] = Integer.valueOf(1950);
    arrayOfObject91[12] = RT.keyword(null, "file");
    arrayOfObject91[13] = "clojure/core.clj";
    const__769 = (AFn)RT.map(arrayOfObject91);
    const__770 = (Var)RT.var("clojure.core", "remove-watch");
    const__771 = Integer.valueOf(1969);
    Object[] arrayOfObject95 = new Object[1];
    Object[] arrayOfObject96 = new Object[2];
    IObj localIObj11 = (IObj)Symbol.intern(null, "reference");
    Object[] arrayOfObject97 = new Object[2];
    arrayOfObject97[0] = RT.keyword(null, "tag");
    arrayOfObject97[1] = Symbol.intern(null, "clojure.lang.IRef");
    arrayOfObject96[0] = localIObj11.withMeta((IPersistentMap)RT.map(arrayOfObject97));
    arrayOfObject96[1] = Symbol.intern(null, "key");
    arrayOfObject95[0] = RT.vector(arrayOfObject96);
    const__772 = PersistentList.create(Arrays.asList(arrayOfObject95));
    Object[] arrayOfObject98 = new Object[14];
    arrayOfObject98[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject99 = new Object[1];
    Object[] arrayOfObject100 = new Object[2];
    IObj localIObj12 = (IObj)Symbol.intern(null, "reference");
    Object[] arrayOfObject101 = new Object[2];
    arrayOfObject101[0] = RT.keyword(null, "tag");
    arrayOfObject101[1] = Symbol.intern(null, "clojure.lang.IRef");
    arrayOfObject100[0] = localIObj12.withMeta((IPersistentMap)RT.map(arrayOfObject101));
    arrayOfObject100[1] = Symbol.intern(null, "key");
    arrayOfObject99[0] = RT.vector(arrayOfObject100);
    arrayOfObject98[1] = PersistentList.create(Arrays.asList(arrayOfObject99));
    arrayOfObject98[2] = RT.keyword(null, "column");
    arrayOfObject98[3] = Integer.valueOf(1);
    arrayOfObject98[4] = RT.keyword(null, "added");
    arrayOfObject98[5] = "1.0";
    arrayOfObject98[6] = RT.keyword(null, "static");
    arrayOfObject98[7] = Boolean.TRUE;
    arrayOfObject98[8] = RT.keyword(null, "doc");
    arrayOfObject98[9] = "Alpha - subject to change.\n  Removes a watch (set by add-watch) from a reference";
    arrayOfObject98[10] = RT.keyword(null, "line");
    arrayOfObject98[11] = Integer.valueOf(1969);
    arrayOfObject98[12] = RT.keyword(null, "file");
    arrayOfObject98[13] = "clojure/core.clj";
    const__773 = (AFn)RT.map(arrayOfObject98);
    const__774 = (Var)RT.var("clojure.core", "agent-error");
    const__775 = Integer.valueOf(1977);
    Object[] arrayOfObject102 = new Object[1];
    Object[] arrayOfObject103 = new Object[1];
    IObj localIObj13 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject104 = new Object[2];
    arrayOfObject104[0] = RT.keyword(null, "tag");
    arrayOfObject104[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject103[0] = localIObj13.withMeta((IPersistentMap)RT.map(arrayOfObject104));
    arrayOfObject102[0] = RT.vector(arrayOfObject103);
    const__776 = PersistentList.create(Arrays.asList(arrayOfObject102));
    Object[] arrayOfObject105 = new Object[14];
    arrayOfObject105[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject106 = new Object[1];
    Object[] arrayOfObject107 = new Object[1];
    IObj localIObj14 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject108 = new Object[2];
    arrayOfObject108[0] = RT.keyword(null, "tag");
    arrayOfObject108[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject107[0] = localIObj14.withMeta((IPersistentMap)RT.map(arrayOfObject108));
    arrayOfObject106[0] = RT.vector(arrayOfObject107);
    arrayOfObject105[1] = PersistentList.create(Arrays.asList(arrayOfObject106));
    arrayOfObject105[2] = RT.keyword(null, "column");
    arrayOfObject105[3] = Integer.valueOf(1);
    arrayOfObject105[4] = RT.keyword(null, "added");
    arrayOfObject105[5] = "1.2";
    arrayOfObject105[6] = RT.keyword(null, "static");
    arrayOfObject105[7] = Boolean.TRUE;
    arrayOfObject105[8] = RT.keyword(null, "doc");
    arrayOfObject105[9] = "Returns the exception thrown during an asynchronous action of the\n  agent if the agent is failed.  Returns nil if the agent is not\n  failed.";
    arrayOfObject105[10] = RT.keyword(null, "line");
    arrayOfObject105[11] = Integer.valueOf(1977);
    arrayOfObject105[12] = RT.keyword(null, "file");
    arrayOfObject105[13] = "clojure/core.clj";
    const__777 = (AFn)RT.map(arrayOfObject105);
    const__778 = (Var)RT.var("clojure.core", "restart-agent");
    const__779 = Integer.valueOf(1985);
    Object[] arrayOfObject109 = new Object[1];
    Object[] arrayOfObject110 = new Object[4];
    IObj localIObj15 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject111 = new Object[2];
    arrayOfObject111[0] = RT.keyword(null, "tag");
    arrayOfObject111[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject110[0] = localIObj15.withMeta((IPersistentMap)RT.map(arrayOfObject111));
    arrayOfObject110[1] = Symbol.intern(null, "new-state");
    arrayOfObject110[2] = Symbol.intern(null, "&");
    arrayOfObject110[3] = Symbol.intern(null, "options");
    arrayOfObject109[0] = RT.vector(arrayOfObject110);
    const__780 = PersistentList.create(Arrays.asList(arrayOfObject109));
    Object[] arrayOfObject112 = new Object[14];
    arrayOfObject112[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject113 = new Object[1];
    Object[] arrayOfObject114 = new Object[4];
    IObj localIObj16 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject115 = new Object[2];
    arrayOfObject115[0] = RT.keyword(null, "tag");
    arrayOfObject115[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject114[0] = localIObj16.withMeta((IPersistentMap)RT.map(arrayOfObject115));
    arrayOfObject114[1] = Symbol.intern(null, "new-state");
    arrayOfObject114[2] = Symbol.intern(null, "&");
    arrayOfObject114[3] = Symbol.intern(null, "options");
    arrayOfObject113[0] = RT.vector(arrayOfObject114);
    arrayOfObject112[1] = PersistentList.create(Arrays.asList(arrayOfObject113));
    arrayOfObject112[2] = RT.keyword(null, "column");
    arrayOfObject112[3] = Integer.valueOf(1);
    arrayOfObject112[4] = RT.keyword(null, "added");
    arrayOfObject112[5] = "1.2";
    arrayOfObject112[6] = RT.keyword(null, "static");
    arrayOfObject112[7] = Boolean.TRUE;
    arrayOfObject112[8] = RT.keyword(null, "doc");
    arrayOfObject112[9] = "When an agent is failed, changes the agent state to new-state and\n  then un-fails the agent so that sends are allowed again.  If\n  a :clear-actions true option is given, any actions queued on the\n  agent that were being held while it was failed will be discarded,\n  otherwise those held actions will proceed.  The new-state must pass\n  the validator if any, or restart will throw an exception and the\n  agent will remain failed with its old state and error.  Watchers, if\n  any, will NOT be notified of the new state.  Throws an exception if\n  the agent is not failed.";
    arrayOfObject112[10] = RT.keyword(null, "line");
    arrayOfObject112[11] = Integer.valueOf(1985);
    arrayOfObject112[12] = RT.keyword(null, "file");
    arrayOfObject112[13] = "clojure/core.clj";
    const__781 = (AFn)RT.map(arrayOfObject112);
    const__782 = (Var)RT.var("clojure.core", "set-error-handler!");
    const__783 = Integer.valueOf(2002);
    Object[] arrayOfObject116 = new Object[1];
    Object[] arrayOfObject117 = new Object[2];
    IObj localIObj17 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject118 = new Object[2];
    arrayOfObject118[0] = RT.keyword(null, "tag");
    arrayOfObject118[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject117[0] = localIObj17.withMeta((IPersistentMap)RT.map(arrayOfObject118));
    arrayOfObject117[1] = Symbol.intern(null, "handler-fn");
    arrayOfObject116[0] = RT.vector(arrayOfObject117);
    const__784 = PersistentList.create(Arrays.asList(arrayOfObject116));
    Object[] arrayOfObject119 = new Object[14];
    arrayOfObject119[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject120 = new Object[1];
    Object[] arrayOfObject121 = new Object[2];
    IObj localIObj18 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject122 = new Object[2];
    arrayOfObject122[0] = RT.keyword(null, "tag");
    arrayOfObject122[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject121[0] = localIObj18.withMeta((IPersistentMap)RT.map(arrayOfObject122));
    arrayOfObject121[1] = Symbol.intern(null, "handler-fn");
    arrayOfObject120[0] = RT.vector(arrayOfObject121);
    arrayOfObject119[1] = PersistentList.create(Arrays.asList(arrayOfObject120));
    arrayOfObject119[2] = RT.keyword(null, "column");
    arrayOfObject119[3] = Integer.valueOf(1);
    arrayOfObject119[4] = RT.keyword(null, "added");
    arrayOfObject119[5] = "1.2";
    arrayOfObject119[6] = RT.keyword(null, "static");
    arrayOfObject119[7] = Boolean.TRUE;
    arrayOfObject119[8] = RT.keyword(null, "doc");
    arrayOfObject119[9] = "Sets the error-handler of agent a to handler-fn.  If an action\n  being run by the agent throws an exception or doesn't pass the\n  validator fn, handler-fn will be called with two arguments: the\n  agent and the exception.";
    arrayOfObject119[10] = RT.keyword(null, "line");
    arrayOfObject119[11] = Integer.valueOf(2002);
    arrayOfObject119[12] = RT.keyword(null, "file");
    arrayOfObject119[13] = "clojure/core.clj";
    const__785 = (AFn)RT.map(arrayOfObject119);
    const__786 = (Var)RT.var("clojure.core", "error-handler");
    const__787 = Integer.valueOf(2012);
    Object[] arrayOfObject123 = new Object[1];
    Object[] arrayOfObject124 = new Object[1];
    IObj localIObj19 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject125 = new Object[2];
    arrayOfObject125[0] = RT.keyword(null, "tag");
    arrayOfObject125[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject124[0] = localIObj19.withMeta((IPersistentMap)RT.map(arrayOfObject125));
    arrayOfObject123[0] = RT.vector(arrayOfObject124);
    const__788 = PersistentList.create(Arrays.asList(arrayOfObject123));
    Object[] arrayOfObject126 = new Object[14];
    arrayOfObject126[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject127 = new Object[1];
    Object[] arrayOfObject128 = new Object[1];
    IObj localIObj20 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject129 = new Object[2];
    arrayOfObject129[0] = RT.keyword(null, "tag");
    arrayOfObject129[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject128[0] = localIObj20.withMeta((IPersistentMap)RT.map(arrayOfObject129));
    arrayOfObject127[0] = RT.vector(arrayOfObject128);
    arrayOfObject126[1] = PersistentList.create(Arrays.asList(arrayOfObject127));
    arrayOfObject126[2] = RT.keyword(null, "column");
    arrayOfObject126[3] = Integer.valueOf(1);
    arrayOfObject126[4] = RT.keyword(null, "added");
    arrayOfObject126[5] = "1.2";
    arrayOfObject126[6] = RT.keyword(null, "static");
    arrayOfObject126[7] = Boolean.TRUE;
    arrayOfObject126[8] = RT.keyword(null, "doc");
    arrayOfObject126[9] = "Returns the error-handler of agent a, or nil if there is none.\n  See set-error-handler!";
    arrayOfObject126[10] = RT.keyword(null, "line");
    arrayOfObject126[11] = Integer.valueOf(2012);
    arrayOfObject126[12] = RT.keyword(null, "file");
    arrayOfObject126[13] = "clojure/core.clj";
    const__789 = (AFn)RT.map(arrayOfObject126);
    const__790 = (Var)RT.var("clojure.core", "set-error-mode!");
    const__791 = Integer.valueOf(2020);
    Object[] arrayOfObject130 = new Object[1];
    Object[] arrayOfObject131 = new Object[2];
    IObj localIObj21 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject132 = new Object[2];
    arrayOfObject132[0] = RT.keyword(null, "tag");
    arrayOfObject132[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject131[0] = localIObj21.withMeta((IPersistentMap)RT.map(arrayOfObject132));
    arrayOfObject131[1] = Symbol.intern(null, "mode-keyword");
    arrayOfObject130[0] = RT.vector(arrayOfObject131);
    const__792 = PersistentList.create(Arrays.asList(arrayOfObject130));
    Object[] arrayOfObject133 = new Object[14];
    arrayOfObject133[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject134 = new Object[1];
    Object[] arrayOfObject135 = new Object[2];
    IObj localIObj22 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject136 = new Object[2];
    arrayOfObject136[0] = RT.keyword(null, "tag");
    arrayOfObject136[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject135[0] = localIObj22.withMeta((IPersistentMap)RT.map(arrayOfObject136));
    arrayOfObject135[1] = Symbol.intern(null, "mode-keyword");
    arrayOfObject134[0] = RT.vector(arrayOfObject135);
    arrayOfObject133[1] = PersistentList.create(Arrays.asList(arrayOfObject134));
    arrayOfObject133[2] = RT.keyword(null, "column");
    arrayOfObject133[3] = Integer.valueOf(1);
    arrayOfObject133[4] = RT.keyword(null, "added");
    arrayOfObject133[5] = "1.2";
    arrayOfObject133[6] = RT.keyword(null, "static");
    arrayOfObject133[7] = Boolean.TRUE;
    arrayOfObject133[8] = RT.keyword(null, "doc");
    arrayOfObject133[9] = "Sets the error-mode of agent a to mode-keyword, which must be\n  either :fail or :continue.  If an action being run by the agent\n  throws an exception or doesn't pass the validator fn, an\n  error-handler may be called (see set-error-handler!), after which,\n  if the mode is :continue, the agent will continue as if neither the\n  action that caused the error nor the error itself ever happened.\n  \n  If the mode is :fail, the agent will become failed and will stop\n  accepting new 'send' and 'send-off' actions, and any previously\n  queued actions will be held until a 'restart-agent'.  Deref will\n  still work, returning the state of the agent before the error.";
    arrayOfObject133[10] = RT.keyword(null, "line");
    arrayOfObject133[11] = Integer.valueOf(2020);
    arrayOfObject133[12] = RT.keyword(null, "file");
    arrayOfObject133[13] = "clojure/core.clj";
    const__793 = (AFn)RT.map(arrayOfObject133);
    const__794 = (Var)RT.var("clojure.core", "error-mode");
    const__795 = Integer.valueOf(2037);
    Object[] arrayOfObject137 = new Object[1];
    Object[] arrayOfObject138 = new Object[1];
    IObj localIObj23 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject139 = new Object[2];
    arrayOfObject139[0] = RT.keyword(null, "tag");
    arrayOfObject139[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject138[0] = localIObj23.withMeta((IPersistentMap)RT.map(arrayOfObject139));
    arrayOfObject137[0] = RT.vector(arrayOfObject138);
    const__796 = PersistentList.create(Arrays.asList(arrayOfObject137));
    Object[] arrayOfObject140 = new Object[14];
    arrayOfObject140[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject141 = new Object[1];
    Object[] arrayOfObject142 = new Object[1];
    IObj localIObj24 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject143 = new Object[2];
    arrayOfObject143[0] = RT.keyword(null, "tag");
    arrayOfObject143[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject142[0] = localIObj24.withMeta((IPersistentMap)RT.map(arrayOfObject143));
    arrayOfObject141[0] = RT.vector(arrayOfObject142);
    arrayOfObject140[1] = PersistentList.create(Arrays.asList(arrayOfObject141));
    arrayOfObject140[2] = RT.keyword(null, "column");
    arrayOfObject140[3] = Integer.valueOf(1);
    arrayOfObject140[4] = RT.keyword(null, "added");
    arrayOfObject140[5] = "1.2";
    arrayOfObject140[6] = RT.keyword(null, "static");
    arrayOfObject140[7] = Boolean.TRUE;
    arrayOfObject140[8] = RT.keyword(null, "doc");
    arrayOfObject140[9] = "Returns the error-mode of agent a.  See set-error-mode!";
    arrayOfObject140[10] = RT.keyword(null, "line");
    arrayOfObject140[11] = Integer.valueOf(2037);
    arrayOfObject140[12] = RT.keyword(null, "file");
    arrayOfObject140[13] = "clojure/core.clj";
    const__797 = (AFn)RT.map(arrayOfObject140);
    const__798 = (Var)RT.var("clojure.core", "agent-errors");
    const__799 = Integer.valueOf(2044);
  }

  public static void __init8()
  {
    Object[] arrayOfObject1 = new Object[1];
    Object[] arrayOfObject2 = new Object[1];
    arrayOfObject2[0] = Symbol.intern(null, "a");
    arrayOfObject1[0] = RT.vector(arrayOfObject2);
    const__800 = PersistentList.create(Arrays.asList(arrayOfObject1));
    const__801 = (Keyword)RT.keyword(null, "deprecated");
    Object[] arrayOfObject3 = new Object[14];
    arrayOfObject3[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject4 = new Object[1];
    Object[] arrayOfObject5 = new Object[1];
    arrayOfObject5[0] = Symbol.intern(null, "a");
    arrayOfObject4[0] = RT.vector(arrayOfObject5);
    arrayOfObject3[1] = PersistentList.create(Arrays.asList(arrayOfObject4));
    arrayOfObject3[2] = RT.keyword(null, "deprecated");
    arrayOfObject3[3] = "1.2";
    arrayOfObject3[4] = RT.keyword(null, "column");
    arrayOfObject3[5] = Integer.valueOf(1);
    arrayOfObject3[6] = RT.keyword(null, "added");
    arrayOfObject3[7] = "1.0";
    arrayOfObject3[8] = RT.keyword(null, "doc");
    arrayOfObject3[9] = "DEPRECATED: Use 'agent-error' instead.\n  Returns a sequence of the exceptions thrown during asynchronous\n  actions of the agent.";
    arrayOfObject3[10] = RT.keyword(null, "line");
    arrayOfObject3[11] = Integer.valueOf(2044);
    arrayOfObject3[12] = RT.keyword(null, "file");
    arrayOfObject3[13] = "clojure/core.clj";
    const__802 = (AFn)RT.map(arrayOfObject3);
    const__803 = (Var)RT.var("clojure.core", "clear-agent-errors");
    const__804 = Integer.valueOf(2054);
    Object[] arrayOfObject6 = new Object[1];
    Object[] arrayOfObject7 = new Object[1];
    IObj localIObj1 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject8 = new Object[2];
    arrayOfObject8[0] = RT.keyword(null, "tag");
    arrayOfObject8[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject7[0] = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject8));
    arrayOfObject6[0] = RT.vector(arrayOfObject7);
    const__805 = PersistentList.create(Arrays.asList(arrayOfObject6));
    Object[] arrayOfObject9 = new Object[14];
    arrayOfObject9[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject10 = new Object[1];
    Object[] arrayOfObject11 = new Object[1];
    IObj localIObj2 = (IObj)Symbol.intern(null, "a");
    Object[] arrayOfObject12 = new Object[2];
    arrayOfObject12[0] = RT.keyword(null, "tag");
    arrayOfObject12[1] = Symbol.intern(null, "clojure.lang.Agent");
    arrayOfObject11[0] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject12));
    arrayOfObject10[0] = RT.vector(arrayOfObject11);
    arrayOfObject9[1] = PersistentList.create(Arrays.asList(arrayOfObject10));
    arrayOfObject9[2] = RT.keyword(null, "deprecated");
    arrayOfObject9[3] = "1.2";
    arrayOfObject9[4] = RT.keyword(null, "column");
    arrayOfObject9[5] = Integer.valueOf(1);
    arrayOfObject9[6] = RT.keyword(null, "added");
    arrayOfObject9[7] = "1.0";
    arrayOfObject9[8] = RT.keyword(null, "doc");
    arrayOfObject9[9] = "DEPRECATED: Use 'restart-agent' instead.\n  Clears any exceptions thrown during asynchronous actions of the\n  agent, allowing subsequent actions to occur.";
    arrayOfObject9[10] = RT.keyword(null, "line");
    arrayOfObject9[11] = Integer.valueOf(2054);
    arrayOfObject9[12] = RT.keyword(null, "file");
    arrayOfObject9[13] = "clojure/core.clj";
    const__806 = (AFn)RT.map(arrayOfObject9);
    const__807 = (Var)RT.var("clojure.core", "shutdown-agents");
    const__808 = Integer.valueOf(2062);
    Object[] arrayOfObject13 = new Object[1];
    arrayOfObject13[0] = RT.vector(new Object[0]);
    const__809 = PersistentList.create(Arrays.asList(arrayOfObject13));
    Object[] arrayOfObject14 = new Object[14];
    arrayOfObject14[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject15 = new Object[1];
    arrayOfObject15[0] = RT.vector(new Object[0]);
    arrayOfObject14[1] = PersistentList.create(Arrays.asList(arrayOfObject15));
    arrayOfObject14[2] = RT.keyword(null, "column");
    arrayOfObject14[3] = Integer.valueOf(1);
    arrayOfObject14[4] = RT.keyword(null, "added");
    arrayOfObject14[5] = "1.0";
    arrayOfObject14[6] = RT.keyword(null, "static");
    arrayOfObject14[7] = Boolean.TRUE;
    arrayOfObject14[8] = RT.keyword(null, "doc");
    arrayOfObject14[9] = "Initiates a shutdown of the thread pools that back the agent\n  system. Running actions will complete, but no new actions will be\n  accepted";
    arrayOfObject14[10] = RT.keyword(null, "line");
    arrayOfObject14[11] = Integer.valueOf(2062);
    arrayOfObject14[12] = RT.keyword(null, "file");
    arrayOfObject14[13] = "clojure/core.clj";
    const__810 = (AFn)RT.map(arrayOfObject14);
    const__811 = (Var)RT.var("clojure.core", "ref");
    const__812 = Integer.valueOf(2070);
    Object[] arrayOfObject16 = new Object[2];
    Object[] arrayOfObject17 = new Object[1];
    arrayOfObject17[0] = Symbol.intern(null, "x");
    arrayOfObject16[0] = RT.vector(arrayOfObject17);
    Object[] arrayOfObject18 = new Object[3];
    arrayOfObject18[0] = Symbol.intern(null, "x");
    arrayOfObject18[1] = Symbol.intern(null, "&");
    arrayOfObject18[2] = Symbol.intern(null, "options");
    arrayOfObject16[1] = RT.vector(arrayOfObject18);
    const__813 = PersistentList.create(Arrays.asList(arrayOfObject16));
    Object[] arrayOfObject19 = new Object[14];
    arrayOfObject19[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject20 = new Object[2];
    Object[] arrayOfObject21 = new Object[1];
    arrayOfObject21[0] = Symbol.intern(null, "x");
    arrayOfObject20[0] = RT.vector(arrayOfObject21);
    Object[] arrayOfObject22 = new Object[3];
    arrayOfObject22[0] = Symbol.intern(null, "x");
    arrayOfObject22[1] = Symbol.intern(null, "&");
    arrayOfObject22[2] = Symbol.intern(null, "options");
    arrayOfObject20[1] = RT.vector(arrayOfObject22);
    arrayOfObject19[1] = PersistentList.create(Arrays.asList(arrayOfObject20));
    arrayOfObject19[2] = RT.keyword(null, "column");
    arrayOfObject19[3] = Integer.valueOf(1);
    arrayOfObject19[4] = RT.keyword(null, "added");
    arrayOfObject19[5] = "1.0";
    arrayOfObject19[6] = RT.keyword(null, "static");
    arrayOfObject19[7] = Boolean.TRUE;
    arrayOfObject19[8] = RT.keyword(null, "doc");
    arrayOfObject19[9] = "Creates and returns a Ref with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  :min-history (default 0)\n  :max-history (default 10)\n\n  If metadata-map is supplied, it will become the metadata on the\n  ref. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an exception. validate-fn will be called on\n  transaction commit, when all refs have their final values.\n\n  Normally refs accumulate history dynamically as needed to deal with\n  read demands. If you know in advance you will need history you can\n  set :min-history to ensure it will be available when first needed (instead\n  of after a read fault). History is limited, and the limit can be set\n  with :max-history.";
    arrayOfObject19[10] = RT.keyword(null, "line");
    arrayOfObject19[11] = Integer.valueOf(2070);
    arrayOfObject19[12] = RT.keyword(null, "file");
    arrayOfObject19[13] = "clojure/core.clj";
    const__814 = (AFn)RT.map(arrayOfObject19);
    const__815 = (Var)RT.var("clojure.core", "deref-future");
    const__816 = Integer.valueOf(2106);
    Object[] arrayOfObject23 = new Object[2];
    Object[] arrayOfObject24 = new Object[1];
    IObj localIObj3 = (IObj)Symbol.intern(null, "fut");
    Object[] arrayOfObject25 = new Object[2];
    arrayOfObject25[0] = RT.keyword(null, "tag");
    arrayOfObject25[1] = Symbol.intern(null, "java.util.concurrent.Future");
    arrayOfObject24[0] = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject25));
    arrayOfObject23[0] = RT.vector(arrayOfObject24);
    Object[] arrayOfObject26 = new Object[3];
    IObj localIObj4 = (IObj)Symbol.intern(null, "fut");
    Object[] arrayOfObject27 = new Object[2];
    arrayOfObject27[0] = RT.keyword(null, "tag");
    arrayOfObject27[1] = Symbol.intern(null, "java.util.concurrent.Future");
    arrayOfObject26[0] = localIObj4.withMeta((IPersistentMap)RT.map(arrayOfObject27));
    arrayOfObject26[1] = Symbol.intern(null, "timeout-ms");
    arrayOfObject26[2] = Symbol.intern(null, "timeout-val");
    arrayOfObject23[1] = RT.vector(arrayOfObject26);
    const__817 = PersistentList.create(Arrays.asList(arrayOfObject23));
    Object[] arrayOfObject28 = new Object[10];
    arrayOfObject28[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject29 = new Object[2];
    Object[] arrayOfObject30 = new Object[1];
    IObj localIObj5 = (IObj)Symbol.intern(null, "fut");
    Object[] arrayOfObject31 = new Object[2];
    arrayOfObject31[0] = RT.keyword(null, "tag");
    arrayOfObject31[1] = Symbol.intern(null, "java.util.concurrent.Future");
    arrayOfObject30[0] = localIObj5.withMeta((IPersistentMap)RT.map(arrayOfObject31));
    arrayOfObject29[0] = RT.vector(arrayOfObject30);
    Object[] arrayOfObject32 = new Object[3];
    IObj localIObj6 = (IObj)Symbol.intern(null, "fut");
    Object[] arrayOfObject33 = new Object[2];
    arrayOfObject33[0] = RT.keyword(null, "tag");
    arrayOfObject33[1] = Symbol.intern(null, "java.util.concurrent.Future");
    arrayOfObject32[0] = localIObj6.withMeta((IPersistentMap)RT.map(arrayOfObject33));
    arrayOfObject32[1] = Symbol.intern(null, "timeout-ms");
    arrayOfObject32[2] = Symbol.intern(null, "timeout-val");
    arrayOfObject29[1] = RT.vector(arrayOfObject32);
    arrayOfObject28[1] = PersistentList.create(Arrays.asList(arrayOfObject29));
    arrayOfObject28[2] = RT.keyword(null, "column");
    arrayOfObject28[3] = Integer.valueOf(1);
    arrayOfObject28[4] = RT.keyword(null, "private");
    arrayOfObject28[5] = Boolean.TRUE;
    arrayOfObject28[6] = RT.keyword(null, "line");
    arrayOfObject28[7] = Integer.valueOf(2106);
    arrayOfObject28[8] = RT.keyword(null, "file");
    arrayOfObject28[9] = "clojure/core.clj";
    const__818 = (AFn)RT.map(arrayOfObject28);
    const__819 = (Var)RT.var("clojure.core", "deref");
    const__820 = Integer.valueOf(2114);
    Object[] arrayOfObject34 = new Object[2];
    Object[] arrayOfObject35 = new Object[1];
    arrayOfObject35[0] = Symbol.intern(null, "ref");
    arrayOfObject34[0] = RT.vector(arrayOfObject35);
    Object[] arrayOfObject36 = new Object[3];
    arrayOfObject36[0] = Symbol.intern(null, "ref");
    arrayOfObject36[1] = Symbol.intern(null, "timeout-ms");
    arrayOfObject36[2] = Symbol.intern(null, "timeout-val");
    arrayOfObject34[1] = RT.vector(arrayOfObject36);
    const__821 = PersistentList.create(Arrays.asList(arrayOfObject34));
    Object[] arrayOfObject37 = new Object[14];
    arrayOfObject37[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject38 = new Object[2];
    Object[] arrayOfObject39 = new Object[1];
    arrayOfObject39[0] = Symbol.intern(null, "ref");
    arrayOfObject38[0] = RT.vector(arrayOfObject39);
    Object[] arrayOfObject40 = new Object[3];
    arrayOfObject40[0] = Symbol.intern(null, "ref");
    arrayOfObject40[1] = Symbol.intern(null, "timeout-ms");
    arrayOfObject40[2] = Symbol.intern(null, "timeout-val");
    arrayOfObject38[1] = RT.vector(arrayOfObject40);
    arrayOfObject37[1] = PersistentList.create(Arrays.asList(arrayOfObject38));
    arrayOfObject37[2] = RT.keyword(null, "column");
    arrayOfObject37[3] = Integer.valueOf(1);
    arrayOfObject37[4] = RT.keyword(null, "added");
    arrayOfObject37[5] = "1.0";
    arrayOfObject37[6] = RT.keyword(null, "static");
    arrayOfObject37[7] = Boolean.TRUE;
    arrayOfObject37[8] = RT.keyword(null, "doc");
    arrayOfObject37[9] = "Also reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,\n  returns the in-transaction-value of ref, else returns the\n  most-recently-committed value of ref. When applied to a var, agent\n  or atom, returns its current state. When applied to a delay, forces\n  it if not already forced. When applied to a future, will block if\n  computation not complete. When applied to a promise, will block\n  until a value is delivered.  The variant taking a timeout can be\n  used for blocking references (futures and promises), and will return\n  timeout-val if the timeout (in milliseconds) is reached before a\n  value is available. See also - realized?.";
    arrayOfObject37[10] = RT.keyword(null, "line");
    arrayOfObject37[11] = Integer.valueOf(2114);
    arrayOfObject37[12] = RT.keyword(null, "file");
    arrayOfObject37[13] = "clojure/core.clj";
    const__822 = (AFn)RT.map(arrayOfObject37);
    const__823 = (Var)RT.var("clojure.core", "atom");
    const__824 = Integer.valueOf(2135);
    Object[] arrayOfObject41 = new Object[2];
    Object[] arrayOfObject42 = new Object[1];
    arrayOfObject42[0] = Symbol.intern(null, "x");
    arrayOfObject41[0] = RT.vector(arrayOfObject42);
    Object[] arrayOfObject43 = new Object[3];
    arrayOfObject43[0] = Symbol.intern(null, "x");
    arrayOfObject43[1] = Symbol.intern(null, "&");
    arrayOfObject43[2] = Symbol.intern(null, "options");
    arrayOfObject41[1] = RT.vector(arrayOfObject43);
    const__825 = PersistentList.create(Arrays.asList(arrayOfObject41));
    Object[] arrayOfObject44 = new Object[14];
    arrayOfObject44[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject45 = new Object[2];
    Object[] arrayOfObject46 = new Object[1];
    arrayOfObject46[0] = Symbol.intern(null, "x");
    arrayOfObject45[0] = RT.vector(arrayOfObject46);
    Object[] arrayOfObject47 = new Object[3];
    arrayOfObject47[0] = Symbol.intern(null, "x");
    arrayOfObject47[1] = Symbol.intern(null, "&");
    arrayOfObject47[2] = Symbol.intern(null, "options");
    arrayOfObject45[1] = RT.vector(arrayOfObject47);
    arrayOfObject44[1] = PersistentList.create(Arrays.asList(arrayOfObject45));
    arrayOfObject44[2] = RT.keyword(null, "column");
    arrayOfObject44[3] = Integer.valueOf(1);
    arrayOfObject44[4] = RT.keyword(null, "added");
    arrayOfObject44[5] = "1.0";
    arrayOfObject44[6] = RT.keyword(null, "static");
    arrayOfObject44[7] = Boolean.TRUE;
    arrayOfObject44[8] = RT.keyword(null, "doc");
    arrayOfObject44[9] = "Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will become the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an exception.";
    arrayOfObject44[10] = RT.keyword(null, "line");
    arrayOfObject44[11] = Integer.valueOf(2135);
    arrayOfObject44[12] = RT.keyword(null, "file");
    arrayOfObject44[13] = "clojure/core.clj";
    const__826 = (AFn)RT.map(arrayOfObject44);
    const__827 = (Var)RT.var("clojure.core", "swap!");
    const__828 = Integer.valueOf(2153);
    Object[] arrayOfObject48 = new Object[4];
    Object[] arrayOfObject49 = new Object[2];
    IObj localIObj7 = (IObj)Symbol.intern(null, "atom");
    Object[] arrayOfObject50 = new Object[2];
    arrayOfObject50[0] = RT.keyword(null, "tag");
    arrayOfObject50[1] = Symbol.intern(null, "clojure.lang.Atom");
    arrayOfObject49[0] = localIObj7.withMeta((IPersistentMap)RT.map(arrayOfObject50));
    arrayOfObject49[1] = Symbol.intern(null, "f");
    arrayOfObject48[0] = RT.vector(arrayOfObject49);
    Object[] arrayOfObject51 = new Object[3];
    IObj localIObj8 = (IObj)Symbol.intern(null, "atom");
    Object[] arrayOfObject52 = new Object[2];
    arrayOfObject52[0] = RT.keyword(null, "tag");
    arrayOfObject52[1] = Symbol.intern(null, "clojure.lang.Atom");
    arrayOfObject51[0] = localIObj8.withMeta((IPersistentMap)RT.map(arrayOfObject52));
    arrayOfObject51[1] = Symbol.intern(null, "f");
    arrayOfObject51[2] = Symbol.intern(null, "x");
    arrayOfObject48[1] = RT.vector(arrayOfObject51);
    Object[] arrayOfObject53 = new Object[4];
    IObj localIObj9 = (IObj)Symbol.intern(null, "atom");
    Object[] arrayOfObject54 = new Object[2];
    arrayOfObject54[0] = RT.keyword(null, "tag");
    arrayOfObject54[1] = Symbol.intern(null, "clojure.lang.Atom");
    arrayOfObject53[0] = localIObj9.withMeta((IPersistentMap)RT.map(arrayOfObject54));
    arrayOfObject53[1] = Symbol.intern(null, "f");
    arrayOfObject53[2] = Symbol.intern(null, "x");
    arrayOfObject53[3] = Symbol.intern(null, "y");
    arrayOfObject48[2] = RT.vector(arrayOfObject53);
    Object[] arrayOfObject55 = new Object[6];
    IObj localIObj10 = (IObj)Symbol.intern(null, "atom");
    Object[] arrayOfObject56 = new Object[2];
    arrayOfObject56[0] = RT.keyword(null, "tag");
    arrayOfObject56[1] = Symbol.intern(null, "clojure.lang.Atom");
    arrayOfObject55[0] = localIObj10.withMeta((IPersistentMap)RT.map(arrayOfObject56));
    arrayOfObject55[1] = Symbol.intern(null, "f");
    arrayOfObject55[2] = Symbol.intern(null, "x");
    arrayOfObject55[3] = Symbol.intern(null, "y");
    arrayOfObject55[4] = Symbol.intern(null, "&");
    arrayOfObject55[5] = Symbol.intern(null, "args");
    arrayOfObject48[3] = RT.vector(arrayOfObject55);
    const__829 = PersistentList.create(Arrays.asList(arrayOfObject48));
    Object[] arrayOfObject57 = new Object[14];
    arrayOfObject57[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject58 = new Object[4];
    Object[] arrayOfObject59 = new Object[2];
    IObj localIObj11 = (IObj)Symbol.intern(null, "atom");
    Object[] arrayOfObject60 = new Object[2];
    arrayOfObject60[0] = RT.keyword(null, "tag");
    arrayOfObject60[1] = Symbol.intern(null, "clojure.lang.Atom");
    arrayOfObject59[0] = localIObj11.withMeta((IPersistentMap)RT.map(arrayOfObject60));
    arrayOfObject59[1] = Symbol.intern(null, "f");
    arrayOfObject58[0] = RT.vector(arrayOfObject59);
    Object[] arrayOfObject61 = new Object[3];
    IObj localIObj12 = (IObj)Symbol.intern(null, "atom");
    Object[] arrayOfObject62 = new Object[2];
    arrayOfObject62[0] = RT.keyword(null, "tag");
    arrayOfObject62[1] = Symbol.intern(null, "clojure.lang.Atom");
    arrayOfObject61[0] = localIObj12.withMeta((IPersistentMap)RT.map(arrayOfObject62));
    arrayOfObject61[1] = Symbol.intern(null, "f");
    arrayOfObject61[2] = Symbol.intern(null, "x");
    arrayOfObject58[1] = RT.vector(arrayOfObject61);
    Object[] arrayOfObject63 = new Object[4];
    IObj localIObj13 = (IObj)Symbol.intern(null, "atom");
    Object[] arrayOfObject64 = new Object[2];
    arrayOfObject64[0] = RT.keyword(null, "tag");
    arrayOfObject64[1] = Symbol.intern(null, "clojure.lang.Atom");
    arrayOfObject63[0] = localIObj13.withMeta((IPersistentMap)RT.map(arrayOfObject64));
    arrayOfObject63[1] = Symbol.intern(null, "f");
    arrayOfObject63[2] = Symbol.intern(null, "x");
    arrayOfObject63[3] = Symbol.intern(null, "y");
    arrayOfObject58[2] = RT.vector(arrayOfObject63);
    Object[] arrayOfObject65 = new Object[6];
    IObj localIObj14 = (IObj)Symbol.intern(null, "atom");
    Object[] arrayOfObject66 = new Object[2];
    arrayOfObject66[0] = RT.keyword(null, "tag");
    arrayOfObject66[1] = Symbol.intern(null, "clojure.lang.Atom");
    arrayOfObject65[0] = localIObj14.withMeta((IPersistentMap)RT.map(arrayOfObject66));
    arrayOfObject65[1] = Symbol.intern(null, "f");
    arrayOfObject65[2] = Symbol.intern(null, "x");
    arrayOfObject65[3] = Symbol.intern(null, "y");
    arrayOfObject65[4] = Symbol.intern(null, "&");
    arrayOfObject65[5] = Symbol.intern(null, "args");
    arrayOfObject58[3] = RT.vector(arrayOfObject65);
    arrayOfObject57[1] = PersistentList.create(Arrays.asList(arrayOfObject58));
    arrayOfObject57[2] = RT.keyword(null, "column");
    arrayOfObject57[3] = Integer.valueOf(1);
    arrayOfObject57[4] = RT.keyword(null, "added");
    arrayOfObject57[5] = "1.0";
    arrayOfObject57[6] = RT.keyword(null, "static");
    arrayOfObject57[7] = Boolean.TRUE;
    arrayOfObject57[8] = RT.keyword(null, "doc");
    arrayOfObject57[9] = "Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.";
    arrayOfObject57[10] = RT.keyword(null, "line");
    arrayOfObject57[11] = Integer.valueOf(2153);
    arrayOfObject57[12] = RT.keyword(null, "file");
    arrayOfObject57[13] = "clojure/core.clj";
    const__830 = (AFn)RT.map(arrayOfObject57);
    const__831 = (Var)RT.var("clojure.core", "compare-and-set!");
    const__832 = Integer.valueOf(2165);
    Object[] arrayOfObject67 = new Object[1];
    Object[] arrayOfObject68 = new Object[3];
    IObj localIObj15 = (IObj)Symbol.intern(null, "atom");
    Object[] arrayOfObject69 = new Object[2];
    arrayOfObject69[0] = RT.keyword(null, "tag");
    arrayOfObject69[1] = Symbol.intern(null, "clojure.lang.Atom");
    arrayOfObject68[0] = localIObj15.withMeta((IPersistentMap)RT.map(arrayOfObject69));
    arrayOfObject68[1] = Symbol.intern(null, "oldval");
    arrayOfObject68[2] = Symbol.intern(null, "newval");
    arrayOfObject67[0] = RT.vector(arrayOfObject68);
    const__833 = PersistentList.create(Arrays.asList(arrayOfObject67));
    Object[] arrayOfObject70 = new Object[14];
    arrayOfObject70[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject71 = new Object[1];
    Object[] arrayOfObject72 = new Object[3];
    IObj localIObj16 = (IObj)Symbol.intern(null, "atom");
    Object[] arrayOfObject73 = new Object[2];
    arrayOfObject73[0] = RT.keyword(null, "tag");
    arrayOfObject73[1] = Symbol.intern(null, "clojure.lang.Atom");
    arrayOfObject72[0] = localIObj16.withMeta((IPersistentMap)RT.map(arrayOfObject73));
    arrayOfObject72[1] = Symbol.intern(null, "oldval");
    arrayOfObject72[2] = Symbol.intern(null, "newval");
    arrayOfObject71[0] = RT.vector(arrayOfObject72);
    arrayOfObject70[1] = PersistentList.create(Arrays.asList(arrayOfObject71));
    arrayOfObject70[2] = RT.keyword(null, "column");
    arrayOfObject70[3] = Integer.valueOf(1);
    arrayOfObject70[4] = RT.keyword(null, "added");
    arrayOfObject70[5] = "1.0";
    arrayOfObject70[6] = RT.keyword(null, "static");
    arrayOfObject70[7] = Boolean.TRUE;
    arrayOfObject70[8] = RT.keyword(null, "doc");
    arrayOfObject70[9] = "Atomically sets the value of atom to newval if and only if the\n  current value of the atom is identical to oldval. Returns true if\n  set happened, else false";
    arrayOfObject70[10] = RT.keyword(null, "line");
    arrayOfObject70[11] = Integer.valueOf(2165);
    arrayOfObject70[12] = RT.keyword(null, "file");
    arrayOfObject70[13] = "clojure/core.clj";
    const__834 = (AFn)RT.map(arrayOfObject70);
    const__835 = (Var)RT.var("clojure.core", "reset!");
    const__836 = Integer.valueOf(2173);
    Object[] arrayOfObject74 = new Object[1];
    Object[] arrayOfObject75 = new Object[2];
    IObj localIObj17 = (IObj)Symbol.intern(null, "atom");
    Object[] arrayOfObject76 = new Object[2];
    arrayOfObject76[0] = RT.keyword(null, "tag");
    arrayOfObject76[1] = Symbol.intern(null, "clojure.lang.Atom");
    arrayOfObject75[0] = localIObj17.withMeta((IPersistentMap)RT.map(arrayOfObject76));
    arrayOfObject75[1] = Symbol.intern(null, "newval");
    arrayOfObject74[0] = RT.vector(arrayOfObject75);
    const__837 = PersistentList.create(Arrays.asList(arrayOfObject74));
    Object[] arrayOfObject77 = new Object[14];
    arrayOfObject77[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject78 = new Object[1];
    Object[] arrayOfObject79 = new Object[2];
    IObj localIObj18 = (IObj)Symbol.intern(null, "atom");
    Object[] arrayOfObject80 = new Object[2];
    arrayOfObject80[0] = RT.keyword(null, "tag");
    arrayOfObject80[1] = Symbol.intern(null, "clojure.lang.Atom");
    arrayOfObject79[0] = localIObj18.withMeta((IPersistentMap)RT.map(arrayOfObject80));
    arrayOfObject79[1] = Symbol.intern(null, "newval");
    arrayOfObject78[0] = RT.vector(arrayOfObject79);
    arrayOfObject77[1] = PersistentList.create(Arrays.asList(arrayOfObject78));
    arrayOfObject77[2] = RT.keyword(null, "column");
    arrayOfObject77[3] = Integer.valueOf(1);
    arrayOfObject77[4] = RT.keyword(null, "added");
    arrayOfObject77[5] = "1.0";
    arrayOfObject77[6] = RT.keyword(null, "static");
    arrayOfObject77[7] = Boolean.TRUE;
    arrayOfObject77[8] = RT.keyword(null, "doc");
    arrayOfObject77[9] = "Sets the value of atom to newval without regard for the\n  current value. Returns newval.";
    arrayOfObject77[10] = RT.keyword(null, "line");
    arrayOfObject77[11] = Integer.valueOf(2173);
    arrayOfObject77[12] = RT.keyword(null, "file");
    arrayOfObject77[13] = "clojure/core.clj";
    const__838 = (AFn)RT.map(arrayOfObject77);
    const__839 = (Var)RT.var("clojure.core", "set-validator!");
    const__840 = Integer.valueOf(2180);
    Object[] arrayOfObject81 = new Object[1];
    Object[] arrayOfObject82 = new Object[2];
    IObj localIObj19 = (IObj)Symbol.intern(null, "iref");
    Object[] arrayOfObject83 = new Object[2];
    arrayOfObject83[0] = RT.keyword(null, "tag");
    arrayOfObject83[1] = Symbol.intern(null, "clojure.lang.IRef");
    arrayOfObject82[0] = localIObj19.withMeta((IPersistentMap)RT.map(arrayOfObject83));
    arrayOfObject82[1] = Symbol.intern(null, "validator-fn");
    arrayOfObject81[0] = RT.vector(arrayOfObject82);
    const__841 = PersistentList.create(Arrays.asList(arrayOfObject81));
    Object[] arrayOfObject84 = new Object[14];
    arrayOfObject84[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject85 = new Object[1];
    Object[] arrayOfObject86 = new Object[2];
    IObj localIObj20 = (IObj)Symbol.intern(null, "iref");
    Object[] arrayOfObject87 = new Object[2];
    arrayOfObject87[0] = RT.keyword(null, "tag");
    arrayOfObject87[1] = Symbol.intern(null, "clojure.lang.IRef");
    arrayOfObject86[0] = localIObj20.withMeta((IPersistentMap)RT.map(arrayOfObject87));
    arrayOfObject86[1] = Symbol.intern(null, "validator-fn");
    arrayOfObject85[0] = RT.vector(arrayOfObject86);
    arrayOfObject84[1] = PersistentList.create(Arrays.asList(arrayOfObject85));
    arrayOfObject84[2] = RT.keyword(null, "column");
    arrayOfObject84[3] = Integer.valueOf(1);
    arrayOfObject84[4] = RT.keyword(null, "added");
    arrayOfObject84[5] = "1.0";
    arrayOfObject84[6] = RT.keyword(null, "static");
    arrayOfObject84[7] = Boolean.TRUE;
    arrayOfObject84[8] = RT.keyword(null, "doc");
    arrayOfObject84[9] = "Sets the validator-fn for a var/ref/agent/atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an exception. If the current state (root\n  value if var) is not acceptable to the new validator, an exception\n  will be thrown and the validator will not be changed.";
    arrayOfObject84[10] = RT.keyword(null, "line");
    arrayOfObject84[11] = Integer.valueOf(2180);
    arrayOfObject84[12] = RT.keyword(null, "file");
    arrayOfObject84[13] = "clojure/core.clj";
    const__842 = (AFn)RT.map(arrayOfObject84);
    const__843 = (Var)RT.var("clojure.core", "get-validator");
    const__844 = Integer.valueOf(2191);
    Object[] arrayOfObject88 = new Object[1];
    Object[] arrayOfObject89 = new Object[1];
    IObj localIObj21 = (IObj)Symbol.intern(null, "iref");
    Object[] arrayOfObject90 = new Object[2];
    arrayOfObject90[0] = RT.keyword(null, "tag");
    arrayOfObject90[1] = Symbol.intern(null, "clojure.lang.IRef");
    arrayOfObject89[0] = localIObj21.withMeta((IPersistentMap)RT.map(arrayOfObject90));
    arrayOfObject88[0] = RT.vector(arrayOfObject89);
    const__845 = PersistentList.create(Arrays.asList(arrayOfObject88));
    Object[] arrayOfObject91 = new Object[14];
    arrayOfObject91[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject92 = new Object[1];
    Object[] arrayOfObject93 = new Object[1];
    IObj localIObj22 = (IObj)Symbol.intern(null, "iref");
    Object[] arrayOfObject94 = new Object[2];
    arrayOfObject94[0] = RT.keyword(null, "tag");
    arrayOfObject94[1] = Symbol.intern(null, "clojure.lang.IRef");
    arrayOfObject93[0] = localIObj22.withMeta((IPersistentMap)RT.map(arrayOfObject94));
    arrayOfObject92[0] = RT.vector(arrayOfObject93);
    arrayOfObject91[1] = PersistentList.create(Arrays.asList(arrayOfObject92));
    arrayOfObject91[2] = RT.keyword(null, "column");
    arrayOfObject91[3] = Integer.valueOf(1);
    arrayOfObject91[4] = RT.keyword(null, "added");
    arrayOfObject91[5] = "1.0";
    arrayOfObject91[6] = RT.keyword(null, "static");
    arrayOfObject91[7] = Boolean.TRUE;
    arrayOfObject91[8] = RT.keyword(null, "doc");
    arrayOfObject91[9] = "Gets the validator-fn for a var/ref/agent/atom.";
    arrayOfObject91[10] = RT.keyword(null, "line");
    arrayOfObject91[11] = Integer.valueOf(2191);
    arrayOfObject91[12] = RT.keyword(null, "file");
    arrayOfObject91[13] = "clojure/core.clj";
    const__846 = (AFn)RT.map(arrayOfObject91);
    const__847 = (Var)RT.var("clojure.core", "alter-meta!");
    const__848 = Integer.valueOf(2197);
    Object[] arrayOfObject95 = new Object[1];
    Object[] arrayOfObject96 = new Object[4];
    IObj localIObj23 = (IObj)Symbol.intern(null, "iref");
    Object[] arrayOfObject97 = new Object[2];
    arrayOfObject97[0] = RT.keyword(null, "tag");
    arrayOfObject97[1] = Symbol.intern(null, "clojure.lang.IReference");
    arrayOfObject96[0] = localIObj23.withMeta((IPersistentMap)RT.map(arrayOfObject97));
    arrayOfObject96[1] = Symbol.intern(null, "f");
    arrayOfObject96[2] = Symbol.intern(null, "&");
    arrayOfObject96[3] = Symbol.intern(null, "args");
    arrayOfObject95[0] = RT.vector(arrayOfObject96);
    const__849 = PersistentList.create(Arrays.asList(arrayOfObject95));
    Object[] arrayOfObject98 = new Object[14];
    arrayOfObject98[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject99 = new Object[1];
    Object[] arrayOfObject100 = new Object[4];
    IObj localIObj24 = (IObj)Symbol.intern(null, "iref");
    Object[] arrayOfObject101 = new Object[2];
    arrayOfObject101[0] = RT.keyword(null, "tag");
    arrayOfObject101[1] = Symbol.intern(null, "clojure.lang.IReference");
    arrayOfObject100[0] = localIObj24.withMeta((IPersistentMap)RT.map(arrayOfObject101));
    arrayOfObject100[1] = Symbol.intern(null, "f");
    arrayOfObject100[2] = Symbol.intern(null, "&");
    arrayOfObject100[3] = Symbol.intern(null, "args");
    arrayOfObject99[0] = RT.vector(arrayOfObject100);
    arrayOfObject98[1] = PersistentList.create(Arrays.asList(arrayOfObject99));
    arrayOfObject98[2] = RT.keyword(null, "column");
    arrayOfObject98[3] = Integer.valueOf(1);
    arrayOfObject98[4] = RT.keyword(null, "added");
    arrayOfObject98[5] = "1.0";
    arrayOfObject98[6] = RT.keyword(null, "static");
    arrayOfObject98[7] = Boolean.TRUE;
    arrayOfObject98[8] = RT.keyword(null, "doc");
    arrayOfObject98[9] = "Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects";
    arrayOfObject98[10] = RT.keyword(null, "line");
    arrayOfObject98[11] = Integer.valueOf(2197);
    arrayOfObject98[12] = RT.keyword(null, "file");
    arrayOfObject98[13] = "clojure/core.clj";
    const__850 = (AFn)RT.map(arrayOfObject98);
    const__851 = (Var)RT.var("clojure.core", "reset-meta!");
    const__852 = Integer.valueOf(2207);
    Object[] arrayOfObject102 = new Object[1];
    Object[] arrayOfObject103 = new Object[2];
    IObj localIObj25 = (IObj)Symbol.intern(null, "iref");
    Object[] arrayOfObject104 = new Object[2];
    arrayOfObject104[0] = RT.keyword(null, "tag");
    arrayOfObject104[1] = Symbol.intern(null, "clojure.lang.IReference");
    arrayOfObject103[0] = localIObj25.withMeta((IPersistentMap)RT.map(arrayOfObject104));
    arrayOfObject103[1] = Symbol.intern(null, "metadata-map");
    arrayOfObject102[0] = RT.vector(arrayOfObject103);
    const__853 = PersistentList.create(Arrays.asList(arrayOfObject102));
    Object[] arrayOfObject105 = new Object[14];
    arrayOfObject105[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject106 = new Object[1];
    Object[] arrayOfObject107 = new Object[2];
    IObj localIObj26 = (IObj)Symbol.intern(null, "iref");
    Object[] arrayOfObject108 = new Object[2];
    arrayOfObject108[0] = RT.keyword(null, "tag");
    arrayOfObject108[1] = Symbol.intern(null, "clojure.lang.IReference");
    arrayOfObject107[0] = localIObj26.withMeta((IPersistentMap)RT.map(arrayOfObject108));
    arrayOfObject107[1] = Symbol.intern(null, "metadata-map");
    arrayOfObject106[0] = RT.vector(arrayOfObject107);
    arrayOfObject105[1] = PersistentList.create(Arrays.asList(arrayOfObject106));
    arrayOfObject105[2] = RT.keyword(null, "column");
    arrayOfObject105[3] = Integer.valueOf(1);
    arrayOfObject105[4] = RT.keyword(null, "added");
    arrayOfObject105[5] = "1.0";
    arrayOfObject105[6] = RT.keyword(null, "static");
    arrayOfObject105[7] = Boolean.TRUE;
    arrayOfObject105[8] = RT.keyword(null, "doc");
    arrayOfObject105[9] = "Atomically resets the metadata for a namespace/var/ref/agent/atom";
    arrayOfObject105[10] = RT.keyword(null, "line");
    arrayOfObject105[11] = Integer.valueOf(2207);
    arrayOfObject105[12] = RT.keyword(null, "file");
    arrayOfObject105[13] = "clojure/core.clj";
    const__854 = (AFn)RT.map(arrayOfObject105);
    const__855 = (Var)RT.var("clojure.core", "commute");
    const__856 = Integer.valueOf(2213);
    Object[] arrayOfObject109 = new Object[1];
    Object[] arrayOfObject110 = new Object[4];
    IObj localIObj27 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject111 = new Object[2];
    arrayOfObject111[0] = RT.keyword(null, "tag");
    arrayOfObject111[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject110[0] = localIObj27.withMeta((IPersistentMap)RT.map(arrayOfObject111));
    arrayOfObject110[1] = Symbol.intern(null, "fun");
    arrayOfObject110[2] = Symbol.intern(null, "&");
    arrayOfObject110[3] = Symbol.intern(null, "args");
    arrayOfObject109[0] = RT.vector(arrayOfObject110);
    const__857 = PersistentList.create(Arrays.asList(arrayOfObject109));
    Object[] arrayOfObject112 = new Object[14];
    arrayOfObject112[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject113 = new Object[1];
    Object[] arrayOfObject114 = new Object[4];
    IObj localIObj28 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject115 = new Object[2];
    arrayOfObject115[0] = RT.keyword(null, "tag");
    arrayOfObject115[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject114[0] = localIObj28.withMeta((IPersistentMap)RT.map(arrayOfObject115));
    arrayOfObject114[1] = Symbol.intern(null, "fun");
    arrayOfObject114[2] = Symbol.intern(null, "&");
    arrayOfObject114[3] = Symbol.intern(null, "args");
    arrayOfObject113[0] = RT.vector(arrayOfObject114);
    arrayOfObject112[1] = PersistentList.create(Arrays.asList(arrayOfObject113));
    arrayOfObject112[2] = RT.keyword(null, "column");
    arrayOfObject112[3] = Integer.valueOf(1);
    arrayOfObject112[4] = RT.keyword(null, "added");
    arrayOfObject112[5] = "1.0";
    arrayOfObject112[6] = RT.keyword(null, "static");
    arrayOfObject112[7] = Boolean.TRUE;
    arrayOfObject112[8] = RT.keyword(null, "doc");
    arrayOfObject112[9] = "Must be called in a transaction. Sets the in-transaction-value of\n  ref to:\n\n  (apply fun in-transaction-value-of-ref args)\n\n  and returns the in-transaction-value of ref.\n\n  At the commit point of the transaction, sets the value of ref to be:\n\n  (apply fun most-recently-committed-value-of-ref args)\n\n  Thus fun should be commutative, or, failing that, you must accept\n  last-one-in-wins behavior.  commute allows for more concurrency than\n  ref-set.";
    arrayOfObject112[10] = RT.keyword(null, "line");
    arrayOfObject112[11] = Integer.valueOf(2213);
    arrayOfObject112[12] = RT.keyword(null, "file");
    arrayOfObject112[13] = "clojure/core.clj";
    const__858 = (AFn)RT.map(arrayOfObject112);
    const__859 = (Var)RT.var("clojure.core", "alter");
    const__860 = Integer.valueOf(2234);
    Object[] arrayOfObject116 = new Object[1];
    Object[] arrayOfObject117 = new Object[4];
    IObj localIObj29 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject118 = new Object[2];
    arrayOfObject118[0] = RT.keyword(null, "tag");
    arrayOfObject118[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject117[0] = localIObj29.withMeta((IPersistentMap)RT.map(arrayOfObject118));
    arrayOfObject117[1] = Symbol.intern(null, "fun");
    arrayOfObject117[2] = Symbol.intern(null, "&");
    arrayOfObject117[3] = Symbol.intern(null, "args");
    arrayOfObject116[0] = RT.vector(arrayOfObject117);
    const__861 = PersistentList.create(Arrays.asList(arrayOfObject116));
    Object[] arrayOfObject119 = new Object[14];
    arrayOfObject119[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject120 = new Object[1];
    Object[] arrayOfObject121 = new Object[4];
    IObj localIObj30 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject122 = new Object[2];
    arrayOfObject122[0] = RT.keyword(null, "tag");
    arrayOfObject122[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject121[0] = localIObj30.withMeta((IPersistentMap)RT.map(arrayOfObject122));
    arrayOfObject121[1] = Symbol.intern(null, "fun");
    arrayOfObject121[2] = Symbol.intern(null, "&");
    arrayOfObject121[3] = Symbol.intern(null, "args");
    arrayOfObject120[0] = RT.vector(arrayOfObject121);
    arrayOfObject119[1] = PersistentList.create(Arrays.asList(arrayOfObject120));
    arrayOfObject119[2] = RT.keyword(null, "column");
    arrayOfObject119[3] = Integer.valueOf(1);
    arrayOfObject119[4] = RT.keyword(null, "added");
    arrayOfObject119[5] = "1.0";
    arrayOfObject119[6] = RT.keyword(null, "static");
    arrayOfObject119[7] = Boolean.TRUE;
    arrayOfObject119[8] = RT.keyword(null, "doc");
    arrayOfObject119[9] = "Must be called in a transaction. Sets the in-transaction-value of\n  ref to:\n\n  (apply fun in-transaction-value-of-ref args)\n\n  and returns the in-transaction-value of ref.";
    arrayOfObject119[10] = RT.keyword(null, "line");
    arrayOfObject119[11] = Integer.valueOf(2234);
    arrayOfObject119[12] = RT.keyword(null, "file");
    arrayOfObject119[13] = "clojure/core.clj";
    const__862 = (AFn)RT.map(arrayOfObject119);
    const__863 = (Var)RT.var("clojure.core", "ref-set");
    const__864 = Integer.valueOf(2246);
    Object[] arrayOfObject123 = new Object[1];
    Object[] arrayOfObject124 = new Object[2];
    IObj localIObj31 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject125 = new Object[2];
    arrayOfObject125[0] = RT.keyword(null, "tag");
    arrayOfObject125[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject124[0] = localIObj31.withMeta((IPersistentMap)RT.map(arrayOfObject125));
    arrayOfObject124[1] = Symbol.intern(null, "val");
    arrayOfObject123[0] = RT.vector(arrayOfObject124);
    const__865 = PersistentList.create(Arrays.asList(arrayOfObject123));
    Object[] arrayOfObject126 = new Object[14];
    arrayOfObject126[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject127 = new Object[1];
    Object[] arrayOfObject128 = new Object[2];
    IObj localIObj32 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject129 = new Object[2];
    arrayOfObject129[0] = RT.keyword(null, "tag");
    arrayOfObject129[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject128[0] = localIObj32.withMeta((IPersistentMap)RT.map(arrayOfObject129));
    arrayOfObject128[1] = Symbol.intern(null, "val");
    arrayOfObject127[0] = RT.vector(arrayOfObject128);
    arrayOfObject126[1] = PersistentList.create(Arrays.asList(arrayOfObject127));
    arrayOfObject126[2] = RT.keyword(null, "column");
    arrayOfObject126[3] = Integer.valueOf(1);
    arrayOfObject126[4] = RT.keyword(null, "added");
    arrayOfObject126[5] = "1.0";
    arrayOfObject126[6] = RT.keyword(null, "static");
    arrayOfObject126[7] = Boolean.TRUE;
    arrayOfObject126[8] = RT.keyword(null, "doc");
    arrayOfObject126[9] = "Must be called in a transaction. Sets the value of ref.\n  Returns val.";
    arrayOfObject126[10] = RT.keyword(null, "line");
    arrayOfObject126[11] = Integer.valueOf(2246);
    arrayOfObject126[12] = RT.keyword(null, "file");
    arrayOfObject126[13] = "clojure/core.clj";
    const__866 = (AFn)RT.map(arrayOfObject126);
    const__867 = (Var)RT.var("clojure.core", "ref-history-count");
    const__868 = Integer.valueOf(2254);
    Object[] arrayOfObject130 = new Object[1];
    Object[] arrayOfObject131 = new Object[1];
    IObj localIObj33 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject132 = new Object[2];
    arrayOfObject132[0] = RT.keyword(null, "tag");
    arrayOfObject132[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject131[0] = localIObj33.withMeta((IPersistentMap)RT.map(arrayOfObject132));
    arrayOfObject130[0] = RT.vector(arrayOfObject131);
    const__869 = PersistentList.create(Arrays.asList(arrayOfObject130));
    Object[] arrayOfObject133 = new Object[14];
    arrayOfObject133[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject134 = new Object[1];
    Object[] arrayOfObject135 = new Object[1];
    IObj localIObj34 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject136 = new Object[2];
    arrayOfObject136[0] = RT.keyword(null, "tag");
    arrayOfObject136[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject135[0] = localIObj34.withMeta((IPersistentMap)RT.map(arrayOfObject136));
    arrayOfObject134[0] = RT.vector(arrayOfObject135);
    arrayOfObject133[1] = PersistentList.create(Arrays.asList(arrayOfObject134));
    arrayOfObject133[2] = RT.keyword(null, "column");
    arrayOfObject133[3] = Integer.valueOf(1);
    arrayOfObject133[4] = RT.keyword(null, "added");
    arrayOfObject133[5] = "1.1";
    arrayOfObject133[6] = RT.keyword(null, "static");
    arrayOfObject133[7] = Boolean.TRUE;
    arrayOfObject133[8] = RT.keyword(null, "doc");
    arrayOfObject133[9] = "Returns the history count of a ref";
    arrayOfObject133[10] = RT.keyword(null, "line");
    arrayOfObject133[11] = Integer.valueOf(2254);
    arrayOfObject133[12] = RT.keyword(null, "file");
    arrayOfObject133[13] = "clojure/core.clj";
    const__870 = (AFn)RT.map(arrayOfObject133);
    const__871 = (Var)RT.var("clojure.core", "ref-min-history");
    const__872 = Integer.valueOf(2261);
    Object[] arrayOfObject137 = new Object[2];
    Object[] arrayOfObject138 = new Object[1];
    IObj localIObj35 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject139 = new Object[2];
    arrayOfObject139[0] = RT.keyword(null, "tag");
    arrayOfObject139[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject138[0] = localIObj35.withMeta((IPersistentMap)RT.map(arrayOfObject139));
    arrayOfObject137[0] = RT.vector(arrayOfObject138);
    Object[] arrayOfObject140 = new Object[2];
    IObj localIObj36 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject141 = new Object[2];
    arrayOfObject141[0] = RT.keyword(null, "tag");
    arrayOfObject141[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject140[0] = localIObj36.withMeta((IPersistentMap)RT.map(arrayOfObject141));
    arrayOfObject140[1] = Symbol.intern(null, "n");
    arrayOfObject137[1] = RT.vector(arrayOfObject140);
    const__873 = PersistentList.create(Arrays.asList(arrayOfObject137));
    Object[] arrayOfObject142 = new Object[14];
    arrayOfObject142[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject143 = new Object[2];
    Object[] arrayOfObject144 = new Object[1];
    IObj localIObj37 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject145 = new Object[2];
    arrayOfObject145[0] = RT.keyword(null, "tag");
    arrayOfObject145[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject144[0] = localIObj37.withMeta((IPersistentMap)RT.map(arrayOfObject145));
    arrayOfObject143[0] = RT.vector(arrayOfObject144);
    Object[] arrayOfObject146 = new Object[2];
    IObj localIObj38 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject147 = new Object[2];
    arrayOfObject147[0] = RT.keyword(null, "tag");
    arrayOfObject147[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject146[0] = localIObj38.withMeta((IPersistentMap)RT.map(arrayOfObject147));
    arrayOfObject146[1] = Symbol.intern(null, "n");
    arrayOfObject143[1] = RT.vector(arrayOfObject146);
    arrayOfObject142[1] = PersistentList.create(Arrays.asList(arrayOfObject143));
    arrayOfObject142[2] = RT.keyword(null, "column");
    arrayOfObject142[3] = Integer.valueOf(1);
    arrayOfObject142[4] = RT.keyword(null, "added");
    arrayOfObject142[5] = "1.1";
    arrayOfObject142[6] = RT.keyword(null, "static");
    arrayOfObject142[7] = Boolean.TRUE;
    arrayOfObject142[8] = RT.keyword(null, "doc");
    arrayOfObject142[9] = "Gets the min-history of a ref, or sets it and returns the ref";
    arrayOfObject142[10] = RT.keyword(null, "line");
    arrayOfObject142[11] = Integer.valueOf(2261);
    arrayOfObject142[12] = RT.keyword(null, "file");
    arrayOfObject142[13] = "clojure/core.clj";
    const__874 = (AFn)RT.map(arrayOfObject142);
    const__875 = (Var)RT.var("clojure.core", "ref-max-history");
    const__876 = Integer.valueOf(2270);
    Object[] arrayOfObject148 = new Object[2];
    Object[] arrayOfObject149 = new Object[1];
    IObj localIObj39 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject150 = new Object[2];
    arrayOfObject150[0] = RT.keyword(null, "tag");
    arrayOfObject150[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject149[0] = localIObj39.withMeta((IPersistentMap)RT.map(arrayOfObject150));
    arrayOfObject148[0] = RT.vector(arrayOfObject149);
    Object[] arrayOfObject151 = new Object[2];
    IObj localIObj40 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject152 = new Object[2];
    arrayOfObject152[0] = RT.keyword(null, "tag");
    arrayOfObject152[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject151[0] = localIObj40.withMeta((IPersistentMap)RT.map(arrayOfObject152));
    arrayOfObject151[1] = Symbol.intern(null, "n");
    arrayOfObject148[1] = RT.vector(arrayOfObject151);
    const__877 = PersistentList.create(Arrays.asList(arrayOfObject148));
    Object[] arrayOfObject153 = new Object[14];
    arrayOfObject153[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject154 = new Object[2];
    Object[] arrayOfObject155 = new Object[1];
    IObj localIObj41 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject156 = new Object[2];
    arrayOfObject156[0] = RT.keyword(null, "tag");
    arrayOfObject156[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject155[0] = localIObj41.withMeta((IPersistentMap)RT.map(arrayOfObject156));
    arrayOfObject154[0] = RT.vector(arrayOfObject155);
    Object[] arrayOfObject157 = new Object[2];
    IObj localIObj42 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject158 = new Object[2];
    arrayOfObject158[0] = RT.keyword(null, "tag");
    arrayOfObject158[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject157[0] = localIObj42.withMeta((IPersistentMap)RT.map(arrayOfObject158));
    arrayOfObject157[1] = Symbol.intern(null, "n");
    arrayOfObject154[1] = RT.vector(arrayOfObject157);
    arrayOfObject153[1] = PersistentList.create(Arrays.asList(arrayOfObject154));
    arrayOfObject153[2] = RT.keyword(null, "column");
    arrayOfObject153[3] = Integer.valueOf(1);
    arrayOfObject153[4] = RT.keyword(null, "added");
    arrayOfObject153[5] = "1.1";
    arrayOfObject153[6] = RT.keyword(null, "static");
    arrayOfObject153[7] = Boolean.TRUE;
    arrayOfObject153[8] = RT.keyword(null, "doc");
    arrayOfObject153[9] = "Gets the max-history of a ref, or sets it and returns the ref";
    arrayOfObject153[10] = RT.keyword(null, "line");
    arrayOfObject153[11] = Integer.valueOf(2270);
    arrayOfObject153[12] = RT.keyword(null, "file");
    arrayOfObject153[13] = "clojure/core.clj";
    const__878 = (AFn)RT.map(arrayOfObject153);
    const__879 = (Var)RT.var("clojure.core", "ensure");
    const__880 = Integer.valueOf(2279);
    Object[] arrayOfObject159 = new Object[1];
    Object[] arrayOfObject160 = new Object[1];
    IObj localIObj43 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject161 = new Object[2];
    arrayOfObject161[0] = RT.keyword(null, "tag");
    arrayOfObject161[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject160[0] = localIObj43.withMeta((IPersistentMap)RT.map(arrayOfObject161));
    arrayOfObject159[0] = RT.vector(arrayOfObject160);
    const__881 = PersistentList.create(Arrays.asList(arrayOfObject159));
    Object[] arrayOfObject162 = new Object[14];
    arrayOfObject162[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject163 = new Object[1];
    Object[] arrayOfObject164 = new Object[1];
    IObj localIObj44 = (IObj)Symbol.intern(null, "ref");
    Object[] arrayOfObject165 = new Object[2];
    arrayOfObject165[0] = RT.keyword(null, "tag");
    arrayOfObject165[1] = Symbol.intern(null, "clojure.lang.Ref");
    arrayOfObject164[0] = localIObj44.withMeta((IPersistentMap)RT.map(arrayOfObject165));
    arrayOfObject163[0] = RT.vector(arrayOfObject164);
    arrayOfObject162[1] = PersistentList.create(Arrays.asList(arrayOfObject163));
    arrayOfObject162[2] = RT.keyword(null, "column");
    arrayOfObject162[3] = Integer.valueOf(1);
    arrayOfObject162[4] = RT.keyword(null, "added");
    arrayOfObject162[5] = "1.0";
    arrayOfObject162[6] = RT.keyword(null, "static");
    arrayOfObject162[7] = Boolean.TRUE;
    arrayOfObject162[8] = RT.keyword(null, "doc");
    arrayOfObject162[9] = "Must be called in a transaction. Protects the ref from modification\n  by other transactions.  Returns the in-transaction-value of\n  ref. Allows for more concurrency than (ref-set ref @ref)";
    arrayOfObject162[10] = RT.keyword(null, "line");
    arrayOfObject162[11] = Integer.valueOf(2279);
    arrayOfObject162[12] = RT.keyword(null, "file");
    arrayOfObject162[13] = "clojure/core.clj";
    const__882 = (AFn)RT.map(arrayOfObject162);
    const__883 = (Var)RT.var("clojure.core", "sync");
    const__884 = Integer.valueOf(2289);
    Object[] arrayOfObject166 = new Object[1];
    Object[] arrayOfObject167 = new Object[3];
    arrayOfObject167[0] = Symbol.intern(null, "flags-ignored-for-now");
    arrayOfObject167[1] = Symbol.intern(null, "&");
    arrayOfObject167[2] = Symbol.intern(null, "body");
    arrayOfObject166[0] = RT.vector(arrayOfObject167);
    const__885 = PersistentList.create(Arrays.asList(arrayOfObject166));
    Object[] arrayOfObject168 = new Object[12];
    arrayOfObject168[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject169 = new Object[1];
    Object[] arrayOfObject170 = new Object[3];
    arrayOfObject170[0] = Symbol.intern(null, "flags-ignored-for-now");
    arrayOfObject170[1] = Symbol.intern(null, "&");
    arrayOfObject170[2] = Symbol.intern(null, "body");
    arrayOfObject169[0] = RT.vector(arrayOfObject170);
    arrayOfObject168[1] = PersistentList.create(Arrays.asList(arrayOfObject169));
    arrayOfObject168[2] = RT.keyword(null, "column");
    arrayOfObject168[3] = Integer.valueOf(1);
    arrayOfObject168[4] = RT.keyword(null, "added");
    arrayOfObject168[5] = "1.0";
    arrayOfObject168[6] = RT.keyword(null, "doc");
    arrayOfObject168[7] = "transaction-flags => TBD, pass nil for now\n\n  Runs the exprs (in an implicit do) in a transaction that encompasses\n  exprs and any nested calls.  Starts a transaction if none is already\n  running on this thread. Any uncaught exception will abort the\n  transaction and flow out of sync. The exprs may be run more than\n  once, but any effects on Refs will be atomic.";
    arrayOfObject168[8] = RT.keyword(null, "line");
    arrayOfObject168[9] = Integer.valueOf(2289);
    arrayOfObject168[10] = RT.keyword(null, "file");
    arrayOfObject168[11] = "clojure/core.clj";
    const__886 = (AFn)RT.map(arrayOfObject168);
    const__887 = (Var)RT.var("clojure.core", "io!");
    const__888 = Integer.valueOf(2303);
    Object[] arrayOfObject171 = new Object[1];
    Object[] arrayOfObject172 = new Object[2];
    arrayOfObject172[0] = Symbol.intern(null, "&");
    arrayOfObject172[1] = Symbol.intern(null, "body");
    arrayOfObject171[0] = RT.vector(arrayOfObject172);
    const__889 = PersistentList.create(Arrays.asList(arrayOfObject171));
    Object[] arrayOfObject173 = new Object[12];
    arrayOfObject173[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject174 = new Object[1];
    Object[] arrayOfObject175 = new Object[2];
    arrayOfObject175[0] = Symbol.intern(null, "&");
    arrayOfObject175[1] = Symbol.intern(null, "body");
    arrayOfObject174[0] = RT.vector(arrayOfObject175);
    arrayOfObject173[1] = PersistentList.create(Arrays.asList(arrayOfObject174));
    arrayOfObject173[2] = RT.keyword(null, "column");
    arrayOfObject173[3] = Integer.valueOf(1);
    arrayOfObject173[4] = RT.keyword(null, "added");
    arrayOfObject173[5] = "1.0";
    arrayOfObject173[6] = RT.keyword(null, "doc");
    arrayOfObject173[7] = "If an io! block occurs in a transaction, throws an\n  IllegalStateException, else runs body in an implicit do. If the\n  first expression in body is a literal string, will use that as the\n  exception message.";
    arrayOfObject173[8] = RT.keyword(null, "line");
    arrayOfObject173[9] = Integer.valueOf(2303);
    arrayOfObject173[10] = RT.keyword(null, "file");
    arrayOfObject173[11] = "clojure/core.clj";
    const__890 = (AFn)RT.map(arrayOfObject173);
    const__891 = (Var)RT.var("clojure.core", "comp");
    const__892 = Integer.valueOf(2319);
    Object[] arrayOfObject176 = new Object[5];
    arrayOfObject176[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject177 = new Object[1];
    arrayOfObject177[0] = Symbol.intern(null, "f");
    arrayOfObject176[1] = RT.vector(arrayOfObject177);
    Object[] arrayOfObject178 = new Object[2];
    arrayOfObject178[0] = Symbol.intern(null, "f");
    arrayOfObject178[1] = Symbol.intern(null, "g");
    arrayOfObject176[2] = RT.vector(arrayOfObject178);
    Object[] arrayOfObject179 = new Object[3];
    arrayOfObject179[0] = Symbol.intern(null, "f");
    arrayOfObject179[1] = Symbol.intern(null, "g");
    arrayOfObject179[2] = Symbol.intern(null, "h");
    arrayOfObject176[3] = RT.vector(arrayOfObject179);
    Object[] arrayOfObject180 = new Object[5];
    arrayOfObject180[0] = Symbol.intern(null, "f1");
    arrayOfObject180[1] = Symbol.intern(null, "f2");
    arrayOfObject180[2] = Symbol.intern(null, "f3");
    arrayOfObject180[3] = Symbol.intern(null, "&");
    arrayOfObject180[4] = Symbol.intern(null, "fs");
    arrayOfObject176[4] = RT.vector(arrayOfObject180);
    const__893 = PersistentList.create(Arrays.asList(arrayOfObject176));
    Object[] arrayOfObject181 = new Object[14];
    arrayOfObject181[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject182 = new Object[5];
    arrayOfObject182[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject183 = new Object[1];
    arrayOfObject183[0] = Symbol.intern(null, "f");
    arrayOfObject182[1] = RT.vector(arrayOfObject183);
    Object[] arrayOfObject184 = new Object[2];
    arrayOfObject184[0] = Symbol.intern(null, "f");
    arrayOfObject184[1] = Symbol.intern(null, "g");
    arrayOfObject182[2] = RT.vector(arrayOfObject184);
    Object[] arrayOfObject185 = new Object[3];
    arrayOfObject185[0] = Symbol.intern(null, "f");
    arrayOfObject185[1] = Symbol.intern(null, "g");
    arrayOfObject185[2] = Symbol.intern(null, "h");
    arrayOfObject182[3] = RT.vector(arrayOfObject185);
    Object[] arrayOfObject186 = new Object[5];
    arrayOfObject186[0] = Symbol.intern(null, "f1");
    arrayOfObject186[1] = Symbol.intern(null, "f2");
    arrayOfObject186[2] = Symbol.intern(null, "f3");
    arrayOfObject186[3] = Symbol.intern(null, "&");
    arrayOfObject186[4] = Symbol.intern(null, "fs");
    arrayOfObject182[4] = RT.vector(arrayOfObject186);
    arrayOfObject181[1] = PersistentList.create(Arrays.asList(arrayOfObject182));
    arrayOfObject181[2] = RT.keyword(null, "column");
    arrayOfObject181[3] = Integer.valueOf(1);
    arrayOfObject181[4] = RT.keyword(null, "added");
    arrayOfObject181[5] = "1.0";
    arrayOfObject181[6] = RT.keyword(null, "static");
    arrayOfObject181[7] = Boolean.TRUE;
    arrayOfObject181[8] = RT.keyword(null, "doc");
    arrayOfObject181[9] = "Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.";
    arrayOfObject181[10] = RT.keyword(null, "line");
    arrayOfObject181[11] = Integer.valueOf(2319);
    arrayOfObject181[12] = RT.keyword(null, "file");
    arrayOfObject181[13] = "clojure/core.clj";
    const__894 = (AFn)RT.map(arrayOfObject181);
    const__895 = (Var)RT.var("clojure.core", "juxt");
    const__896 = Integer.valueOf(2350);
    Object[] arrayOfObject187 = new Object[4];
    Object[] arrayOfObject188 = new Object[1];
    arrayOfObject188[0] = Symbol.intern(null, "f");
    arrayOfObject187[0] = RT.vector(arrayOfObject188);
    Object[] arrayOfObject189 = new Object[2];
    arrayOfObject189[0] = Symbol.intern(null, "f");
    arrayOfObject189[1] = Symbol.intern(null, "g");
    arrayOfObject187[1] = RT.vector(arrayOfObject189);
    Object[] arrayOfObject190 = new Object[3];
    arrayOfObject190[0] = Symbol.intern(null, "f");
    arrayOfObject190[1] = Symbol.intern(null, "g");
    arrayOfObject190[2] = Symbol.intern(null, "h");
    arrayOfObject187[2] = RT.vector(arrayOfObject190);
    Object[] arrayOfObject191 = new Object[5];
    arrayOfObject191[0] = Symbol.intern(null, "f");
    arrayOfObject191[1] = Symbol.intern(null, "g");
    arrayOfObject191[2] = Symbol.intern(null, "h");
    arrayOfObject191[3] = Symbol.intern(null, "&");
    arrayOfObject191[4] = Symbol.intern(null, "fs");
    arrayOfObject187[3] = RT.vector(arrayOfObject191);
    const__897 = PersistentList.create(Arrays.asList(arrayOfObject187));
    Object[] arrayOfObject192 = new Object[14];
    arrayOfObject192[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject193 = new Object[4];
    Object[] arrayOfObject194 = new Object[1];
    arrayOfObject194[0] = Symbol.intern(null, "f");
    arrayOfObject193[0] = RT.vector(arrayOfObject194);
    Object[] arrayOfObject195 = new Object[2];
    arrayOfObject195[0] = Symbol.intern(null, "f");
    arrayOfObject195[1] = Symbol.intern(null, "g");
    arrayOfObject193[1] = RT.vector(arrayOfObject195);
    Object[] arrayOfObject196 = new Object[3];
    arrayOfObject196[0] = Symbol.intern(null, "f");
    arrayOfObject196[1] = Symbol.intern(null, "g");
    arrayOfObject196[2] = Symbol.intern(null, "h");
    arrayOfObject193[2] = RT.vector(arrayOfObject196);
    Object[] arrayOfObject197 = new Object[5];
    arrayOfObject197[0] = Symbol.intern(null, "f");
    arrayOfObject197[1] = Symbol.intern(null, "g");
    arrayOfObject197[2] = Symbol.intern(null, "h");
    arrayOfObject197[3] = Symbol.intern(null, "&");
    arrayOfObject197[4] = Symbol.intern(null, "fs");
    arrayOfObject193[3] = RT.vector(arrayOfObject197);
    arrayOfObject192[1] = PersistentList.create(Arrays.asList(arrayOfObject193));
    arrayOfObject192[2] = RT.keyword(null, "column");
    arrayOfObject192[3] = Integer.valueOf(1);
    arrayOfObject192[4] = RT.keyword(null, "added");
    arrayOfObject192[5] = "1.1";
    arrayOfObject192[6] = RT.keyword(null, "static");
    arrayOfObject192[7] = Boolean.TRUE;
    arrayOfObject192[8] = RT.keyword(null, "doc");
    arrayOfObject192[9] = "Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]";
    arrayOfObject192[10] = RT.keyword(null, "line");
    arrayOfObject192[11] = Integer.valueOf(2350);
    arrayOfObject192[12] = RT.keyword(null, "file");
    arrayOfObject192[13] = "clojure/core.clj";
    const__898 = (AFn)RT.map(arrayOfObject192);
    const__899 = (Var)RT.var("clojure.core", "partial");
  }

  public static void __init9()
  {
    const__900 = Integer.valueOf(2388);
    Object[] arrayOfObject1 = new Object[5];
    Object[] arrayOfObject2 = new Object[1];
    arrayOfObject2[0] = Symbol.intern(null, "f");
    arrayOfObject1[0] = RT.vector(arrayOfObject2);
    Object[] arrayOfObject3 = new Object[2];
    arrayOfObject3[0] = Symbol.intern(null, "f");
    arrayOfObject3[1] = Symbol.intern(null, "arg1");
    arrayOfObject1[1] = RT.vector(arrayOfObject3);
    Object[] arrayOfObject4 = new Object[3];
    arrayOfObject4[0] = Symbol.intern(null, "f");
    arrayOfObject4[1] = Symbol.intern(null, "arg1");
    arrayOfObject4[2] = Symbol.intern(null, "arg2");
    arrayOfObject1[2] = RT.vector(arrayOfObject4);
    Object[] arrayOfObject5 = new Object[4];
    arrayOfObject5[0] = Symbol.intern(null, "f");
    arrayOfObject5[1] = Symbol.intern(null, "arg1");
    arrayOfObject5[2] = Symbol.intern(null, "arg2");
    arrayOfObject5[3] = Symbol.intern(null, "arg3");
    arrayOfObject1[3] = RT.vector(arrayOfObject5);
    Object[] arrayOfObject6 = new Object[6];
    arrayOfObject6[0] = Symbol.intern(null, "f");
    arrayOfObject6[1] = Symbol.intern(null, "arg1");
    arrayOfObject6[2] = Symbol.intern(null, "arg2");
    arrayOfObject6[3] = Symbol.intern(null, "arg3");
    arrayOfObject6[4] = Symbol.intern(null, "&");
    arrayOfObject6[5] = Symbol.intern(null, "more");
    arrayOfObject1[4] = RT.vector(arrayOfObject6);
    const__901 = PersistentList.create(Arrays.asList(arrayOfObject1));
    Object[] arrayOfObject7 = new Object[14];
    arrayOfObject7[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject8 = new Object[5];
    Object[] arrayOfObject9 = new Object[1];
    arrayOfObject9[0] = Symbol.intern(null, "f");
    arrayOfObject8[0] = RT.vector(arrayOfObject9);
    Object[] arrayOfObject10 = new Object[2];
    arrayOfObject10[0] = Symbol.intern(null, "f");
    arrayOfObject10[1] = Symbol.intern(null, "arg1");
    arrayOfObject8[1] = RT.vector(arrayOfObject10);
    Object[] arrayOfObject11 = new Object[3];
    arrayOfObject11[0] = Symbol.intern(null, "f");
    arrayOfObject11[1] = Symbol.intern(null, "arg1");
    arrayOfObject11[2] = Symbol.intern(null, "arg2");
    arrayOfObject8[2] = RT.vector(arrayOfObject11);
    Object[] arrayOfObject12 = new Object[4];
    arrayOfObject12[0] = Symbol.intern(null, "f");
    arrayOfObject12[1] = Symbol.intern(null, "arg1");
    arrayOfObject12[2] = Symbol.intern(null, "arg2");
    arrayOfObject12[3] = Symbol.intern(null, "arg3");
    arrayOfObject8[3] = RT.vector(arrayOfObject12);
    Object[] arrayOfObject13 = new Object[6];
    arrayOfObject13[0] = Symbol.intern(null, "f");
    arrayOfObject13[1] = Symbol.intern(null, "arg1");
    arrayOfObject13[2] = Symbol.intern(null, "arg2");
    arrayOfObject13[3] = Symbol.intern(null, "arg3");
    arrayOfObject13[4] = Symbol.intern(null, "&");
    arrayOfObject13[5] = Symbol.intern(null, "more");
    arrayOfObject8[4] = RT.vector(arrayOfObject13);
    arrayOfObject7[1] = PersistentList.create(Arrays.asList(arrayOfObject8));
    arrayOfObject7[2] = RT.keyword(null, "column");
    arrayOfObject7[3] = Integer.valueOf(1);
    arrayOfObject7[4] = RT.keyword(null, "added");
    arrayOfObject7[5] = "1.0";
    arrayOfObject7[6] = RT.keyword(null, "static");
    arrayOfObject7[7] = Boolean.TRUE;
    arrayOfObject7[8] = RT.keyword(null, "doc");
    arrayOfObject7[9] = "Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.";
    arrayOfObject7[10] = RT.keyword(null, "line");
    arrayOfObject7[11] = Integer.valueOf(2388);
    arrayOfObject7[12] = RT.keyword(null, "file");
    arrayOfObject7[13] = "clojure/core.clj";
    const__902 = (AFn)RT.map(arrayOfObject7);
    const__903 = (Var)RT.var("clojure.core", "sequence");
    const__904 = Integer.valueOf(2405);
    Object[] arrayOfObject14 = new Object[1];
    Object[] arrayOfObject15 = new Object[1];
    arrayOfObject15[0] = Symbol.intern(null, "coll");
    arrayOfObject14[0] = RT.vector(arrayOfObject15);
    const__905 = PersistentList.create(Arrays.asList(arrayOfObject14));
    Object[] arrayOfObject16 = new Object[14];
    arrayOfObject16[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject17 = new Object[1];
    Object[] arrayOfObject18 = new Object[1];
    arrayOfObject18[0] = Symbol.intern(null, "coll");
    arrayOfObject17[0] = RT.vector(arrayOfObject18);
    arrayOfObject16[1] = PersistentList.create(Arrays.asList(arrayOfObject17));
    arrayOfObject16[2] = RT.keyword(null, "column");
    arrayOfObject16[3] = Integer.valueOf(1);
    arrayOfObject16[4] = RT.keyword(null, "added");
    arrayOfObject16[5] = "1.0";
    arrayOfObject16[6] = RT.keyword(null, "static");
    arrayOfObject16[7] = Boolean.TRUE;
    arrayOfObject16[8] = RT.keyword(null, "doc");
    arrayOfObject16[9] = "Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields ()";
    arrayOfObject16[10] = RT.keyword(null, "line");
    arrayOfObject16[11] = Integer.valueOf(2405);
    arrayOfObject16[12] = RT.keyword(null, "file");
    arrayOfObject16[13] = "clojure/core.clj";
    const__906 = (AFn)RT.map(arrayOfObject16);
    const__907 = (Var)RT.var("clojure.core", "every?");
    const__908 = Integer.valueOf(2414);
    Object[] arrayOfObject19 = new Object[1];
    Object[] arrayOfObject20 = new Object[2];
    arrayOfObject20[0] = Symbol.intern(null, "pred");
    arrayOfObject20[1] = Symbol.intern(null, "coll");
    arrayOfObject19[0] = RT.vector(arrayOfObject20);
    const__909 = PersistentList.create(Arrays.asList(arrayOfObject19));
    Object[] arrayOfObject21 = new Object[16];
    arrayOfObject21[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject22 = new Object[1];
    Object[] arrayOfObject23 = new Object[2];
    arrayOfObject23[0] = Symbol.intern(null, "pred");
    arrayOfObject23[1] = Symbol.intern(null, "coll");
    arrayOfObject22[0] = RT.vector(arrayOfObject23);
    arrayOfObject21[1] = PersistentList.create(Arrays.asList(arrayOfObject22));
    arrayOfObject21[2] = RT.keyword(null, "column");
    arrayOfObject21[3] = Integer.valueOf(1);
    arrayOfObject21[4] = RT.keyword(null, "added");
    arrayOfObject21[5] = "1.0";
    arrayOfObject21[6] = RT.keyword(null, "static");
    arrayOfObject21[7] = Boolean.TRUE;
    arrayOfObject21[8] = RT.keyword(null, "doc");
    arrayOfObject21[9] = "Returns true if (pred x) is logical true for every x in coll, else\n  false.";
    arrayOfObject21[10] = RT.keyword(null, "line");
    arrayOfObject21[11] = Integer.valueOf(2414);
    arrayOfObject21[12] = RT.keyword(null, "file");
    arrayOfObject21[13] = "clojure/core.clj";
    arrayOfObject21[14] = RT.keyword(null, "tag");
    arrayOfObject21[15] = Class.forName("java.lang.Boolean");
    const__910 = (AFn)RT.map(arrayOfObject21);
    const__911 = (Var)RT.var("clojure.core", "not-every?");
    const__912 = Integer.valueOf(2426);
    Object[] arrayOfObject24 = new Object[1];
    Object[] arrayOfObject25 = new Object[2];
    arrayOfObject25[0] = Symbol.intern(null, "pred");
    arrayOfObject25[1] = Symbol.intern(null, "coll");
    arrayOfObject24[0] = RT.vector(arrayOfObject25);
    IObj localIObj1 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject24));
    Object[] arrayOfObject26 = new Object[4];
    arrayOfObject26[0] = RT.keyword(null, "line");
    arrayOfObject26[1] = Integer.valueOf(2430);
    arrayOfObject26[2] = RT.keyword(null, "column");
    arrayOfObject26[3] = Integer.valueOf(15);
    const__913 = localIObj1.withMeta((IPersistentMap)RT.map(arrayOfObject26));
    Object[] arrayOfObject27 = new Object[14];
    arrayOfObject27[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject28 = new Object[1];
    Object[] arrayOfObject29 = new Object[2];
    arrayOfObject29[0] = Symbol.intern(null, "pred");
    arrayOfObject29[1] = Symbol.intern(null, "coll");
    arrayOfObject28[0] = RT.vector(arrayOfObject29);
    IObj localIObj2 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject28));
    Object[] arrayOfObject30 = new Object[4];
    arrayOfObject30[0] = RT.keyword(null, "line");
    arrayOfObject30[1] = Integer.valueOf(2430);
    arrayOfObject30[2] = RT.keyword(null, "column");
    arrayOfObject30[3] = Integer.valueOf(15);
    arrayOfObject27[1] = localIObj2.withMeta((IPersistentMap)RT.map(arrayOfObject30));
    arrayOfObject27[2] = RT.keyword(null, "column");
    arrayOfObject27[3] = Integer.valueOf(1);
    arrayOfObject27[4] = RT.keyword(null, "added");
    arrayOfObject27[5] = "1.0";
    arrayOfObject27[6] = RT.keyword(null, "doc");
    arrayOfObject27[7] = "Returns false if (pred x) is logical true for every x in\n  coll, else true.";
    arrayOfObject27[8] = RT.keyword(null, "line");
    arrayOfObject27[9] = Integer.valueOf(2426);
    arrayOfObject27[10] = RT.keyword(null, "file");
    arrayOfObject27[11] = "clojure/core.clj";
    arrayOfObject27[12] = RT.keyword(null, "tag");
    arrayOfObject27[13] = Class.forName("java.lang.Boolean");
    const__914 = (AFn)RT.map(arrayOfObject27);
    const__915 = (Var)RT.var("clojure.core", "some");
    const__916 = Integer.valueOf(2434);
    Object[] arrayOfObject31 = new Object[1];
    Object[] arrayOfObject32 = new Object[2];
    arrayOfObject32[0] = Symbol.intern(null, "pred");
    arrayOfObject32[1] = Symbol.intern(null, "coll");
    arrayOfObject31[0] = RT.vector(arrayOfObject32);
    const__917 = PersistentList.create(Arrays.asList(arrayOfObject31));
    Object[] arrayOfObject33 = new Object[14];
    arrayOfObject33[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject34 = new Object[1];
    Object[] arrayOfObject35 = new Object[2];
    arrayOfObject35[0] = Symbol.intern(null, "pred");
    arrayOfObject35[1] = Symbol.intern(null, "coll");
    arrayOfObject34[0] = RT.vector(arrayOfObject35);
    arrayOfObject33[1] = PersistentList.create(Arrays.asList(arrayOfObject34));
    arrayOfObject33[2] = RT.keyword(null, "column");
    arrayOfObject33[3] = Integer.valueOf(1);
    arrayOfObject33[4] = RT.keyword(null, "added");
    arrayOfObject33[5] = "1.0";
    arrayOfObject33[6] = RT.keyword(null, "static");
    arrayOfObject33[7] = Boolean.TRUE;
    arrayOfObject33[8] = RT.keyword(null, "doc");
    arrayOfObject33[9] = "Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)";
    arrayOfObject33[10] = RT.keyword(null, "line");
    arrayOfObject33[11] = Integer.valueOf(2434);
    arrayOfObject33[12] = RT.keyword(null, "file");
    arrayOfObject33[13] = "clojure/core.clj";
    const__918 = (AFn)RT.map(arrayOfObject33);
    const__919 = (Var)RT.var("clojure.core", "not-any?");
    const__920 = Integer.valueOf(2445);
    Object[] arrayOfObject36 = new Object[1];
    Object[] arrayOfObject37 = new Object[2];
    arrayOfObject37[0] = Symbol.intern(null, "pred");
    arrayOfObject37[1] = Symbol.intern(null, "coll");
    arrayOfObject36[0] = RT.vector(arrayOfObject37);
    IObj localIObj3 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject36));
    Object[] arrayOfObject38 = new Object[4];
    arrayOfObject38[0] = RT.keyword(null, "line");
    arrayOfObject38[1] = Integer.valueOf(2449);
    arrayOfObject38[2] = RT.keyword(null, "column");
    arrayOfObject38[3] = Integer.valueOf(15);
    const__921 = localIObj3.withMeta((IPersistentMap)RT.map(arrayOfObject38));
    Object[] arrayOfObject39 = new Object[14];
    arrayOfObject39[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject40 = new Object[1];
    Object[] arrayOfObject41 = new Object[2];
    arrayOfObject41[0] = Symbol.intern(null, "pred");
    arrayOfObject41[1] = Symbol.intern(null, "coll");
    arrayOfObject40[0] = RT.vector(arrayOfObject41);
    IObj localIObj4 = (IObj)PersistentList.create(Arrays.asList(arrayOfObject40));
    Object[] arrayOfObject42 = new Object[4];
    arrayOfObject42[0] = RT.keyword(null, "line");
    arrayOfObject42[1] = Integer.valueOf(2449);
    arrayOfObject42[2] = RT.keyword(null, "column");
    arrayOfObject42[3] = Integer.valueOf(15);
    arrayOfObject39[1] = localIObj4.withMeta((IPersistentMap)RT.map(arrayOfObject42));
    arrayOfObject39[2] = RT.keyword(null, "column");
    arrayOfObject39[3] = Integer.valueOf(1);
    arrayOfObject39[4] = RT.keyword(null, "added");
    arrayOfObject39[5] = "1.0";
    arrayOfObject39[6] = RT.keyword(null, "doc");
    arrayOfObject39[7] = "Returns false if (pred x) is logical true for any x in coll,\n  else true.";
    arrayOfObject39[8] = RT.keyword(null, "line");
    arrayOfObject39[9] = Integer.valueOf(2445);
    arrayOfObject39[10] = RT.keyword(null, "file");
    arrayOfObject39[11] = "clojure/core.clj";
    arrayOfObject39[12] = RT.keyword(null, "tag");
    arrayOfObject39[13] = Class.forName("java.lang.Boolean");
    const__922 = (AFn)RT.map(arrayOfObject39);
    const__923 = (Var)RT.var("clojure.core", "dotimes");
    const__924 = Integer.valueOf(2454);
    Object[] arrayOfObject43 = new Object[1];
    Object[] arrayOfObject44 = new Object[3];
    arrayOfObject44[0] = Symbol.intern(null, "bindings");
    arrayOfObject44[1] = Symbol.intern(null, "&");
    arrayOfObject44[2] = Symbol.intern(null, "body");
    arrayOfObject43[0] = RT.vector(arrayOfObject44);
    const__925 = PersistentList.create(Arrays.asList(arrayOfObject43));
    Object[] arrayOfObject45 = new Object[12];
    arrayOfObject45[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject46 = new Object[1];
    Object[] arrayOfObject47 = new Object[3];
    arrayOfObject47[0] = Symbol.intern(null, "bindings");
    arrayOfObject47[1] = Symbol.intern(null, "&");
    arrayOfObject47[2] = Symbol.intern(null, "body");
    arrayOfObject46[0] = RT.vector(arrayOfObject47);
    arrayOfObject45[1] = PersistentList.create(Arrays.asList(arrayOfObject46));
    arrayOfObject45[2] = RT.keyword(null, "column");
    arrayOfObject45[3] = Integer.valueOf(1);
    arrayOfObject45[4] = RT.keyword(null, "added");
    arrayOfObject45[5] = "1.0";
    arrayOfObject45[6] = RT.keyword(null, "doc");
    arrayOfObject45[7] = "bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1.";
    arrayOfObject45[8] = RT.keyword(null, "line");
    arrayOfObject45[9] = Integer.valueOf(2454);
    arrayOfObject45[10] = RT.keyword(null, "file");
    arrayOfObject45[11] = "clojure/core.clj";
    const__926 = (AFn)RT.map(arrayOfObject45);
    const__927 = Integer.valueOf(2469);
    Object[] arrayOfObject48 = new Object[4];
    Object[] arrayOfObject49 = new Object[2];
    arrayOfObject49[0] = Symbol.intern(null, "f");
    arrayOfObject49[1] = Symbol.intern(null, "coll");
    arrayOfObject48[0] = RT.vector(arrayOfObject49);
    Object[] arrayOfObject50 = new Object[3];
    arrayOfObject50[0] = Symbol.intern(null, "f");
    arrayOfObject50[1] = Symbol.intern(null, "c1");
    arrayOfObject50[2] = Symbol.intern(null, "c2");
    arrayOfObject48[1] = RT.vector(arrayOfObject50);
    Object[] arrayOfObject51 = new Object[4];
    arrayOfObject51[0] = Symbol.intern(null, "f");
    arrayOfObject51[1] = Symbol.intern(null, "c1");
    arrayOfObject51[2] = Symbol.intern(null, "c2");
    arrayOfObject51[3] = Symbol.intern(null, "c3");
    arrayOfObject48[2] = RT.vector(arrayOfObject51);
    Object[] arrayOfObject52 = new Object[6];
    arrayOfObject52[0] = Symbol.intern(null, "f");
    arrayOfObject52[1] = Symbol.intern(null, "c1");
    arrayOfObject52[2] = Symbol.intern(null, "c2");
    arrayOfObject52[3] = Symbol.intern(null, "c3");
    arrayOfObject52[4] = Symbol.intern(null, "&");
    arrayOfObject52[5] = Symbol.intern(null, "colls");
    arrayOfObject48[3] = RT.vector(arrayOfObject52);
    const__928 = PersistentList.create(Arrays.asList(arrayOfObject48));
    Object[] arrayOfObject53 = new Object[14];
    arrayOfObject53[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject54 = new Object[4];
    Object[] arrayOfObject55 = new Object[2];
    arrayOfObject55[0] = Symbol.intern(null, "f");
    arrayOfObject55[1] = Symbol.intern(null, "coll");
    arrayOfObject54[0] = RT.vector(arrayOfObject55);
    Object[] arrayOfObject56 = new Object[3];
    arrayOfObject56[0] = Symbol.intern(null, "f");
    arrayOfObject56[1] = Symbol.intern(null, "c1");
    arrayOfObject56[2] = Symbol.intern(null, "c2");
    arrayOfObject54[1] = RT.vector(arrayOfObject56);
    Object[] arrayOfObject57 = new Object[4];
    arrayOfObject57[0] = Symbol.intern(null, "f");
    arrayOfObject57[1] = Symbol.intern(null, "c1");
    arrayOfObject57[2] = Symbol.intern(null, "c2");
    arrayOfObject57[3] = Symbol.intern(null, "c3");
    arrayOfObject54[2] = RT.vector(arrayOfObject57);
    Object[] arrayOfObject58 = new Object[6];
    arrayOfObject58[0] = Symbol.intern(null, "f");
    arrayOfObject58[1] = Symbol.intern(null, "c1");
    arrayOfObject58[2] = Symbol.intern(null, "c2");
    arrayOfObject58[3] = Symbol.intern(null, "c3");
    arrayOfObject58[4] = Symbol.intern(null, "&");
    arrayOfObject58[5] = Symbol.intern(null, "colls");
    arrayOfObject54[3] = RT.vector(arrayOfObject58);
    arrayOfObject53[1] = PersistentList.create(Arrays.asList(arrayOfObject54));
    arrayOfObject53[2] = RT.keyword(null, "column");
    arrayOfObject53[3] = Integer.valueOf(1);
    arrayOfObject53[4] = RT.keyword(null, "added");
    arrayOfObject53[5] = "1.0";
    arrayOfObject53[6] = RT.keyword(null, "static");
    arrayOfObject53[7] = Boolean.TRUE;
    arrayOfObject53[8] = RT.keyword(null, "doc");
    arrayOfObject53[9] = "Returns a lazy sequence consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.";
    arrayOfObject53[10] = RT.keyword(null, "line");
    arrayOfObject53[11] = Integer.valueOf(2469);
    arrayOfObject53[12] = RT.keyword(null, "file");
    arrayOfObject53[13] = "clojure/core.clj";
    const__929 = (AFn)RT.map(arrayOfObject53);
    const__930 = (Var)RT.var("clojure.core", "mapcat");
    const__931 = Integer.valueOf(2508);
    Object[] arrayOfObject59 = new Object[1];
    Object[] arrayOfObject60 = new Object[3];
    arrayOfObject60[0] = Symbol.intern(null, "f");
    arrayOfObject60[1] = Symbol.intern(null, "&");
    arrayOfObject60[2] = Symbol.intern(null, "colls");
    arrayOfObject59[0] = RT.vector(arrayOfObject60);
    const__932 = PersistentList.create(Arrays.asList(arrayOfObject59));
    Object[] arrayOfObject61 = new Object[14];
    arrayOfObject61[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject62 = new Object[1];
    Object[] arrayOfObject63 = new Object[3];
    arrayOfObject63[0] = Symbol.intern(null, "f");
    arrayOfObject63[1] = Symbol.intern(null, "&");
    arrayOfObject63[2] = Symbol.intern(null, "colls");
    arrayOfObject62[0] = RT.vector(arrayOfObject63);
    arrayOfObject61[1] = PersistentList.create(Arrays.asList(arrayOfObject62));
    arrayOfObject61[2] = RT.keyword(null, "column");
    arrayOfObject61[3] = Integer.valueOf(1);
    arrayOfObject61[4] = RT.keyword(null, "added");
    arrayOfObject61[5] = "1.0";
    arrayOfObject61[6] = RT.keyword(null, "static");
    arrayOfObject61[7] = Boolean.TRUE;
    arrayOfObject61[8] = RT.keyword(null, "doc");
    arrayOfObject61[9] = "Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection.";
    arrayOfObject61[10] = RT.keyword(null, "line");
    arrayOfObject61[11] = Integer.valueOf(2508);
    arrayOfObject61[12] = RT.keyword(null, "file");
    arrayOfObject61[13] = "clojure/core.clj";
    const__933 = (AFn)RT.map(arrayOfObject61);
    const__934 = (Var)RT.var("clojure.core", "filter");
    const__935 = Integer.valueOf(2516);
    Object[] arrayOfObject64 = new Object[1];
    Object[] arrayOfObject65 = new Object[2];
    arrayOfObject65[0] = Symbol.intern(null, "pred");
    arrayOfObject65[1] = Symbol.intern(null, "coll");
    arrayOfObject64[0] = RT.vector(arrayOfObject65);
    const__936 = PersistentList.create(Arrays.asList(arrayOfObject64));
    Object[] arrayOfObject66 = new Object[14];
    arrayOfObject66[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject67 = new Object[1];
    Object[] arrayOfObject68 = new Object[2];
    arrayOfObject68[0] = Symbol.intern(null, "pred");
    arrayOfObject68[1] = Symbol.intern(null, "coll");
    arrayOfObject67[0] = RT.vector(arrayOfObject68);
    arrayOfObject66[1] = PersistentList.create(Arrays.asList(arrayOfObject67));
    arrayOfObject66[2] = RT.keyword(null, "column");
    arrayOfObject66[3] = Integer.valueOf(1);
    arrayOfObject66[4] = RT.keyword(null, "added");
    arrayOfObject66[5] = "1.0";
    arrayOfObject66[6] = RT.keyword(null, "static");
    arrayOfObject66[7] = Boolean.TRUE;
    arrayOfObject66[8] = RT.keyword(null, "doc");
    arrayOfObject66[9] = "Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.";
    arrayOfObject66[10] = RT.keyword(null, "line");
    arrayOfObject66[11] = Integer.valueOf(2516);
    arrayOfObject66[12] = RT.keyword(null, "file");
    arrayOfObject66[13] = "clojure/core.clj";
    const__937 = (AFn)RT.map(arrayOfObject66);
    const__938 = (Var)RT.var("clojure.core", "remove");
    const__939 = Integer.valueOf(2538);
    Object[] arrayOfObject69 = new Object[1];
    Object[] arrayOfObject70 = new Object[2];
    arrayOfObject70[0] = Symbol.intern(null, "pred");
    arrayOfObject70[1] = Symbol.intern(null, "coll");
    arrayOfObject69[0] = RT.vector(arrayOfObject70);
    const__940 = PersistentList.create(Arrays.asList(arrayOfObject69));
    Object[] arrayOfObject71 = new Object[14];
    arrayOfObject71[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject72 = new Object[1];
    Object[] arrayOfObject73 = new Object[2];
    arrayOfObject73[0] = Symbol.intern(null, "pred");
    arrayOfObject73[1] = Symbol.intern(null, "coll");
    arrayOfObject72[0] = RT.vector(arrayOfObject73);
    arrayOfObject71[1] = PersistentList.create(Arrays.asList(arrayOfObject72));
    arrayOfObject71[2] = RT.keyword(null, "column");
    arrayOfObject71[3] = Integer.valueOf(1);
    arrayOfObject71[4] = RT.keyword(null, "added");
    arrayOfObject71[5] = "1.0";
    arrayOfObject71[6] = RT.keyword(null, "static");
    arrayOfObject71[7] = Boolean.TRUE;
    arrayOfObject71[8] = RT.keyword(null, "doc");
    arrayOfObject71[9] = "Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.";
    arrayOfObject71[10] = RT.keyword(null, "line");
    arrayOfObject71[11] = Integer.valueOf(2538);
    arrayOfObject71[12] = RT.keyword(null, "file");
    arrayOfObject71[13] = "clojure/core.clj";
    const__941 = (AFn)RT.map(arrayOfObject71);
    const__942 = (Var)RT.var("clojure.core", "take");
    const__943 = Integer.valueOf(2546);
    Object[] arrayOfObject74 = new Object[1];
    Object[] arrayOfObject75 = new Object[2];
    arrayOfObject75[0] = Symbol.intern(null, "n");
    arrayOfObject75[1] = Symbol.intern(null, "coll");
    arrayOfObject74[0] = RT.vector(arrayOfObject75);
    const__944 = PersistentList.create(Arrays.asList(arrayOfObject74));
    Object[] arrayOfObject76 = new Object[14];
    arrayOfObject76[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject77 = new Object[1];
    Object[] arrayOfObject78 = new Object[2];
    arrayOfObject78[0] = Symbol.intern(null, "n");
    arrayOfObject78[1] = Symbol.intern(null, "coll");
    arrayOfObject77[0] = RT.vector(arrayOfObject78);
    arrayOfObject76[1] = PersistentList.create(Arrays.asList(arrayOfObject77));
    arrayOfObject76[2] = RT.keyword(null, "column");
    arrayOfObject76[3] = Integer.valueOf(1);
    arrayOfObject76[4] = RT.keyword(null, "added");
    arrayOfObject76[5] = "1.0";
    arrayOfObject76[6] = RT.keyword(null, "static");
    arrayOfObject76[7] = Boolean.TRUE;
    arrayOfObject76[8] = RT.keyword(null, "doc");
    arrayOfObject76[9] = "Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.";
    arrayOfObject76[10] = RT.keyword(null, "line");
    arrayOfObject76[11] = Integer.valueOf(2546);
    arrayOfObject76[12] = RT.keyword(null, "file");
    arrayOfObject76[13] = "clojure/core.clj";
    const__945 = (AFn)RT.map(arrayOfObject76);
    const__946 = (Var)RT.var("clojure.core", "take-while");
    const__947 = Integer.valueOf(2557);
    Object[] arrayOfObject79 = new Object[1];
    Object[] arrayOfObject80 = new Object[2];
    arrayOfObject80[0] = Symbol.intern(null, "pred");
    arrayOfObject80[1] = Symbol.intern(null, "coll");
    arrayOfObject79[0] = RT.vector(arrayOfObject80);
    const__948 = PersistentList.create(Arrays.asList(arrayOfObject79));
    Object[] arrayOfObject81 = new Object[14];
    arrayOfObject81[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject82 = new Object[1];
    Object[] arrayOfObject83 = new Object[2];
    arrayOfObject83[0] = Symbol.intern(null, "pred");
    arrayOfObject83[1] = Symbol.intern(null, "coll");
    arrayOfObject82[0] = RT.vector(arrayOfObject83);
    arrayOfObject81[1] = PersistentList.create(Arrays.asList(arrayOfObject82));
    arrayOfObject81[2] = RT.keyword(null, "column");
    arrayOfObject81[3] = Integer.valueOf(1);
    arrayOfObject81[4] = RT.keyword(null, "added");
    arrayOfObject81[5] = "1.0";
    arrayOfObject81[6] = RT.keyword(null, "static");
    arrayOfObject81[7] = Boolean.TRUE;
    arrayOfObject81[8] = RT.keyword(null, "doc");
    arrayOfObject81[9] = "Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.";
    arrayOfObject81[10] = RT.keyword(null, "line");
    arrayOfObject81[11] = Integer.valueOf(2557);
    arrayOfObject81[12] = RT.keyword(null, "file");
    arrayOfObject81[13] = "clojure/core.clj";
    const__949 = (AFn)RT.map(arrayOfObject81);
    const__950 = (Var)RT.var("clojure.core", "drop");
    const__951 = Integer.valueOf(2568);
    Object[] arrayOfObject84 = new Object[1];
    Object[] arrayOfObject85 = new Object[2];
    arrayOfObject85[0] = Symbol.intern(null, "n");
    arrayOfObject85[1] = Symbol.intern(null, "coll");
    arrayOfObject84[0] = RT.vector(arrayOfObject85);
    const__952 = PersistentList.create(Arrays.asList(arrayOfObject84));
    Object[] arrayOfObject86 = new Object[14];
    arrayOfObject86[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject87 = new Object[1];
    Object[] arrayOfObject88 = new Object[2];
    arrayOfObject88[0] = Symbol.intern(null, "n");
    arrayOfObject88[1] = Symbol.intern(null, "coll");
    arrayOfObject87[0] = RT.vector(arrayOfObject88);
    arrayOfObject86[1] = PersistentList.create(Arrays.asList(arrayOfObject87));
    arrayOfObject86[2] = RT.keyword(null, "column");
    arrayOfObject86[3] = Integer.valueOf(1);
    arrayOfObject86[4] = RT.keyword(null, "added");
    arrayOfObject86[5] = "1.0";
    arrayOfObject86[6] = RT.keyword(null, "static");
    arrayOfObject86[7] = Boolean.TRUE;
    arrayOfObject86[8] = RT.keyword(null, "doc");
    arrayOfObject86[9] = "Returns a lazy sequence of all but the first n items in coll.";
    arrayOfObject86[10] = RT.keyword(null, "line");
    arrayOfObject86[11] = Integer.valueOf(2568);
    arrayOfObject86[12] = RT.keyword(null, "file");
    arrayOfObject86[13] = "clojure/core.clj";
    const__953 = (AFn)RT.map(arrayOfObject86);
    const__954 = (Var)RT.var("clojure.core", "drop-last");
    const__955 = Integer.valueOf(2580);
    Object[] arrayOfObject89 = new Object[2];
    Object[] arrayOfObject90 = new Object[1];
    arrayOfObject90[0] = Symbol.intern(null, "s");
    arrayOfObject89[0] = RT.vector(arrayOfObject90);
    Object[] arrayOfObject91 = new Object[2];
    arrayOfObject91[0] = Symbol.intern(null, "n");
    arrayOfObject91[1] = Symbol.intern(null, "s");
    arrayOfObject89[1] = RT.vector(arrayOfObject91);
    const__956 = PersistentList.create(Arrays.asList(arrayOfObject89));
    Object[] arrayOfObject92 = new Object[14];
    arrayOfObject92[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject93 = new Object[2];
    Object[] arrayOfObject94 = new Object[1];
    arrayOfObject94[0] = Symbol.intern(null, "s");
    arrayOfObject93[0] = RT.vector(arrayOfObject94);
    Object[] arrayOfObject95 = new Object[2];
    arrayOfObject95[0] = Symbol.intern(null, "n");
    arrayOfObject95[1] = Symbol.intern(null, "s");
    arrayOfObject93[1] = RT.vector(arrayOfObject95);
    arrayOfObject92[1] = PersistentList.create(Arrays.asList(arrayOfObject93));
    arrayOfObject92[2] = RT.keyword(null, "column");
    arrayOfObject92[3] = Integer.valueOf(1);
    arrayOfObject92[4] = RT.keyword(null, "added");
    arrayOfObject92[5] = "1.0";
    arrayOfObject92[6] = RT.keyword(null, "static");
    arrayOfObject92[7] = Boolean.TRUE;
    arrayOfObject92[8] = RT.keyword(null, "doc");
    arrayOfObject92[9] = "Return a lazy sequence of all but the last n (default 1) items in coll";
    arrayOfObject92[10] = RT.keyword(null, "line");
    arrayOfObject92[11] = Integer.valueOf(2580);
    arrayOfObject92[12] = RT.keyword(null, "file");
    arrayOfObject92[13] = "clojure/core.clj";
    const__957 = (AFn)RT.map(arrayOfObject92);
    const__958 = (Var)RT.var("clojure.core", "take-last");
    const__959 = Integer.valueOf(2587);
    Object[] arrayOfObject96 = new Object[1];
    Object[] arrayOfObject97 = new Object[2];
    arrayOfObject97[0] = Symbol.intern(null, "n");
    arrayOfObject97[1] = Symbol.intern(null, "coll");
    arrayOfObject96[0] = RT.vector(arrayOfObject97);
    const__960 = PersistentList.create(Arrays.asList(arrayOfObject96));
    Object[] arrayOfObject98 = new Object[14];
    arrayOfObject98[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject99 = new Object[1];
    Object[] arrayOfObject100 = new Object[2];
    arrayOfObject100[0] = Symbol.intern(null, "n");
    arrayOfObject100[1] = Symbol.intern(null, "coll");
    arrayOfObject99[0] = RT.vector(arrayOfObject100);
    arrayOfObject98[1] = PersistentList.create(Arrays.asList(arrayOfObject99));
    arrayOfObject98[2] = RT.keyword(null, "column");
    arrayOfObject98[3] = Integer.valueOf(1);
    arrayOfObject98[4] = RT.keyword(null, "added");
    arrayOfObject98[5] = "1.1";
    arrayOfObject98[6] = RT.keyword(null, "static");
    arrayOfObject98[7] = Boolean.TRUE;
    arrayOfObject98[8] = RT.keyword(null, "doc");
    arrayOfObject98[9] = "Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec.";
    arrayOfObject98[10] = RT.keyword(null, "line");
    arrayOfObject98[11] = Integer.valueOf(2587);
    arrayOfObject98[12] = RT.keyword(null, "file");
    arrayOfObject98[13] = "clojure/core.clj";
    const__961 = (AFn)RT.map(arrayOfObject98);
    const__962 = (Var)RT.var("clojure.core", "drop-while");
    const__963 = Integer.valueOf(2598);
    Object[] arrayOfObject101 = new Object[1];
    Object[] arrayOfObject102 = new Object[2];
    arrayOfObject102[0] = Symbol.intern(null, "pred");
    arrayOfObject102[1] = Symbol.intern(null, "coll");
    arrayOfObject101[0] = RT.vector(arrayOfObject102);
    const__964 = PersistentList.create(Arrays.asList(arrayOfObject101));
    Object[] arrayOfObject103 = new Object[14];
    arrayOfObject103[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject104 = new Object[1];
    Object[] arrayOfObject105 = new Object[2];
    arrayOfObject105[0] = Symbol.intern(null, "pred");
    arrayOfObject105[1] = Symbol.intern(null, "coll");
    arrayOfObject104[0] = RT.vector(arrayOfObject105);
    arrayOfObject103[1] = PersistentList.create(Arrays.asList(arrayOfObject104));
    arrayOfObject103[2] = RT.keyword(null, "column");
    arrayOfObject103[3] = Integer.valueOf(1);
    arrayOfObject103[4] = RT.keyword(null, "added");
    arrayOfObject103[5] = "1.0";
    arrayOfObject103[6] = RT.keyword(null, "static");
    arrayOfObject103[7] = Boolean.TRUE;
    arrayOfObject103[8] = RT.keyword(null, "doc");
    arrayOfObject103[9] = "Returns a lazy sequence of the items in coll starting from the first\n  item for which (pred item) returns logical false.";
    arrayOfObject103[10] = RT.keyword(null, "line");
    arrayOfObject103[11] = Integer.valueOf(2598);
    arrayOfObject103[12] = RT.keyword(null, "file");
    arrayOfObject103[13] = "clojure/core.clj";
    const__965 = (AFn)RT.map(arrayOfObject103);
    const__966 = (Var)RT.var("clojure.core", "cycle");
    const__967 = Integer.valueOf(2611);
    Object[] arrayOfObject106 = new Object[1];
    Object[] arrayOfObject107 = new Object[1];
    arrayOfObject107[0] = Symbol.intern(null, "coll");
    arrayOfObject106[0] = RT.vector(arrayOfObject107);
    const__968 = PersistentList.create(Arrays.asList(arrayOfObject106));
    Object[] arrayOfObject108 = new Object[14];
    arrayOfObject108[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject109 = new Object[1];
    Object[] arrayOfObject110 = new Object[1];
    arrayOfObject110[0] = Symbol.intern(null, "coll");
    arrayOfObject109[0] = RT.vector(arrayOfObject110);
    arrayOfObject108[1] = PersistentList.create(Arrays.asList(arrayOfObject109));
    arrayOfObject108[2] = RT.keyword(null, "column");
    arrayOfObject108[3] = Integer.valueOf(1);
    arrayOfObject108[4] = RT.keyword(null, "added");
    arrayOfObject108[5] = "1.0";
    arrayOfObject108[6] = RT.keyword(null, "static");
    arrayOfObject108[7] = Boolean.TRUE;
    arrayOfObject108[8] = RT.keyword(null, "doc");
    arrayOfObject108[9] = "Returns a lazy (infinite!) sequence of repetitions of the items in coll.";
    arrayOfObject108[10] = RT.keyword(null, "line");
    arrayOfObject108[11] = Integer.valueOf(2611);
    arrayOfObject108[12] = RT.keyword(null, "file");
    arrayOfObject108[13] = "clojure/core.clj";
    const__969 = (AFn)RT.map(arrayOfObject108);
    const__970 = (Var)RT.var("clojure.core", "split-at");
    const__971 = Integer.valueOf(2619);
    Object[] arrayOfObject111 = new Object[1];
    Object[] arrayOfObject112 = new Object[2];
    arrayOfObject112[0] = Symbol.intern(null, "n");
    arrayOfObject112[1] = Symbol.intern(null, "coll");
    arrayOfObject111[0] = RT.vector(arrayOfObject112);
    const__972 = PersistentList.create(Arrays.asList(arrayOfObject111));
    Object[] arrayOfObject113 = new Object[14];
    arrayOfObject113[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject114 = new Object[1];
    Object[] arrayOfObject115 = new Object[2];
    arrayOfObject115[0] = Symbol.intern(null, "n");
    arrayOfObject115[1] = Symbol.intern(null, "coll");
    arrayOfObject114[0] = RT.vector(arrayOfObject115);
    arrayOfObject113[1] = PersistentList.create(Arrays.asList(arrayOfObject114));
    arrayOfObject113[2] = RT.keyword(null, "column");
    arrayOfObject113[3] = Integer.valueOf(1);
    arrayOfObject113[4] = RT.keyword(null, "added");
    arrayOfObject113[5] = "1.0";
    arrayOfObject113[6] = RT.keyword(null, "static");
    arrayOfObject113[7] = Boolean.TRUE;
    arrayOfObject113[8] = RT.keyword(null, "doc");
    arrayOfObject113[9] = "Returns a vector of [(take n coll) (drop n coll)]";
    arrayOfObject113[10] = RT.keyword(null, "line");
    arrayOfObject113[11] = Integer.valueOf(2619);
    arrayOfObject113[12] = RT.keyword(null, "file");
    arrayOfObject113[13] = "clojure/core.clj";
    const__973 = (AFn)RT.map(arrayOfObject113);
    const__974 = (Var)RT.var("clojure.core", "split-with");
    const__975 = Integer.valueOf(2626);
    Object[] arrayOfObject116 = new Object[1];
    Object[] arrayOfObject117 = new Object[2];
    arrayOfObject117[0] = Symbol.intern(null, "pred");
    arrayOfObject117[1] = Symbol.intern(null, "coll");
    arrayOfObject116[0] = RT.vector(arrayOfObject117);
    const__976 = PersistentList.create(Arrays.asList(arrayOfObject116));
    Object[] arrayOfObject118 = new Object[14];
    arrayOfObject118[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject119 = new Object[1];
    Object[] arrayOfObject120 = new Object[2];
    arrayOfObject120[0] = Symbol.intern(null, "pred");
    arrayOfObject120[1] = Symbol.intern(null, "coll");
    arrayOfObject119[0] = RT.vector(arrayOfObject120);
    arrayOfObject118[1] = PersistentList.create(Arrays.asList(arrayOfObject119));
    arrayOfObject118[2] = RT.keyword(null, "column");
    arrayOfObject118[3] = Integer.valueOf(1);
    arrayOfObject118[4] = RT.keyword(null, "added");
    arrayOfObject118[5] = "1.0";
    arrayOfObject118[6] = RT.keyword(null, "static");
    arrayOfObject118[7] = Boolean.TRUE;
    arrayOfObject118[8] = RT.keyword(null, "doc");
    arrayOfObject118[9] = "Returns a vector of [(take-while pred coll) (drop-while pred coll)]";
    arrayOfObject118[10] = RT.keyword(null, "line");
    arrayOfObject118[11] = Integer.valueOf(2626);
    arrayOfObject118[12] = RT.keyword(null, "file");
    arrayOfObject118[13] = "clojure/core.clj";
    const__977 = (AFn)RT.map(arrayOfObject118);
    const__978 = (Var)RT.var("clojure.core", "repeat");
    const__979 = Integer.valueOf(2633);
    Object[] arrayOfObject121 = new Object[2];
    Object[] arrayOfObject122 = new Object[1];
    arrayOfObject122[0] = Symbol.intern(null, "x");
    arrayOfObject121[0] = RT.vector(arrayOfObject122);
    Object[] arrayOfObject123 = new Object[2];
    arrayOfObject123[0] = Symbol.intern(null, "n");
    arrayOfObject123[1] = Symbol.intern(null, "x");
    arrayOfObject121[1] = RT.vector(arrayOfObject123);
    const__980 = PersistentList.create(Arrays.asList(arrayOfObject121));
    Object[] arrayOfObject124 = new Object[14];
    arrayOfObject124[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject125 = new Object[2];
    Object[] arrayOfObject126 = new Object[1];
    arrayOfObject126[0] = Symbol.intern(null, "x");
    arrayOfObject125[0] = RT.vector(arrayOfObject126);
    Object[] arrayOfObject127 = new Object[2];
    arrayOfObject127[0] = Symbol.intern(null, "n");
    arrayOfObject127[1] = Symbol.intern(null, "x");
    arrayOfObject125[1] = RT.vector(arrayOfObject127);
    arrayOfObject124[1] = PersistentList.create(Arrays.asList(arrayOfObject125));
    arrayOfObject124[2] = RT.keyword(null, "column");
    arrayOfObject124[3] = Integer.valueOf(1);
    arrayOfObject124[4] = RT.keyword(null, "added");
    arrayOfObject124[5] = "1.0";
    arrayOfObject124[6] = RT.keyword(null, "static");
    arrayOfObject124[7] = Boolean.TRUE;
    arrayOfObject124[8] = RT.keyword(null, "doc");
    arrayOfObject124[9] = "Returns a lazy (infinite!, or length n if supplied) sequence of xs.";
    arrayOfObject124[10] = RT.keyword(null, "line");
    arrayOfObject124[11] = Integer.valueOf(2633);
    arrayOfObject124[12] = RT.keyword(null, "file");
    arrayOfObject124[13] = "clojure/core.clj";
    const__981 = (AFn)RT.map(arrayOfObject124);
    const__982 = (Var)RT.var("clojure.core", "replicate");
    const__983 = Integer.valueOf(2640);
    Object[] arrayOfObject128 = new Object[1];
    Object[] arrayOfObject129 = new Object[2];
    arrayOfObject129[0] = Symbol.intern(null, "n");
    arrayOfObject129[1] = Symbol.intern(null, "x");
    arrayOfObject128[0] = RT.vector(arrayOfObject129);
    const__984 = PersistentList.create(Arrays.asList(arrayOfObject128));
    Object[] arrayOfObject130 = new Object[14];
    arrayOfObject130[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject131 = new Object[1];
    Object[] arrayOfObject132 = new Object[2];
    arrayOfObject132[0] = Symbol.intern(null, "n");
    arrayOfObject132[1] = Symbol.intern(null, "x");
    arrayOfObject131[0] = RT.vector(arrayOfObject132);
    arrayOfObject130[1] = PersistentList.create(Arrays.asList(arrayOfObject131));
    arrayOfObject130[2] = RT.keyword(null, "deprecated");
    arrayOfObject130[3] = "1.3";
    arrayOfObject130[4] = RT.keyword(null, "column");
    arrayOfObject130[5] = Integer.valueOf(1);
    arrayOfObject130[6] = RT.keyword(null, "added");
    arrayOfObject130[7] = "1.0";
    arrayOfObject130[8] = RT.keyword(null, "doc");
    arrayOfObject130[9] = "DEPRECATED: Use 'repeat' instead.\n   Returns a lazy seq of n xs.";
    arrayOfObject130[10] = RT.keyword(null, "line");
    arrayOfObject130[11] = Integer.valueOf(2640);
    arrayOfObject130[12] = RT.keyword(null, "file");
    arrayOfObject130[13] = "clojure/core.clj";
    const__985 = (AFn)RT.map(arrayOfObject130);
    const__986 = (Var)RT.var("clojure.core", "iterate");
    const__987 = Integer.valueOf(2647);
    Object[] arrayOfObject133 = new Object[1];
    Object[] arrayOfObject134 = new Object[2];
    arrayOfObject134[0] = Symbol.intern(null, "f");
    arrayOfObject134[1] = Symbol.intern(null, "x");
    arrayOfObject133[0] = RT.vector(arrayOfObject134);
    const__988 = PersistentList.create(Arrays.asList(arrayOfObject133));
    Object[] arrayOfObject135 = new Object[14];
    arrayOfObject135[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject136 = new Object[1];
    Object[] arrayOfObject137 = new Object[2];
    arrayOfObject137[0] = Symbol.intern(null, "f");
    arrayOfObject137[1] = Symbol.intern(null, "x");
    arrayOfObject136[0] = RT.vector(arrayOfObject137);
    arrayOfObject135[1] = PersistentList.create(Arrays.asList(arrayOfObject136));
    arrayOfObject135[2] = RT.keyword(null, "column");
    arrayOfObject135[3] = Integer.valueOf(1);
    arrayOfObject135[4] = RT.keyword(null, "added");
    arrayOfObject135[5] = "1.0";
    arrayOfObject135[6] = RT.keyword(null, "static");
    arrayOfObject135[7] = Boolean.TRUE;
    arrayOfObject135[8] = RT.keyword(null, "doc");
    arrayOfObject135[9] = "Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects";
    arrayOfObject135[10] = RT.keyword(null, "line");
    arrayOfObject135[11] = Integer.valueOf(2647);
    arrayOfObject135[12] = RT.keyword(null, "file");
    arrayOfObject135[13] = "clojure/core.clj";
    const__989 = (AFn)RT.map(arrayOfObject135);
    const__990 = (Var)RT.var("clojure.core", "range");
    const__991 = Integer.valueOf(2653);
    Object[] arrayOfObject138 = new Object[4];
    arrayOfObject138[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject139 = new Object[1];
    arrayOfObject139[0] = Symbol.intern(null, "end");
    arrayOfObject138[1] = RT.vector(arrayOfObject139);
    Object[] arrayOfObject140 = new Object[2];
    arrayOfObject140[0] = Symbol.intern(null, "start");
    arrayOfObject140[1] = Symbol.intern(null, "end");
    arrayOfObject138[2] = RT.vector(arrayOfObject140);
    Object[] arrayOfObject141 = new Object[3];
    arrayOfObject141[0] = Symbol.intern(null, "start");
    arrayOfObject141[1] = Symbol.intern(null, "end");
    arrayOfObject141[2] = Symbol.intern(null, "step");
    arrayOfObject138[3] = RT.vector(arrayOfObject141);
    const__992 = PersistentList.create(Arrays.asList(arrayOfObject138));
    Object[] arrayOfObject142 = new Object[14];
    arrayOfObject142[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject143 = new Object[4];
    arrayOfObject143[0] = RT.vector(new Object[0]);
    Object[] arrayOfObject144 = new Object[1];
    arrayOfObject144[0] = Symbol.intern(null, "end");
    arrayOfObject143[1] = RT.vector(arrayOfObject144);
    Object[] arrayOfObject145 = new Object[2];
    arrayOfObject145[0] = Symbol.intern(null, "start");
    arrayOfObject145[1] = Symbol.intern(null, "end");
    arrayOfObject143[2] = RT.vector(arrayOfObject145);
    Object[] arrayOfObject146 = new Object[3];
    arrayOfObject146[0] = Symbol.intern(null, "start");
    arrayOfObject146[1] = Symbol.intern(null, "end");
    arrayOfObject146[2] = Symbol.intern(null, "step");
    arrayOfObject143[3] = RT.vector(arrayOfObject146);
    arrayOfObject142[1] = PersistentList.create(Arrays.asList(arrayOfObject143));
    arrayOfObject142[2] = RT.keyword(null, "column");
    arrayOfObject142[3] = Integer.valueOf(1);
    arrayOfObject142[4] = RT.keyword(null, "added");
    arrayOfObject142[5] = "1.0";
    arrayOfObject142[6] = RT.keyword(null, "static");
    arrayOfObject142[7] = Boolean.TRUE;
    arrayOfObject142[8] = RT.keyword(null, "doc");
    arrayOfObject142[9] = "Returns a lazy seq of nums from start (inclusive) to end\n  (exclusive), by step, where start defaults to 0, step to 1, and end\n  to infinity.";
    arrayOfObject142[10] = RT.keyword(null, "line");
    arrayOfObject142[11] = Integer.valueOf(2653);
    arrayOfObject142[12] = RT.keyword(null, "file");
    arrayOfObject142[13] = "clojure/core.clj";
    const__993 = (AFn)RT.map(arrayOfObject142);
    const__994 = (Var)RT.var("clojure.core", "merge");
    const__995 = Integer.valueOf(2676);
    Object[] arrayOfObject147 = new Object[1];
    Object[] arrayOfObject148 = new Object[2];
    arrayOfObject148[0] = Symbol.intern(null, "&");
    arrayOfObject148[1] = Symbol.intern(null, "maps");
    arrayOfObject147[0] = RT.vector(arrayOfObject148);
    const__996 = PersistentList.create(Arrays.asList(arrayOfObject147));
    Object[] arrayOfObject149 = new Object[14];
    arrayOfObject149[0] = RT.keyword(null, "arglists");
    Object[] arrayOfObject150 = new Object[1];
    Object[] arrayOfObject151 = new Object[2];
    arrayOfObject151[0] = Symbol.intern(null, "&");
    arrayOfObject151[1] = Symbol.intern(null, "maps");
    arrayOfObject150[0] = RT.vector(arrayOfObject151);
    arrayOfObject149[1] = PersistentList.create(Arrays.asList(arrayOfObject150));
    arrayOfObject149[2] = RT.keyword(null, "column");
    arrayOfObject149[3] = Integer.valueOf(1);
    arrayOfObject149[4] = RT.keyword(null, "added");
    arrayOfObject149[5] = "1.0";
    arrayOfObject149[6] = RT.keyword(null, "static");
    arrayOfObject149[7] = Boolean.TRUE;
    arrayOfObject149[8] = RT.keyword(null, "doc");
    arrayOfObject149[9] = "Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.";
    arrayOfObject149[10] = RT.keyword(null, "line");
    arrayOfObject149[11] = Integer.valueOf(2676);
    arrayOfObject149[12] = RT.keyword(null, "file");
    arrayOfObject149[13] = "clojure/core.clj";
    const__997 = (AFn)RT.map(arrayOfObject149);
    const__998 = (Var)RT.var("clojure.core", "merge-with");
    const__999 = Integer.valueOf(2686);
  }

  public static void load()
  {
    ((IFn)const__0.getRawRoot()).invoke(const__1);
    ((IFn)new core.loading__1327__auto__()).invoke();
    if (((Symbol)const__1).equals(const__2))
    {
      const__3.setMeta((IPersistentMap)const__9);
      const__10.setMeta((IPersistentMap)const__12);
      Var localVar1 = const__13;
      localVar1.setMeta((IPersistentMap)const__19);
      localVar1.bindRoot(PersistentList.creator);
      Var localVar2 = const__20;
      localVar2.setMeta((IPersistentMap)const__24);
      localVar2.bindRoot(new core.cons());
      Var localVar3 = const__25;
      localVar3.setMeta((IPersistentMap)const__28);
      localVar3.bindRoot(new core.let());
      Var localVar4 = const__29;
      localVar4.setMeta((IPersistentMap)const__31);
      localVar4.bindRoot(new core.loop());
      Var localVar5 = const__32;
      localVar5.setMeta((IPersistentMap)const__34);
      localVar5.bindRoot(new core.fn());
      Var localVar6 = const__35;
      localVar6.setMeta((IPersistentMap)const__38);
      localVar6.bindRoot(new core.first());
      Var localVar7 = const__39;
      localVar7.setMeta((IPersistentMap)const__44);
      localVar7.bindRoot(new core.next());
      Var localVar8 = const__45;
      localVar8.setMeta((IPersistentMap)const__48);
      localVar8.bindRoot(new core.rest());
      Var localVar9 = const__49;
      localVar9.setMeta((IPersistentMap)const__52);
      localVar9.bindRoot(new core.conj());
      Var localVar10 = const__53;
      localVar10.setMeta((IPersistentMap)const__56);
      localVar10.bindRoot(new core.second());
      Var localVar11 = const__57;
      localVar11.setMeta((IPersistentMap)const__60);
      localVar11.bindRoot(new core.ffirst());
      Var localVar12 = const__61;
      localVar12.setMeta((IPersistentMap)const__64);
      localVar12.bindRoot(new core.nfirst());
      Var localVar13 = const__65;
      localVar13.setMeta((IPersistentMap)const__68);
      localVar13.bindRoot(new core.fnext());
      Var localVar14 = const__69;
      localVar14.setMeta((IPersistentMap)const__72);
      localVar14.bindRoot(new core.nnext());
      Var localVar15 = const__73;
      localVar15.setMeta((IPersistentMap)const__76);
      localVar15.bindRoot(new core.seq());
      Var localVar16 = const__77;
      localVar16.setMeta((IPersistentMap)const__80);
      localVar16.bindRoot(new core.instance_QMARK_());
      Var localVar17 = const__81;
      localVar17.setMeta((IPersistentMap)const__84);
      localVar17.bindRoot(new core.seq_QMARK_());
      Var localVar18 = const__85;
      localVar18.setMeta((IPersistentMap)const__88);
      localVar18.bindRoot(new core.char_QMARK_());
      Var localVar19 = const__89;
      localVar19.setMeta((IPersistentMap)const__92);
      localVar19.bindRoot(new core.string_QMARK_());
      Var localVar20 = const__93;
      localVar20.setMeta((IPersistentMap)const__96);
      localVar20.bindRoot(new core.map_QMARK_());
      Var localVar21 = const__97;
      localVar21.setMeta((IPersistentMap)const__100);
      localVar21.bindRoot(new core.vector_QMARK_());
      Var localVar22 = const__101;
      localVar22.setMeta((IPersistentMap)const__104);
      localVar22.bindRoot(new core.assoc());
      Var localVar23 = const__105;
      localVar23.setMeta((IPersistentMap)const__108);
      localVar23.bindRoot(new core.meta());
      Var localVar24 = const__109;
      localVar24.setMeta((IPersistentMap)const__112);
      localVar24.bindRoot(new core.with_meta());
      Var localVar25 = const__113.setDynamic(true);
      localVar25.setMeta((IPersistentMap)const__117);
      localVar25.bindRoot(new core.assert_valid_fdecl());
      Var localVar26 = const__118;
      localVar26.setMeta((IPersistentMap)const__120);
      localVar26.bindRoot(new core.sigs());
      Var localVar27 = const__121;
      localVar27.setMeta((IPersistentMap)const__124);
      localVar27.bindRoot(new core.last());
      Var localVar28 = const__125;
      localVar28.setMeta((IPersistentMap)const__128);
      localVar28.bindRoot(new core.butlast());
      Var localVar29 = const__129;
      localVar29.setMeta((IPersistentMap)const__132);
      localVar29.bindRoot(new core.defn());
      ((Var)const__129).setMacro();
      Var localVar30 = const__133;
      localVar30.setMeta((IPersistentMap)const__136);
      localVar30.bindRoot(new core.cast());
      Var localVar31 = const__137;
      localVar31.setMeta((IPersistentMap)const__140);
      localVar31.bindRoot(new core.to_array());
      Var localVar32 = const__141;
      localVar32.setMeta((IPersistentMap)const__144);
      localVar32.bindRoot(new core.vector());
      Var localVar33 = const__145;
      localVar33.setMeta((IPersistentMap)const__148);
      localVar33.bindRoot(new core.vec());
      Var localVar34 = const__149;
      localVar34.setMeta((IPersistentMap)const__152);
      localVar34.bindRoot(new core.hash_map());
      Var localVar35 = const__153;
      localVar35.setMeta((IPersistentMap)const__156);
      localVar35.bindRoot(new core.hash_set());
      Var localVar36 = const__157;
      localVar36.setMeta((IPersistentMap)const__160);
      localVar36.bindRoot(new core.sorted_map());
      Var localVar37 = const__161;
      localVar37.setMeta((IPersistentMap)const__164);
      localVar37.bindRoot(new core.sorted_map_by());
      Var localVar38 = const__165;
      localVar38.setMeta((IPersistentMap)const__168);
      localVar38.bindRoot(new core.sorted_set());
      Var localVar39 = const__169;
      localVar39.setMeta((IPersistentMap)const__172);
      localVar39.bindRoot(new core.sorted_set_by());
      Var localVar40 = const__173;
      Object[] arrayOfObject1 = new Object[18];
      arrayOfObject1[0] = const__4;
      arrayOfObject1[1] = "clojure/core.clj";
      arrayOfObject1[2] = const__5;
      arrayOfObject1[3] = const__6;
      arrayOfObject1[4] = const__7;
      arrayOfObject1[5] = const__174;
      arrayOfObject1[6] = const__17;
      arrayOfObject1[7] = const__175;
      arrayOfObject1[8] = const__176;
      arrayOfObject1[9] = new core.nil_QMARK___inliner();
      arrayOfObject1[10] = const__22;
      arrayOfObject1[11] = Boolean.TRUE;
      arrayOfObject1[12] = const__15;
      arrayOfObject1[13] = "1.0";
      arrayOfObject1[14] = const__41;
      arrayOfObject1[15] = const__177;
      arrayOfObject1[16] = const__16;
      arrayOfObject1[17] = "Returns true if x is nil, false otherwise.";
      localVar40.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject1));
      localVar40.bindRoot(new core.nil_QMARK_());
      Var localVar41 = const__178;
      localVar41.setMeta((IPersistentMap)const__181);
      localVar41.bindRoot(new core.defmacro());
      ((Var)const__178).setMacro();
      Var localVar42 = const__182;
      localVar42.setMeta((IPersistentMap)const__185);
      localVar42.bindRoot(new core.when());
      ((Var)const__182).setMacro();
      Var localVar43 = const__186;
      localVar43.setMeta((IPersistentMap)const__189);
      localVar43.bindRoot(new core.when_not());
      ((Var)const__186).setMacro();
      Var localVar44 = const__190;
      localVar44.setMeta((IPersistentMap)const__193);
      localVar44.bindRoot(new core.false_QMARK_());
      Var localVar45 = const__194;
      localVar45.setMeta((IPersistentMap)const__197);
      localVar45.bindRoot(new core.true_QMARK_());
      Var localVar46 = const__198;
      localVar46.setMeta((IPersistentMap)const__201);
      localVar46.bindRoot(new core.not());
      Var localVar47 = const__202;
      localVar47.setMeta((IPersistentMap)const__206);
      localVar47.bindRoot(new core.str());
      Var localVar48 = const__207;
      localVar48.setMeta((IPersistentMap)const__210);
      localVar48.bindRoot(new core.symbol_QMARK_());
      Var localVar49 = const__211;
      localVar49.setMeta((IPersistentMap)const__214);
      localVar49.bindRoot(new core.keyword_QMARK_());
      Var localVar50 = const__215;
      localVar50.setMeta((IPersistentMap)const__219);
      localVar50.bindRoot(new core.symbol());
      Var localVar51 = const__220;
      localVar51.setMeta((IPersistentMap)const__223);
      localVar51.bindRoot(new core.gensym());
      Var localVar52 = const__224;
      localVar52.setMeta((IPersistentMap)const__227);
      localVar52.bindRoot(new core.cond());
      ((Var)const__224).setMacro();
      Var localVar53 = const__228;
      localVar53.setMeta((IPersistentMap)const__232);
      localVar53.bindRoot(new core.keyword());
      Var localVar54 = const__233;
      localVar54.setMeta((IPersistentMap)const__236);
      localVar54.bindRoot(new core.find_keyword());
      Var localVar55 = const__237;
      localVar55.setMeta((IPersistentMap)const__240);
      localVar55.bindRoot(new core.spread());
      Var localVar56 = const__241;
      localVar56.setMeta((IPersistentMap)const__244);
      localVar56.bindRoot(new core.list_STAR_());
      Var localVar57 = const__245;
      localVar57.setMeta((IPersistentMap)const__248);
      localVar57.bindRoot(new core.apply());
      Var localVar58 = const__249;
      localVar58.setMeta((IPersistentMap)const__252);
      localVar58.bindRoot(new core.vary_meta());
      Var localVar59 = const__253;
      localVar59.setMeta((IPersistentMap)const__256);
      localVar59.bindRoot(new core.lazy_seq());
      ((Var)const__253).setMacro();
      Var localVar60 = const__257;
      localVar60.setMeta((IPersistentMap)const__261);
      localVar60.bindRoot(new core.chunk_buffer());
      Var localVar61 = const__262;
      localVar61.setMeta((IPersistentMap)const__265);
      localVar61.bindRoot(new core.chunk_append());
      Var localVar62 = const__266;
      localVar62.setMeta((IPersistentMap)const__270);
      localVar62.bindRoot(new core.chunk());
      Var localVar63 = const__271;
      localVar63.setMeta((IPersistentMap)const__274);
      localVar63.bindRoot(new core.chunk_first());
      Var localVar64 = const__275;
      localVar64.setMeta((IPersistentMap)const__278);
      localVar64.bindRoot(new core.chunk_rest());
      Var localVar65 = const__279;
      localVar65.setMeta((IPersistentMap)const__282);
      localVar65.bindRoot(new core.chunk_next());
      Var localVar66 = const__283;
      localVar66.setMeta((IPersistentMap)const__286);
      localVar66.bindRoot(new core.chunk_cons());
      Var localVar67 = const__287;
      localVar67.setMeta((IPersistentMap)const__290);
      localVar67.bindRoot(new core.chunked_seq_QMARK_());
      Var localVar68 = const__291;
      localVar68.setMeta((IPersistentMap)const__294);
      localVar68.bindRoot(new core.concat());
      Var localVar69 = const__295;
      localVar69.setMeta((IPersistentMap)const__298);
      localVar69.bindRoot(new core.delay());
      ((Var)const__295).setMacro();
      Var localVar70 = const__299;
      localVar70.setMeta((IPersistentMap)const__302);
      localVar70.bindRoot(new core.delay_QMARK_());
      Var localVar71 = const__303;
      localVar71.setMeta((IPersistentMap)const__306);
      localVar71.bindRoot(new core.force());
      Var localVar72 = const__307;
      localVar72.setMeta((IPersistentMap)const__310);
      localVar72.bindRoot(new core.if_not());
      ((Var)const__307).setMacro();
      Var localVar73 = const__311;
      Object[] arrayOfObject2 = new Object[16];
      arrayOfObject2[0] = const__4;
      arrayOfObject2[1] = "clojure/core.clj";
      arrayOfObject2[2] = const__5;
      arrayOfObject2[3] = const__6;
      arrayOfObject2[4] = const__7;
      arrayOfObject2[5] = const__312;
      arrayOfObject2[6] = const__17;
      arrayOfObject2[7] = const__313;
      arrayOfObject2[8] = const__15;
      arrayOfObject2[9] = "1.0";
      arrayOfObject2[10] = const__314;
      arrayOfObject2[11] = const__316;
      arrayOfObject2[12] = const__176;
      arrayOfObject2[13] = new core.identical_QMARK___inliner();
      arrayOfObject2[14] = const__16;
      arrayOfObject2[15] = "Tests if 2 arguments are the same object";
      localVar73.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject2));
      localVar73.bindRoot(new core.identical_QMARK_());
      Var localVar74 = const__317;
      Object[] arrayOfObject3 = new Object[16];
      arrayOfObject3[0] = const__4;
      arrayOfObject3[1] = "clojure/core.clj";
      arrayOfObject3[2] = const__5;
      arrayOfObject3[3] = const__6;
      arrayOfObject3[4] = const__7;
      arrayOfObject3[5] = const__318;
      arrayOfObject3[6] = const__17;
      arrayOfObject3[7] = const__319;
      arrayOfObject3[8] = const__15;
      arrayOfObject3[9] = "1.0";
      arrayOfObject3[10] = const__314;
      arrayOfObject3[11] = const__320;
      arrayOfObject3[12] = const__176;
      arrayOfObject3[13] = new core._EQ___inliner();
      arrayOfObject3[14] = const__16;
      arrayOfObject3[15] = "Equality. Returns true if x equals y, false if not. Same as\n  Java x.equals(y) except it also works for nil, and compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define equals() (and thus =) as a value, not an identity,\n  comparison.";
      localVar74.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject3));
      localVar74.bindRoot(new core._EQ_());
      Var localVar75 = const__321;
      localVar75.setMeta((IPersistentMap)const__324);
      localVar75.bindRoot(new core.not_EQ_());
      Var localVar76 = const__325;
      Object[] arrayOfObject4 = new Object[14];
      arrayOfObject4[0] = const__4;
      arrayOfObject4[1] = "clojure/core.clj";
      arrayOfObject4[2] = const__5;
      arrayOfObject4[3] = const__6;
      arrayOfObject4[4] = const__7;
      arrayOfObject4[5] = const__326;
      arrayOfObject4[6] = const__17;
      arrayOfObject4[7] = const__327;
      arrayOfObject4[8] = const__15;
      arrayOfObject4[9] = "1.0";
      arrayOfObject4[10] = const__176;
      arrayOfObject4[11] = new core.compare__inliner();
      arrayOfObject4[12] = const__16;
      arrayOfObject4[13] = "Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Same as Java x.compareTo(y) except it also works for nil, and\n  compares numbers and collections in a type-independent manner. x\n  must implement Comparable";
      localVar76.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject4));
      localVar76.bindRoot(new core.compare());
      Var localVar77 = const__328;
      localVar77.setMeta((IPersistentMap)const__331);
      localVar77.bindRoot(new core.and());
      ((Var)const__328).setMacro();
      Var localVar78 = const__332;
      localVar78.setMeta((IPersistentMap)const__335);
      localVar78.bindRoot(new core.or());
      ((Var)const__332).setMacro();
      Var localVar79 = const__336;
      Object[] arrayOfObject5 = new Object[14];
      arrayOfObject5[0] = const__4;
      arrayOfObject5[1] = "clojure/core.clj";
      arrayOfObject5[2] = const__5;
      arrayOfObject5[3] = const__6;
      arrayOfObject5[4] = const__7;
      arrayOfObject5[5] = const__337;
      arrayOfObject5[6] = const__17;
      arrayOfObject5[7] = const__338;
      arrayOfObject5[8] = const__15;
      arrayOfObject5[9] = "1.0";
      arrayOfObject5[10] = const__176;
      arrayOfObject5[11] = new core.zero_QMARK___inliner();
      arrayOfObject5[12] = const__16;
      arrayOfObject5[13] = "Returns true if num is zero, else false";
      localVar79.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject5));
      localVar79.bindRoot(new core.zero_QMARK_());
      Var localVar80 = const__339;
      Object[] arrayOfObject6 = new Object[14];
      arrayOfObject6[0] = const__4;
      arrayOfObject6[1] = "clojure/core.clj";
      arrayOfObject6[2] = const__5;
      arrayOfObject6[3] = const__6;
      arrayOfObject6[4] = const__7;
      arrayOfObject6[5] = const__340;
      arrayOfObject6[6] = const__17;
      arrayOfObject6[7] = const__341;
      arrayOfObject6[8] = const__15;
      arrayOfObject6[9] = "1.0";
      arrayOfObject6[10] = const__176;
      arrayOfObject6[11] = new core.count__inliner();
      arrayOfObject6[12] = const__16;
      arrayOfObject6[13] = "Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Java Collections and Maps";
      localVar80.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject6));
      localVar80.bindRoot(new core.count());
      Var localVar81 = const__342;
      Object[] arrayOfObject7 = new Object[14];
      arrayOfObject7[0] = const__4;
      arrayOfObject7[1] = "clojure/core.clj";
      arrayOfObject7[2] = const__5;
      arrayOfObject7[3] = const__6;
      arrayOfObject7[4] = const__7;
      arrayOfObject7[5] = const__343;
      arrayOfObject7[6] = const__17;
      arrayOfObject7[7] = const__344;
      arrayOfObject7[8] = const__15;
      arrayOfObject7[9] = "1.0";
      arrayOfObject7[10] = const__176;
      arrayOfObject7[11] = new core.int__inliner();
      arrayOfObject7[12] = const__16;
      arrayOfObject7[13] = "Coerce to int";
      localVar81.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject7));
      localVar81.bindRoot(new core.int());
      Var localVar82 = const__345;
      Object[] arrayOfObject8 = new Object[16];
      arrayOfObject8[0] = const__4;
      arrayOfObject8[1] = "clojure/core.clj";
      arrayOfObject8[2] = const__5;
      arrayOfObject8[3] = const__6;
      arrayOfObject8[4] = const__7;
      arrayOfObject8[5] = const__346;
      arrayOfObject8[6] = const__17;
      arrayOfObject8[7] = const__347;
      arrayOfObject8[8] = const__15;
      arrayOfObject8[9] = "1.0";
      arrayOfObject8[10] = const__314;
      arrayOfObject8[11] = const__349;
      arrayOfObject8[12] = const__176;
      arrayOfObject8[13] = new core.nth__inliner();
      arrayOfObject8[14] = const__16;
      arrayOfObject8[15] = "Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, Java arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.";
      localVar82.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject8));
      localVar82.bindRoot(new core.nth());
      Var localVar83 = const__350;
      Object[] arrayOfObject9 = new Object[16];
      arrayOfObject9[0] = const__4;
      arrayOfObject9[1] = "clojure/core.clj";
      arrayOfObject9[2] = const__5;
      arrayOfObject9[3] = const__6;
      arrayOfObject9[4] = const__7;
      arrayOfObject9[5] = const__351;
      arrayOfObject9[6] = const__17;
      arrayOfObject9[7] = const__352;
      arrayOfObject9[8] = const__15;
      arrayOfObject9[9] = "1.0";
      arrayOfObject9[10] = const__314;
      arrayOfObject9[11] = const__353;
      arrayOfObject9[12] = const__176;
      arrayOfObject9[13] = new core._LT___inliner();
      arrayOfObject9[14] = const__16;
      arrayOfObject9[15] = "Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.";
      localVar83.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject9));
      localVar83.bindRoot(new core._LT_());
      Var localVar84 = const__354;
      Object[] arrayOfObject10 = new Object[14];
      arrayOfObject10[0] = const__4;
      arrayOfObject10[1] = "clojure/core.clj";
      arrayOfObject10[2] = const__5;
      arrayOfObject10[3] = const__6;
      arrayOfObject10[4] = const__7;
      arrayOfObject10[5] = const__355;
      arrayOfObject10[6] = const__17;
      arrayOfObject10[7] = const__356;
      arrayOfObject10[8] = const__15;
      arrayOfObject10[9] = "1.0";
      arrayOfObject10[10] = const__176;
      arrayOfObject10[11] = new core.inc_SINGLEQUOTE___inliner();
      arrayOfObject10[12] = const__16;
      arrayOfObject10[13] = "Returns a number one greater than num. Supports arbitrary precision.\n  See also: inc";
      localVar84.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject10));
      localVar84.bindRoot(new core.inc_SINGLEQUOTE_());
      Var localVar85 = const__357;
      Object[] arrayOfObject11 = new Object[14];
      arrayOfObject11[0] = const__4;
      arrayOfObject11[1] = "clojure/core.clj";
      arrayOfObject11[2] = const__5;
      arrayOfObject11[3] = const__6;
      arrayOfObject11[4] = const__7;
      arrayOfObject11[5] = const__358;
      arrayOfObject11[6] = const__17;
      arrayOfObject11[7] = const__359;
      arrayOfObject11[8] = const__15;
      arrayOfObject11[9] = "1.2";
      arrayOfObject11[10] = const__176;
      arrayOfObject11[11] = new core.inc__inliner();
      arrayOfObject11[12] = const__16;
      arrayOfObject11[13] = "Returns a number one greater than num. Does not auto-promote\n  longs, will throw on overflow. See also: inc'";
      localVar85.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject11));
      localVar85.bindRoot(new core.inc());
      Var localVar86 = const__360;
      localVar86.setMeta((IPersistentMap)const__363);
      localVar86.bindRoot(new core.reduce1());
      Var localVar87 = const__364;
      localVar87.setMeta((IPersistentMap)const__367);
      localVar87.bindRoot(new core.reverse());
      Var localVar88 = const__368;
      localVar88.setMeta((IPersistentMap)const__371);
      localVar88.bindRoot(new core.nary_inline());
      Var localVar89 = const__372;
      localVar89.setMeta((IPersistentMap)const__375);
      localVar89.bindRoot(new core._GT_1_QMARK_());
      Var localVar90 = const__376;
      localVar90.setMeta((IPersistentMap)const__379);
      localVar90.bindRoot(new core._GT_0_QMARK_());
      Var localVar91 = const__380;
      Object[] arrayOfObject12 = new Object[16];
      arrayOfObject12[0] = const__4;
      arrayOfObject12[1] = "clojure/core.clj";
      arrayOfObject12[2] = const__5;
      arrayOfObject12[3] = const__6;
      arrayOfObject12[4] = const__7;
      arrayOfObject12[5] = const__381;
      arrayOfObject12[6] = const__17;
      arrayOfObject12[7] = const__382;
      arrayOfObject12[8] = const__15;
      arrayOfObject12[9] = "1.0";
      arrayOfObject12[10] = const__314;
      arrayOfObject12[11] = const__372.getRawRoot();
      arrayOfObject12[12] = const__176;
      arrayOfObject12[13] = ((IFn)const__368.getRawRoot()).invoke(const__383);
      arrayOfObject12[14] = const__16;
      arrayOfObject12[15] = "Returns the sum of nums. (+) returns 0. Supports arbitrary precision.\n  See also: +";
      localVar91.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject12));
      localVar91.bindRoot(new core._PLUS__SINGLEQUOTE_());
      Var localVar92 = const__384;
      Object[] arrayOfObject13 = new Object[16];
      arrayOfObject13[0] = const__4;
      arrayOfObject13[1] = "clojure/core.clj";
      arrayOfObject13[2] = const__5;
      arrayOfObject13[3] = const__6;
      arrayOfObject13[4] = const__7;
      arrayOfObject13[5] = const__385;
      arrayOfObject13[6] = const__17;
      arrayOfObject13[7] = const__386;
      arrayOfObject13[8] = const__15;
      arrayOfObject13[9] = "1.2";
      arrayOfObject13[10] = const__314;
      arrayOfObject13[11] = const__372.getRawRoot();
      arrayOfObject13[12] = const__176;
      arrayOfObject13[13] = ((IFn)const__368.getRawRoot()).invoke(const__387, const__388);
      arrayOfObject13[14] = const__16;
      arrayOfObject13[15] = "Returns the sum of nums. (+) returns 0. Does not auto-promote\n  longs, will throw on overflow. See also: +'";
      localVar92.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject13));
      localVar92.bindRoot(new core._PLUS_());
      Var localVar93 = const__389;
      Object[] arrayOfObject14 = new Object[16];
      arrayOfObject14[0] = const__4;
      arrayOfObject14[1] = "clojure/core.clj";
      arrayOfObject14[2] = const__5;
      arrayOfObject14[3] = const__6;
      arrayOfObject14[4] = const__7;
      arrayOfObject14[5] = const__390;
      arrayOfObject14[6] = const__17;
      arrayOfObject14[7] = const__391;
      arrayOfObject14[8] = const__15;
      arrayOfObject14[9] = "1.0";
      arrayOfObject14[10] = const__314;
      arrayOfObject14[11] = const__372.getRawRoot();
      arrayOfObject14[12] = const__176;
      arrayOfObject14[13] = ((IFn)const__368.getRawRoot()).invoke(const__392);
      arrayOfObject14[14] = const__16;
      arrayOfObject14[15] = "Returns the product of nums. (*) returns 1. Supports arbitrary precision.\n  See also: *";
      localVar93.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject14));
      localVar93.bindRoot(new core._STAR__SINGLEQUOTE_());
      Var localVar94 = const__393;
      Object[] arrayOfObject15 = new Object[16];
      arrayOfObject15[0] = const__4;
      arrayOfObject15[1] = "clojure/core.clj";
      arrayOfObject15[2] = const__5;
      arrayOfObject15[3] = const__6;
      arrayOfObject15[4] = const__7;
      arrayOfObject15[5] = const__394;
      arrayOfObject15[6] = const__17;
      arrayOfObject15[7] = const__395;
      arrayOfObject15[8] = const__15;
      arrayOfObject15[9] = "1.2";
      arrayOfObject15[10] = const__314;
      arrayOfObject15[11] = const__372.getRawRoot();
      arrayOfObject15[12] = const__176;
      arrayOfObject15[13] = ((IFn)const__368.getRawRoot()).invoke(const__396, const__397);
      arrayOfObject15[14] = const__16;
      arrayOfObject15[15] = "Returns the product of nums. (*) returns 1. Does not auto-promote\n  longs, will throw on overflow. See also: *'";
      localVar94.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject15));
      localVar94.bindRoot(new core._STAR_());
      Var localVar95 = const__398;
      Object[] arrayOfObject16 = new Object[16];
      arrayOfObject16[0] = const__4;
      arrayOfObject16[1] = "clojure/core.clj";
      arrayOfObject16[2] = const__5;
      arrayOfObject16[3] = const__6;
      arrayOfObject16[4] = const__7;
      arrayOfObject16[5] = const__399;
      arrayOfObject16[6] = const__17;
      arrayOfObject16[7] = const__400;
      arrayOfObject16[8] = const__15;
      arrayOfObject16[9] = "1.0";
      arrayOfObject16[10] = const__314;
      arrayOfObject16[11] = const__372.getRawRoot();
      arrayOfObject16[12] = const__176;
      arrayOfObject16[13] = ((IFn)const__368.getRawRoot()).invoke(const__401);
      arrayOfObject16[14] = const__16;
      arrayOfObject16[15] = "If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.";
      localVar95.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject16));
      localVar95.bindRoot(new core._SLASH_());
      Var localVar96 = const__402;
      Object[] arrayOfObject17 = new Object[16];
      arrayOfObject17[0] = const__4;
      arrayOfObject17[1] = "clojure/core.clj";
      arrayOfObject17[2] = const__5;
      arrayOfObject17[3] = const__6;
      arrayOfObject17[4] = const__7;
      arrayOfObject17[5] = const__403;
      arrayOfObject17[6] = const__17;
      arrayOfObject17[7] = const__404;
      arrayOfObject17[8] = const__15;
      arrayOfObject17[9] = "1.0";
      arrayOfObject17[10] = const__314;
      arrayOfObject17[11] = const__376.getRawRoot();
      arrayOfObject17[12] = const__176;
      arrayOfObject17[13] = ((IFn)const__368.getRawRoot()).invoke(const__405);
      arrayOfObject17[14] = const__16;
      arrayOfObject17[15] = "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result. Supports arbitrary precision.\n  See also: -";
      localVar96.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject17));
      localVar96.bindRoot(new core.__SINGLEQUOTE_());
      Var localVar97 = const__406;
      Object[] arrayOfObject18 = new Object[16];
      arrayOfObject18[0] = const__4;
      arrayOfObject18[1] = "clojure/core.clj";
      arrayOfObject18[2] = const__5;
      arrayOfObject18[3] = const__6;
      arrayOfObject18[4] = const__7;
      arrayOfObject18[5] = const__407;
      arrayOfObject18[6] = const__17;
      arrayOfObject18[7] = const__408;
      arrayOfObject18[8] = const__15;
      arrayOfObject18[9] = "1.2";
      arrayOfObject18[10] = const__314;
      arrayOfObject18[11] = const__376.getRawRoot();
      arrayOfObject18[12] = const__176;
      arrayOfObject18[13] = ((IFn)const__368.getRawRoot()).invoke(const__409, const__410);
      arrayOfObject18[14] = const__16;
      arrayOfObject18[15] = "If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result. Does not auto-promote\n  longs, will throw on overflow. See also: -'";
      localVar97.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject18));
      localVar97.bindRoot(new core._());
      Var localVar98 = const__411;
      Object[] arrayOfObject19 = new Object[16];
      arrayOfObject19[0] = const__4;
      arrayOfObject19[1] = "clojure/core.clj";
      arrayOfObject19[2] = const__5;
      arrayOfObject19[3] = const__6;
      arrayOfObject19[4] = const__7;
      arrayOfObject19[5] = const__412;
      arrayOfObject19[6] = const__17;
      arrayOfObject19[7] = const__413;
      arrayOfObject19[8] = const__15;
      arrayOfObject19[9] = "1.0";
      arrayOfObject19[10] = const__314;
      arrayOfObject19[11] = const__414;
      arrayOfObject19[12] = const__176;
      arrayOfObject19[13] = new core._LT__EQ___inliner();
      arrayOfObject19[14] = const__16;
      arrayOfObject19[15] = "Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.";
      localVar98.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject19));
      localVar98.bindRoot(new core._LT__EQ_());
      Var localVar99 = const__415;
      Object[] arrayOfObject20 = new Object[16];
      arrayOfObject20[0] = const__4;
      arrayOfObject20[1] = "clojure/core.clj";
      arrayOfObject20[2] = const__5;
      arrayOfObject20[3] = const__6;
      arrayOfObject20[4] = const__7;
      arrayOfObject20[5] = const__416;
      arrayOfObject20[6] = const__17;
      arrayOfObject20[7] = const__417;
      arrayOfObject20[8] = const__15;
      arrayOfObject20[9] = "1.0";
      arrayOfObject20[10] = const__314;
      arrayOfObject20[11] = const__418;
      arrayOfObject20[12] = const__176;
      arrayOfObject20[13] = new core._GT___inliner();
      arrayOfObject20[14] = const__16;
      arrayOfObject20[15] = "Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.";
      localVar99.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject20));
      localVar99.bindRoot(new core._GT_());
      Var localVar100 = const__419;
      Object[] arrayOfObject21 = new Object[16];
      arrayOfObject21[0] = const__4;
      arrayOfObject21[1] = "clojure/core.clj";
      arrayOfObject21[2] = const__5;
      arrayOfObject21[3] = const__6;
      arrayOfObject21[4] = const__7;
      arrayOfObject21[5] = const__420;
      arrayOfObject21[6] = const__17;
      arrayOfObject21[7] = const__421;
      arrayOfObject21[8] = const__15;
      arrayOfObject21[9] = "1.0";
      arrayOfObject21[10] = const__314;
      arrayOfObject21[11] = const__422;
      arrayOfObject21[12] = const__176;
      arrayOfObject21[13] = new core._GT__EQ___inliner();
      arrayOfObject21[14] = const__16;
      arrayOfObject21[15] = "Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.";
      localVar100.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject21));
      localVar100.bindRoot(new core._GT__EQ_());
      Var localVar101 = const__423;
      Object[] arrayOfObject22 = new Object[16];
      arrayOfObject22[0] = const__4;
      arrayOfObject22[1] = "clojure/core.clj";
      arrayOfObject22[2] = const__5;
      arrayOfObject22[3] = const__6;
      arrayOfObject22[4] = const__7;
      arrayOfObject22[5] = const__424;
      arrayOfObject22[6] = const__17;
      arrayOfObject22[7] = const__425;
      arrayOfObject22[8] = const__15;
      arrayOfObject22[9] = "1.0";
      arrayOfObject22[10] = const__314;
      arrayOfObject22[11] = const__426;
      arrayOfObject22[12] = const__176;
      arrayOfObject22[13] = new core._EQ__EQ___inliner();
      arrayOfObject22[14] = const__16;
      arrayOfObject22[15] = "Returns non-nil if nums all have the equivalent\n  value (type-independent), otherwise false";
      localVar101.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject22));
      localVar101.bindRoot(new core._EQ__EQ_());
      Var localVar102 = const__427;
      Object[] arrayOfObject23 = new Object[16];
      arrayOfObject23[0] = const__4;
      arrayOfObject23[1] = "clojure/core.clj";
      arrayOfObject23[2] = const__5;
      arrayOfObject23[3] = const__6;
      arrayOfObject23[4] = const__7;
      arrayOfObject23[5] = const__428;
      arrayOfObject23[6] = const__17;
      arrayOfObject23[7] = const__429;
      arrayOfObject23[8] = const__176;
      arrayOfObject23[9] = ((IFn)const__368.getRawRoot()).invoke(const__430);
      arrayOfObject23[10] = const__314;
      arrayOfObject23[11] = const__372.getRawRoot();
      arrayOfObject23[12] = const__15;
      arrayOfObject23[13] = "1.0";
      arrayOfObject23[14] = const__16;
      arrayOfObject23[15] = "Returns the greatest of the nums.";
      localVar102.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject23));
      localVar102.bindRoot(new core.max());
      Var localVar103 = const__431;
      Object[] arrayOfObject24 = new Object[16];
      arrayOfObject24[0] = const__4;
      arrayOfObject24[1] = "clojure/core.clj";
      arrayOfObject24[2] = const__5;
      arrayOfObject24[3] = const__6;
      arrayOfObject24[4] = const__7;
      arrayOfObject24[5] = const__432;
      arrayOfObject24[6] = const__17;
      arrayOfObject24[7] = const__433;
      arrayOfObject24[8] = const__176;
      arrayOfObject24[9] = ((IFn)const__368.getRawRoot()).invoke(const__434);
      arrayOfObject24[10] = const__314;
      arrayOfObject24[11] = const__372.getRawRoot();
      arrayOfObject24[12] = const__15;
      arrayOfObject24[13] = "1.0";
      arrayOfObject24[14] = const__16;
      arrayOfObject24[15] = "Returns the least of the nums.";
      localVar103.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject24));
      localVar103.bindRoot(new core.min());
      Var localVar104 = const__435;
      Object[] arrayOfObject25 = new Object[14];
      arrayOfObject25[0] = const__4;
      arrayOfObject25[1] = "clojure/core.clj";
      arrayOfObject25[2] = const__5;
      arrayOfObject25[3] = const__6;
      arrayOfObject25[4] = const__7;
      arrayOfObject25[5] = const__436;
      arrayOfObject25[6] = const__17;
      arrayOfObject25[7] = const__437;
      arrayOfObject25[8] = const__15;
      arrayOfObject25[9] = "1.0";
      arrayOfObject25[10] = const__176;
      arrayOfObject25[11] = new core.dec_SINGLEQUOTE___inliner();
      arrayOfObject25[12] = const__16;
      arrayOfObject25[13] = "Returns a number one less than num. Supports arbitrary precision.\n  See also: dec";
      localVar104.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject25));
      localVar104.bindRoot(new core.dec_SINGLEQUOTE_());
      Var localVar105 = const__438;
      Object[] arrayOfObject26 = new Object[14];
      arrayOfObject26[0] = const__4;
      arrayOfObject26[1] = "clojure/core.clj";
      arrayOfObject26[2] = const__5;
      arrayOfObject26[3] = const__6;
      arrayOfObject26[4] = const__7;
      arrayOfObject26[5] = const__439;
      arrayOfObject26[6] = const__17;
      arrayOfObject26[7] = const__440;
      arrayOfObject26[8] = const__15;
      arrayOfObject26[9] = "1.2";
      arrayOfObject26[10] = const__176;
      arrayOfObject26[11] = new core.dec__inliner();
      arrayOfObject26[12] = const__16;
      arrayOfObject26[13] = "Returns a number one less than num. Does not auto-promote\n  longs, will throw on overflow. See also: dec'";
      localVar105.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject26));
      localVar105.bindRoot(new core.dec());
      Var localVar106 = const__441;
      Object[] arrayOfObject27 = new Object[14];
      arrayOfObject27[0] = const__4;
      arrayOfObject27[1] = "clojure/core.clj";
      arrayOfObject27[2] = const__5;
      arrayOfObject27[3] = const__6;
      arrayOfObject27[4] = const__7;
      arrayOfObject27[5] = const__442;
      arrayOfObject27[6] = const__17;
      arrayOfObject27[7] = const__443;
      arrayOfObject27[8] = const__15;
      arrayOfObject27[9] = "1.0";
      arrayOfObject27[10] = const__176;
      arrayOfObject27[11] = new core.unchecked_inc_int__inliner();
      arrayOfObject27[12] = const__16;
      arrayOfObject27[13] = "Returns a number one greater than x, an int.\n  Note - uses a primitive operator subject to overflow.";
      localVar106.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject27));
      localVar106.bindRoot(new core.unchecked_inc_int());
      Var localVar107 = const__444;
      Object[] arrayOfObject28 = new Object[14];
      arrayOfObject28[0] = const__4;
      arrayOfObject28[1] = "clojure/core.clj";
      arrayOfObject28[2] = const__5;
      arrayOfObject28[3] = const__6;
      arrayOfObject28[4] = const__7;
      arrayOfObject28[5] = const__445;
      arrayOfObject28[6] = const__17;
      arrayOfObject28[7] = const__446;
      arrayOfObject28[8] = const__15;
      arrayOfObject28[9] = "1.0";
      arrayOfObject28[10] = const__176;
      arrayOfObject28[11] = new core.unchecked_inc__inliner();
      arrayOfObject28[12] = const__16;
      arrayOfObject28[13] = "Returns a number one greater than x, a long.\n  Note - uses a primitive operator subject to overflow.";
      localVar107.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject28));
      localVar107.bindRoot(new core.unchecked_inc());
      Var localVar108 = const__447;
      Object[] arrayOfObject29 = new Object[14];
      arrayOfObject29[0] = const__4;
      arrayOfObject29[1] = "clojure/core.clj";
      arrayOfObject29[2] = const__5;
      arrayOfObject29[3] = const__6;
      arrayOfObject29[4] = const__7;
      arrayOfObject29[5] = const__448;
      arrayOfObject29[6] = const__17;
      arrayOfObject29[7] = const__449;
      arrayOfObject29[8] = const__15;
      arrayOfObject29[9] = "1.0";
      arrayOfObject29[10] = const__176;
      arrayOfObject29[11] = new core.unchecked_dec_int__inliner();
      arrayOfObject29[12] = const__16;
      arrayOfObject29[13] = "Returns a number one less than x, an int.\n  Note - uses a primitive operator subject to overflow.";
      localVar108.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject29));
      localVar108.bindRoot(new core.unchecked_dec_int());
      Var localVar109 = const__450;
      Object[] arrayOfObject30 = new Object[14];
      arrayOfObject30[0] = const__4;
      arrayOfObject30[1] = "clojure/core.clj";
      arrayOfObject30[2] = const__5;
      arrayOfObject30[3] = const__6;
      arrayOfObject30[4] = const__7;
      arrayOfObject30[5] = const__451;
      arrayOfObject30[6] = const__17;
      arrayOfObject30[7] = const__452;
      arrayOfObject30[8] = const__15;
      arrayOfObject30[9] = "1.0";
      arrayOfObject30[10] = const__176;
      arrayOfObject30[11] = new core.unchecked_dec__inliner();
      arrayOfObject30[12] = const__16;
      arrayOfObject30[13] = "Returns a number one less than x, a long.\n  Note - uses a primitive operator subject to overflow.";
      localVar109.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject30));
      localVar109.bindRoot(new core.unchecked_dec());
      Var localVar110 = const__453;
      Object[] arrayOfObject31 = new Object[14];
      arrayOfObject31[0] = const__4;
      arrayOfObject31[1] = "clojure/core.clj";
      arrayOfObject31[2] = const__5;
      arrayOfObject31[3] = const__6;
      arrayOfObject31[4] = const__7;
      arrayOfObject31[5] = const__454;
      arrayOfObject31[6] = const__17;
      arrayOfObject31[7] = const__455;
      arrayOfObject31[8] = const__15;
      arrayOfObject31[9] = "1.0";
      arrayOfObject31[10] = const__176;
      arrayOfObject31[11] = new core.unchecked_negate_int__inliner();
      arrayOfObject31[12] = const__16;
      arrayOfObject31[13] = "Returns the negation of x, an int.\n  Note - uses a primitive operator subject to overflow.";
      localVar110.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject31));
      localVar110.bindRoot(new core.unchecked_negate_int());
      Var localVar111 = const__456;
      Object[] arrayOfObject32 = new Object[14];
      arrayOfObject32[0] = const__4;
      arrayOfObject32[1] = "clojure/core.clj";
      arrayOfObject32[2] = const__5;
      arrayOfObject32[3] = const__6;
      arrayOfObject32[4] = const__7;
      arrayOfObject32[5] = const__457;
      arrayOfObject32[6] = const__17;
      arrayOfObject32[7] = const__458;
      arrayOfObject32[8] = const__15;
      arrayOfObject32[9] = "1.0";
      arrayOfObject32[10] = const__176;
      arrayOfObject32[11] = new core.unchecked_negate__inliner();
      arrayOfObject32[12] = const__16;
      arrayOfObject32[13] = "Returns the negation of x, a long.\n  Note - uses a primitive operator subject to overflow.";
      localVar111.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject32));
      localVar111.bindRoot(new core.unchecked_negate());
      Var localVar112 = const__459;
      Object[] arrayOfObject33 = new Object[14];
      arrayOfObject33[0] = const__4;
      arrayOfObject33[1] = "clojure/core.clj";
      arrayOfObject33[2] = const__5;
      arrayOfObject33[3] = const__6;
      arrayOfObject33[4] = const__7;
      arrayOfObject33[5] = const__460;
      arrayOfObject33[6] = const__17;
      arrayOfObject33[7] = const__461;
      arrayOfObject33[8] = const__15;
      arrayOfObject33[9] = "1.0";
      arrayOfObject33[10] = const__176;
      arrayOfObject33[11] = new core.unchecked_add_int__inliner();
      arrayOfObject33[12] = const__16;
      arrayOfObject33[13] = "Returns the sum of x and y, both int.\n  Note - uses a primitive operator subject to overflow.";
      localVar112.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject33));
      localVar112.bindRoot(new core.unchecked_add_int());
      Var localVar113 = const__462;
      Object[] arrayOfObject34 = new Object[14];
      arrayOfObject34[0] = const__4;
      arrayOfObject34[1] = "clojure/core.clj";
      arrayOfObject34[2] = const__5;
      arrayOfObject34[3] = const__6;
      arrayOfObject34[4] = const__7;
      arrayOfObject34[5] = const__463;
      arrayOfObject34[6] = const__17;
      arrayOfObject34[7] = const__464;
      arrayOfObject34[8] = const__15;
      arrayOfObject34[9] = "1.0";
      arrayOfObject34[10] = const__176;
      arrayOfObject34[11] = new core.unchecked_add__inliner();
      arrayOfObject34[12] = const__16;
      arrayOfObject34[13] = "Returns the sum of x and y, both long.\n  Note - uses a primitive operator subject to overflow.";
      localVar113.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject34));
      localVar113.bindRoot(new core.unchecked_add());
      Var localVar114 = const__465;
      Object[] arrayOfObject35 = new Object[14];
      arrayOfObject35[0] = const__4;
      arrayOfObject35[1] = "clojure/core.clj";
      arrayOfObject35[2] = const__5;
      arrayOfObject35[3] = const__6;
      arrayOfObject35[4] = const__7;
      arrayOfObject35[5] = const__466;
      arrayOfObject35[6] = const__17;
      arrayOfObject35[7] = const__467;
      arrayOfObject35[8] = const__15;
      arrayOfObject35[9] = "1.0";
      arrayOfObject35[10] = const__176;
      arrayOfObject35[11] = new core.unchecked_subtract_int__inliner();
      arrayOfObject35[12] = const__16;
      arrayOfObject35[13] = "Returns the difference of x and y, both int.\n  Note - uses a primitive operator subject to overflow.";
      localVar114.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject35));
      localVar114.bindRoot(new core.unchecked_subtract_int());
      Var localVar115 = const__468;
      Object[] arrayOfObject36 = new Object[14];
      arrayOfObject36[0] = const__4;
      arrayOfObject36[1] = "clojure/core.clj";
      arrayOfObject36[2] = const__5;
      arrayOfObject36[3] = const__6;
      arrayOfObject36[4] = const__7;
      arrayOfObject36[5] = const__469;
      arrayOfObject36[6] = const__17;
      arrayOfObject36[7] = const__470;
      arrayOfObject36[8] = const__15;
      arrayOfObject36[9] = "1.0";
      arrayOfObject36[10] = const__176;
      arrayOfObject36[11] = new core.unchecked_subtract__inliner();
      arrayOfObject36[12] = const__16;
      arrayOfObject36[13] = "Returns the difference of x and y, both long.\n  Note - uses a primitive operator subject to overflow.";
      localVar115.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject36));
      localVar115.bindRoot(new core.unchecked_subtract());
      Var localVar116 = const__471;
      Object[] arrayOfObject37 = new Object[14];
      arrayOfObject37[0] = const__4;
      arrayOfObject37[1] = "clojure/core.clj";
      arrayOfObject37[2] = const__5;
      arrayOfObject37[3] = const__6;
      arrayOfObject37[4] = const__7;
      arrayOfObject37[5] = const__472;
      arrayOfObject37[6] = const__17;
      arrayOfObject37[7] = const__473;
      arrayOfObject37[8] = const__15;
      arrayOfObject37[9] = "1.0";
      arrayOfObject37[10] = const__176;
      arrayOfObject37[11] = new core.unchecked_multiply_int__inliner();
      arrayOfObject37[12] = const__16;
      arrayOfObject37[13] = "Returns the product of x and y, both int.\n  Note - uses a primitive operator subject to overflow.";
      localVar116.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject37));
      localVar116.bindRoot(new core.unchecked_multiply_int());
      Var localVar117 = const__474;
      Object[] arrayOfObject38 = new Object[14];
      arrayOfObject38[0] = const__4;
      arrayOfObject38[1] = "clojure/core.clj";
      arrayOfObject38[2] = const__5;
      arrayOfObject38[3] = const__6;
      arrayOfObject38[4] = const__7;
      arrayOfObject38[5] = const__475;
      arrayOfObject38[6] = const__17;
      arrayOfObject38[7] = const__476;
      arrayOfObject38[8] = const__15;
      arrayOfObject38[9] = "1.0";
      arrayOfObject38[10] = const__176;
      arrayOfObject38[11] = new core.unchecked_multiply__inliner();
      arrayOfObject38[12] = const__16;
      arrayOfObject38[13] = "Returns the product of x and y, both long.\n  Note - uses a primitive operator subject to overflow.";
      localVar117.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject38));
      localVar117.bindRoot(new core.unchecked_multiply());
      Var localVar118 = const__477;
      Object[] arrayOfObject39 = new Object[14];
      arrayOfObject39[0] = const__4;
      arrayOfObject39[1] = "clojure/core.clj";
      arrayOfObject39[2] = const__5;
      arrayOfObject39[3] = const__6;
      arrayOfObject39[4] = const__7;
      arrayOfObject39[5] = const__478;
      arrayOfObject39[6] = const__17;
      arrayOfObject39[7] = const__479;
      arrayOfObject39[8] = const__15;
      arrayOfObject39[9] = "1.0";
      arrayOfObject39[10] = const__176;
      arrayOfObject39[11] = new core.unchecked_divide_int__inliner();
      arrayOfObject39[12] = const__16;
      arrayOfObject39[13] = "Returns the division of x by y, both int.\n  Note - uses a primitive operator subject to truncation.";
      localVar118.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject39));
      localVar118.bindRoot(new core.unchecked_divide_int());
      Var localVar119 = const__480;
      Object[] arrayOfObject40 = new Object[14];
      arrayOfObject40[0] = const__4;
      arrayOfObject40[1] = "clojure/core.clj";
      arrayOfObject40[2] = const__5;
      arrayOfObject40[3] = const__6;
      arrayOfObject40[4] = const__7;
      arrayOfObject40[5] = const__481;
      arrayOfObject40[6] = const__17;
      arrayOfObject40[7] = const__482;
      arrayOfObject40[8] = const__15;
      arrayOfObject40[9] = "1.0";
      arrayOfObject40[10] = const__176;
      arrayOfObject40[11] = new core.unchecked_remainder_int__inliner();
      arrayOfObject40[12] = const__16;
      arrayOfObject40[13] = "Returns the remainder of division of x by y, both int.\n  Note - uses a primitive operator subject to truncation.";
      localVar119.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject40));
      localVar119.bindRoot(new core.unchecked_remainder_int());
      Var localVar120 = const__483;
      Object[] arrayOfObject41 = new Object[14];
      arrayOfObject41[0] = const__4;
      arrayOfObject41[1] = "clojure/core.clj";
      arrayOfObject41[2] = const__5;
      arrayOfObject41[3] = const__6;
      arrayOfObject41[4] = const__7;
      arrayOfObject41[5] = const__484;
      arrayOfObject41[6] = const__17;
      arrayOfObject41[7] = const__485;
      arrayOfObject41[8] = const__15;
      arrayOfObject41[9] = "1.0";
      arrayOfObject41[10] = const__176;
      arrayOfObject41[11] = new core.pos_QMARK___inliner();
      arrayOfObject41[12] = const__16;
      arrayOfObject41[13] = "Returns true if num is greater than zero, else false";
      localVar120.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject41));
      localVar120.bindRoot(new core.pos_QMARK_());
      Var localVar121 = const__486;
      Object[] arrayOfObject42 = new Object[14];
      arrayOfObject42[0] = const__4;
      arrayOfObject42[1] = "clojure/core.clj";
      arrayOfObject42[2] = const__5;
      arrayOfObject42[3] = const__6;
      arrayOfObject42[4] = const__7;
      arrayOfObject42[5] = const__487;
      arrayOfObject42[6] = const__17;
      arrayOfObject42[7] = const__488;
      arrayOfObject42[8] = const__15;
      arrayOfObject42[9] = "1.0";
      arrayOfObject42[10] = const__176;
      arrayOfObject42[11] = new core.neg_QMARK___inliner();
      arrayOfObject42[12] = const__16;
      arrayOfObject42[13] = "Returns true if num is less than zero, else false";
      localVar121.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject42));
      localVar121.bindRoot(new core.neg_QMARK_());
      Var localVar122 = const__489;
      Object[] arrayOfObject43 = new Object[16];
      arrayOfObject43[0] = const__4;
      arrayOfObject43[1] = "clojure/core.clj";
      arrayOfObject43[2] = const__5;
      arrayOfObject43[3] = const__6;
      arrayOfObject43[4] = const__7;
      arrayOfObject43[5] = const__490;
      arrayOfObject43[6] = const__17;
      arrayOfObject43[7] = const__491;
      arrayOfObject43[8] = const__176;
      arrayOfObject43[9] = new core.quot__inliner();
      arrayOfObject43[10] = const__22;
      arrayOfObject43[11] = Boolean.TRUE;
      arrayOfObject43[12] = const__15;
      arrayOfObject43[13] = "1.0";
      arrayOfObject43[14] = const__16;
      arrayOfObject43[15] = "quot[ient] of dividing numerator by denominator.";
      localVar122.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject43));
      localVar122.bindRoot(new core.quot());
      Var localVar123 = const__492;
      Object[] arrayOfObject44 = new Object[16];
      arrayOfObject44[0] = const__4;
      arrayOfObject44[1] = "clojure/core.clj";
      arrayOfObject44[2] = const__5;
      arrayOfObject44[3] = const__6;
      arrayOfObject44[4] = const__7;
      arrayOfObject44[5] = const__493;
      arrayOfObject44[6] = const__17;
      arrayOfObject44[7] = const__494;
      arrayOfObject44[8] = const__176;
      arrayOfObject44[9] = new core.rem__inliner();
      arrayOfObject44[10] = const__22;
      arrayOfObject44[11] = Boolean.TRUE;
      arrayOfObject44[12] = const__15;
      arrayOfObject44[13] = "1.0";
      arrayOfObject44[14] = const__16;
      arrayOfObject44[15] = "remainder of dividing numerator by denominator.";
      localVar123.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject44));
      localVar123.bindRoot(new core.rem());
      Var localVar124 = const__495;
      localVar124.setMeta((IPersistentMap)const__498);
      localVar124.bindRoot(new core.rationalize());
      Var localVar125 = const__499;
      Object[] arrayOfObject45 = new Object[14];
      arrayOfObject45[0] = const__4;
      arrayOfObject45[1] = "clojure/core.clj";
      arrayOfObject45[2] = const__5;
      arrayOfObject45[3] = const__6;
      arrayOfObject45[4] = const__7;
      arrayOfObject45[5] = const__500;
      arrayOfObject45[6] = const__17;
      arrayOfObject45[7] = const__501;
      arrayOfObject45[8] = const__15;
      arrayOfObject45[9] = "1.0";
      arrayOfObject45[10] = const__176;
      arrayOfObject45[11] = new core.bit_not__inliner();
      arrayOfObject45[12] = const__16;
      arrayOfObject45[13] = "Bitwise complement";
      localVar125.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject45));
      localVar125.bindRoot(new core.bit_not());
      Var localVar126 = const__502;
      Object[] arrayOfObject46 = new Object[16];
      arrayOfObject46[0] = const__4;
      arrayOfObject46[1] = "clojure/core.clj";
      arrayOfObject46[2] = const__5;
      arrayOfObject46[3] = const__6;
      arrayOfObject46[4] = const__7;
      arrayOfObject46[5] = const__503;
      arrayOfObject46[6] = const__17;
      arrayOfObject46[7] = const__504;
      arrayOfObject46[8] = const__15;
      arrayOfObject46[9] = "1.0";
      arrayOfObject46[10] = const__314;
      arrayOfObject46[11] = const__372.getRawRoot();
      arrayOfObject46[12] = const__176;
      arrayOfObject46[13] = ((IFn)const__368.getRawRoot()).invoke(const__505);
      arrayOfObject46[14] = const__16;
      arrayOfObject46[15] = "Bitwise and";
      localVar126.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject46));
      localVar126.bindRoot(new core.bit_and());
      Var localVar127 = const__506;
      Object[] arrayOfObject47 = new Object[16];
      arrayOfObject47[0] = const__4;
      arrayOfObject47[1] = "clojure/core.clj";
      arrayOfObject47[2] = const__5;
      arrayOfObject47[3] = const__6;
      arrayOfObject47[4] = const__7;
      arrayOfObject47[5] = const__507;
      arrayOfObject47[6] = const__17;
      arrayOfObject47[7] = const__508;
      arrayOfObject47[8] = const__15;
      arrayOfObject47[9] = "1.0";
      arrayOfObject47[10] = const__314;
      arrayOfObject47[11] = const__372.getRawRoot();
      arrayOfObject47[12] = const__176;
      arrayOfObject47[13] = ((IFn)const__368.getRawRoot()).invoke(const__509);
      arrayOfObject47[14] = const__16;
      arrayOfObject47[15] = "Bitwise or";
      localVar127.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject47));
      localVar127.bindRoot(new core.bit_or());
      Var localVar128 = const__510;
      Object[] arrayOfObject48 = new Object[16];
      arrayOfObject48[0] = const__4;
      arrayOfObject48[1] = "clojure/core.clj";
      arrayOfObject48[2] = const__5;
      arrayOfObject48[3] = const__6;
      arrayOfObject48[4] = const__7;
      arrayOfObject48[5] = const__511;
      arrayOfObject48[6] = const__17;
      arrayOfObject48[7] = const__512;
      arrayOfObject48[8] = const__15;
      arrayOfObject48[9] = "1.0";
      arrayOfObject48[10] = const__314;
      arrayOfObject48[11] = const__372.getRawRoot();
      arrayOfObject48[12] = const__176;
      arrayOfObject48[13] = ((IFn)const__368.getRawRoot()).invoke(const__513);
      arrayOfObject48[14] = const__16;
      arrayOfObject48[15] = "Bitwise exclusive or";
      localVar128.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject48));
      localVar128.bindRoot(new core.bit_xor());
      Var localVar129 = const__514;
      Object[] arrayOfObject49 = new Object[18];
      arrayOfObject49[0] = const__4;
      arrayOfObject49[1] = "clojure/core.clj";
      arrayOfObject49[2] = const__5;
      arrayOfObject49[3] = const__6;
      arrayOfObject49[4] = const__7;
      arrayOfObject49[5] = const__515;
      arrayOfObject49[6] = const__17;
      arrayOfObject49[7] = const__516;
      arrayOfObject49[8] = const__22;
      arrayOfObject49[9] = Boolean.TRUE;
      arrayOfObject49[10] = const__15;
      arrayOfObject49[11] = "1.0";
      arrayOfObject49[12] = const__314;
      arrayOfObject49[13] = const__372.getRawRoot();
      arrayOfObject49[14] = const__176;
      arrayOfObject49[15] = ((IFn)const__368.getRawRoot()).invoke(const__517);
      arrayOfObject49[16] = const__16;
      arrayOfObject49[17] = "Bitwise and with complement";
      localVar129.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject49));
      localVar129.bindRoot(new core.bit_and_not());
      Var localVar130 = const__518;
      localVar130.setMeta((IPersistentMap)const__521);
      localVar130.bindRoot(new core.bit_clear());
      Var localVar131 = const__522;
      localVar131.setMeta((IPersistentMap)const__525);
      localVar131.bindRoot(new core.bit_set());
      Var localVar132 = const__526;
      localVar132.setMeta((IPersistentMap)const__529);
      localVar132.bindRoot(new core.bit_flip());
      localVar133 = const__530;
      localVar133.setMeta((IPersistentMap)const__533);
      localVar133.bindRoot(new core.bit_test());
      Var localVar134 = const__534;
      Object[] arrayOfObject50 = new Object[14];
      arrayOfObject50[0] = const__4;
      arrayOfObject50[1] = "clojure/core.clj";
      arrayOfObject50[2] = const__5;
      arrayOfObject50[3] = const__6;
      arrayOfObject50[4] = const__7;
      arrayOfObject50[5] = const__535;
      arrayOfObject50[6] = const__17;
      arrayOfObject50[7] = const__536;
      arrayOfObject50[8] = const__15;
      arrayOfObject50[9] = "1.0";
      arrayOfObject50[10] = const__176;
      arrayOfObject50[11] = new core.bit_shift_left__inliner();
      arrayOfObject50[12] = const__16;
      arrayOfObject50[13] = "Bitwise shift left";
      localVar134.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject50));
      localVar134.bindRoot(new core.bit_shift_left());
      Var localVar135 = const__537;
      Object[] arrayOfObject51 = new Object[14];
      arrayOfObject51[0] = const__4;
      arrayOfObject51[1] = "clojure/core.clj";
      arrayOfObject51[2] = const__5;
      arrayOfObject51[3] = const__6;
      arrayOfObject51[4] = const__7;
      arrayOfObject51[5] = const__538;
      arrayOfObject51[6] = const__17;
      arrayOfObject51[7] = const__539;
      arrayOfObject51[8] = const__15;
      arrayOfObject51[9] = "1.0";
      arrayOfObject51[10] = const__176;
      arrayOfObject51[11] = new core.bit_shift_right__inliner();
      arrayOfObject51[12] = const__16;
      arrayOfObject51[13] = "Bitwise shift right";
      localVar135.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject51));
      localVar135.bindRoot(new core.bit_shift_right());
      Var localVar136 = const__540;
      localVar136.setMeta((IPersistentMap)const__543);
      localVar136.bindRoot(new core.integer_QMARK_());
      Var localVar137 = const__544;
      localVar137.setMeta((IPersistentMap)const__547);
      localVar137.bindRoot(new core.even_QMARK_());
      Var localVar138 = const__548;
      localVar138.setMeta((IPersistentMap)const__551);
      localVar138.bindRoot(new core.odd_QMARK_());
      Var localVar139 = const__552;
      localVar139.setMeta((IPersistentMap)const__555);
      localVar139.bindRoot(new core.complement());
      Var localVar140 = const__556;
      localVar140.setMeta((IPersistentMap)const__559);
      localVar140.bindRoot(new core.constantly());
      Var localVar141 = const__560;
      localVar141.setMeta((IPersistentMap)const__563);
      localVar141.bindRoot(new core.identity());
      Var localVar142 = const__564;
      localVar142.setMeta((IPersistentMap)const__567);
      localVar142.bindRoot(new core.peek());
      Var localVar143 = const__568;
      localVar143.setMeta((IPersistentMap)const__571);
      localVar143.bindRoot(new core.pop());
      Var localVar144 = const__572;
      localVar144.setMeta((IPersistentMap)const__575);
      localVar144.bindRoot(new core.contains_QMARK_());
      Var localVar145 = const__576;
      Object[] arrayOfObject52 = new Object[16];
      arrayOfObject52[0] = const__4;
      arrayOfObject52[1] = "clojure/core.clj";
      arrayOfObject52[2] = const__5;
      arrayOfObject52[3] = const__6;
      arrayOfObject52[4] = const__7;
      arrayOfObject52[5] = const__577;
      arrayOfObject52[6] = const__17;
      arrayOfObject52[7] = const__578;
      arrayOfObject52[8] = const__15;
      arrayOfObject52[9] = "1.0";
      arrayOfObject52[10] = const__314;
      arrayOfObject52[11] = const__579;
      arrayOfObject52[12] = const__176;
      arrayOfObject52[13] = new core.get__inliner();
      arrayOfObject52[14] = const__16;
      arrayOfObject52[15] = "Returns the value mapped to key, not-found or nil if key not present.";
      localVar145.setMeta((IPersistentMap)RT.mapUniqueKeys(arrayOfObject52));
      localVar145.bindRoot(new core.get());
      Var localVar146 = const__580;
      localVar146.setMeta((IPersistentMap)const__583);
      localVar146.bindRoot(new core.dissoc());
      Var localVar147 = const__584;
      localVar147.setMeta((IPersistentMap)const__587);
      localVar147.bindRoot(new core.disj());
      Var localVar148 = const__588;
      localVar148.setMeta((IPersistentMap)const__591);
      localVar148.bindRoot(new core.find());
      Var localVar149 = const__592;
      localVar149.setMeta((IPersistentMap)const__595);
      localVar149.bindRoot(new core.select_keys());
      Var localVar150 = const__596;
      localVar150.setMeta((IPersistentMap)const__599);
      localVar150.bindRoot(new core.keys());
      Var localVar151 = const__600;
      localVar151.setMeta((IPersistentMap)const__603);
      localVar151.bindRoot(new core.vals());
      Var localVar152 = const__604;
      localVar152.setMeta((IPersistentMap)const__607);
      localVar152.bindRoot(new core.key());
      Var localVar153 = const__608;
      localVar153.setMeta((IPersistentMap)const__611);
      localVar153.bindRoot(new core.val());
      Var localVar154 = const__612;
      localVar154.setMeta((IPersistentMap)const__615);
      localVar154.bindRoot(new core.rseq());
      Var localVar155 = const__616;
      localVar155.setMeta((IPersistentMap)const__619);
      localVar155.bindRoot(new core.name());
      Var localVar156 = const__620;
      localVar156.setMeta((IPersistentMap)const__623);
      localVar156.bindRoot(new core.namespace());
      Var localVar157 = const__624;
      localVar157.setMeta((IPersistentMap)const__627);
      localVar157.bindRoot(new core.locking());
      ((Var)const__624).setMacro();
      Var localVar158 = const__628;
      localVar158.setMeta((IPersistentMap)const__631);
      localVar158.bindRoot(new core._DOT__DOT_());
      ((Var)const__628).setMacro();
      Var localVar159 = const__632;
      localVar159.setMeta((IPersistentMap)const__635);
      localVar159.bindRoot(new core.__GT_());
      ((Var)const__632).setMacro();
      Var localVar160 = const__636;
      localVar160.setMeta((IPersistentMap)const__639);
      localVar160.bindRoot(new core.__GT__GT_());
      ((Var)const__636).setMacro();
      const__640.setMeta((IPersistentMap)const__642);
      Var localVar161 = const__643;
      localVar161.setMeta((IPersistentMap)const__646);
      localVar161.bindRoot(new core.check_valid_options());
      const__647.setMeta((IPersistentMap)const__649);
      Var localVar162 = const__650;
      localVar162.setMeta((IPersistentMap)const__653);
      localVar162.bindRoot(new core.defmulti());
      ((Var)const__650).setMacro();
      Var localVar163 = const__654;
      localVar163.setMeta((IPersistentMap)const__657);
      localVar163.bindRoot(new core.defmethod());
      ((Var)const__654).setMacro();
      Var localVar164 = const__658;
      localVar164.setMeta((IPersistentMap)const__661);
      localVar164.bindRoot(new core.remove_all_methods());
      Var localVar165 = const__662;
      localVar165.setMeta((IPersistentMap)const__665);
      localVar165.bindRoot(new core.remove_method());
      Var localVar166 = const__666;
      localVar166.setMeta((IPersistentMap)const__669);
      localVar166.bindRoot(new core.prefer_method());
      Var localVar167 = const__670;
      localVar167.setMeta((IPersistentMap)const__673);
      localVar167.bindRoot(new core.methods());
      Var localVar168 = const__674;
      localVar168.setMeta((IPersistentMap)const__677);
      localVar168.bindRoot(new core.get_method());
      Var localVar169 = const__678;
      localVar169.setMeta((IPersistentMap)const__681);
      localVar169.bindRoot(new core.prefers());
      Var localVar170 = const__682;
      localVar170.setMeta((IPersistentMap)const__685);
      localVar170.bindRoot(new core.assert_args());
      ((Var)const__682).setMacro();
      Var localVar171 = const__686;
      localVar171.setMeta((IPersistentMap)const__689);
      localVar171.bindRoot(new core.if_let());
      ((Var)const__686).setMacro();
      Var localVar172 = const__690;
      localVar172.setMeta((IPersistentMap)const__693);
      localVar172.bindRoot(new core.when_let());
      ((Var)const__690).setMacro();
      Var localVar173 = const__694;
      localVar173.setMeta((IPersistentMap)const__697);
      localVar173.bindRoot(new core.push_thread_bindings());
      Var localVar174 = const__698;
      localVar174.setMeta((IPersistentMap)const__701);
      localVar174.bindRoot(new core.pop_thread_bindings());
      Var localVar175 = const__702;
      localVar175.setMeta((IPersistentMap)const__705);
      localVar175.bindRoot(new core.get_thread_bindings());
      Var localVar176 = const__706;
      localVar176.setMeta((IPersistentMap)const__709);
      localVar176.bindRoot(new core.binding());
      ((Var)const__706).setMacro();
      Var localVar177 = const__710;
      localVar177.setMeta((IPersistentMap)const__713);
      localVar177.bindRoot(new core.with_bindings_STAR_());
      Var localVar178 = const__714;
      localVar178.setMeta((IPersistentMap)const__717);
      localVar178.bindRoot(new core.with_bindings());
      ((Var)const__714).setMacro();
      Var localVar179 = const__718;
      localVar179.setMeta((IPersistentMap)const__721);
      localVar179.bindRoot(new core.bound_fn_STAR_());
      Var localVar180 = const__722;
      localVar180.setMeta((IPersistentMap)const__725);
      localVar180.bindRoot(new core.bound_fn());
      ((Var)const__722).setMacro();
      Var localVar181 = const__726;
      localVar181.setMeta((IPersistentMap)const__729);
      localVar181.bindRoot(new core.find_var());
      Var localVar182 = const__730;
      localVar182.setMeta((IPersistentMap)const__733);
      localVar182.bindRoot(new core.binding_conveyor_fn());
      Var localVar183 = const__734;
      null.setMeta((IPersistentMap)const__737);
      null.bindRoot(new core.setup_reference());
      Var localVar184 = const__738;
      -1.setMeta((IPersistentMap)const__741);
      -1.bindRoot(new core.agent());
      Var localVar185 = const__742;
      0.setMeta((IPersistentMap)const__745);
      0.bindRoot(new core.set_agent_send_executor_BANG_());
      Var localVar186 = const__746;
      1.setMeta((IPersistentMap)const__749);
      1.bindRoot(new core.set_agent_send_off_executor_BANG_());
      Var localVar187 = const__750;
      2.setMeta((IPersistentMap)const__753);
      2.bindRoot(new core.send_via());
      Var localVar188 = const__754;
      3.setMeta((IPersistentMap)const__757);
      3.bindRoot(new core.send());
      Var localVar189 = const__758;
      4.setMeta((IPersistentMap)const__761);
      4.bindRoot(new core.send_off());
      Var localVar190 = const__762;
      5.setMeta((IPersistentMap)const__765);
      5.bindRoot(new core.release_pending_sends());
      Var localVar191 = const__766;
      0L.setMeta((IPersistentMap)const__769);
      0L.bindRoot(new core.add_watch());
      Var localVar192 = const__770;
      1L.setMeta((IPersistentMap)const__773);
      1L.bindRoot(new core.remove_watch());
      Var localVar193 = const__774;
      0.0F.setMeta((IPersistentMap)const__777);
      0.0F.bindRoot(new core.agent_error());
      Var localVar194 = const__778;
      1.0F.setMeta((IPersistentMap)const__781);
      1.0F.bindRoot(new core.restart_agent());
      Var localVar195 = const__782;
      2.0F.setMeta((IPersistentMap)const__785);
      2.0F.bindRoot(new core.set_error_handler_BANG_());
      Var localVar196 = const__786;
      0.0D.setMeta((IPersistentMap)const__789);
      0.0D.bindRoot(new core.error_handler());
      Var localVar197 = const__790;
      1.0D.setMeta((IPersistentMap)const__793);
      1.0D.bindRoot(new core.set_error_mode_BANG_());
      Var localVar198 = const__794;
    }
  }
}

/* Location:           /home/ennus/school/thesis/thesis/experiments/clojure_android_profiling/decompiled/core__init/
 * Qualified Name:     clojure.core__init
 * JD-Core Version:    0.6.2
 */